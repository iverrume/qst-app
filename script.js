// ============================================
// –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ú–û–î–£–õ–¨ –ß–ê–¢–ê
// ============================================

const ChatModule = (function() {
    'use strict';

    // === –ù–ê–ß–ê–õ–û –ù–û–í–û–ì–û –ë–õ–û–ö–ê: –ü–ï–†–ï–í–û–î –ß–ê–¢–ê ===
    const LANG_PACK_CHAT = {
        ru: {
            // TABS
            tab_messages: "–°–æ–æ–±—â–µ–Ω–∏—è",
            tab_questions: "–í–æ–ø—Ä–æ—Å—ã",
            tab_favorites: "–ò–∑–±—Ä–∞–Ω–Ω–æ–µ",
            tab_users: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏",
            // Auth
            auth_title: "üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è",
            auth_login_tab: "–í—Ö–æ–¥",
            auth_register_tab: "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è",
            auth_login_placeholder: "–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ Email",
            auth_password_placeholder: "–ü–∞—Ä–æ–ª—å",
            auth_login_button: "–í–æ–π—Ç–∏",
            auth_register_username_placeholder: "–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
            auth_register_email_placeholder: "Email",
            auth_register_password_placeholder: "–ü–∞—Ä–æ–ª—å (–º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤)",
            auth_register_confirm_placeholder: "–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–∞—Ä–æ–ª—å",
            auth_register_button: "–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è",
            auth_close_button: "–ó–∞–∫—Ä—ã—Ç—å",
            auth_or_divider: "–∏–ª–∏",
            auth_google_signin: "–í–æ–π—Ç–∏ —á–µ—Ä–µ–∑ Google",
            // Main Chat
            chat_header_title: "üí¨ –ß–∞—Ç",
            guest_user: "–ì–æ—Å—Ç—å",
            generic_user: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
            edit_profile_link: "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å",
            logout_link: "üö™ –í—ã–π—Ç–∏",
            notifications_title: "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è",
            sidebar_sections: "üìÇ –†–∞–∑–¥–µ–ª—ã",
            sidebar_channels: "üìã –ö–∞–Ω–∞–ª—ã",
            sidebar_create_channel: "+ –°–æ–∑–¥–∞—Ç—å –∫–∞–Ω–∞–ª",
            sidebar_private_messages: "‚úâÔ∏è –õ–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è",
            sidebar_online: "üë• –û–Ω–ª–∞–π–Ω",
            channel_general: "# –û–±—â–∏–π",
            search_placeholder: "üîç –ü–æ–∏—Å–∫...",
            pinned_toggle_title: "–ó–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–µ",
            loading_message: "–ó–∞–≥—Ä—É–∑–∫–∞...",
            reply_panel_title: "–û—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ:",
            emoji_button_title: "–≠–º–æ–¥–∑–∏",
            create_question_button_title: "–°–æ–∑–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å",
            attach_file_button_title: "–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–∞–π–ª",
            chat_input_placeholder: "–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...",
            download_qst_button: "üì• –°–∫–∞—á–∞—Ç—å .qst",
            download_txt_button: "üì• –°–∫–∞—á–∞—Ç—å .txt",
            add_to_favorites_button: "‚≠ê –í –∏–∑–±—Ä–∞–Ω–Ω–æ–µ",
            copy_question_button: "üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å",
            delete_question_button: "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –≤–æ–ø—Ä–æ—Å",
            clear_favorites_button: "üóëÔ∏è", 
            question_label: "–í–æ–ø—Ä–æ—Å:",
            author_label: "–ê–≤—Ç–æ—Ä:",
            date_label: "–î–∞—Ç–∞:",
            anonymous_user: "–ê–Ω–æ–Ω–∏–º",
            expand_message: "–†–∞–∑–≤–µ—Ä–Ω—É—Ç—å", 
            collapse_message: "–°–≤–µ—Ä–Ω—É—Ç—å", 
            // Modals
            user_actions_title: "–î–µ–π—Å—Ç–≤–∏—è",
            user_actions_text: "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å.",
            user_actions_chat_button: "–ù–∞–ø–∏—Å–∞—Ç—å –≤ —á–∞—Ç–µ",
            user_actions_email_button: "–ù–∞–ø–∏—Å–∞—Ç—å –Ω–∞ Email",
            modal_cancel_button: "–û—Ç–º–µ–Ω–∞",
            channel_settings_title: "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–Ω–∞–ª–∞",
            channel_edit_name_placeholder: "–ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞",
            channel_edit_password_placeholder: "–ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å (–ø—É—Å—Ç–æ = –±–µ–∑ –ø–∞—Ä–æ–ª—è)",
            channel_edit_desc_placeholder: "–ù–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞",
            channel_members_title: "–£—á–∞—Å—Ç–Ω–∏–∫–∏ –∫–∞–Ω–∞–ª–∞",
            channel_members_loading: "–ó–∞–≥—Ä—É–∑–∫–∞...",
            modal_save_button: "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å",
            delete_channel_button: "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –ö–∞–Ω–∞–ª",
            create_channel_title: "–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∫–∞–Ω–∞–ª",
            channel_create_name_placeholder: "–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞",
            channel_create_password_placeholder: "–ü–∞—Ä–æ–ª—å (–æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –¥–ª—è –ø—É–±–ª–∏—á–Ω–æ–≥–æ)",
            channel_create_desc_placeholder: "–û–ø–∏—Å–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞",
            modal_create_button: "–°–æ–∑–¥–∞—Ç—å",
            create_question_title: "–°–æ–∑–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å",
            create_question_placeholder: `–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –≤ —Ñ–æ—Ä–º–∞—Ç–µ .qst

?–°—Ç–æ–ª–∏—Ü–∞ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–∞
+–ê—Å—Ç–∞–Ω–∞
-–ù—É—Ä-–°—É–ª—Ç–∞–Ω
-–£—Ç–µ—Ä–∞

*–ú–æ–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ —Å—Ä–∞–∑—É –Ω–µ—Å–∫–æ–ª—å–∫–æ`,
            create_question_modal_button: "–°–æ–∑–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å",
            edit_message_title: "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ",
            edit_profile_title: "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å",
            edit_profile_name_placeholder: "–í–∞—à–µ –∏–º—è",
            edit_profile_new_password_placeholder: "–ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å (–æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º, –µ—Å–ª–∏ –Ω–µ –º–µ–Ω—è–µ—Ç–µ)",
            delete_account_button: "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç",
            file_actions_title: "–î–µ–π—Å—Ç–≤–∏—è —Å —Ñ–∞–π–ª–æ–º",
            file_actions_download: "üì• –°–∫–∞—á–∞—Ç—å",
            file_actions_test: "‚ö°Ô∏è –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç",
            // JS Messages & Alerts
            auth_system_unavailable: "–°–∏—Å—Ç–µ–º–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞",
            fill_all_fields: "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è",
            password_min_length: "–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤",
            passwords_do_not_match: "–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç!",
            error_user_not_found: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω",
            error_wrong_password: "–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å",
            error_email_in_use: "Email —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è",
            error_weak_password: "–°–ª–∏—à–∫–æ–º —Å–ª–∞–±—ã–π –ø–∞—Ä–æ–ª—å",
            error_invalid_email: "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email",
            error_too_many_requests: "–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ",
            error_generic: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑",
            loading_messages: "–ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π...",
            loading_error: "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏.",
            pinned_messages_empty: "–ó–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–∫–∞ –Ω–µ—Ç",
            messages_empty: "–°–æ–æ–±—â–µ–Ω–∏–π –ø–æ–∫–∞ –Ω–µ—Ç. –ù–∞–ø–∏—à–∏—Ç–µ –ø–µ—Ä–≤—ã–º!",
            file_share_question_1: "–≤–æ–ø—Ä–æ—Å",
            file_share_question_2_4: "–≤–æ–ø—Ä–æ—Å–∞",
            file_share_question_5_more: "–≤–æ–ø—Ä–æ—Å–æ–≤",
            new_question_notification: "–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å",
            notification_new_message: "–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!",
            questions_empty: "–í–æ–ø—Ä–æ—Å–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç",
            favorites_empty: "–í –∏–∑–±—Ä–∞–Ω–Ω–æ–º –ø–æ–∫–∞ –Ω–∏—á–µ–≥–æ –Ω–µ—Ç",
            favorites_loading_error: "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ",
            users_not_found: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.",
            confirm_delete_message: "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ?",
            confirm_delete_question: "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ.",
            confirm_kick_user: "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∏–∑ –∫–∞–Ω–∞–ª–∞?",
            confirm_delete_channel: "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –∫–∞–Ω–∞–ª? –í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –Ω–µ–º –±—É–¥—É—Ç –ø–æ—Ç–µ—Ä—è–Ω—ã. –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ.",
            confirm_delete_account: "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –ù–ï–û–ë–†–ê–¢–ò–ú–û.",
            confirm_clear_favorites: "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –í–°–ï —ç–ª–µ–º–µ–Ω—Ç—ã –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ.",
            profile_updated_success: "–ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!",
            channel_name_empty: "–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.",
            cant_delete_general: "–û—Å–Ω–æ–≤–Ω–æ–π –∫–∞–Ω–∞–ª —É–¥–∞–ª–∏—Ç—å –Ω–µ–ª—å–∑—è.",
            invalid_channel_password: "–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å.",
            add_to_favorites_success: "–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ!",
            add_to_favorites_auth_required: "–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è.",
            question_format_unrecognized: "–§–æ—Ä–º–∞—Ç –≤–æ–ø—Ä–æ—Å–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å.",
            questions_added_from_chat_success: "–£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–∑ —á–∞—Ç–∞:",
            questions_added_success: "–£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤–æ–ø—Ä–æ—Å–æ–≤:",
            notifications_enabled: "–ó–≤—É–∫–æ–≤—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã",
            notifications_disabled: "–ó–≤—É–∫–æ–≤—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—ã–∫–ª—é—á–µ–Ω—ã",
            notifications_title_enabled: "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã",
            notifications_title_disabled: "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—ã–∫–ª—é—á–µ–Ω—ã",
            pinned_mode_on_title: "–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è",
            pinned_mode_off_title: "–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–µ",
            download_qst_button: "üì• –°–∫–∞—á–∞—Ç—å .qst",
            download_txt_button: "üì• –°–∫–∞—á–∞—Ç—å .txt",
            clear_favorites_button: "üóëÔ∏è",
            download_no_data: "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≤ —Ä–∞–∑–¥–µ–ª–µ",
            favorites_cleared_success: "–ò–∑–±—Ä–∞–Ω–Ω–æ–µ —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω–æ.",
            favorites_already_empty: "–ò–∑–±—Ä–∞–Ω–Ω–æ–µ —É–∂–µ –ø—É—Å—Ç–æ.",
            copy_success: "–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!",
            copy_error: "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Ç–µ–∫—Å—Ç –≤—Ä—É—á–Ω—É—é.",
            file_type_unsupported: "–ú–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ñ–∞–π–ª—ã .qst –∏ .txt",
            reauth_prompt: "–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ç–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å:",
            reauth_cancelled: "–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –ü–∞—Ä–æ–ª—å –Ω–µ –±—ã–ª –≤–≤–µ–¥–µ–Ω.",
            deleting_account_status: "–£–¥–∞–ª–µ–Ω–∏–µ...",
            delete_account_success: "–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –±—ã–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.",
            account_deleted_button: "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç",
            question_deleted_message: "–≠—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å –±—ã–ª —É–¥–∞–ª–µ–Ω.",
            file_download_error: "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª:",
            test_start_error: "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç:",
            global_loader_loading_test: "–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ—Å—Ç–∞",
            password_reauth_required: "–î–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–µ–¥–∞–≤–Ω–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–π–¥–∏—Ç–µ –∏ –≤–æ–π–¥–∏—Ç–µ —Å–Ω–æ–≤–∞.",
            channel_enter_password_prompt: "–∑–∞—â–∏—â–µ–Ω. –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:",
            question_card_question_label: "–í–æ–ø—Ä–æ—Å:",
            question_card_author_label: "–ê–≤—Ç–æ—Ä:",
            question_card_date_label: "–î–∞—Ç–∞:",
            question_card_anonymous: "–ê–Ω–æ–Ω–∏–º",
            testing_channel_option: "–ö–∞–Ω–∞–ª –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (—Å –∑–∞–ø–∏—Å—å—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤)",
            results_button: "üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã",
            practice_test_button: "‚ö°Ô∏è –ü—Ä–æ–±–Ω—ã–π —Ç–µ—Å—Ç",
            official_test_button: "üèÜ –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç (—Å –∑–∞–ø–∏—Å—å—é)",
            results_modal_title: "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ —Ç–µ—Å—Ç—É",
            results_table_header_num: "#",
            results_table_header_user: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
            results_table_header_accuracy: "–¢–æ—á–Ω–æ—Å—Ç—å",
            results_table_header_time: "–í—Ä–µ–º—è",
            results_empty_state: "–ü–æ —ç—Ç–æ–º—É —Ç–µ—Å—Ç—É –ø–æ–∫–∞ –Ω–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.",
            file_actions_modal_title: "–§–∞–π–ª:",

        },
        kz: {
            // TABS
            tab_messages: "–•–∞–±–∞—Ä–ª–∞–º–∞–ª–∞—Ä",
            tab_questions: "–°“±—Ä–∞“õ—Ç–∞—Ä",
            tab_favorites: "–¢–∞“£–¥–∞—É–ª—ã–ª–∞—Ä",
            tab_users: "–ü–∞–π–¥–∞–ª–∞–Ω—É—à—ã–ª–∞—Ä",
            // Auth
            auth_title: "üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ç—Ç–∞—É",
            auth_login_tab: "–ö—ñ—Ä—É",
            auth_register_tab: "–¢—ñ—Ä–∫–µ–ª—É",
            auth_login_placeholder: "–ü–∞–π–¥–∞–ª–∞–Ω—É—à—ã –∞—Ç—ã –Ω–µ–º–µ—Å–µ Email",
            auth_password_placeholder: "“ö“±–ø–∏—è —Å”©–∑",
            auth_login_button: "–ö—ñ—Ä—É",
            auth_register_username_placeholder: "–ü–∞–π–¥–∞–ª–∞–Ω—É—à—ã –∞—Ç—ã",
            auth_register_email_placeholder: "Email",
            auth_register_password_placeholder: "“ö“±–ø–∏—è —Å”©–∑ (–∫–µ–º—ñ–Ω–¥–µ 6 —Ç–∞“£–±–∞)",
            auth_register_confirm_placeholder: "“ö“±–ø–∏—è —Å”©–∑–¥—ñ “õ–∞–π—Ç–∞–ª–∞“£—ã–∑",
            auth_register_button: "–¢—ñ—Ä–∫–µ–ª—É",
            auth_close_button: "–ñ–∞–±—É",
            auth_or_divider: "–Ω–µ–º–µ—Å–µ",
            auth_google_signin: "Google –∞—Ä“õ—ã–ª—ã –∫—ñ—Ä—É",
            // Main Chat
            chat_header_title: "üí¨ –ß–∞—Ç",
            guest_user: "“ö–æ–Ω–∞“õ",
            generic_user: "–ü–∞–π–¥–∞–ª–∞–Ω—É—à—ã",
            edit_profile_link: "‚úèÔ∏è –ü—Ä–æ—Ñ–∏–ª—å–¥—ñ ”©“£–¥–µ—É",
            logout_link: "üö™ –®—ã“ì—É",
            notifications_title: "–•–∞–±–∞—Ä–ª–∞–Ω–¥—ã—Ä—É–ª–∞—Ä",
            sidebar_sections: "üìÇ –ë”©–ª—ñ–º–¥–µ—Ä",
            sidebar_channels: "üìã –ê—Ä–Ω–∞–ª–∞—Ä",
            sidebar_create_channel: "+ –ê—Ä–Ω–∞ “õ“±—Ä—É",
            sidebar_private_messages: "‚úâÔ∏è –ñ–µ–∫–µ —Ö–∞–±–∞—Ä–ª–∞–º–∞–ª–∞—Ä",
            sidebar_online: "üë• –ñ–µ–ª—ñ–¥–µ",
            channel_general: "# –ñ–∞–ª–ø—ã",
            search_placeholder: "üîç –Ü–∑–¥–µ—É...",
            pinned_toggle_title: "–ë–µ–∫—ñ—Ç—ñ–ª–≥–µ–Ω–¥–µ—Ä",
            loading_message: "–ñ“Ø–∫—Ç–µ–ª—É–¥–µ...",
            reply_panel_title: "–ñ–∞—É–∞–ø –±–µ—Ä—É:",
            emoji_button_title: "–≠–º–æ–¥–∑–∏",
            create_question_button_title: "–°“±—Ä–∞“õ “õ“±—Ä—É",
            attach_file_button_title: "–§–∞–π–ª–¥—ã —Ç—ñ—Ä–∫–µ—É",
            chat_input_placeholder: "–•–∞–±–∞—Ä–ª–∞–º–∞ –µ–Ω–≥—ñ–∑—ñ“£—ñ–∑...",
            question_label: "–°“±—Ä–∞“õ:",
            author_label: "–ê–≤—Ç–æ—Ä—ã:",
            date_label: "–ö“Ø–Ω—ñ:",
            anonymous_user: "–ê–Ω–æ–Ω–∏–º",
            expand_message: "–ö”©–±—ñ—Ä–µ–∫ –∫”©—Ä—Å–µ—Ç—É", 
            collapse_message: "–ñ–∞—Å—ã—Ä—É", 
            // Modals
            user_actions_title: "”ò—Ä–µ–∫–µ—Ç—Ç–µ—Ä",
            user_actions_text: "–ù–µ —ñ—Å—Ç–µ–≥—ñ“£—ñ–∑ –∫–µ–ª–µ—Ç—ñ–Ω—ñ–Ω —Ç–∞“£–¥–∞“£—ã–∑.",
            user_actions_chat_button: "–ß–∞—Ç—Ç–∞ –∂–∞–∑—É",
            user_actions_email_button: "Email-–≥–µ –∂–∞–∑—É",
            modal_cancel_button: "–ë–æ–ª–¥—ã—Ä–º–∞—É",
            channel_settings_title: "–ê—Ä–Ω–∞ –±–∞–ø—Ç–∞—É–ª–∞—Ä—ã",
            channel_edit_name_placeholder: "–ê—Ä–Ω–∞–Ω—ã“£ –∂–∞“£–∞ –∞—Ç–∞—É—ã",
            channel_edit_password_placeholder: "–ñ–∞“£–∞ “õ“±–ø–∏—è —Å”©–∑ (–±–æ—Å = “õ“±–ø–∏—è —Å”©–∑—Å—ñ–∑)",
            channel_edit_desc_placeholder: "–ê—Ä–Ω–∞–Ω—ã“£ –∂–∞“£–∞ —Å–∏–ø–∞—Ç—Ç–∞–º–∞—Å—ã",
            channel_members_title: "–ê—Ä–Ω–∞ –º“Ø—à–µ–ª–µ—Ä—ñ",
            channel_members_loading: "–ñ“Ø–∫—Ç–µ–ª—É–¥–µ...",
            modal_save_button: "–°–∞“õ—Ç–∞—É",
            delete_channel_button: "üóëÔ∏è –ê—Ä–Ω–∞–Ω—ã –∂–æ—é",
            create_channel_title: "–ñ–∞“£–∞ –∞—Ä–Ω–∞ “õ“±—Ä—É",
            channel_create_name_placeholder: "–ê—Ä–Ω–∞ –∞—Ç–∞—É—ã",
            channel_create_password_placeholder: "“ö“±–ø–∏—è —Å”©–∑ (–∂–∞–ª–ø—ã“ì–∞ –æ—Ä—Ç–∞“õ “Ø—à—ñ–Ω –±–æ—Å “õ–∞–ª–¥—ã—Ä—ã“£—ã–∑)",
            channel_create_desc_placeholder: "–ê—Ä–Ω–∞ —Å–∏–ø–∞—Ç—Ç–∞–º–∞—Å—ã",
            modal_create_button: "“ö“±—Ä—É",
            create_question_title: "–°“±—Ä–∞“õ “õ“±—Ä—É",
            create_question_placeholder: `–°“±—Ä–∞“ì—ã“£—ã–∑–¥—ã .qst –ø—ñ—à—ñ–º—ñ–Ω–¥–µ –µ–Ω–≥—ñ–∑—ñ“£—ñ–∑

?“ö–∞–∑–∞“õ—Å—Ç–∞–Ω–Ω—ã“£ –∞—Å—Ç–∞–Ω–∞—Å—ã
+–ê—Å—Ç–∞–Ω–∞
-–ù“±—Ä-–°“±–ª—Ç–∞–Ω
-–£—Ç–µ—Ä–∞

*–ë—ñ—Ä–¥–µ–Ω –±—ñ—Ä–Ω–µ—à–µ —Å“±—Ä–∞“õ –µ–Ω–≥—ñ–∑—É–≥–µ –±–æ–ª–∞–¥—ã`,
            create_question_modal_button: "–°“±—Ä–∞“õ—Ç—ã “õ“±—Ä—É",
            edit_message_title: "–•–∞–±–∞—Ä–ª–∞–º–∞–Ω—ã ”©“£–¥–µ—É",
            edit_profile_title: "–ü—Ä–æ—Ñ–∏–ª—å–¥—ñ ”©“£–¥–µ—É",
            edit_profile_name_placeholder: "–°—ñ–∑–¥—ñ“£ –∞—Ç—ã“£—ã–∑",
            edit_profile_new_password_placeholder: "–ñ–∞“£–∞ “õ“±–ø–∏—è —Å”©–∑ (”©–∑–≥–µ—Ä—Ç–ø–µ—Å–µ“£—ñ–∑ –±–æ—Å “õ–∞–ª–¥—ã—Ä—ã“£—ã–∑)",
            delete_account_button: "üóëÔ∏è –ê–∫–∫–∞—É–Ω—Ç—Ç—ã –∂–æ—é",
            file_actions_title: "–§–∞–π–ª ”ô—Ä–µ–∫–µ—Ç—Ç–µ—Ä—ñ",
            file_actions_download: "üì• –ñ“Ø–∫—Ç–µ–ø –∞–ª—É",
            file_actions_test: "‚ö°Ô∏è –¢–µ—Å—Ç ”©—Ç—É",
            // JS Messages & Alerts
            auth_system_unavailable: "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∂“Ø–π–µ—Å—ñ “õ–æ–ª–∂–µ—Ç—ñ–º—Å—ñ–∑",
            fill_all_fields: "–ë–∞—Ä–ª—ã“õ ”©—Ä—ñ—Å—Ç–µ—Ä–¥—ñ —Ç–æ–ª—Ç—ã—Ä—ã“£—ã–∑",
            password_min_length: "“ö“±–ø–∏—è —Å”©–∑ –∫–µ–º—ñ–Ω–¥–µ 6 —Ç–∞“£–±–∞–¥–∞–Ω —Ç“±—Ä—É—ã –∫–µ—Ä–µ–∫",
            passwords_do_not_match: "“ö“±–ø–∏—è —Å”©–∑–¥–µ—Ä —Å”ô–π–∫–µ—Å –∫–µ–ª–º–µ–π–¥—ñ!",
            error_user_not_found: "–ü–∞–π–¥–∞–ª–∞–Ω—É—à—ã —Ç–∞–±—ã–ª–º–∞–¥—ã",
            error_wrong_password: "“ö–∞—Ç–µ “õ“±–ø–∏—è —Å”©–∑",
            error_email_in_use: "Email “õ–∞–∑—ñ—Ä–¥—ñ“£ ”©–∑—ñ–Ω–¥–µ “õ–æ–ª–¥–∞–Ω—ã—Å—Ç–∞",
            error_weak_password: "–¢—ã–º ”ô–ª—Å—ñ–∑ “õ“±–ø–∏—è —Å”©–∑",
            error_invalid_email: "–ñ–∞—Ä–∞–º—Å—ã–∑ email –ø—ñ—à—ñ–º—ñ",
            error_too_many_requests: "–¢—ã–º –∫”©–ø ”ô—Ä–µ–∫–µ—Ç. –ö–µ–π—ñ–Ω—ñ—Ä–µ–∫ “õ–∞–π—Ç–∞–ª–∞–ø –∫”©—Ä—ñ“£—ñ–∑",
            error_generic: "“ö–∞—Ç–µ –ø–∞–π–¥–∞ –±–æ–ª–¥—ã. “ö–∞–π—Ç–∞–ª–∞–ø –∫”©—Ä—ñ“£—ñ–∑",
            loading_messages: "–•–∞–±–∞—Ä–ª–∞–º–∞–ª–∞—Ä –∂“Ø–∫—Ç–µ–ª—É–¥–µ...",
            loading_error: "–ñ“Ø–∫—Ç–µ—É “õ–∞—Ç–µ—Å—ñ.",
            pinned_messages_empty: "–ë–µ–∫—ñ—Ç—ñ–ª–≥–µ–Ω —Ö–∞–±–∞—Ä–ª–∞–º–∞–ª–∞—Ä ”ô–∑—ñ—Ä–≥–µ –∂–æ“õ",
            messages_empty: "–•–∞–±–∞—Ä–ª–∞–º–∞–ª–∞—Ä ”ô–∑—ñ—Ä–≥–µ –∂–æ“õ. –ë—ñ—Ä—ñ–Ω—à—ñ –±–æ–ª—ã–ø –∂–∞–∑—ã“£—ã–∑!",
            file_share_question_1: "—Å“±—Ä–∞“õ",
            file_share_question_2_4: "—Å“±—Ä–∞“õ",
            file_share_question_5_more: "—Å“±—Ä–∞“õ",
            new_question_notification: "–ñ–∞“£–∞ —Å“±—Ä–∞“õ “õ“±—Ä—ã–ª–¥—ã",
            notification_new_message: "–ñ–∞“£–∞ —Ö–∞–±–∞—Ä–ª–∞–º–∞!",
            questions_empty: "–°“±—Ä–∞“õ—Ç–∞—Ä ”ô–∑—ñ—Ä–≥–µ –∂–æ“õ",
            favorites_empty: "–¢–∞“£–¥–∞—É–ª—ã–ª–∞—Ä–¥–∞ ”ô–∑—ñ—Ä–≥–µ –µ—à—Ç–µ“£–µ –∂–æ“õ",
            favorites_loading_error: "–¢–∞“£–¥–∞—É–ª—ã–ª–∞—Ä–¥—ã –∂“Ø–∫—Ç–µ—É “õ–∞—Ç–µ—Å—ñ",
            users_not_found: "–ü–∞–π–¥–∞–ª–∞–Ω—É—à—ã–ª–∞—Ä —Ç–∞–±—ã–ª–º–∞–¥—ã.",
            confirm_delete_message: "–û—Å—ã —Ö–∞–±–∞—Ä–ª–∞–º–∞–Ω—ã –∂–æ–π“ì—ã“£—ã–∑ –∫–µ–ª–µ—Ç—ñ–Ω—ñ–Ω–µ —Å–µ–Ω—ñ–º–¥—ñ—Å—ñ–∑ –±–µ?",
            confirm_delete_question: "–û—Å—ã —Å“±—Ä–∞“õ—Ç—ã –∂–æ–π“ì—ã“£—ã–∑ –∫–µ–ª–µ—Ç—ñ–Ω—ñ–Ω–µ —Å–µ–Ω—ñ–º–¥—ñ—Å—ñ–∑ –±–µ? –ë“±–ª ”ô—Ä–µ–∫–µ—Ç—Ç—ñ “õ–∞–π—Ç–∞—Ä—É –º“Ø–º–∫—ñ–Ω –µ–º–µ—Å.",
            confirm_kick_user: "–û—Å—ã –º“Ø—à–µ–Ω—ñ –∞—Ä–Ω–∞–¥–∞–Ω –∞–ª“ì—ã“£—ã–∑ –∫–µ–ª–µ—Ç—ñ–Ω—ñ–Ω–µ —Å–µ–Ω—ñ–º–¥—ñ—Å—ñ–∑ –±–µ?",
            confirm_delete_channel: "–û—Å—ã –∞—Ä–Ω–∞–Ω—ã –∂–æ–π“ì—ã“£—ã–∑ –∫–µ–ª–µ—Ç—ñ–Ω—ñ–Ω–µ —Å–µ–Ω—ñ–º–¥—ñ—Å—ñ–∑ –±–µ? –û–Ω–¥–∞“ì—ã –±–∞—Ä–ª—ã“õ —Ö–∞–±–∞—Ä–ª–∞–º–∞–ª–∞—Ä –∂–æ“ì–∞–ª–∞–¥—ã. –ë“±–ª ”ô—Ä–µ–∫–µ—Ç—Ç—ñ “õ–∞–π—Ç–∞—Ä—É –º“Ø–º–∫—ñ–Ω –µ–º–µ—Å.",
            confirm_delete_account: "–ê–∫–∫–∞—É–Ω—Ç—ã“£—ã–∑–¥—ã –∂–æ–π“ì—ã“£—ã–∑ –∫–µ–ª–µ—Ç—ñ–Ω—ñ–Ω–µ —Å–µ–Ω—ñ–º–¥—ñ—Å—ñ–∑ –±–µ? –ë“±–ª ”ô—Ä–µ–∫–µ—Ç—Ç—ñ “ö–ê–ô–¢–ê–†–£ –ú“Æ–ú–ö–Ü–ù –ï–ú–ï–°.",
            confirm_clear_favorites: "–¢–∞“£–¥–∞—É–ª—ã–ª–∞—Ä–¥–∞–Ω –ë–ê–†–õ–´“ö —ç–ª–µ–º–µ–Ω—Ç—Ç–µ—Ä–¥—ñ –∂–æ–π“ì—ã“£—ã–∑ –∫–µ–ª–µ—Ç—ñ–Ω—ñ–Ω–µ —Å–µ–Ω—ñ–º–¥—ñ—Å—ñ–∑ –±–µ? –ë“±–ª ”ô—Ä–µ–∫–µ—Ç—Ç—ñ “õ–∞–π—Ç–∞—Ä—É –º“Ø–º–∫—ñ–Ω –µ–º–µ—Å.",
            profile_updated_success: "–ü—Ä–æ—Ñ–∏–ª—å —Å”ô—Ç—Ç—ñ –∂–∞“£–∞—Ä—Ç—ã–ª–¥—ã!",
            channel_name_empty: "–ê—Ä–Ω–∞ –∞—Ç–∞—É—ã –±–æ—Å –±–æ–ª–º–∞—É—ã –∫–µ—Ä–µ–∫.",
            cant_delete_general: "–ù–µ–≥—ñ–∑–≥—ñ –∞—Ä–Ω–∞–Ω—ã –∂–æ—é –º“Ø–º–∫—ñ–Ω –µ–º–µ—Å.",
            invalid_channel_password: "“ö–∞—Ç–µ “õ“±–ø–∏—è —Å”©–∑.",
            add_to_favorites_success: "–¢–∞“£–¥–∞—É–ª—ã–ª–∞—Ä“ì–∞ “õ–æ—Å—ã–ª–¥—ã!",
            add_to_favorites_auth_required: "–¢–∞“£–¥–∞—É–ª—ã–ª–∞—Ä“ì–∞ “õ–æ—Å—É “Ø—à—ñ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è–¥–∞–Ω ”©—Ç—É “õ–∞–∂–µ—Ç.",
            question_format_unrecognized: "–°“±—Ä–∞“õ –ø—ñ—à—ñ–º—ñ —Ç–∞–Ω—ã–ª–º–∞–¥—ã. –°–∏–Ω—Ç–∞–∫—Å–∏—Å—Ç—ñ —Ç–µ–∫—Å–µ—Ä—ñ“£—ñ–∑.",
            questions_added_from_chat_success: "–ß–∞—Ç—Ç–∞–Ω —Å”ô—Ç—Ç—ñ “õ–æ—Å—ã–ª“ì–∞–Ω —Å“±—Ä–∞“õ—Ç–∞—Ä —Å–∞–Ω—ã:",
            questions_added_success: "–°”ô—Ç—Ç—ñ “õ–æ—Å—ã–ª“ì–∞–Ω —Å“±—Ä–∞“õ—Ç–∞—Ä —Å–∞–Ω—ã:",
            notifications_enabled: "–î—ã–±—ã—Å—Ç—ã“õ —Ö–∞–±–∞—Ä–ª–∞–Ω–¥—ã—Ä—É–ª–∞—Ä “õ–æ—Å—É–ª—ã",
            notifications_disabled: "–î—ã–±—ã—Å—Ç—ã“õ —Ö–∞–±–∞—Ä–ª–∞–Ω–¥—ã—Ä—É–ª–∞—Ä ”©—à—ñ—Ä—É–ª—ñ",
            notifications_title_enabled: "–•–∞–±–∞—Ä–ª–∞–Ω–¥—ã—Ä—É–ª–∞—Ä “õ–æ—Å—É–ª—ã",
            notifications_title_disabled: "–•–∞–±–∞—Ä–ª–∞–Ω–¥—ã—Ä—É–ª–∞—Ä ”©—à—ñ—Ä—É–ª—ñ",
            pinned_mode_on_title: "–ë–∞—Ä–ª—ã“õ —Ö–∞–±–∞—Ä–ª–∞–º–∞–ª–∞—Ä–¥—ã –∫”©—Ä—Å–µ—Ç—É",
            pinned_mode_off_title: "–ë–µ–∫—ñ—Ç—ñ–ª–≥–µ–Ω–¥–µ—Ä–¥—ñ –∫”©—Ä—Å–µ—Ç—É",
            download_qst_button: "üì• .qst –∂“Ø–∫—Ç–µ–ø –∞–ª—É",
            download_txt_button: "üì• .txt –∂“Ø–∫—Ç–µ–ø –∞–ª—É",
            add_to_favorites_button: "‚≠ê –¢–∞“£–¥–∞—É–ª—ã–ª–∞—Ä“ì–∞ “õ–æ—Å—É",
            copy_question_button: "üìã –ö”©—à—ñ—Ä—É",
            delete_question_button: "üóëÔ∏è –°“±—Ä–∞“õ—Ç—ã –∂–æ—é",
            clear_favorites_button: "üóëÔ∏è",
            download_no_data: "–±”©–ª—ñ–º—ñ–Ω–¥–µ –∂“Ø–∫—Ç–µ—É–≥–µ –¥–µ—Ä–µ–∫—Ç–µ—Ä –∂–æ“õ",
            favorites_cleared_success: "–¢–∞“£–¥–∞—É–ª—ã–ª–∞—Ä —Å”ô—Ç—Ç—ñ —Ç–∞–∑–∞—Ä—Ç—ã–ª–¥—ã.",
            favorites_already_empty: "–¢–∞“£–¥–∞—É–ª—ã–ª–∞—Ä “õ–∞–∑—ñ—Ä–¥—ñ“£ ”©–∑—ñ–Ω–¥–µ –±–æ—Å.",
            copy_success: "–ú–∞–∑–º“±–Ω –∞–ª–º–∞—Å—É –±—É—Ñ–µ—Ä—ñ–Ω–µ –∫”©—à—ñ—Ä—ñ–ª–¥—ñ!",
            copy_error: "–ö”©—à—ñ—Ä—É –º“Ø–º–∫—ñ–Ω –±–æ–ª–º–∞–¥—ã. –ú”ô—Ç—ñ–Ω–¥—ñ “õ–æ–ª–º–µ–Ω –∫”©—à—ñ—Ä—ñ“£—ñ–∑.",
            file_type_unsupported: "–¢–µ–∫ .qst –∂”ô–Ω–µ .txt —Ñ–∞–π–ª–¥–∞—Ä—ã–Ω –∂“Ø–∫—Ç–µ—É–≥–µ –±–æ–ª–∞–¥—ã",
            reauth_prompt: "–ñ–æ—é–¥—ã —Ä–∞—Å—Ç–∞—É “Ø—à—ñ–Ω –∞“ì—ã–º–¥–∞“ì—ã “õ“±–ø–∏—è —Å”©–∑—ñ“£—ñ–∑–¥—ñ –µ–Ω–≥—ñ–∑—ñ“£—ñ–∑:",
            reauth_cancelled: "–ñ–æ—é –±–æ–ª–¥—ã—Ä—ã–ª–º–∞–¥—ã. “ö“±–ø–∏—è —Å”©–∑ –µ–Ω–≥—ñ–∑—ñ–ª–º–µ–¥—ñ.",
            deleting_account_status: "–ñ–æ–π—ã–ª—É–¥–∞...",
            delete_account_success: "–°—ñ–∑–¥—ñ“£ –∞–∫–∫–∞—É–Ω—Ç—ã“£—ã–∑ —Å”ô—Ç—Ç—ñ –∂–æ–π—ã–ª–¥—ã.",
            account_deleted_button: "üóëÔ∏è –ê–∫–∫–∞—É–Ω—Ç—Ç—ã –∂–æ—é",
            question_deleted_message: "–ë“±–ª —Å“±—Ä–∞“õ –∂–æ–π—ã–ª–¥—ã.",
            file_download_error: "–§–∞–π–ª–¥—ã –∂“Ø–∫—Ç–µ—É –º“Ø–º–∫—ñ–Ω –±–æ–ª–º–∞–¥—ã:",
            test_start_error: "–¢–µ—Å—Ç—Ç—ñ –±–∞—Å—Ç–∞—É –º“Ø–º–∫—ñ–Ω –±–æ–ª–º–∞–¥—ã:",
            global_loader_loading_test: "–¢–µ—Å—Ç –∂“Ø–∫—Ç–µ–ª—É–¥–µ",
            password_reauth_required: "–ë“±–ª ”ô—Ä–µ–∫–µ—Ç—Ç—ñ –æ—Ä—ã–Ω–¥–∞—É “Ø—à—ñ–Ω –∂–∞“õ—ã–Ω–¥–∞ –∫—ñ—Ä—É “õ–∞–∂–µ—Ç. –®—ã“ì—ã–ø, “õ–∞–π—Ç–∞ –∫—ñ—Ä—ñ“£—ñ–∑.",
            channel_enter_password_prompt: "–∞—Ä–Ω–∞—Å—ã “õ–æ—Ä“ì–∞–ª“ì–∞–Ω. “ö“±–ø–∏—è —Å”©–∑–¥—ñ –µ–Ω–≥—ñ–∑—ñ“£—ñ–∑:",
            question_card_question_label: "–°“±—Ä–∞“õ:",
            question_card_author_label: "–ê–≤—Ç–æ—Ä—ã:",
            question_card_date_label: "–ö“Ø–Ω—ñ:",
            question_card_anonymous: "–ê–Ω–æ–Ω–∏–º",
            testing_channel_option: "–¢–µ—Å—Ç—ñ–ª–µ—É –∞—Ä–Ω–∞—Å—ã (–Ω”ô—Ç–∏–∂–µ–ª–µ—Ä–¥—ñ –∂–∞–∑—É–º–µ–Ω)",
            results_button: "üìä –ù”ô—Ç–∏–∂–µ–ª–µ—Ä",
            practice_test_button: "‚ö°Ô∏è –°—ã–Ω–∞“õ —Ç–µ—Å—Ç—ñ",
            official_test_button: "üèÜ –¢–µ—Å—Ç—Ç—ñ ”©—Ç—É (–∂–∞–∑–±–∞–º–µ–Ω)",
            results_modal_title: "–¢–µ—Å—Ç –Ω”ô—Ç–∏–∂–µ–ª–µ—Ä—ñ",
            results_table_header_num: "#",
            results_table_header_user: "–ü–∞–π–¥–∞–ª–∞–Ω—É—à—ã",
            results_table_header_accuracy: "–î”ô–ª–¥—ñ–∫",
            results_table_header_time: "–£–∞“õ—ã—Ç",
            results_empty_state: "–ë“±–ª —Ç–µ—Å—Ç –±–æ–π—ã–Ω—à–∞ ”ô–∑—ñ—Ä–≥–µ –Ω”ô—Ç–∏–∂–µ –∂–æ“õ.",
            file_actions_modal_title: "–§–∞–π–ª:",
        },
        en: {
            // TABS
            tab_messages: "Messages",
            tab_questions: "Questions",
            tab_favorites: "Favorites",
            tab_users: "Users",
            // Auth
            auth_title: "üîê Authorization",
            auth_login_tab: "Login",
            auth_register_tab: "Register",
            auth_login_placeholder: "Username or Email",
            auth_password_placeholder: "Password",
            auth_login_button: "Log In",
            auth_register_username_placeholder: "Username",
            auth_register_email_placeholder: "Email",
            auth_register_password_placeholder: "Password (min. 6 characters)",
            auth_register_confirm_placeholder: "Confirm password",
            auth_register_button: "Register",
            auth_close_button: "Close",
            auth_or_divider: "or",
            auth_google_signin: "Sign in with Google",
            // Main Chat
            chat_header_title: "üí¨ Chat",
            guest_user: "Guest",
            generic_user: "User",
            edit_profile_link: "‚úèÔ∏è Edit Profile",
            logout_link: "üö™ Logout",
            notifications_title: "Notifications",
            sidebar_sections: "üìÇ Sections",
            sidebar_channels: "üìã Channels",
            sidebar_create_channel: "+ Create Channel",
            sidebar_private_messages: "‚úâÔ∏è Private Messages",
            sidebar_online: "üë• Online",
            channel_general: "# General",
            search_placeholder: "üîç Search...",
            pinned_toggle_title: "Pinned",
            loading_message: "Loading...",
            reply_panel_title: "Replying to:",
            emoji_button_title: "Emoji",
            create_question_button_title: "Create Question",
            attach_file_button_title: "Attach File",
            chat_input_placeholder: "Enter a message...",
            // Modals
            user_actions_title: "Actions",
            user_actions_text: "Choose what you want to do.",
            user_actions_chat_button: "Send a message",
            user_actions_email_button: "Send an Email",
            modal_cancel_button: "Cancel",
            channel_settings_title: "Channel Settings",
            channel_edit_name_placeholder: "New channel name",
            channel_edit_password_placeholder: "New password (empty = no password)",
            channel_edit_desc_placeholder: "New channel description",
            channel_members_title: "Channel Members",
            channel_members_loading: "Loading...",
            modal_save_button: "Save",
            delete_channel_button: "üóëÔ∏è Delete Channel",
            create_channel_title: "Create New Channel",
            channel_create_name_placeholder: "Channel name",
            channel_create_password_placeholder: "Password (leave empty for public)",
            channel_create_desc_placeholder: "Channel description",
            modal_create_button: "Create",
            create_question_title: "Create Question",

            create_question_placeholder: `Enter your question in .qst format

?Capital of Kazakhstan
+Astana
-Nur-Sultan
-Utera

*You can enter multiple questions at once`,
            create_question_modal_button: "Create Question",
            edit_message_title: "Edit Message",
            edit_profile_title: "Edit Profile",
            edit_profile_name_placeholder: "Your name",
            edit_profile_new_password_placeholder: "New password (leave empty if not changing)",
            delete_account_button: "üóëÔ∏è Delete Account",
            file_actions_title: "File Actions",
            file_actions_download: "üì• Download",
            file_actions_test: "‚ö°Ô∏è Take Test",
            // JS Messages & Alerts
            auth_system_unavailable: "Authentication system is not available",
            fill_all_fields: "Please fill in all fields",
            password_min_length: "Password must be at least 6 characters long",
            passwords_do_not_match: "Passwords do not match!",
            error_user_not_found: "User not found",
            error_wrong_password: "Incorrect password",
            error_email_in_use: "Email is already in use",
            error_weak_password: "Password is too weak",
            error_invalid_email: "Invalid email format",
            error_too_many_requests: "Too many requests. Please try again later",
            error_generic: "An error occurred. Please try again",
            loading_messages: "Loading messages...",
            loading_error: "Loading error.",
            pinned_messages_empty: "No pinned messages yet",
            messages_empty: "No messages yet. Be the first to write!",
            file_share_question_1: "question",
            file_share_question_2_4: "questions",
            file_share_question_5_more: "questions",
            new_question_notification: "A new question has been created",
            notification_new_message: "New message!",
            questions_empty: "No questions yet",
            favorites_empty: "Nothing in favorites yet",
            favorites_loading_error: "Error loading favorites",
            users_not_found: "Users not found.",
            confirm_delete_message: "Are you sure you want to delete this message?",
            confirm_delete_question: "Are you sure you want to delete this question? This action is irreversible.",
            confirm_kick_user: "Are you sure you want to remove this member from the channel?",
            confirm_delete_channel: "Are you sure you want to delete this channel? All messages within it will be lost. This action is irreversible.",
            confirm_delete_account: "Are you sure you want to delete your account? This action is IRREVERSIBLE.",
            confirm_clear_favorites: "Are you sure you want to delete ALL items from your favorites? This action is irreversible.",
            profile_updated_success: "Profile updated successfully!",
            channel_name_empty: "Channel name cannot be empty.",
            cant_delete_general: "The main channel cannot be deleted.",
            invalid_channel_password: "Incorrect password.",
            add_to_favorites_success: "Added to favorites!",
            add_to_favorites_auth_required: "You must be logged in to add to favorites.",
            question_format_unrecognized: "Question format not recognized. Please check the syntax.",
            questions_added_from_chat_success: "Successfully added questions from chat:",
            questions_added_success: "Successfully added questions:",
            notifications_enabled: "Sound notifications are enabled",
            notifications_disabled: "Sound notifications are disabled",
            notifications_title_enabled: "Notifications on",
            notifications_title_disabled: "Notifications off",
            pinned_mode_on_title: "Show all messages",
            pinned_mode_off_title: "Show pinned messages",
            download_qst_button: "üì• Download .qst",
            download_txt_button: "üì• Download .txt",
            add_to_favorites_button: "‚≠ê Add to Favorites",
            copy_question_button: "üìã Copy",
            delete_question_button: "üóëÔ∏è Delete Question",
            clear_favorites_button: "üóëÔ∏è",
            question_label: "Question:",
            author_label: "Author:",
            date_label: "Date:",
            anonymous_user: "Anonymous",
            expand_message: "Read more", 
            collapse_message: "Show less", 
            download_no_data: "No data to download in section",
            favorites_cleared_success: "Favorites cleared successfully.",
            favorites_already_empty: "Favorites is already empty.",
            copy_success: "Content copied to clipboard!",
            copy_error: "Could not copy. Please copy the text manually.",
            file_type_unsupported: "Only .qst and .txt files can be uploaded",
            reauth_prompt: "To confirm deletion, please enter your current password:",
            reauth_cancelled: "Deletion cancelled. Password was not entered.",
            deleting_account_status: "Deleting...",
            delete_account_success: "Your account has been successfully deleted.",
            account_deleted_button: "üóëÔ∏è Delete Account",
            question_deleted_message: "This question has been deleted.",
            file_download_error: "Failed to download file:",
            test_start_error: "Failed to start test:",
            global_loader_loading_test: "Loading test",
            password_reauth_required: "This action requires a recent login. Please log out and log in again.",
            channel_enter_password_prompt: "is protected. Please enter the password:",
            question_card_question_label: "Question:",
            question_card_author_label: "Author:",
            question_card_date_label: "Date:",
            question_card_anonymous: "Anonymous",
            testing_channel_option: "Testing channel (with result tracking)",
            results_button: "üìä Results",
            practice_test_button: "‚ö°Ô∏è Practice Test",
            official_test_button: "üèÜ Take Official Test (Tracked)",
            results_modal_title: "Test Results",
            results_table_header_num: "#",
            results_table_header_user: "User",
            results_table_header_accuracy: "Accuracy",
            results_table_header_time: "Time",
            results_empty_state: "There are no results for this test yet.",
            file_actions_modal_title: "File:",
        }
    };
    let currentChatLang = localStorage.getItem('chatLanguage') || 'ru';

    function _chat(key) {
        return LANG_PACK_CHAT[currentChatLang]?.[key] || key;
    }

    
    // Core variables
    let db = null;
    let auth = null;
    let currentUser = null;
    let allMessages = [];
    let openChatAfterAuth = false;
    let currentChannel = 'general';
    let currentChannelType = 'public'; // 'public' –∏–ª–∏ 'private'
    let currentTab = 'messages';
    let channels = [];
    let privateChats = []; // –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –ª–∏—á–Ω—ã—Ö —á–∞—Ç–æ–≤
    let allUsers = new Map(); // –•—Ä–∞–Ω–∏—Ç –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    let onlineUsers = new Map(); // –ò—Å–ø–æ–ª—å–∑—É–µ–º Map –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    let isInitialized = false;
    let unreadCounts = new Map();
    let replyContext = null;
    let presenceListener = null;
    let heartbeatInterval = null; // –î–ª—è "–ø—É–ª—å—Å–∞"
    let notificationsEnabled = true;
    let originalTitle = document.title;
    let unreadMessageCount = 0; 
    let isPinnedMode = false;

    let messagesListener = null; // C–ª—É—à–∞—Ç–µ–ª—å –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π
    let pmUnreadListener = null; // –°–ª—É—à–∞—Ç–µ–ª—å –¥–ª—è –õ–ò–ß–ù–´–• –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö
    let publicUnreadListener = null; // –°–ª—É—à–∞—Ç–µ–ª—å –¥–ª—è –ü–£–ë–õ–ò–ß–ù–´–• –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö
    let listenerInitializationTime = null; // –í–†–ï–ú–Ø –ó–ê–ü–£–°–ö–ê –°–õ–£–®–ê–¢–ï–õ–Ø
    let questionsListener = null; // –°–õ–£–®–ê–¢–ï–õ–¨ –î–õ–Ø –í–û–ü–†–û–°–û–í

    let questionToHighlight = null;
    let favoritesListener = null;
    let unlockedChannels = new Set();
    const QUICK_REACTIONS_KEY = 'userQuickReactions';
    const DEFAULT_QUICK_REACTIONS = ['üëç', '‚ù§Ô∏è', 'üòÇ', 'üòÆ', 'üò¢', 'üî•'];
    
    // DOM elements
    let chatOverlay = null;
    let chatModal = null;
    let currentUserEl = null;
    let chatInput = null;
    let messageArea = null;
    let channelsList = null;
    let privateChatsList = null; // –î–ª—è —Å–ø–∏—Å–∫–∞ –õ–°
    let onlineUsersList = null;
    let searchInput = null;
    let authOverlay = null;
    let tabButtons = {};
    let tabCounters = {};
    

    // Tabs configuration
    const TABS = {
        messages: { langKey: 'tab_messages', icon: 'üí¨', collection: 'messages' },
        questions: { langKey: 'tab_questions', icon: '‚ùì', collection: 'questions' },
        favorites: { langKey: 'tab_favorites', icon: '‚≠ê', collection: 'favorites' },
        users: { langKey: 'tab_users', icon: 'üë•' }
    };


    // --- –ù–ê–ß–ê–õ–û –ù–û–í–û–ì–û –ö–û–î–ê: –í—Å—Ç–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ —Å—é–¥–∞ ---
    function debounce(func, wait) {
        let timeout;
        return function executedFunction(...args) {
            const later = () => {
                clearTimeout(timeout);
                func(...args);
            };
            clearTimeout(timeout);
            timeout = setTimeout(later, wait);
        };
    };

    function handleSearch(event) {
        const query = event.target.value.toLowerCase().trim();
        if (!query) {
            loadTabData(currentTab);
            return;
        }
        const items = messageArea.querySelectorAll('.message, .question-bubble, .favorite-item, .user-list-item');
        items.forEach(item => {
            const text = item.textContent.toLowerCase();
            if (text.includes(query)) {
                item.style.display = '';
            } else {
                item.style.display = 'none';
            }
        });
    }


  

    function init(firebaseDb, firebaseAuth) {
        try {
            db = firebaseDb;
            auth = firebaseAuth;
            
            // 1. –°–æ–∑–¥–∞–µ–º HTML
            createHybridChatHTML();
            
            // 2. –ù–∞—Ö–æ–¥–∏–º —ç–ª–µ–º–µ–Ω—Ç—ã
            initDOMElements();
            
            // 3. –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
            setupEventListeners();
            
            // 4. –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω–æ–µ
            setupAuthStateListener();
            setupVisibilityListener();
            
            isInitialized = true;
            console.log('‚úÖ –ì–∏–±—Ä–∏–¥–Ω—ã–π —á–∞—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —á–∞—Ç–∞:', error);
            isInitialized = false;
        }
    }


    function createHybridChatHTML() {

        // –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –≤–µ—Ä—Å–∏–∏ —á–∞—Ç–∞, –µ—Å–ª–∏ –æ–Ω–∏ –≤–¥—Ä—É–≥ –æ—Å—Ç–∞–ª–∏—Å—å –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        const oldChats = document.querySelectorAll('#chatOverlay, #advancedChatOverlay');
        oldChats.forEach(chat => chat.remove());
        
        // –í—Å—è HTML-—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –≤ –æ–¥–Ω–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
        const chatHTML = `
        <!-- –°–ò–°–¢–ï–ú–ê –ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–ò -->
        <div id="authOverlay" class="auth-overlay hidden">
            <div class="auth-modal">
                <h2 style="margin-bottom: 20px; color: var(--primary);">${_chat('auth_title')}</h2>
                <div class="auth-tabs">
                    <button class="auth-tab active" data-tab="login">${_chat('auth_login_tab')}</button>
                    <button class="auth-tab" data-tab="register">${_chat('auth_register_tab')}</button>
                </div>
                <form class="auth-form active" id="loginForm">
                    <input type="text" class="auth-input" id="loginUsername" placeholder="${_chat('auth_login_placeholder')}" required>
                    <div class="password-wrapper">
                        <input type="password" class="auth-input" id="loginPassword" placeholder="${_chat('auth_password_placeholder')}" required>
                        <span class="toggle-password">üëÅÔ∏è</span>
                    </div>
                    <button type="submit" class="auth-btn">${_chat('auth_login_button')}</button>
                </form>
                <form class="auth-form" id="registerForm">
                    <input type="text" class="auth-input" id="registerUsername" placeholder="${_chat('auth_register_username_placeholder')}" required>
                    <input type="email" class="auth-input" id="registerEmail" placeholder="${_chat('auth_register_email_placeholder')}" required>
                    <div class="password-wrapper">
                        <input type="password" class="auth-input" id="registerPassword" placeholder="${_chat('auth_register_password_placeholder')}" required>
                        <span class="toggle-password">üëÅÔ∏è</span>
                    </div>
                    <div class="password-wrapper">
                        <input type="password" class="auth-input" id="registerPasswordConfirm" placeholder="${_chat('auth_register_confirm_placeholder')}" required>
                        <span class="toggle-password">üëÅÔ∏è</span>
                    </div>
                    <button type="submit" class="auth-btn">${_chat('auth_register_button')}</button>
                </form>

                <div style="text-align: center; margin: 20px 0; color: var(--secondary-text-color);">${_chat('auth_or_divider')}</div>
                
                <button id="googleSignInBtn" class="google-signin-btn">
                    <img src="https://www.gstatic.com/firebasejs/ui/2.0.0/images/auth/google.svg" alt="Google icon">
                    ${_chat('auth_google_signin')}
                </button>
                
                <button id="authCloseButton" onclick="ChatModule.closeAuthModal()" style="margin-top: 15px; background: none; border: none; color: var(--secondary-text-color); cursor: pointer;">
                    ${_chat('auth_close_button')}
                </button>
            </div>
        </div>

        <!-- –ì–ò–ë–†–ò–î–ù–´–ô –ß–ê–¢ (–ø–æ–ª–Ω—ã–π –∫–æ–¥, –∫–∞–∫ –∏ —Ä–∞–Ω–µ–µ) -->
        <div id="chatOverlay" class="advanced-chat-overlay hidden">
            <div class="advanced-chat-modal">
                <!-- Header -->
                <div class="advanced-chat-header">
                    <div class="chat-title">
                        <h3 id="chatHeaderTitle">${_chat('chat_header_title')}</h3>
                        <span id="unreadBadge" class="unread-badge hidden">0</span>
                    </div>
                    <button id="sidebarToggleBtn" class="sidebar-toggle-btn">‚ò∞</button>
                    <div class="header-controls">
                        <div class="user-menu-container">
                            <span id="currentUser">${_chat('guest_user')}</span>
                            <div id="userDropdown" class="user-dropdown hidden">
                                <a href="#" onclick="ChatModule.showProfileModal()">${_chat('edit_profile_link')}</a>
                                <a href="#" onclick="ChatModule.logout()">${_chat('logout_link')}</a>
                            </div>
                        </div>
                        <button id="notificationToggle" class="notification-toggle" title="${_chat('notifications_title')}">üîî</button>
                        <button onclick="ChatModule.closeChatModal()" class="close-btn">√ó</button>
                    </div>
                </div>
                
                <!-- Main layout -->
                <div class="advanced-chat-body">
                    <div id="sidebarContainer" class="sidebar-container">
                        <!-- Sidebar -->
                        <div class="chat-sidebar">
                            <div class="sidebar-section">
                                <h4>${_chat('sidebar_sections')}</h4>
                                <div id="chatTabsList" class="tabs-list">
                                    <div class="tab-item active" data-tab="messages"><span class="tab-icon">üí¨</span><span class="tab-name">${_chat('tab_messages')}</span><span class="tab-counter" id="messagesCount">0</span></div>
                                    <div class="tab-item" data-tab="questions"><span class="tab-icon">‚ùì</span><span class="tab-name">${_chat('tab_questions')}</span><span class="tab-counter" id="questionsCount">0</span></div>
                                    <div class="tab-item" data-tab="favorites"><span class="tab-icon">‚≠ê</span><span class="tab-name">${_chat('tab_favorites')}</span><span class="tab-counter" id="favoritesCount">0</span></div>
                                    <div class="tab-item" data-tab="users"><span class="tab-icon">üë•</span><span class="tab-name">${_chat('tab_users')}</span><span class="tab-counter" id="usersCount">0</span></div>
                                </div>
                            </div>
                            <div class="sidebar-section">
                                <h4>${_chat('sidebar_channels')}</h4>
                                <div class="sidebar-search-container"><input type="text" id="channelSearchInput" class="sidebar-search-input" placeholder="–ü–æ–∏—Å–∫ –∫–∞–Ω–∞–ª–æ–≤..."></div>
                                <div id="channelsList" class="channels-list"></div>
                                <button id="createChannelBtn" class="create-btn">${_chat('sidebar_create_channel')}</button>
                            </div>
                            <div class="sidebar-section" id="privateChatsSection">
                                <h4>${_chat('sidebar_private_messages')}</h4>
                                <div id="privateChatsList" class="channels-list"></div>
                            </div>                            
                            <div class="sidebar-section">
                                <h4><span class="online-label">${_chat('sidebar_online')}</span> (<span id="onlineCount">0</span>)</h4>
                                <div id="onlineUsersList" class="online-users-list"></div>
                            </div>
                        </div>
                    </div>
                    
                    <!-- Main chat area -->
                    <div class="chat-main-content">
                        <div class="chat-top-bar">
                             <h4 id="currentChannelName" style="margin: 0; flex-grow: 1; text-align: left; color: var(--heading-color);">${_chat('channel_general')}</h4>
                            <input type="text" id="chatSearchInput" placeholder="${_chat('search_placeholder')}" />
                            <button id="togglePinnedBtn" title="${_chat('pinned_toggle_title')}">üìå</button>
                        </div>
                        <div id="tabActionsContainer" class="tab-actions-container hidden"></div>
                        <div id="messageArea" class="message-area"><div class="empty-state">${_chat('loading_message')}</div></div>
                        <div class="chat-input-area">
                            <div id="replyingToPanel" class="replying-to-panel hidden">
                                <div class="reply-info"><span>${_chat('reply_panel_title')}</span><p id="replyingToText"></p></div>
                                <button onclick="ChatModule.cancelReply()" class="cancel-reply-btn">√ó</button>
                            </div>
                            <div class="input-actions-top">
                                <button id="emojiBtn" class="input-action-btn" title="${_chat('emoji_button_title')}">üòä</button>
                                <button id="questionBtn" class="input-action-btn" title="${_chat('create_question_button_title')}">‚ùì</button>
                                <button id="uploadFileBtn" class="input-action-btn" title="${_chat('attach_file_button_title')}">üìé</button>
                            </div>
                            <input type="file" id="chatFileInput" class="hidden" accept=".qst,.txt">
                            <div class="input-wrapper">
                                <textarea id="chatInput" placeholder="${_chat('chat_input_placeholder')}"></textarea>
                                <button id="sendBtn" class="advanced-send-btn">‚û§</button>
                            </div>
                        </div>    
                    </div>
                </div>
            </div>
        </div>

        <!-- MODALS -->
        <div id="userActionsModal" class="modal-overlay hidden"><div class="modal-content"><h3 id="userActionsModalTitle">${_chat('user_actions_title')}</h3><p id="userActionsModalText" style="margin-bottom: 25px;">${_chat('user_actions_text')}</p><div class="modal-buttons vertical"><button id="userActionsChatBtn">${_chat('user_actions_chat_button')}</button><button id="userActionsEmailBtn">${_chat('user_actions_email_button')}</button><button onclick="ChatModule.closeModal('userActionsModal')" style="background-color: var(--button-secondary-bg); color: var(--button-secondary-text);">${_chat('modal_cancel_button')}</button></div></div></div>
        <div id="channelEditModal" class="modal-overlay hidden"><div class="modal-content"><h3>${_chat('channel_settings_title')}</h3><input type="hidden" id="editChannelId"><input type="text" id="editChannelNameInput" placeholder="${_chat('channel_edit_name_placeholder')}" required /><input type="password" id="editChannelPasswordInput" placeholder="${_chat('channel_edit_password_placeholder')}" /><textarea id="editChannelDescInput" placeholder="${_chat('channel_edit_desc_placeholder')}"></textarea><div id="channelMembersSection" class="channel-members-section hidden"><h4>${_chat('channel_members_title')}</h4><ul id="channelMembersList" class="channel-members-list"><li>${_chat('channel_members_loading')}</li></ul></div><div class="modal-buttons"><button onclick="ChatModule.saveChannelEdit()">${_chat('modal_save_button')}</button><button onclick="ChatModule.closeModal('channelEditModal')">${_chat('modal_cancel_button')}</button></div><button id="deleteChannelBtn" class="delete-btn" onclick="ChatModule.deleteChannel()" style="margin-top: 15px;">${_chat('delete_channel_button')}</button></div></div>
        <div id="channelCreateModal" class="modal-overlay hidden"><div class="modal-content"><h3>${_chat('create_channel_title')}</h3><input type="text" id="channelNameInput" placeholder="${_chat('channel_create_name_placeholder')}" required /><input type="password" id="channelPasswordInput" placeholder="${_chat('channel_create_password_placeholder')}" /><textarea id="channelDescInput" placeholder="${_chat('channel_create_desc_placeholder')}"></textarea><div class="settings-group" style="text-align: left; margin-top: 15px;"><input type="checkbox" id="channelIsForTesting"><label for="channelIsForTesting" data-lang-key="testing_channel_option">${_chat('testing_channel_option')}</label></div><div class="modal-buttons"><button onclick="ChatModule.createChannel()">${_chat('modal_create_button')}</button><button onclick="ChatModule.closeModal('channelCreateModal')">${_chat('modal_cancel_button')}</button></div></div></div>
        <div id="questionCreateModal" class="modal-overlay hidden"><div class="modal-content"><h3>${_chat('create_question_title')}</h3><textarea id="questionTextInput" placeholder="${_chat('create_question_placeholder')}" rows="4"></textarea><div class="modal-buttons"><button onclick="ChatModule.createQuestion()">${_chat('create_question_modal_button')}</button><button onclick="ChatModule.closeModal('questionCreateModal')">${_chat('modal_cancel_button')}</button></div></div></div>
        <div id="editMessageModal" class="modal-overlay hidden"><div class="modal-content"><h3>${_chat('edit_message_title')}</h3><textarea id="editMessageInput" rows="4"></textarea><input type="hidden" id="editMessageIdInput"><div class="modal-buttons"><button onclick="ChatModule.saveMessageEdit()">${_chat('modal_save_button')}</button><button onclick="ChatModule.closeModal('editMessageModal')">${_chat('modal_cancel_button')}</button></div></div></div>
        <div id="profileEditModal" class="modal-overlay hidden"><div class="modal-content"><h3>${_chat('edit_profile_title')}</h3><input type="text" id="profileDisplayName" placeholder="${_chat('edit_profile_name_placeholder')}" /><input type="email" id="profileEmail" placeholder="Email" readonly /><input type="password" id="profileNewPassword" placeholder="${_chat('edit_profile_new_password_placeholder')}" /><div class="modal-buttons"><button onclick="ChatModule.saveProfile()">${_chat('modal_save_button')}</button><button onclick="ChatModule.closeModal('profileEditModal')">${_chat('modal_cancel_button')}</button></div><button id="deleteAccountBtn" class="delete-btn" onclick="ChatModule.deleteAccount()" style="margin-top: 15px;">${_chat('delete_account_button')}</button></div></div>
        <div id="fileActionsModal" class="modal-overlay hidden"><div class="modal-content"><h3 id="fileActionsModalTitle">${_chat('file_actions_title')}</h3><p id="fileActionsModalText" style="margin-bottom: 25px;">${_chat('user_actions_text')}</p><div class="modal-buttons vertical"><button id="fileActionDownloadBtn">${_chat('file_actions_download')}</button><button id="fileActionTestBtn">${_chat('file_actions_test')}</button><button onclick="ChatModule.closeModal('fileActionsModal')" style="background-color: var(--button-secondary-bg); color: var(--button-secondary-text);">${_chat('modal_cancel_button')}</button></div></div></div>
        `;

        document.body.insertAdjacentHTML('beforeend', chatHTML);
    }

 
    async function signInWithGoogle() {
        if (!auth) {
            showError('–°–∏—Å—Ç–µ–º–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞');
            return;
        }

        const provider = new firebase.auth.GoogleAuthProvider();

        try {
            const result = await auth.signInWithPopup(provider);
            const user = result.user;

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–æ–≤—ã–π –ª–∏ —ç—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            if (result.additionalUserInfo.isNewUser) {
                console.log('–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å Google, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Firestore:', user.displayName);
                // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–æ–≤—ã–π, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ –¥–∞–Ω–Ω—ã–µ –≤ –Ω–∞—à–µ–π –±–∞–∑–µ
                await db.collection('users').doc(user.uid).set({
                    username: user.displayName,
                    email: user.email,
                    uid: user.uid,
                    privateChatPartners: [],
                    createdAt: firebase.firestore.FieldValue.serverTimestamp()
                });
            }

            // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∏ –æ—Ç–∫—Ä—ã–≤–∞–µ–º —á–∞—Ç, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            ChatModule.closeAuthModal();
            if (openChatAfterAuth) {
                openChatAfterAuth = false;
                ChatModule.openChatModal();
            }

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ —á–µ—Ä–µ–∑ Google:', error);
            showError(getErrorMessage(error.code));
        }
    }



    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —á–∞—Ç–∞ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º —è–∑—ã–∫–æ–º.
     * –ù–µ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–µ—Ç DOM, –∞ —Ç–æ–ª—å–∫–æ –º–µ–Ω—è–µ—Ç —Ç–µ–∫—Å—Ç.
     */
    function updateChatUIText() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ DOM —á–∞—Ç–∞, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–æ–∫
        if (!document.getElementById('authOverlay')) return;

        // --- –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ ---
        document.querySelector('#authOverlay h2').textContent = _chat('auth_title');
        document.querySelector('.auth-tab[data-tab="login"]').textContent = _chat('auth_login_tab');
        document.querySelector('.auth-tab[data-tab="register"]').textContent = _chat('auth_register_tab');
        document.getElementById('loginUsername').placeholder = _chat('auth_login_placeholder');
        document.getElementById('loginPassword').placeholder = _chat('auth_password_placeholder');
        document.querySelector('#loginForm button').textContent = _chat('auth_login_button');
        document.getElementById('registerUsername').placeholder = _chat('auth_register_username_placeholder');
        document.getElementById('registerEmail').placeholder = _chat('auth_register_email_placeholder');
        document.getElementById('registerPassword').placeholder = _chat('auth_register_password_placeholder');
        document.getElementById('registerPasswordConfirm').placeholder = _chat('auth_register_confirm_placeholder');
        document.querySelector('#registerForm button').textContent = _chat('auth_register_button');
        // --- –ù–ê–ß–ê–õ–û –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø ---
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ Google Sign-In, —Å–æ—Ö—Ä–∞–Ω—è—è –∏–∫–æ–Ω–∫—É
        const googleBtn = document.getElementById('googleSignInBtn');
        if (googleBtn) {
            googleBtn.innerHTML = `
                <img src="https://www.gstatic.com/firebasejs/ui/2.0.0/images/auth/google.svg" alt="Google icon">
                ${_chat('auth_google_signin')}
            `;
        }
        // --- –ö–û–ù–ï–¶ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø ---
        document.getElementById('authCloseButton').textContent = _chat('auth_close_button');

        // --- –û—Å–Ω–æ–≤–Ω–æ–µ –æ–∫–Ω–æ —á–∞—Ç–∞ ---
        // –®–∞–ø–∫–∞
        document.getElementById('chatHeaderTitle').textContent = _chat(TABS[currentTab].langKey);
        document.querySelector('#userDropdown a[onclick*="showProfileModal"]').textContent = _chat('edit_profile_link');
        document.querySelector('#userDropdown a[onclick*="logout"]').textContent = _chat('logout_link');
        document.getElementById('notificationToggle').title = _chat('notifications_title');
        
        // –°–∞–π–¥–±–∞—Ä
        document.querySelector('.sidebar-section:nth-of-type(1) h4').textContent = _chat('sidebar_sections');
        document.querySelector('.tab-item[data-tab="messages"] .tab-name').textContent = _chat('tab_messages');
        document.querySelector('.tab-item[data-tab="questions"] .tab-name').textContent = _chat('tab_questions');
        document.querySelector('.tab-item[data-tab="favorites"] .tab-name').textContent = _chat('tab_favorites');
        document.querySelector('.tab-item[data-tab="users"] .tab-name').textContent = _chat('tab_users');
        document.querySelector('.sidebar-section:nth-of-type(2) h4').textContent = _chat('sidebar_channels');
        document.getElementById('createChannelBtn').textContent = _chat('sidebar_create_channel');
        document.getElementById('privateChatsSection').querySelector('h4').textContent = _chat('sidebar_private_messages');
        document.querySelector('.online-label').textContent = _chat('sidebar_online');
        
        // –û—Å–Ω–æ–≤–Ω–∞—è –æ–±–ª–∞—Å—Ç—å
        document.getElementById('chatSearchInput').placeholder = _chat('search_placeholder');
        document.getElementById('togglePinnedBtn').title = isPinnedMode ? _chat('pinned_mode_on_title') : _chat('pinned_mode_off_title');
        document.querySelector('#replyingToPanel span').textContent = _chat('reply_panel_title');
        document.getElementById('emojiBtn').title = _chat('emoji_button_title');
        document.getElementById('questionBtn').title = _chat('create_question_button_title');
        document.getElementById('uploadFileBtn').title = _chat('attach_file_button_title');
        document.getElementById('chatInput').placeholder = _chat('chat_input_placeholder');

        // --- –î—Ä—É–≥–∏–µ –º–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞ ---
        document.querySelector('#userActionsModal h3').textContent = _chat('user_actions_title');
        document.querySelector('#userActionsModal p').textContent = _chat('user_actions_text');
        document.querySelector('#userActionsChatBtn').textContent = _chat('user_actions_chat_button');
        document.querySelector('#userActionsEmailBtn').textContent = _chat('user_actions_email_button');
        document.querySelector('#userActionsModal button[onclick*="closeModal"]').textContent = _chat('modal_cancel_button');

        document.querySelector('#channelEditModal h3').textContent = _chat('channel_settings_title');
        document.getElementById('editChannelNameInput').placeholder = _chat('channel_edit_name_placeholder');
        document.getElementById('editChannelPasswordInput').placeholder = _chat('channel_edit_password_placeholder');
        document.getElementById('editChannelDescInput').placeholder = _chat('channel_edit_desc_placeholder');
        document.querySelector('#channelMembersSection h4').textContent = _chat('channel_members_title');
        document.querySelector('#channelEditModal button[onclick*="saveChannelEdit"]').textContent = _chat('modal_save_button');
        document.querySelector('#channelEditModal button[onclick*="closeModal"]').textContent = _chat('modal_cancel_button');
        document.getElementById('deleteChannelBtn').textContent = _chat('delete_channel_button');
        
        document.querySelector('#channelCreateModal h3').textContent = _chat('create_channel_title');
        document.getElementById('channelNameInput').placeholder = _chat('channel_create_name_placeholder');
        document.getElementById('channelPasswordInput').placeholder = _chat('channel_create_password_placeholder');
        document.getElementById('channelDescInput').placeholder = _chat('channel_create_desc_placeholder');
        document.querySelector('#channelCreateModal button[onclick*="createChannel"]').textContent = _chat('modal_create_button');
        document.querySelector('#channelCreateModal button[onclick*="closeModal"]').textContent = _chat('modal_cancel_button');

        document.querySelector('#questionCreateModal h3').textContent = _chat('create_question_title');
        document.getElementById('questionTextInput').placeholder = _chat('create_question_placeholder');
        document.querySelector('#questionCreateModal button[onclick*="createQuestion"]').textContent = _chat('create_question_modal_button');
        document.querySelector('#questionCreateModal button[onclick*="closeModal"]').textContent = _chat('modal_cancel_button');

        document.querySelector('#editMessageModal h3').textContent = _chat('edit_message_title');
        document.querySelector('#editMessageModal button[onclick*="saveMessageEdit"]').textContent = _chat('modal_save_button');
        document.querySelector('#editMessageModal button[onclick*="closeModal"]').textContent = _chat('modal_cancel_button');

        document.querySelector('#profileEditModal h3').textContent = _chat('edit_profile_title');
        document.getElementById('profileDisplayName').placeholder = _chat('edit_profile_name_placeholder');
        document.getElementById('profileNewPassword').placeholder = _chat('edit_profile_new_password_placeholder');
        document.querySelector('#profileEditModal button[onclick*="saveProfile"]').textContent = _chat('modal_save_button');
        document.querySelector('#profileEditModal button[onclick*="closeModal"]').textContent = _chat('modal_cancel_button');
        document.getElementById('deleteAccountBtn').textContent = _chat('delete_account_button');

        document.querySelector('#fileActionsModal h3').textContent = _chat('file_actions_title');
        document.querySelector('#fileActionsModal p').textContent = _chat('user_actions_text');
        document.getElementById('fileActionDownloadBtn').textContent = _chat('file_actions_download');
        document.getElementById('fileActionTestBtn').textContent = _chat('file_actions_test');
        document.querySelector('#fileActionsModal button[onclick*="closeModal"]').textContent = _chat('modal_cancel_button');

        // –ü–µ—Ä–µ–≤–æ–¥ –æ–ø—Ü–∏–∏ –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞–Ω–∞–ª–∞
        const testingChannelLabel = document.querySelector('label[for="channelIsForTesting"]');
        if (testingChannelLabel) {
            testingChannelLabel.textContent = _chat('testing_channel_option');
        }

        // –ü–µ—Ä–µ–≤–æ–¥ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        const resultsModal = document.getElementById('testResultsModal');
        if (resultsModal) {
            const title = resultsModal.querySelector('#testResultsModalTitle');
            const closeButton = resultsModal.querySelector('button[onclick*="closeModal"]');
            
            if (title) title.textContent = _chat('results_modal_title');
            if (closeButton) closeButton.textContent = _chat('auth_close_button');
        }

        // --- –ù–û–í–´–ô –ë–õ–û–ö: –ü–µ—Ä–µ–≤–æ–¥ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –æ–±—ä—è—Å–Ω–µ–Ω–∏–π –ò–ò ---
        const aiModal = document.getElementById('aiExplanationModal');
        if (aiModal) {
            // –ù–∞—Ö–æ–¥–∏–º –∫–Ω–æ–ø–∫—É "–ó–∞–∫—Ä—ã—Ç—å" –≤–Ω—É—Ç—Ä–∏ —ç—Ç–æ–≥–æ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞.
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä, —á—Ç–æ–±—ã –Ω–µ –∑–∞—Ç—Ä–æ–Ω—É—Ç—å –¥—Ä—É–≥–∏–µ –∫–Ω–æ–ø–∫–∏.
            const closeButton = aiModal.querySelector('button[data-lang-key="auth_close_button"]');
            if (closeButton) {
                closeButton.textContent = _chat('auth_close_button');
            }
        }

    }




    function initDOMElements() {
        chatOverlay = document.getElementById('chatOverlay');
        authOverlay = document.getElementById('authOverlay');
        currentUserEl = document.getElementById('currentUser');
        chatInput = document.getElementById('chatInput');
        messageArea = document.getElementById('messageArea');
        channelsList = document.getElementById('channelsList');
        privateChatsList = document.getElementById('privateChatsList');
        onlineUsersList = document.getElementById('onlineUsersList');
        searchInput = document.getElementById('chatSearchInput');
        Object.keys(TABS).forEach(tabId => {
            tabButtons[tabId] = document.querySelector(`[data-tab="${tabId}"]`);
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ –≤–∫–ª–∞–¥–∫–∞ "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", –¥–ª—è –∫–æ—Ç–æ—Ä–æ–π —Å–≤–æ–π —Å—á–µ—Ç—á–∏–∫
            if(tabId !== 'users') {
                 tabCounters[tabId] = document.getElementById(`${tabId}Count`);
            }
        });
        // –ü–†–ê–í–ò–õ–¨–ù–û –ø—Ä–∏–≤—è–∑—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        tabCounters['users'] = document.getElementById('usersCount'); // –°—á–µ—Ç—á–∏–∫ –¥–ª—è –≤–∫–ª–∞–¥–∫–∏
        tabCounters['online'] = document.getElementById('onlineCount'); // –°—á–µ—Ç—á–∏–∫ –¥–ª—è —Å–µ–∫—Ü–∏–∏ "–û–Ω–ª–∞–π–Ω"
        console.log('DOM —ç–ª–µ–º–µ–Ω—Ç—ã –≥–∏–±—Ä–∏–¥–Ω–æ–≥–æ —á–∞—Ç–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
    }


    /**
     * –ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –±—ã—Å—Ç—Ä—ã—Ö —Ä–µ–∞–∫—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ localStorage.
     * –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –Ω–∞–±–æ—Ä.
     * @returns {string[]} –ú–∞—Å—Å–∏–≤ —ç–º–æ–¥–∑–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–π —Ä–µ–∞–∫—Ü–∏–∏.
     */
    function getQuickReactions() {
        try {
            const storedReactions = localStorage.getItem(QUICK_REACTIONS_KEY);
            if (storedReactions) {
                const parsed = JSON.parse(storedReactions);
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –º–∞—Å—Å–∏–≤ —Å—Ç—Ä–æ–∫
                if (Array.isArray(parsed) && parsed.every(item => typeof item === 'string')) {
                    return parsed;
                }
            }
        } catch (e) {
            console.error("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –±—ã—Å—Ç—Ä—ã—Ö —Ä–µ–∞–∫—Ü–∏–π –∏–∑ localStorage:", e);
        }
        // –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞–±–æ—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        return [...DEFAULT_QUICK_REACTIONS];
    }


    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –±—ã—Å—Ç—Ä—ã—Ö —Ä–µ–∞–∫—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
     * –ù–æ–≤—ã–π —ç–º–æ–¥–∑–∏ –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –≤ –Ω–∞—á–∞–ª–æ, —Å—Ç–∞—Ä—ã–π (–µ—Å–ª–∏ –±—ã–ª) —É–¥–∞–ª—è–µ—Ç—Å—è, 
     * –∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç –∏–∑ —Å–ø–∏—Å–∫–∞ —É–¥–∞–ª—è–µ—Ç—Å—è, —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–ª–∏–Ω—É.
     * @param {string} newEmoji - –ù–æ–≤—ã–π —ç–º–æ–¥–∑–∏, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å.
     */
    function updateQuickReactions(newEmoji) {
        let currentReactions = getQuickReactions();
        
        // 1. –£–±–∏—Ä–∞–µ–º —ç—Ç–æ—Ç —ç–º–æ–¥–∑–∏ –∏–∑ —Å–ø–∏—Å–∫–∞, –µ—Å–ª–∏ –æ–Ω —Ç–∞–º —É–∂–µ –±—ã–ª, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–µ–π
        let updatedReactions = currentReactions.filter(e => e !== newEmoji);

        // 2. –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —ç–º–æ–¥–∑–∏ –≤ —Å–∞–º–æ–µ –Ω–∞—á–∞–ª–æ
        updatedReactions.unshift(newEmoji);

        // 3. –û–±—Ä–µ–∑–∞–µ–º –º–∞—Å—Å–∏–≤ –¥–æ 6 —ç–ª–µ–º–µ–Ω—Ç–æ–≤, —É–¥–∞–ª—è—è –ø–æ—Å–ª–µ–¥–Ω–∏–π
        const finalReactions = updatedReactions.slice(0, 6);

        // 4. –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ localStorage
        localStorage.setItem(QUICK_REACTIONS_KEY, JSON.stringify(finalReactions));
    }



    
    function setupEventListeners() {


        // Tab switching
        document.querySelectorAll('.tab-item').forEach(tab => {
            tab.addEventListener('click', (e) => {
                const tabId = e.currentTarget.dataset.tab;
                if (tabId && TABS[tabId]) switchTab(tabId);
            });
        });

        document.getElementById('togglePinnedBtn')?.addEventListener('click', togglePinnedModeView);
        
        // Auth tabs
        document.querySelectorAll('.auth-tab').forEach(tab => {
            tab.addEventListener('click', (e) => switchAuthTab(e.target.dataset.tab));
        });
        
        document.getElementById('loginForm')?.addEventListener('submit', handleLogin);
        document.getElementById('registerForm')?.addEventListener('submit', handleRegister);
        document.getElementById('googleSignInBtn')?.addEventListener('click', signInWithGoogle);

        if (chatInput) {
            chatInput.addEventListener('keydown', (e) => {
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ Ctrl+Enter
                if (e.key === 'Enter' && e.ctrlKey) {
                    // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏, –∫–æ—Ç–æ—Ä–æ–µ –º–æ–∂–µ—Ç –ø—Ä–æ–∏–∑–æ–π—Ç–∏
                    e.preventDefault(); 
                    // –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ—Ç–ø—Ä–∞–≤–∫–∏
                    sendMessage();
                }
                // –ï—Å–ª–∏ –Ω–∞–∂–∞—Ç –ø—Ä–æ—Å—Ç–æ Enter (–±–µ–∑ Ctrl), —Ç–æ –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º,
                // –ø–æ–∑–≤–æ–ª—è—è –±—Ä–∞—É–∑–µ—Ä—É –≤—ã–ø–æ–ª–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é - —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É.
            });
            chatInput.addEventListener('input', () => {
                chatInput.style.height = 'auto'; 
                chatInput.style.height = `${Math.min(chatInput.scrollHeight, 150)}px`; 
            });
        }
        
        document.getElementById('sendBtn')?.addEventListener('click', sendMessage);
        document.getElementById('notificationToggle')?.addEventListener('click', toggleNotifications);
        document.getElementById('emojiBtn')?.addEventListener('click', function() { showEmojiPicker(this) });
        document.getElementById('questionBtn')?.addEventListener('click', () => showModal('questionCreateModal'));
        document.getElementById('createChannelBtn')?.addEventListener('click', () => showModal('channelCreateModal'));
        // –í–Ω—É—Ç—Ä–∏ —Ñ—É–Ω–∫—Ü–∏–∏ setupEventListeners() –≤ ChatModule
        document.getElementById('uploadFileBtn')?.addEventListener('click', handleChatFileUploadTrigger);
        document.getElementById('chatFileInput')?.addEventListener('change', handleChatFileSelected);


        // –î–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª–∏–∫–∞ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –≤–∏–¥–∏–º–æ—Å—Ç–∏ –ø–∞—Ä–æ–ª—è
        document.body.addEventListener('click', function(event) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ –∫–ª–∏–∫ –∏–º–µ–Ω–Ω–æ –ø–æ –Ω–∞—à–µ–π –∏–∫–æ–Ω–∫–µ
            if (event.target.classList.contains('toggle-password')) {
                const icon = event.target;
                // –ù–∞—Ö–æ–¥–∏–º —Å–æ—Å–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç - –Ω–∞—à–µ –ø–æ–ª–µ –≤–≤–æ–¥–∞
                const passwordInput = icon.previousElementSibling;

                if (passwordInput && passwordInput.type === 'password') {
                    // –ï—Å–ª–∏ –ø–æ–ª–µ —Å–∫—Ä—ã—Ç–æ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º
                    passwordInput.type = 'text';
                    icon.textContent = 'üôà'; // –ú–µ–Ω—è–µ–º –∏–∫–æ–Ω–∫—É –Ω–∞ "–æ—Ç–∫—Ä—ã—Ç—ã–π –≥–ª–∞–∑"
                } else if (passwordInput && passwordInput.type === 'text') {
                    // –ï—Å–ª–∏ –ø–æ–ª–µ –≤–∏–¥–Ω–æ - —Å–∫—Ä—ã–≤–∞–µ–º
                    passwordInput.type = 'password';
                    icon.textContent = 'üëÅÔ∏è'; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–∫–æ–Ω–∫—É "–∑–∞–∫—Ä—ã—Ç–æ–≥–æ –≥–ª–∞–∑–∞"
                }
            }
        });









        const debouncedSearch = debounce(handleSearch, 300);
        if (searchInput) searchInput.addEventListener('input', debouncedSearch);

        

        const currentUserBtn = document.getElementById('currentUser');
        const userDropdown = document.getElementById('userDropdown');

        if (currentUserBtn && userDropdown) {
            currentUserBtn.addEventListener('click', (event) => {
                event.stopPropagation();
                userDropdown.classList.toggle('hidden');
            });
            window.addEventListener('click', () => {
                if (!userDropdown.classList.contains('hidden')) userDropdown.classList.add('hidden');
            });
            userDropdown.addEventListener('click', (event) => event.stopPropagation());
        }

        const sidebarToggleBtn = document.getElementById('sidebarToggleBtn');
        const sidebarContainer = document.getElementById('sidebarContainer');
        if (sidebarToggleBtn && sidebarContainer) {
            sidebarToggleBtn.addEventListener('click', () => sidebarContainer.classList.toggle('open'));
            sidebarContainer.addEventListener('click', (e) => {
                if (e.target === sidebarContainer) {
                    sidebarContainer.classList.remove('open');
                }
            });
            document.querySelector('.chat-sidebar').addEventListener('click', (e) => {
                 if (e.target.closest('.tab-item') || e.target.closest('.channel-item')) {
                    sidebarContainer.classList.remove('open');
                }
            });
        }
       
        console.log('Event listeners –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');

        const channelSearchInput = document.getElementById('channelSearchInput');
        if (channelSearchInput) {
            
            // –°–æ–∑–¥–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫
            const handleChannelSearch = (event) => {
                const query = event.target.value.toLowerCase().trim();
                const channels = document.querySelectorAll('#channelsList .channel-item');
                
                channels.forEach(channel => {
                    const channelName = channel.textContent.toLowerCase();
                    if (channelName.includes(query)) {
                        channel.style.display = 'flex'; // –ò—Å–ø–æ–ª—å–∑—É–µ–º flex, —Ç.–∫. —É .channel-item —Ç–∞–∫–æ–π display
                    } else {
                        channel.style.display = 'none';
                    }
                });
            };

            // –ü—Ä–∏–º–µ–Ω—è–µ–º debounce, —á—Ç–æ–±—ã –ø–æ–∏—Å–∫ –Ω–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–ª –Ω–∞ –∫–∞–∂–¥—É—é –±—É–∫–≤—É
            const debouncedChannelSearch = debounce(handleChannelSearch, 250);
            channelSearchInput.addEventListener('input', debouncedChannelSearch);

        }

        // --- –î–û–ë–ê–í–õ–ï–ù–ù–´–ô –ö–û–î ---

        // –î–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –∫–Ω–æ–ø–æ–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
        messageArea.addEventListener('click', function(event) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∞ –ª–∏ –Ω–∞–∂–∞—Ç–∞ –∏–º–µ–Ω–Ω–æ –∫–Ω–æ–ø–∫–∞ —Å –∫–ª–∞—Å—Å–æ–º 'edit-message-btn'
            const editButton = event.target.closest('.edit-message-btn');
            
            if (editButton) {
                const messageId = editButton.dataset.messageId;
                const messageText = editButton.dataset.rawText; // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ –Ω–∞—à–µ–≥–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —Å–≤–æ–π—Å—Ç–≤–∞
                
                // –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å –ø–æ–ª—É—á–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
                ChatModule.startEditMessage(messageId, messageText);
            }
        });

        
    }




    
    function setupAuthStateListener() {
        if (!auth) return;
        
        auth.onAuthStateChanged(user => {
            currentUser = user;
            updateUserUI();


            if (user) {
                console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω:', user.displayName || user.email);
                
                // –ó–ê–ì–†–£–ñ–ê–ï–ú –†–ê–ó–ë–õ–û–ö–ò–†–û–í–ê–ù–ù–´–ï –ö–ê–ù–ê–õ–´ –ò–ó –•–†–ê–ù–ò–õ–ò–©–ê
                const savedUnlocked = localStorage.getItem(`unlockedChannels_${user.uid}`);
                if (savedUnlocked) {
                    unlockedChannels = new Set(JSON.parse(savedUnlocked));
                }

                initializeUnreadListeners(); 
                setupPresenceSystem();
                fetchAllUsers();
                loadChannels();
                loadPrivateChats();
                loadTabData(currentTab);
                initializeDataListeners();
            } else {

                console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
                clearChatData();
                cleanupPresenceSystem();
            }
        });
    }

    let globalMessagesListener = null; // –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –Ω–∞—à–µ–≥–æ –Ω–æ–≤–æ–≥–æ —Å–ª—É—à–∞—Ç–µ–ª—è
    let allMessagesByChannel = new Map(); // –ö—ç—à –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π, —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ –∫–∞–Ω–∞–ª–∞–º


    function processUnreadMessage(change) {
        if (change.type === 'added') {
            const messageData = change.doc.data();
            const messageTimestamp = messageData.createdAt?.toDate();

            if (!messageTimestamp || messageTimestamp < listenerInitializationTime) {
                return; // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
            }

            const isUnread = messageData.authorId !== currentUser.uid && (currentChannel !== messageData.channelId || currentTab !== 'messages' || document.hidden);
            if (isUnread) {
                const isPrivateMessage = !messageData.memberIds.includes('public');
                const isUnlockedPublicChannel = messageData.memberIds.includes('public') && (messageData.channelId === 'general' || unlockedChannels.has(messageData.channelId));

                if (isPrivateMessage || isUnlockedPublicChannel) {
                    updateUnreadCount(messageData.channelId, 1);

                    // --- –î–û–ë–ê–í–¨–¢–ï –≠–¢–£ –°–¢–†–û–ö–£ ---
                    if (isPrivateMessage) loadPrivateChats(); // –ü–µ—Ä–µ—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∏ –æ–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –õ–°
                    // --- –ö–û–ù–ï–¶ –î–û–ë–ê–í–õ–ï–ù–ò–Ø ---
                }
            }
        }
    }


    function initializeUnreadListeners() {
        if (pmUnreadListener) pmUnreadListener();
        if (publicUnreadListener) publicUnreadListener();
        if (!currentUser) return;

        listenerInitializationTime = new Date();
        console.log("–ó–∞–ø—É—Å–∫ –¥–≤–æ–π–Ω–æ–≥–æ —Å–ª—É—à–∞—Ç–µ–ª—è –¥–ª—è —Å—á–µ—Ç—á–∏–∫–æ–≤ –≤:", listenerInitializationTime);

        // –°–õ–£–®–ê–¢–ï–õ–¨ 1: –¢–æ–ª—å–∫–æ –¥–ª—è –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        pmUnreadListener = db.collection('messages')
            .where('memberIds', 'array-contains', currentUser.uid)
            .orderBy('createdAt', 'desc')
            .limit(10)
            .onSnapshot(snapshot => {
                snapshot.docChanges().forEach(change => processUnreadMessage(change));
            }, error => console.error("–û—à–∏–±–∫–∞ —Å–ª—É—à–∞—Ç–µ–ª—è –õ–°:", error));

        // –°–õ–£–®–ê–¢–ï–õ–¨ 2: –¢–æ–ª—å–∫–æ –¥–ª—è –ø—É–±–ª–∏—á–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤
        publicUnreadListener = db.collection('messages')
            .where('memberIds', 'array-contains', 'public')
            .orderBy('createdAt', 'desc')
            .limit(10)
            .onSnapshot(snapshot => {
                snapshot.docChanges().forEach(change => processUnreadMessage(change));
            }, error => console.error("–û—à–∏–±–∫–∞ —Å–ª—É—à–∞—Ç–µ–ª—è –∫–∞–Ω–∞–ª–æ–≤:", error));
    }




    function updateUserUI() {
        if (currentUserEl) {
            const displayName = currentUser ? (currentUser.displayName || currentUser.email || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å') : '–ì–æ—Å—Ç—å';
            currentUserEl.textContent = displayName;
            console.log('UI –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–æ:', displayName);
        }
    }
    
    // ========== AUTHENTICATION ==========
    function switchAuthTab(tabType) {
        document.querySelectorAll('.auth-tab').forEach(tab => tab.classList.remove('active'));
        document.querySelector(`[data-tab="${tabType}"]`).classList.add('active');
        document.querySelectorAll('.auth-form').forEach(form => form.classList.remove('active'));
        document.getElementById(`${tabType}Form`).classList.add('active');
    }

    async function handleLogin(e) {
        e.preventDefault();
        if (!auth) { showError('–°–∏—Å—Ç–µ–º–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞'); return; }
        const loginIdentifier = document.getElementById('loginUsername').value.trim();
        const password = document.getElementById('loginPassword').value;
        if (!loginIdentifier || !password) { showError('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è'); return; }
        
        try {
            let email;
            if (loginIdentifier.includes('@')) {
                email = loginIdentifier;
            } else {
                const querySnapshot = await db.collection('users').where('username', '==', loginIdentifier).limit(1).get();
                if (querySnapshot.empty) throw { code: 'auth/user-not-found' }; 
                email = querySnapshot.docs[0].data().email;
            }
            await auth.signInWithEmailAndPassword(email, password);
            ChatModule.closeAuthModal();
            if (openChatAfterAuth) {
                openChatAfterAuth = false; // –û–ø—É—Å–∫–∞–µ–º —Ñ–ª–∞–∂–æ–∫
                ChatModule.openChatModal(); // –û—Ç–∫—Ä—ã–≤–∞–µ–º —á–∞—Ç
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞:', error);
            showError(getErrorMessage(error.code));
        }
    }
    


    async function handleRegister(e) {
        e.preventDefault();
        if (!auth) { showError('–°–∏—Å—Ç–µ–º–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞'); return; }
        const username = document.getElementById('registerUsername').value.trim();
        const email = document.getElementById('registerEmail').value.trim();
        const password = document.getElementById('registerPassword').value;
        const passwordConfirm = document.getElementById('registerPasswordConfirm').value; // <-- –ù–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞

        if (!username || !email || !password || !passwordConfirm) { // <-- –ò–∑–º–µ–Ω–µ–Ω–æ
            showError('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è'); 
            return; 
        }
        if (password.length < 6) { 
            showError('–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤'); 
            return; 
        }
        if (password !== passwordConfirm) { // <-- –ù–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
            showError('–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç!');
            return;
        }

        try {
            const userCredential = await auth.createUserWithEmailAndPassword(email, password);
            const user = userCredential.user;
            await user.updateProfile({ displayName: username });
            await db.collection('users').doc(user.uid).set({
                username: username,
                email: email,
                uid: user.uid,
                privateChatPartners: [], // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ –¥–ª—è –õ–°
                createdAt: firebase.firestore.FieldValue.serverTimestamp()
            });
            ChatModule.closeAuthModal();

            if (openChatAfterAuth) {
                openChatAfterAuth = false; // –û–ø—É—Å–∫–∞–µ–º —Ñ–ª–∞–∂–æ–∫
                ChatModule.openChatModal(); // –û—Ç–∫—Ä—ã–≤–∞–µ–º —á–∞—Ç
            }

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error);
            showError(getErrorMessage(error.code));
        }
    }



    function getErrorMessage(errorCode) {
        const errorMessages = {
            'auth/user-not-found': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω', 'auth/wrong-password': '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å',
            'auth/email-already-in-use': 'Email —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è', 'auth/weak-password': '–°–ª–∏—à–∫–æ–º —Å–ª–∞–±—ã–π –ø–∞—Ä–æ–ª—å',
            'auth/invalid-email': '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email', 'auth/too-many-requests': '–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ'
        };
        return errorMessages[errorCode] || '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑';
    }
    function showError(message) { alert(message); }
    
    // ========== TAB SWITCHING ==========
    function switchTab(tabId) {
        if (!TABS[tabId] || tabId === currentTab) return; // –ù–µ –¥–µ–ª–∞–µ–º –Ω–∏—á–µ–≥–æ, –µ—Å–ª–∏ –∫–ª–∏–∫–Ω—É–ª–∏ –Ω–∞ –∞–∫—Ç–∏–≤–Ω—É—é –≤–∫–ª–∞–¥–∫—É

        // --- –ù–û–í–´–ô –ë–õ–û–ö –û–ß–ò–°–¢–ö–ò ---
        // –ü–µ—Ä–µ–¥ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ–º, –æ—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è –æ—Ç —Å–ª—É—à–∞—Ç–µ–ª—è –°–¢–ê–†–û–ô –≤–∫–ª–∞–¥–∫–∏
        if (currentTab === 'questions' && questionsListener) {
            questionsListener(); // –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Ç–ø–∏—Å–∫–∏
            questionsListener = null; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
        }
        if (currentTab === 'favorites' && favoritesListener) {
            favoritesListener(); // –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Ç–ø–∏—Å–∫–∏
            favoritesListener = null; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
        }
        // --- –ö–û–ù–ï–¶ –ù–û–í–û–ì–û –ë–õ–û–ö–ê ---

        currentTab = tabId;

        // –ï—Å–ª–∏ –º—ã –ø–µ—Ä–µ–∫–ª—é—á–∏–ª–∏—Å—å –Ω–∞ –≤–∫–ª–∞–¥–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –¥–ª—è –¢–ï–ö–£–©–ï–ì–û –∫–∞–Ω–∞–ª–∞
        if (tabId === 'messages') {
            updateUnreadCount(currentChannel, 0, true); // <-- –°–ë–†–ê–°–´–í–ê–ï–ú –°–ß–ï–¢–ß–ò–ö –ó–î–ï–°–¨
        }

        document.querySelectorAll('.tab-item').forEach(tab => tab.classList.remove('active'));
        document.querySelector(`[data-tab="${tabId}"]`).classList.add('active');
        document.getElementById('chatHeaderTitle').textContent = _chat(TABS[tabId].langKey);
        loadTabData(tabId);
    }
    
    // === –ò–ó–ú–ï–ù–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –ó–ê–ì–†–£–ó–ö–ò –í–ö–õ–ê–î–û–ö ===
    function loadTabData(tabId) {
        if (!currentUser || !db) return;
        
        const tabActionsContainer = document.getElementById('tabActionsContainer');
        tabActionsContainer.innerHTML = ''; 
        tabActionsContainer.classList.add('hidden');
    
        messageArea.classList.remove('user-list-mode');
        document.querySelector('.chat-input-area').style.display = 'flex';
    
        switch (tabId) {
            case 'messages':
                loadMessages();
                break;
            case 'questions':
                setupTabActions('questions'); // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏
                loadQuestions();
                break;
            case 'favorites':
                setupTabActions('favorites'); // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏
                loadFavorites();
                break;
            case 'users':
                loadUsers();
                break;
        }
    }
    
    // ========== DATA LOADING & DISPLAY ==========

    async function fetchAllUsers() {
        try {
            const snapshot = await db.collection('users').get();
            snapshot.forEach(doc => {
                allUsers.set(doc.id, doc.data());
            });
            updateTabCounter('users', allUsers.size); // <--- –î–û–ë–ê–í–¨–¢–ï –≠–¢–£ –°–¢–†–û–ö–£
            console.log(`–ó–∞–≥—Ä—É–∂–µ–Ω–æ ${allUsers.size} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.`);
        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:", error);
        }
    }

    
    function loadUsers() {
        if (!messageArea) return;
        messageArea.innerHTML = '';
        messageArea.classList.add('user-list-mode');
        document.querySelector('.chat-input-area').style.display = 'none';

        if (allUsers.size === 0) {
            messageArea.innerHTML = '<div class="empty-state">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.</div>';
            return;
        }

        const userListEl = document.createElement('div');
        userListEl.className = 'user-list-container';
        
        allUsers.forEach(user => {
            if (user.uid === currentUser.uid) return; // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å–µ–±—è –≤ —Å–ø–∏—Å–∫–µ
            const isOnline = onlineUsers.has(user.uid);
            
            const userEl = document.createElement('div');
            userEl.className = 'user-list-item';
            // –û–°–ù–û–í–ù–û–ô –ö–õ–ò–ö –ü–û –ö–ê–†–¢–û–ß–ö–ï –ø–æ-–ø—Ä–µ–∂–Ω–µ–º—É –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
            userEl.onclick = () => showUserActions(user.uid, user.username, user.email);
            
            // --- –ò–ó–ú–ï–ù–ï–ù–ò–Ø –ó–î–ï–°–¨ ---
            // –¢–µ–ø–µ—Ä—å —É –∫–Ω–æ–ø–æ–∫ –µ—Å—Ç—å —Å–≤–æ–∏ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ onclick, –∫–æ—Ç–æ—Ä—ã–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é—Ç "–≤—Å–ø–ª—ã—Ç–∏–µ" —Å–æ–±—ã—Ç–∏—è
            userEl.innerHTML = `
                <div class="user-list-avatar">
                    <span class="status-indicator ${isOnline ? 'online' : ''}"></span>
                    ${escapeHTML(user.username.charAt(0).toUpperCase())}
                </div>
                <div class="user-list-info">
                    <div class="username">${escapeHTML(user.username)}</div>
                    <div class="email">${escapeHTML(user.email)}</div>
                </div>
                <div class="user-list-actions">
                    <button class="action-btn chat" title="–ù–∞–ø–∏—Å–∞—Ç—å –≤ —á–∞—Ç–µ" onclick="event.stopPropagation(); ChatModule.startPrivateChat('${user.uid}', '${escapeHTML(user.username)}')">üí¨</button>
                    <button class="action-btn mail" title="–ù–∞–ø–∏—Å–∞—Ç—å –Ω–∞ Email" onclick="event.stopPropagation(); window.location.href='mailto:${user.email}'">‚úâÔ∏è</button>
                </div>
            `;
            userListEl.appendChild(userEl);
        });

        messageArea.appendChild(userListEl);
        updateTabCounter('users', allUsers.size);
    }

    /**
     * –£–ø—Ä–∞–≤–ª—è–µ—Ç —Å—á–µ—Ç—á–∏–∫–∞–º–∏ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.
     * @param {string} channelId - ID –∫–∞–Ω–∞–ª–∞, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –º–µ–Ω—è–µ—Ç—Å—è —Å—á–µ—Ç—á–∏–∫.
     * @param {number} change - –ò–∑–º–µ–Ω–µ–Ω–∏–µ (+1, 0 –¥–ª—è —Å–±—Ä–æ—Å–∞).
     */
    function updateUnreadCount(channelId, change) {
        const currentCount = unreadCounts.get(channelId) || 0;
        // –ï—Å–ª–∏ change = 0, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫. –ò–Ω–∞—á–µ - —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º.
        const newCount = change === 0 ? 0 : currentCount + change;
        unreadCounts.set(channelId, newCount);

        // –û–±–Ω–æ–≤–ª—è–µ–º UI –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞
        const channelCounter = document.querySelector(`.channel-item[data-channel-id="${channelId}"] .unread-channel-badge`);
        if (channelCounter) {
            if (newCount > 0) {
                channelCounter.textContent = newCount;
                channelCounter.classList.remove('hidden');
            } else {
                channelCounter.classList.add('hidden');
            }
        }

        // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–∏–π —Å—á–µ—Ç—á–∏–∫ –Ω–∞ –≤–∫–ª–∞–¥–∫–µ "–°–æ–æ–±—â–µ–Ω–∏—è"
        let totalUnread = 0;
        unreadCounts.forEach(count => totalUnread += count);
        updateTabCounter('messages', totalUnread);
    }


    function loadMessages() {
        if (!db || !currentUser) return;

        // –û—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è –æ—Ç —Å—Ç–∞—Ä–æ–≥–æ —Å–ª—É—à–∞—Ç–µ–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π, –µ—Å–ª–∏ –æ–Ω –±—ã–ª
        if (messagesListener) {
            messagesListener();
        }

        messageArea.innerHTML = `<div class="empty-state">${_chat('loading_messages')}</div>`;

        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Å–ª—É—à–∞—Ç–µ–ª—å –¢–û–õ–¨–ö–û –î–õ–Ø –¢–ï–ö–£–©–ï–ì–û –ö–ê–ù–ê–õ–ê
        messagesListener = db.collection('messages')
            .where('channelId', '==', currentChannel)
            .orderBy('createdAt', 'asc')
            .onSnapshot(snapshot => {
                // –≠—Ç–æ—Ç –∫–æ–¥ –±—É–¥–µ—Ç –ø–æ–ª—É—á–∞—Ç—å –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è (–Ω–æ–≤—ã–µ, –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–µ, —É–¥–∞–ª–µ–Ω–Ω—ã–µ)
                // –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —á–∞—Ç–∞ –∏ –º–≥–Ω–æ–≤–µ–Ω–Ω–æ –∏—Ö –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å.
                
                allMessages = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
                displayMessages(); // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º —á–∞—Ç —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏

            }, error => {
                console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π:', error);
                messageArea.innerHTML = `<div class="empty-state">${_chat('loading_error')}</div>`;
            });
    }




 
    function updateUnreadCount(channelId, change, isReset = false) {
        const currentCount = unreadCounts.get(channelId) || 0;
        // –ï—Å–ª–∏ isReset = true, –æ–±–Ω—É–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫. –ò–Ω–∞—á–µ - —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º.
        const newCount = isReset ? 0 : currentCount + change;
        unreadCounts.set(channelId, newCount);

        // –û–±–Ω–æ–≤–ª—è–µ–º UI –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞
        const channelCounter = document.querySelector(`.channel-item[data-channel-id="${channelId}"] .unread-channel-badge`);
        if (channelCounter) {
            if (newCount > 0) {
                channelCounter.textContent = newCount;
                channelCounter.classList.remove('hidden');
            } else {
                channelCounter.classList.add('hidden');
            }
        }

        // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–∏–π —Å—á–µ—Ç—á–∏–∫ –Ω–∞ –≤–∫–ª–∞–¥–∫–µ "–°–æ–æ–±—â–µ–Ω–∏—è"
        let totalUnread = 0;
        unreadCounts.forEach(count => totalUnread += count);
        updateTabCounter('messages', totalUnread);
    }




    function displayMessages() {
        if (!messageArea) return;
        messageArea.innerHTML = '';
        const messagesToDisplay = isPinnedMode ? allMessages.filter(msg => msg.isPinned) : allMessages;

        if (messagesToDisplay.length === 0) {
            // ...
            return;
        }
        messagesToDisplay.forEach(message => messageArea.appendChild(createMessageElement(message)));
        
        // --- –ù–û–í–´–ô –ö–û–î –î–õ–Ø –ú–ì–ù–û–í–ï–ù–ù–û–ô –ü–†–û–ö–†–£–¢–ö–ò ---
        // 1. –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º –ø–ª–∞–≤–Ω—É—é –∞–Ω–∏–º–∞—Ü–∏—é
        messageArea.style.scrollBehavior = 'auto';
        // 2. –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ –ø—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –≤–Ω–∏–∑
        scrollToBottom();
        // 3. –° –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–ª–∞–≤–Ω—É—é –ø—Ä–æ–∫—Ä—É—Ç–∫—É –¥–ª—è –±—É–¥—É—â–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
        setTimeout(() => {
            messageArea.style.scrollBehavior = 'smooth';
        }, 100);
        // --- –ö–û–ù–ï–¶ –ù–û–í–û–ì–û –ö–û–î–ê ---
    } 

    
    function loadQuestions() {
        if (!db || !currentUser) return;
        
        // –û—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è –æ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–ª—É—à–∞—Ç–µ–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤, –µ—Å–ª–∏ –æ–Ω –±—ã–ª
        if (questionsListener) {
            questionsListener();
        }

        try {
            // –ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –Ω–æ–≤–æ–≥–æ —Å–ª—É—à–∞—Ç–µ–ª—è –Ω–∞—à–µ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
            questionsListener = db.collection('questions')
                .where('channelId', '==', currentChannel)
                .orderBy('createdAt', 'desc')
                .limit(20)
                .onSnapshot(snapshot => {
                    const questions = [];
                    snapshot.forEach(doc => {
                        questions.push({ id: doc.id, ...doc.data() });
                    });
                    
                    displayQuestions(questions);

                    // –ü–†–û–í–ï–†–Ø–ï–ú, –ù–£–ñ–ù–û –õ–ò –ü–û–î–°–í–ï–¢–ò–¢–¨ –í–û–ü–†–û–°
                    if (questionToHighlight) {
                        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É, —á—Ç–æ–±—ã DOM —É—Å–ø–µ–ª –æ–±–Ω–æ–≤–∏—Ç—å—Å—è
                        setTimeout(() => {
                            highlightAndScrollToQuestion(questionToHighlight);
                            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é, —á—Ç–æ–±—ã –Ω–µ –ø–æ–¥—Å–≤–µ—á–∏–≤–∞—Ç—å —Å–Ω–æ–≤–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —á–∞—Ç–∞
                            questionToHighlight = null; 
                        }, 100);
                    }

                }, error => {
                    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–æ–ø—Ä–æ—Å–æ–≤:', error);
                });
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –∫–æ–ª–ª–µ–∫—Ü–∏–µ–π –≤–æ–ø—Ä–æ—Å–æ–≤:', error);
        }
    }


    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –µ–µ –¥–∞–≤–Ω–æ—Å—Ç–∏.
     * @param {firebase.firestore.Timestamp} fbTimestamp - –í—Ä–µ–º–µ–Ω–Ω–∞—è –º–µ—Ç–∫–∞ –∏–∑ Firebase.
     * @returns {string} - –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ (–Ω–∞–ø—Ä., "14:30", "–í—á–µ—Ä–∞, 14:30").
     */
    function formatSmartTimestamp(fbTimestamp) {
        if (!fbTimestamp || typeof fbTimestamp.toDate !== 'function') {
            return ''; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ—Ç—É, –µ—Å–ª–∏ –º–µ—Ç–∫–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞
        }
        
        const now = new Date();
        const msgDate = fbTimestamp.toDate();

        const timeString = msgDate.toLocaleTimeString('ru-RU', {
            hour: '2-digit',
            minute: '2-digit'
        });

        // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–æ –¥–∞—Ç–µ, –±–µ–∑ –≤—Ä–µ–º–µ–Ω–∏
        const isToday = now.toDateString() === msgDate.toDateString();
        
        const yesterday = new Date();
        yesterday.setDate(now.getDate() - 1);
        const isYesterday = yesterday.toDateString() === msgDate.toDateString();

        const isThisYear = now.getFullYear() === msgDate.getFullYear();

        if (isToday) {
            return timeString;
        } else if (isYesterday) {
            return `–í—á–µ—Ä–∞, ${timeString}`;
        } else if (isThisYear) {
            const datePart = msgDate.toLocaleDateString('ru-RU', {
                month: 'long',
                day: 'numeric'
            });
            return `${datePart}, ${timeString}`;
        } else {
            const fullDatePart = msgDate.toLocaleDateString('ru-RU', {
                year: 'numeric',
                month: 'long',
                day: 'numeric'
            });
            return `${fullDatePart}, ${timeString}`;
        }
    }


    function createMessageElement(message) {
        const messageEl = document.createElement('div');
        const timestamp = message.createdAt;

        const displayTime = formatSmartTimestamp(timestamp);

        const fullTimeTitle = timestamp?.toDate()?.toLocaleString(currentChatLang, {
            year: 'numeric',
            month: 'long',
            day: 'numeric',
            hour: '2-digit',
            minute: '2-digit'
        }) || '';
        messageEl.id = `message-${message.id}`;
        messageEl.className = `message ${message.authorId === currentUser?.uid ? 'mine' : 'other'}`;
        if (message.isPinned) messageEl.classList.add('pinned');
        let replyHTML = '';
        if (message.replyTo) {
            replyHTML = `<div class="reply-context" onclick="ChatModule.scrollToMessage('${message.replyTo.messageId}')"><div class="reply-author">${escapeHTML(message.replyTo.authorName || '')}</div><div class="reply-text">${escapeHTML(message.replyTo.textSnippet || '')}</div></div>`;
        }

        let contentHTML = '';
        if (message.type === 'file_share') {
        messageEl.classList.add('file-share-bubble');
        const qCount = message.fileInfo.questions;
        const qText = qCount === 1 ? _chat('file_share_question_1') : (qCount >= 2 && qCount <= 4 ? _chat('file_share_question_2_4') : _chat('file_share_question_5_more'));
        
        // --- –ù–ê–ß–ê–õ–û –ù–û–í–û–ì–û –ö–û–î–ê ---
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—É—â–∏–π –∫–∞–Ω–∞–ª —Ç–µ—Å—Ç–æ–≤—ã–º
        const currentChannelData = channels.find(c => c.id === currentChannel);
        const isTestingChannel = currentChannelData && currentChannelData.isForTesting;

        let resultsButtonHTML = '';

        if (isTestingChannel) {
            resultsButtonHTML = `
                <div class="test-results-action">
                    <button class="results-btn" onclick="ChatModule.showTestResults('${message.fileInfo.id}', '${message.channelId}')">
                        ${_chat('results_button')}
                    </button>
                </div>
            `;
        }

        contentHTML = `
        <div class="file-share-content" onclick="ChatModule.showFileActionsModal('${message.fileInfo.id}', '${escape(message.fileInfo.name)}', ${isTestingChannel})">
            <div class="file-share-icon">üìÑ</div>
            <div class="file-share-details">
                <div class="file-share-name">${escapeHTML(message.fileInfo.name)}</div>
                <div class="file-share-info">${qCount} ${qText}</div>
            </div>
            <div class="file-share-arrow">‚Üí</div>
        </div>
        ${resultsButtonHTML}`; // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤

        } else if (message.type === 'question_link') {
            messageEl.classList.add('question-link-bubble');
            contentHTML = `<div class="question-link-content" onclick="ChatModule.navigateToQuestion('${message.questionId}', '${message.id}')"><span class="question-link-icon">‚ùì</span><div class="question-link-text"><strong>${_chat('new_question_notification')}</strong><p>${escapeHTML(message.text.substring(0, 80))}...</p></div><span class="question-link-arrow">‚Üí</span></div>`;
        } else {
            const editedIndicator = message.editedAt ? `<span class="edited-indicator">(–∏–∑–º.)</span>` : '';
            const pinnedIcon = message.isPinned ? '<span class="pinned-icon" title="–ó–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ">üìå</span>' : '';
            contentHTML = `<div class="message-content">${pinnedIcon} ${escapeHTML(message.text || '')} ${editedIndicator}</div>`;
        }
        let reactionsHTML = '<div class="reactions-container">';
        if (message.reactions) {
            Object.entries(message.reactions).forEach(([emoji, userIds]) => {
                if (userIds && userIds.length > 0) {
                    const isReactedByMe = userIds.includes(currentUser.uid);
                    reactionsHTML += `<button class="reaction-badge ${isReactedByMe ? 'mine' : ''}" onclick="ChatModule.toggleReaction('${message.id}', '${emoji}')">${emoji} ${userIds.length}</button>`;
                }
            });
        }
        reactionsHTML += '</div>';
        let actionsHTML = `
            <button title="–û—Ç–≤–µ—Ç–∏—Ç—å" onclick="ChatModule.startReply('${message.id}', '${escape(message.authorName)}', '${escape(message.text)}')">‚Ü©Ô∏è</button>
            <button title="–î–æ–±–∞–≤–∏—Ç—å —Ä–µ–∞–∫—Ü–∏—é" onclick="ChatModule.showReactionPicker('${message.id}', this)">üòä</button>
            <button title="${message.isPinned ? '–û—Ç–∫—Ä–µ–ø–∏—Ç—å' : '–ó–∞–∫—Ä–µ–ø–∏—Ç—å'}" onclick="ChatModule.togglePinMessage('${message.id}')">üìå</button>
        `;

        if (message.authorId === currentUser?.uid && message.type !== 'question_link') {
            actionsHTML += `<button class="edit-message-btn" title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å" data-message-id="${message.id}">‚úèÔ∏è</button>`;
            actionsHTML += `<button title="–£–¥–∞–ª–∏—Ç—å" onclick="ChatModule.deleteMessage('${message.id}')">üóëÔ∏è</button>`;
        }
        
        messageEl.innerHTML = `<div class="message-header"><span class="author">${message.authorName || _chat('anonymous_user')}</span><span class="timestamp" title="${fullTimeTitle}">${displayTime}</span></div>${replyHTML}${contentHTML}${reactionsHTML}<div class="message-actions-toolbar">${actionsHTML}</div>`;
        
        const MAX_HEIGHT = 250; // –í—ã—Å–æ—Ç–∞ –≤ –ø–∏–∫—Å–µ–ª—è—Ö, –ø–æ—Å–ª–µ –∫–æ—Ç–æ—Ä–æ–π —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–≤–æ—Ä–∞—á–∏–≤–∞–µ—Ç—Å—è
        const contentEl = messageEl.querySelector('.message-content');

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ –¥–∞–µ–º –±—Ä–∞—É–∑–µ—Ä—É –º–≥–Ω–æ–≤–µ–Ω–∏–µ –Ω–∞ —Ä–∞—Å—á–µ—Ç –≤—ã—Å–æ—Ç—ã
        if (contentEl) {
            // –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ setTimeout(..., 0) - —ç—Ç–æ –Ω–∞–¥–µ–∂–Ω—ã–π —Å–ø–æ—Å–æ–± —É–±–µ–¥–∏—Ç—å—Å—è,
            // —á—Ç–æ –±—Ä–∞—É–∑–µ—Ä —É—Å–ø–µ–ª –æ—Ç—Ä–∏—Å–æ–≤–∞—Ç—å —ç–ª–µ–º–µ–Ω—Ç –∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –µ–≥–æ scrollHeight.
            setTimeout(() => {
                if (contentEl.scrollHeight > MAX_HEIGHT) {
                    contentEl.classList.add('collapsible');

                    const expandBtn = document.createElement('button');
                    expandBtn.className = 'expand-message-btn';
                    expandBtn.textContent = _chat('expand_message');

                    expandBtn.onclick = function() {
                        const isExpanded = contentEl.classList.toggle('expanded');
                        // –ú–µ–Ω—è–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è
                        this.textContent = isExpanded ? _chat('collapse_message') : _chat('expand_message');
                    };

                    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø–æ—Å–ª–µ –±–ª–æ–∫–∞ —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º, –≤–Ω—É—Ç—Ä–∏ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
                    messageEl.appendChild(expandBtn);
                }
            }, 0); 
        }

        // –ù–∞—Ö–æ–¥–∏–º —Ç–æ–ª—å–∫–æ —á—Ç–æ —Å–æ–∑–¥–∞–Ω–Ω—É—é –∫–Ω–æ–ø–∫—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–Ω—É—Ç—Ä–∏ —ç–ª–µ–º–µ–Ω—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        const editBtn = messageEl.querySelector('.edit-message-btn');
        if (editBtn) {
            // –≠—Ç–æ —Å–∞–º—ã–π –Ω–∞–¥–µ–∂–Ω—ã–π —Å–ø–æ—Å–æ–± –ø–µ—Ä–µ–¥–∞—Ç—å —Ç–µ–∫—Å—Ç:
            // –º—ã –ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –µ–≥–æ —Å–≤–æ–π—Å—Ç–≤—É DOM-—ç–ª–µ–º–µ–Ω—Ç–∞, –∞ –Ω–µ –≤ HTML-–∞—Ç—Ä–∏–±—É—Ç.
            // –≠—Ç–æ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–µ—à–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—É —Å –ª–∏–º–∏—Ç–∞–º–∏ –∏ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º.
            editBtn.dataset.rawText = message.text; 
        }

        return messageEl;
    }




    // --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª–µ–º ---
    function showProfileModal() {
        if (!currentUser) return;
        document.getElementById('profileDisplayName').value = currentUser.displayName || '';
        document.getElementById('profileEmail').value = currentUser.email || '';
        document.getElementById('profileNewPassword').value = ''; // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –ø–∞—Ä–æ–ª—è
        showModal('profileEditModal');
    }

    async function saveProfile() {
        if (!currentUser) return;

        const newName = document.getElementById('profileDisplayName').value.trim();
        const newPassword = document.getElementById('profileNewPassword').value;

        try {
            const updatePromises = [];

            // –û–±–Ω–æ–≤–ª—è–µ–º –∏–º—è, –µ—Å–ª–∏ –æ–Ω–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
            if (newName && newName !== currentUser.displayName) {
                updatePromises.push(currentUser.updateProfile({ displayName: newName }));
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä–æ–ª—å, –µ—Å–ª–∏ –æ–Ω –≤–≤–µ–¥–µ–Ω
            if (newPassword) {
                if (newPassword.length < 6) {
                    showError("–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤.");
                    return;
                }
                updatePromises.push(currentUser.updatePassword(newPassword));
            }

            await Promise.all(updatePromises);
            alert("–ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!");
            updateUserUI(); // –û–±–Ω–æ–≤–ª—è–µ–º –∏–º—è –≤ —à–∞–ø–∫–µ
            closeModal('profileEditModal');

        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è:", error);
            showError("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å. " + getErrorMessage(error.code));
        }
    }

    async function logout() {
        try {
            await auth.signOut();
            ChatModule.closeChatModal(); 
        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞:", error);
        }
    }



    /**
     * –ü–ª–∞–≤–Ω–æ –ø—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ—Ç –∫ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –≤–æ–ø—Ä–æ—Å—É –∏ –ø–æ–¥—Å–≤–µ—á–∏–≤–∞–µ—Ç –µ–≥–æ.
     * @param {string} questionId ID –≤–æ–ø—Ä–æ—Å–∞ –¥–ª—è –ø–æ–¥—Å–≤–µ—Ç–∫–∏.
     */
    function highlightAndScrollToQuestion(questionId) {
        const element = document.getElementById(`question-${questionId}`);
        if (element) {
            // –ü–ª–∞–≤–Ω–æ –ø—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ —ç–ª–µ–º–µ–Ω—Ç—É, —á—Ç–æ–±—ã –æ–Ω –æ–∫–∞–∑–∞–ª—Å—è –ø–æ —Ü–µ–Ω—Ç—Ä—É —ç–∫—Ä–∞–Ω–∞
            element.scrollIntoView({ behavior: 'smooth', block: 'center' });

            // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ –ø–æ–¥—Å–≤–µ—Ç–∫–∏
            element.classList.add('highlighted');

            // –£–±–∏—Ä–∞–µ–º –ø–æ–¥—Å–≤–µ—Ç–∫—É —á–µ—Ä–µ–∑ 2.5 —Å–µ–∫—É–Ω–¥—ã
            setTimeout(() => {
                element.classList.remove('highlighted');
            }, 2500);
        }
    }


    function scrollToMessage(messageId) {
        const element = document.getElementById(`message-${messageId}`);
        if (element) {
            // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ —ç–ª–µ–º–µ–Ω—Ç—É
            element.scrollIntoView({ behavior: 'smooth', block: 'center' });

            // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å –¥–ª—è –ø–æ–¥—Å–≤–µ—Ç–∫–∏
            element.classList.add('highlighted');

            // –£–±–∏—Ä–∞–µ–º –ø–æ–¥—Å–≤–µ—Ç–∫—É —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
            setTimeout(() => {
                element.classList.remove('highlighted');
            }, 2000);
        } else {
            console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∏:', messageId);
        }
    }

    // –ù–û–í–ê–Ø, –ù–ê–î–ï–ñ–ù–ê–Ø –í–ï–†–°–ò–Ø
    function escape(str) {
        if (!str) return '';
        return str
            .replace(/\\/g, '\\\\')  // 1. –°–Ω–∞—á–∞–ª–∞ —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–∞–º–∏ —Å–ª–µ—à–∏
            .replace(/'/g, "\\'")   // 2. –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –æ–¥–∏–Ω–∞—Ä–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏
            .replace(/"/g, '\\"')   // 3. –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –¥–≤–æ–π–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏ (–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π)
            .replace(/\n/g, '\\n')  // 4. –ó–∞–º–µ–Ω—è–µ–º –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫ –Ω–∞ –∏—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã–π —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç
            .replace(/\r/g, '\\r'); // 5. –¢–æ –∂–µ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫–∞—Ä–µ—Ç–∫–∏
    }





    async function navigateToQuestion(questionId, linkMessageId = null) {
        if (!db) return;

        try {
            const questionRef = db.collection('questions').doc(questionId);
            const doc = await questionRef.get();

            if (doc.exists) {
                // 1. –ó–ê–ü–û–ú–ò–ù–ê–ï–ú, –ö–ê–ö–û–ô –í–û–ü–†–û–° –ù–£–ñ–ù–û –í–´–î–ï–õ–ò–¢–¨
                questionToHighlight = questionId;

                // 2. –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –≤–∫–ª–∞–¥–∫—É "–í–æ–ø—Ä–æ—Å—ã"
                switchTab('questions');

                // –°–∞–º–∞ –ª–æ–≥–∏–∫–∞ –ø–æ–¥—Å–≤–µ—Ç–∫–∏ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–æ–ø—Ä–æ—Å–æ–≤
                console.log(`–ü–µ—Ä–µ—Ö–æ–¥ –∫ –≤–æ–ø—Ä–æ—Å—É: ${questionId}`);

            } else {
                // –≠—Ç–æ—Ç –±–ª–æ–∫ –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
                alert('–≠—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å –±—ã–ª —É–¥–∞–ª–µ–Ω.');
                if (linkMessageId) {
                    await db.collection('messages').doc(linkMessageId).delete();
                }
            }
        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –∫ –≤–æ–ø—Ä–æ—Å—É:", error);
            showError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –≤–æ–ø—Ä–æ—Å–∞.");
        }
    }
    




    function displayQuestions(questions) {
        if (!messageArea) return;
        
        messageArea.innerHTML = '';
        
        if (questions.length === 0) {
            messageArea.innerHTML = '<div class="empty-state">–í–æ–ø—Ä–æ—Å–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç</div>';
            return;
        }
        
        questions.forEach(question => {
            const questionEl = createQuestionElement(question);

            // === –ù–ê–ß–ê–õ–û –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –î–õ–Ø –ö–ù–û–ü–ö–ò "–í –ò–ó–ë–†–ê–ù–ù–û–ï" ===
            const favButton = questionEl.querySelector('.add-to-favorites-btn');
            if (favButton) {
                // –°–æ–∑–¥–∞–µ–º —á–∏—Å—Ç—ã–π –æ–±—ä–µ–∫—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –≤–æ–ø—Ä–æ—Å–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
                const itemToSave = {
                    text: question.text,
                    options: question.options
                    // –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∏ –¥—Ä—É–≥–∏–µ –ø–æ–ª—è, –Ω–∞–ø—Ä–∏–º–µ—Ä, question.id
                };
                
                // –ù–∞–∑–Ω–∞—á–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞, –∫–æ—Ç–æ—Ä—ã–π –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –æ–±—ä–µ–∫—Ç –≤—ã—à–µ
                favButton.onclick = () => ChatModule.addToFavorites(itemToSave, 'question');
            }

                        const copyBtn = questionEl.querySelector('.copy-question-btn');
            if (copyBtn) {
                // –ù–∞–∑–Ω–∞—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫, –ø–µ—Ä–µ–¥–∞–≤–∞—è –≤–µ—Å—å –æ–±—ä–µ–∫—Ç –≤–æ–ø—Ä–æ—Å–∞
                copyBtn.onclick = () => ChatModule.copyQuestionAsQst(question);
            }
            // === –ö–û–ù–ï–¶ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø ===

            messageArea.appendChild(questionEl);
        });
    }



    function createQuestionElement(question) {
        const questionEl = document.createElement('div');
        questionEl.className = 'question-bubble';
        questionEl.id = `question-${question.id}`; 

        const timestamp = question.createdAt?.toDate?.() || new Date();
        const timeStr = timestamp.toLocaleString('ru-RU');

        if (question.options && Array.isArray(question.options)) {
            
            const hasCorrectAnswer = question.options.some(opt => opt.isCorrect);

            const optionsHTML = question.options.map((option, index) => {
                const votes = Array.isArray(option.votedBy) ? option.votedBy.length : 0;
                let buttonClass = 'option-vote-btn';

                if (hasCorrectAnswer && option.isCorrect) {
                    buttonClass += ' correct';
                }
                if (currentUser && Array.isArray(option.votedBy) && option.votedBy.includes(currentUser.uid)) {
                    buttonClass += ' voted-by-user';
                }

                // –í–∞–∂–Ω–æ: –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å—Ç–∞–≤–∏–º –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∑–∞ –û–†–ò–ì–ò–ù–ê–õ
                return `
                    <button class="${buttonClass}" onclick="ChatModule.voteForOption('${question.id}', ${index})">
                        <span class="option-text">${escapeHTML(option.text)}</span>
                        <span class="option-votes-badge">${votes}</span>
                    </button>
                `;
            }).join('');

            const totalVotes = question.options.reduce((sum, opt) => sum + (Array.isArray(opt.votedBy) ? opt.votedBy.length : 0), 0);
            
            let actionsHTML = `
                <button class="add-to-favorites-btn">${_chat('add_to_favorites_button')}</button>
                <button class="copy-question-btn">${_chat('copy_question_button')}</button> 
            `;

            if (currentUser && question.authorId === currentUser?.uid) {
                actionsHTML += `<button class="delete-question-btn" onclick="ChatModule.deleteQuestion('${question.id}')">${_chat('delete_question_button')}</button>`;
            }

            questionEl.innerHTML = `
                <div style="display: flex; align-items: flex-start; gap: 15px;">
                    <div class="question-square ${totalVotes > 0 ? 'has-votes' : ''}">
                        ${totalVotes > 0 ? `<span class="vote-indicator">${totalVotes}</span>` : ''}Q</div>
                    <div class="question-content">
                        <p><strong>${_chat('question_card_question_label')}</strong> ${escapeHTML(question.text || '')}</p>
                        <p><strong>${_chat('question_card_author_label')}</strong> ${escapeHTML(question.authorName || _chat('question_card_anonymous'))}</p>
                        <p><strong>${_chat('question_card_date_label')}</strong> ${timeStr}</p>
                        <div class="question-options-container">${optionsHTML}</div>
                        <div class="question-actions">${actionsHTML}</div>
                    </div>
                </div>`;

        } else if (question.text) {
            // ... (—Å—Ç–∞—Ä—ã–π –∫–æ–¥ –¥–ª—è —Å—Ç–∞—Ä–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ –≤–æ–ø—Ä–æ—Å–æ–≤) ...
        } else {
            return document.createDocumentFragment();
        }
        return questionEl;
    }



    function loadFavorites() {
        if (!currentUser || !db) return;

        // 1. –û—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è –æ—Ç —Å—Ç–∞—Ä–æ–≥–æ —Å–ª—É—à–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω –±—ã–ª
        if (favoritesListener) {
            favoritesListener();
        }

        messageArea.innerHTML = '<div class="empty-state">–ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ...</div>';

        // 2. –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–π —Å–ª—É—à–∞—Ç–µ–ª—å –¥–ª—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        favoritesListener = db.collection('favorites')
            .where('userId', '==', currentUser.uid)
            .orderBy('createdAt', 'desc')
            .onSnapshot(snapshot => {
                const favoriteItems = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
                
                if (favoriteItems.length === 0) {
                    messageArea.innerHTML = '<div class="empty-state">–í –∏–∑–±—Ä–∞–Ω–Ω–æ–º –ø–æ–∫–∞ –Ω–∏—á–µ–≥–æ –Ω–µ—Ç</div>';
                    return;
                }

                messageArea.innerHTML = '';
                
                favoriteItems.forEach(favoriteInfo => {
                    if (favoriteInfo.content) {
                        let renderedElement;
                        const contentData = { id: favoriteInfo.id, ...favoriteInfo.content };

                        if (favoriteInfo.type === 'question') {
                            renderedElement = createQuestionElement(contentData);
                            
                            const voteButtons = renderedElement.querySelectorAll('.option-vote-btn');
                            voteButtons.forEach((btn, index) => {
                                btn.setAttribute('onclick', `ChatModule.voteForFavoriteOption('${favoriteInfo.id}', ${index})`);
                            });
                            
                            const addToFavBtn = renderedElement.querySelector('.add-to-favorites-btn');
                            if (addToFavBtn) addToFavBtn.remove();



                            const copyBtn = renderedElement.querySelector('.copy-question-btn');
                            if (copyBtn) {
                                copyBtn.onclick = () => ChatModule.copyQuestionAsQst(contentData);
                            }

                        } else {
                            renderedElement = createMessageElement(contentData);
                        }
                        
                        const deleteButton = document.createElement('button');
                        deleteButton.className = 'remove-favorite';
                        deleteButton.innerHTML = 'üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ';
                        deleteButton.onclick = () => ChatModule.removeFromFavorites(favoriteInfo.id);

                        const actionsContainer = renderedElement.querySelector('.question-actions, .message-actions-toolbar');
                        if (actionsContainer) {
                            actionsContainer.appendChild(deleteButton);
                        } else {
                            const newActionsContainer = document.createElement('div');
                            newActionsContainer.className = 'favorite-actions';
                            newActionsContainer.appendChild(deleteButton);
                            renderedElement.appendChild(newActionsContainer);
                        }
                        messageArea.appendChild(renderedElement);
                    }
                });

            }, error => {
                console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ:', error);
                messageArea.innerHTML = '<div class="empty-state">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ</div>';
            });
    }


    function updateTabCounter(tabId, count) {
        if (tabCounters[tabId]) {
            tabCounters[tabId].textContent = count;
        }
    }

    function showUserActions(targetId, targetName, targetEmail) {
        if (targetId === currentUser.uid) return;
        
        document.getElementById('userActionsModalTitle').textContent = targetName;
        document.getElementById('userActionsModalText').textContent = `–î–µ–π—Å—Ç–≤–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${targetName}`;

        const chatBtn = document.getElementById('userActionsChatBtn');
        const emailBtn = document.getElementById('userActionsEmailBtn');
        
        chatBtn.onclick = () => startPrivateChat(targetId, targetName);
        emailBtn.onclick = () => {
            window.location.href = `mailto:${targetEmail}`;
            closeModal('userActionsModal');
        };
        
        showModal('userActionsModal');
    }

    // === –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –ù–ê–ß–ê–õ–ê –õ–ò–ß–ù–û–ì–û –ß–ê–¢–ê ===
    async function startPrivateChat(targetId, targetName) {
        closeModal('userActionsModal');
        const channelId = `private_${[currentUser.uid, targetId].sort().join('_')}`;
        const userDocRef = db.collection('users').doc(currentUser.uid);
    
        try {
            const userDoc = await userDocRef.get();
            if (!userDoc.exists) throw "–¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.";
     

            const userData = userDoc.data();

            // –ü–†–û–í–ï–†–ö–ê: –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –∏ userData —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –∏ privateChatPartners —è–≤–ª—è–µ—Ç—Å—è –º–∞—Å—Å–∏–≤–æ–º
            if (userData && Array.isArray(userData.privateChatPartners)) {
                // –ï—Å–ª–∏ –≤—Å–µ –≤ –ø–æ—Ä—è–¥–∫–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –ª–æ–≥–∏–∫—É
                if (!userData.privateChatPartners.includes(targetId)) {
                    await userDocRef.update({ privateChatPartners: firebase.firestore.FieldValue.arrayUnion(targetId) });
                }
            } else if (userData) {
                // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—Å—Ç—å, –∞ –ø–æ–ª—è —Å —á–∞—Ç–∞–º–∏ –Ω–µ—Ç - —Å–æ–∑–¥–∞–µ–º –µ–≥–æ
                await userDocRef.update({ privateChatPartners: [targetId] });
            }
            
            // –ú—ã –ù–ï –¢–†–û–ì–ê–ï–ú –¥–æ–∫—É–º–µ–Ω—Ç —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞, —á—Ç–æ–±—ã –Ω–µ –Ω–∞—Ä—É—à–∞—Ç—å –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞.
            // –ï–≥–æ —Å–ø–∏—Å–æ–∫ –æ–±–Ω–æ–≤–∏—Ç—Å—è, –∫–æ–≥–¥–∞ –æ–Ω —Å–∞–º –∑–∞–π–¥–µ—Ç –≤ —á–∞—Ç.
    
        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ª–∏—á–Ω–æ–≥–æ —á–∞—Ç–∞: ", error);
            showError("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∞—Ç—å –ª–∏—á–Ω—ã–π —á–∞—Ç.");
            return;
        }
        
        await loadPrivateChats(); 
        // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —á–∞—Ç
        switchToChannel(channelId, targetName, 'private');
    }
    
    async function sendMessage() {
        if (!chatInput || !currentUser || !db) return;
        const text = chatInput.value.trim();
        if (!text) return;

        
        const sendBtn = document.getElementById('sendBtn');
        sendBtn.disabled = true;
        sendBtn.classList.add('loading');
        sendBtn.innerHTML = ''; 
        

        const isQuestionFormat = text.startsWith('?') && (text.includes('\n+') || text.includes('\n-'));

        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –¥–æ–±–∞–≤–ª—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —É—á–∞—Å—Ç–Ω–∏–∫–∏
            if (currentChannelType === 'public' && currentChannel !== 'general') {
                // –ù–∞—Ö–æ–¥–∏–º –¥–∞–Ω–Ω—ã–µ —Ç–µ–∫—É—â–µ–≥–æ –∫–∞–Ω–∞–ª–∞ –≤ –Ω–∞—à–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–º –∫—ç—à–µ (—ç—Ç–æ –±—ã—Å—Ç—Ä–æ)
                const channel = channels.find(c => c.id === currentChannel);
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, –¢–û–õ–¨–ö–û –ï–°–õ–ò –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â–µ –Ω–µ –≤ –Ω–µ–º
                if (channel && (!channel.members || !channel.members.includes(currentUser.uid))) {
                    const channelRef = db.collection('channels').doc(currentChannel);
                    await channelRef.update({
                        members: firebase.firestore.FieldValue.arrayUnion(currentUser.uid)
                    });
                }
            }

            if (isQuestionFormat) {
                await createQuestionFromMessage(text);
                chatInput.value = '';
            } else {

                let memberIds = [];
                if (currentChannelType === 'private') {
                    // –î–ª—è –ª–∏—á–Ω—ã—Ö —á–∞—Ç–æ–≤ ID —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –µ—Å—Ç—å –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞
                    memberIds = currentChannel.replace('private_', '').split('_');
                } else {
                    // –î–ª—è –ü–£–ë–õ–ò–ß–ù–´–• –∫–∞–Ω–∞–ª–æ–≤ –¥–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é –º–µ—Ç–∫—É "public"
                    // –≠—Ç–æ –ø–æ–∑–≤–æ–ª–∏—Ç –ª—é–±–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —ç—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏—è.
                    memberIds = ['public']; 
                }

                const message = {
                    text: text,
                    authorId: currentUser.uid,
                    authorName: currentUser.displayName || currentUser.email || '–ê–Ω–æ–Ω–∏–º',
                    channelId: currentChannel,
                    createdAt: firebase.firestore.FieldValue.serverTimestamp(),
                    type: 'message',
                    reactions: {},
                    memberIds: memberIds // <--- –î–û–ë–ê–í–õ–ï–ù–û –≠–¢–û –ü–û–õ–ï
                };


                
                if (replyContext) {
                    message.replyTo = replyContext;
                }

                await db.collection('messages').add(message);
                chatInput.value = '';
                chatInput.style.height = 'auto';
                cancelReply();
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
            showError('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ');
        } finally {

            sendBtn.disabled = false;
            sendBtn.classList.remove('loading');
            sendBtn.innerHTML = '‚û§'; 
            
        }
    }

    // --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –û—Ç–≤–µ—Ç–æ–≤ ---
    function startReply(messageId, authorName, text) {
        replyContext = {
            messageId: messageId,
            authorName: authorName,
            textSnippet: text.substring(0, 80) + (text.length > 80 ? '...' : '')
        };
        
        document.getElementById('replyingToText').textContent = replyContext.textSnippet;
        document.getElementById('replyingToPanel').classList.remove('hidden');
        chatInput.focus();
    }

    function cancelReply() {
        replyContext = null;
        document.getElementById('replyingToPanel').classList.add('hidden');
    }

    // --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ---
    function startEditMessage(messageId, currentText) {
        document.getElementById('editMessageIdInput').value = messageId;
        document.getElementById('editMessageInput').value = currentText;
        showModal('editMessageModal');
    }

    async function saveMessageEdit() {
        const messageId = document.getElementById('editMessageIdInput').value;
        const newText = document.getElementById('editMessageInput').value.trim();
        if (!messageId || !newText) return;

        const messageRef = db.collection('messages').doc(messageId);
        try {
            await messageRef.update({
                text: newText,
                editedAt: firebase.firestore.FieldValue.serverTimestamp()
            });
            closeModal('editMessageModal');
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
            showError('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è.');
        }
    }




    function showReactionPicker(messageId, buttonElement) {
            // –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ —É–¥–∞–ª—è–µ–º –ª—é–±—ã–µ —Å—Ç–∞—Ä—ã–µ –ø–∏–∫–µ—Ä—ã
            document.querySelectorAll('.reaction-picker, .full-reaction-picker').forEach(p => p.remove());

            const picker = document.createElement('div');
            picker.className = 'reaction-picker';
            
            // 1. –°–ù–ê–ß–ê–õ–ê –û–ë–™–Ø–í–õ–Ø–ï–ú –§–£–ù–ö–¶–ò–Æ –ó–ê–ö–†–´–¢–ò–Ø
            // –¢–µ–ø–µ—Ä—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –º—ã —Å–æ–∑–¥–∞–¥–∏–º –Ω–∏–∂–µ, –±—É–¥—É—Ç –æ –Ω–µ–π –∑–Ω–∞—Ç—å.
            const closePickerOnClickOutside = function(event) {
                if (document.body.contains(picker) && !picker.contains(event.target)) {
                    picker.remove();
                    window.removeEventListener('click', closePickerOnClickOutside);
                }
            };
            
            // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ä–µ–∞–∫—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const quickEmojis = getQuickReactions();
            
            // 2. –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —ç–º–æ–¥–∑–∏
            quickEmojis.forEach(emoji => {
                const span = document.createElement('span');
                span.textContent = emoji;
                span.onclick = (e) => {
                    e.stopPropagation();
                    window.removeEventListener('click', closePickerOnClickOutside); // –£–±–∏—Ä–∞–µ–º —Å–ª—É—à–∞—Ç–µ–ª—å
                    picker.remove();
                    toggleReaction(messageId, emoji);
                };
                picker.appendChild(span);
            });

            // 3. –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É "+" –∏ –µ–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫, –∫–æ—Ç–æ—Ä—ã–π —Ç–µ–ø–µ—Ä—å –≤–∏–¥–∏—Ç 'closePickerOnClickOutside'
            const addButton = document.createElement('button');
            addButton.textContent = 'Ôºã';
            addButton.className = 'reaction-picker-add-btn';
            addButton.title = '–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é —Ä–µ–∞–∫—Ü–∏—é';
            addButton.onclick = (e) => {
                e.stopPropagation();

                // 1. –°–ù–ê–ß–ê–õ–ê –ø–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∫–Ω–æ–ø–∫–∏, –ü–û–ö–ê –æ–Ω–∞ –µ—â–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ.
                const buttonRect = addButton.getBoundingClientRect();

                // 2. –¢–µ–ø–µ—Ä—å —É–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ä—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏ —Å–∞–º—É –ø–∞–Ω–µ–ª—å.
                window.removeEventListener('click', closePickerOnClickOutside);
                picker.remove();

                // 3. –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–æ–∫–∞–∑–∞ –Ω–æ–≤–æ–≥–æ –ø–∏–∫–µ—Ä–∞, –Ω–æ –ø–µ—Ä–µ–¥–∞–µ–º –µ–π —É–∂–µ
                // —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã, –∞ –Ω–µ —Å–∞–º—É –∫–Ω–æ–ø–∫—É, –∫–æ—Ç–æ—Ä–æ–π –±–æ–ª—å—à–µ –Ω–µ—Ç.
                showFullReactionPicker(messageId, buttonRect);
            };
            picker.appendChild(addButton);

            document.body.appendChild(picker);

            // --- –ù–ê–ß–ê–õ–û –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø: –£–º–Ω–æ–µ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ ---
            const btnRect = buttonElement.getBoundingClientRect();
            const pickerRect = picker.getBoundingClientRect();
            const viewportWidth = window.innerWidth;
            const margin = 8; // –ù–µ–±–æ–ª—å—à–æ–π –æ—Ç—Å—Ç—É–ø –æ—Ç –∫—Ä–∞–µ–≤ —ç–∫—Ä–∞–Ω–∞

            // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏ (–≤–≤–µ—Ä—Ö –∏–ª–∏ –≤–Ω–∏–∑ –æ—Ç –∫–Ω–æ–ø–∫–∏)
            let topPos = btnRect.top - pickerRect.height - margin;
            if (topPos < margin) { 
                topPos = btnRect.bottom + margin; 
            }

            // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏
            let leftPos = btnRect.left;

            // –ü–†–û–í–ï–†–ö–ê –ü–†–ê–í–û–ì–û –ö–†–ê–Ø: –µ—Å–ª–∏ –ø–∏–∫–µ—Ä –≤—ã–ª–µ–∑–∞–µ—Ç —Å–ø—Ä–∞–≤–∞...
            if (leftPos + pickerRect.width > viewportWidth - margin) {
                // ...—Ç–æ –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–µ–º –µ–≥–æ –ø—Ä–∞–≤—ã–π –∫—Ä–∞–π –ø–æ –ø—Ä–∞–≤–æ–º—É –∫—Ä–∞—é –∫–Ω–æ–ø–∫–∏.
                leftPos = btnRect.right - pickerRect.width;
            }

            // –ü–†–û–í–ï–†–ö–ê –õ–ï–í–û–ì–û –ö–†–ê–Ø: –µ—Å–ª–∏ –ø–∏–∫–µ—Ä –≤—ã–ª–µ–∑–∞–µ—Ç —Å–ª–µ–≤–∞...
            if (leftPos < margin) {
                // ...—Ç–æ –ø—Ä–∏–∂–∏–º–∞–µ–º –µ–≥–æ –∫ –ª–µ–≤–æ–º—É –∫—Ä–∞—é —ç–∫—Ä–∞–Ω–∞ —Å –æ—Ç—Å—Ç—É–ø–æ–º.
                leftPos = margin;
            }

            // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–µ –∏ —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
            picker.style.top = `${topPos}px`;
            picker.style.left = `${leftPos}px`;
            // --- –ö–û–ù–ï–¶ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø ---


            // 4. –ò —Ç–æ–ª—å–∫–æ —Ç–µ–ø–µ—Ä—å, –∫–æ–≥–¥–∞ –≤—Å–µ –≥–æ—Ç–æ–≤–æ, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–ª—É—à–∞—Ç–µ–ª—å –Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏–µ
            setTimeout(() => window.addEventListener('click', closePickerOnClickOutside), 0);
        }




    /**
     * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–ª–Ω—ã–π –ø–∏–∫–µ—Ä —ç–º–æ–¥–∑–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –Ω–æ–≤–æ–π —Ä–µ–∞–∫—Ü–∏–∏.
     * @param {string} messageId - ID —Å–æ–æ–±—â–µ–Ω–∏—è, –∫ –∫–æ—Ç–æ—Ä–æ–º—É –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è —Ä–µ–∞–∫—Ü–∏—è.
     * @param {DOMRect} positionRect - –û–±—ä–µ–∫—Ç —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏, –≥–¥–µ —Ä–∞–Ω–µ–µ –Ω–∞—Ö–æ–¥–∏–ª–∞—Å—å –∫–Ω–æ–ø–∫–∞ "+".
     */
    function showFullReactionPicker(messageId, positionRect) {
        if (!customElements.get('emoji-picker')) {
            console.warn('Emoji picker –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω');
            return;
        }

        const fullPicker = document.createElement('emoji-picker');
        fullPicker.className = 'full-reaction-picker'; 

        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ç–µ–º—É –ø–∏–∫–µ—Ä–∞
        if (document.body.classList.contains('dark-mode')) {
            fullPicker.classList.add('dark');
        } else {
            fullPicker.classList.add('light');
        }

        fullPicker.addEventListener('emoji-click', event => {
            const selectedEmoji = event.detail.unicode;
            toggleReaction(messageId, selectedEmoji);
            updateQuickReactions(selectedEmoji);
            if (fullPicker.parentNode) {
                 fullPicker.remove();
            }
        });

        // --- –ù–ê–ß–ê–õ–û –ù–û–í–û–ô –õ–û–ì–ò–ö–ò –ü–û–ó–ò–¶–ò–û–ù–ò–†–û–í–ê–ù–ò–Ø ---
        
        // 1. –î–æ–±–∞–≤–ª—è–µ–º –ø–∏–∫–µ—Ä –≤ DOM, –Ω–æ –¥–µ–ª–∞–µ–º –µ–≥–æ –Ω–µ–≤–∏–¥–∏–º—ã–º –∏ –≤—ã–Ω–æ—Å–∏–º –∑–∞ –ø—Ä–µ–¥–µ–ª—ã —ç–∫—Ä–∞–Ω–∞.
        // –≠—Ç–æ –Ω—É–∂–Ω–æ, —á—Ç–æ–±—ã –±—Ä–∞—É–∑–µ—Ä —Ä–∞—Å—Å—á–∏—Ç–∞–ª –µ–≥–æ —Ä–µ–∞–ª—å–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã.
        document.body.appendChild(fullPicker);
        fullPicker.style.position = 'fixed';
        fullPicker.style.visibility = 'hidden';
        fullPicker.style.left = '-9999px';
        fullPicker.style.top = '-9999px';
        
        // 2. –¢–µ–ø–µ—Ä—å, –∫–æ–≥–¥–∞ —Ä–∞–∑–º–µ—Ä—ã –∏–∑–≤–µ—Å—Ç–Ω—ã, –ø–æ–ª—É—á–∞–µ–º –∏—Ö.
        const pickerRect = fullPicker.getBoundingClientRect();
        const viewportWidth = window.innerWidth;
        const viewportHeight = window.innerHeight;
        const margin = 10; // –û—Ç—Å—Ç—É–ø –æ—Ç –∫—Ä–∞–µ–≤

        // 3. –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é, –∫–∞–∫ –º—ã —ç—Ç–æ –¥–µ–ª–∞–ª–∏ –¥–ª—è –º–∞–ª–µ–Ω—å–∫–æ–π –ø–∞–Ω–µ–ª–∏.
        // –ü–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏:
        let leftPos = positionRect.left; // –ù–∞—á–∏–Ω–∞–µ–º —Å –ø–æ–∑–∏—Ü–∏–∏ –∫–Ω–æ–ø–∫–∏ "+"
        if (leftPos + pickerRect.width > viewportWidth - margin) {
            // –ï—Å–ª–∏ –≤—ã–ª–µ–∑–∞–µ—Ç —Å–ø—Ä–∞–≤–∞, –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–µ–º –ø–æ –ø—Ä–∞–≤–æ–º—É –∫—Ä–∞—é —ç–∫—Ä–∞–Ω–∞
            leftPos = viewportWidth - pickerRect.width - margin;
        }
        if (leftPos < margin) {
            // –ï—Å–ª–∏ –≤—ã–ª–µ–∑–∞–µ—Ç —Å–ª–µ–≤–∞, –ø—Ä–∏–∂–∏–º–∞–µ–º –∫ –ª–µ–≤–æ–º—É –∫—Ä–∞—é
            leftPos = margin;
        }

        // –ü–æ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏:
        let topPos = positionRect.bottom + margin; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–æ–¥ –∫–Ω–æ–ø–∫–æ–π "+"
        if (topPos + pickerRect.height > viewportHeight - margin) {
            // –ï—Å–ª–∏ –Ω–µ –ø–æ–º–µ—â–∞–µ—Ç—Å—è —Å–Ω–∏–∑—É, —Å—Ç–∞–≤–∏–º –Ω–∞–¥ –∫–Ω–æ–ø–∫–æ–π
            topPos = positionRect.top - pickerRect.height - margin;
        }
         if (topPos < margin) {
            // –ï—Å–ª–∏ –Ω–µ –ø–æ–º–µ—â–∞–µ—Ç—Å—è –∏ —Å–≤–µ—Ä—Ö—É, –ø—Ä–∏–∂–∏–º–∞–µ–º –∫ –≤–µ—Ä—Ö—É —ç–∫—Ä–∞–Ω–∞
            topPos = margin;
        }

        // 4. –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ, –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã.
        fullPicker.style.left = `${leftPos}px`;
        fullPicker.style.top = `${topPos}px`;
        
        // 5. –ò —Ç–æ–ª—å–∫–æ —Ç–µ–ø–µ—Ä—å –¥–µ–ª–∞–µ–º –ø–∏–∫–µ—Ä –≤–∏–¥–∏–º—ã–º –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        fullPicker.style.visibility = 'visible';

        // --- –ö–û–ù–ï–¶ –ù–û–í–û–ô –õ–û–ì–ò–ö–ò –ü–û–ó–ò–¶–ò–û–ù–ò–†–û–í–ê–ù–ò–Ø ---

        // 6. –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –ø–∏–∫–µ—Ä–∞
        setTimeout(() => {
            window.addEventListener('click', function closeFullPicker(e) {
                if (fullPicker.parentNode && !fullPicker.contains(e.target)) {
                    fullPicker.remove();
                    // –í–∞–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å —Å–∞–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫, —á—Ç–æ–±—ã –æ–Ω –Ω–µ –≤–∏—Å–µ–ª –≤ –ø–∞–º—è—Ç–∏
                    window.removeEventListener('click', closeFullPicker);
                }
            });
        }, 0);
    }






    async function toggleReaction(messageId, emoji) {
        if (!currentUser) return;
        const messageRef = db.collection('messages').doc(messageId);
        const userId = currentUser.uid;

        try {
            await db.runTransaction(async (transaction) => {
                const doc = await transaction.get(messageRef);
                if (!doc.exists) return;

                const reactions = doc.data().reactions || {};
                
                if (reactions[emoji] && reactions[emoji].includes(userId)) {
                    // –ï—Å–ª–∏ —É–∂–µ —Ä–µ–∞–≥–∏—Ä–æ–≤–∞–ª - —É–±–∏—Ä–∞–µ–º —Ä–µ–∞–∫—Ü–∏—é
                    reactions[emoji] = reactions[emoji].filter(id => id !== userId);
                    if (reactions[emoji].length === 0) {
                        delete reactions[emoji]; // –£–¥–∞–ª—è–µ–º —ç–º–æ–¥–∑–∏, –µ—Å–ª–∏ –º–∞—Å—Å–∏–≤ –ø—É—Å—Ç
                    }
                } else {
                    // –ï—Å–ª–∏ –Ω–µ —Ä–µ–∞–≥–∏—Ä–æ–≤–∞–ª - –¥–æ–±–∞–≤–ª—è–µ–º
                    if (!reactions[emoji]) {
                        reactions[emoji] = [];
                    }
                    reactions[emoji].push(userId);
                }
                transaction.update(messageRef, { reactions: reactions });
            });
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Ä–µ–∞–∫—Ü–∏–∏:', error);
        }
    }
        
    async function deleteMessage(messageId) {
        if (!currentUser || !db) return;

        // –°–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        if (confirm(_chat('confirm_delete_message'))) {
            try {
                await db.collection('messages').doc(messageId).delete();
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
                showError('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ.');
            }
        }
    }
 
    async function deleteQuestion(questionId) {
        if (!currentUser || !db) return;

        if (confirm("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ.")) {
            try {
                await db.collection('questions').doc(questionId).delete();
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞:', error);
                showError('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤–æ–ø—Ä–æ—Å.');
            }
        }
    }



    // --- –í–°–¢–ê–í–¨–¢–ï –ö–û–î –ü–ê–†–°–ï–†–ê –°–Æ–î–ê ---
    /**
     * –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –ø–∞—Ä—Å–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –±–ª–æ–∫–æ–≤ –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ –æ–¥–Ω–æ–º —Ç–µ–∫—Å—Ç–µ.
     * @param {string} content - –¢–µ–∫—Å—Ç, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –æ–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ .qst.
     * @returns {Array<Object>} - –ú–∞—Å—Å–∏–≤ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ –≤–æ–ø—Ä–æ—Å–æ–≤.
     */
    function parseMultipleQstBlocks(content) {
        let questions = [];
        let currentQuestionData = null;
        const lines = content.split(/\r?\n/);

        for (const line of lines) {
            const trimmedLine = line.trim();
            if (trimmedLine.startsWith('?')) {
                // –ï—Å–ª–∏ –º—ã –Ω–∞—à–ª–∏ –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å, —Å–Ω–∞—á–∞–ª–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π, –µ—Å–ª–∏ –æ–Ω –±—ã–ª
                if (currentQuestionData && currentQuestionData.options.length > 0) {
                    questions.push(currentQuestionData);
                }
                // –ù–∞—á–∏–Ω–∞–µ–º —Å–æ–±–∏—Ä–∞—Ç—å –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å
                currentQuestionData = { 
                    text: trimmedLine.substring(1).trim(), 
                    options: [], 
                    correctAnswerIndex: -1
                };
            } else if ((trimmedLine.startsWith('+') || trimmedLine.startsWith('-')) && currentQuestionData) {
                // –î–æ–±–∞–≤–ª—è–µ–º –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞ –∫ –¢–ï–ö–£–©–ï–ú–£ –≤–æ–ø—Ä–æ—Å—É
                const isCorrect = trimmedLine.startsWith('+');
                const optionText = trimmedLine.substring(1).trim();
                currentQuestionData.options.push({ text: optionText, isCorrect: isCorrect });
                if (isCorrect && currentQuestionData.correctAnswerIndex === -1) {
                    currentQuestionData.correctAnswerIndex = currentQuestionData.options.length - 1;
                }
            } else if (trimmedLine !== '' && currentQuestionData) {
                // –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ –Ω–µ –ø—É—Å—Ç–∞—è –∏ –Ω–µ –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞ - —ç—Ç–æ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –≤–æ–ø—Ä–æ—Å–∞
                currentQuestionData.text += " " + trimmedLine;
            }
        }

        // –ù–µ –∑–∞–±—ã–≤–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–∞–º—ã–π –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–æ–ø—Ä–æ—Å –ø–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ü–∏–∫–ª–∞
        if (currentQuestionData && currentQuestionData.options.length > 0) {
            questions.push(currentQuestionData);
        }

        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–∞—Å—Å–∏–≤ –≤—Å–µ—Ö –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
        return questions;
    }




    async function createQuestionFromMessage(rawText) {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—à –Ω–æ–≤—ã–π –ø–∞—Ä—Å–µ—Ä –∏ –∑–¥–µ—Å—å!
        const questionsToCreate = parseMultipleQstBlocks(rawText);

        if (questionsToCreate.length === 0) {
            showError('–§–æ—Ä–º–∞—Ç –≤–æ–ø—Ä–æ—Å–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å.');
            return;
        }

        try {
            // –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –≤—Å–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã
            for (const question of questionsToCreate) {
                // 1. –°–æ–∑–¥–∞–µ–º —Å–∞–º –≤–æ–ø—Ä–æ—Å –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ 'questions'
                const questionPayload = {
                    text: question.text,
                    options: question.options,
                    authorId: currentUser.uid,
                    authorName: currentUser.displayName || currentUser.email || '–ê–Ω–æ–Ω–∏–º',
                    channelId: currentChannel,
                    createdAt: firebase.firestore.FieldValue.serverTimestamp()
                };
                const newQuestionRef = await db.collection('questions').add(questionPayload);

                // 2. –°–æ–∑–¥–∞–µ–º –¥–ª—è –Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ-—Å—Å—ã–ª–∫—É –≤ —á–∞—Ç–µ
                const questionLinkMessage = {
                    authorId: currentUser.uid,
                    authorName: currentUser.displayName || currentUser.email || '–ê–Ω–æ–Ω–∏–º',
                    channelId: currentChannel,
                    createdAt: firebase.firestore.FieldValue.serverTimestamp(),
                    type: 'question_link',
                    questionId: newQuestionRef.id,
                    text: question.text
                };
                await db.collection('messages').add(questionLinkMessage);
            }
             alert(`–£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–∑ —á–∞—Ç–∞: ${questionsToCreate.length}`);

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
            showError('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å.');
        }
    }

    // --- –ó–ê–ú–ï–ù–ò–¢–ï –°–¢–ê–†–£–Æ –§–£–ù–ö–¶–ò–Æ –ù–ê –≠–¢–£ ---
    async function createQuestion() {
        const rawText = document.getElementById('questionTextInput').value.trim();
        if (!rawText || !currentUser || !db) return;

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—à –Ω–æ–≤—ã–π –º–æ—â–Ω—ã–π –ø–∞—Ä—Å–µ—Ä
        const questionsToCreate = parseMultipleQstBlocks(rawText);

        if (questionsToCreate.length === 0) {
            showError('–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç: –∫–∞–∂–¥—ã–π –≤–æ–ø—Ä–æ—Å –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å "?", –∞ –≤–∞—Ä–∏–∞–Ω—Ç—ã —Å "+" –∏–ª–∏ "-".');
            return;
        }

        try {
            // –°–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤ –ø—Ä–æ–º–∏—Å–æ–≤ –¥–ª—è –≤—Å–µ—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
            const creationPromises = questionsToCreate.map(q => {
                const questionPayload = {
                    text: q.text,
                    options: q.options,
                    authorId: currentUser.uid,
                    authorName: currentUser.displayName || currentUser.email || '–ê–Ω–æ–Ω–∏–º',
                    channelId: currentChannel,
                    createdAt: firebase.firestore.FieldValue.serverTimestamp()
                };
                return db.collection('questions').add(questionPayload);
            });
            
            // –ñ–¥–µ–º, –ø–æ–∫–∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã –±—É–¥—É—Ç —Å–æ–∑–¥–∞–Ω—ã
            await Promise.all(creationPromises);
            
            alert(`–£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤–æ–ø—Ä–æ—Å–æ–≤: ${questionsToCreate.length}`);
            document.getElementById('questionTextInput').value = '';
            closeModal('questionCreateModal');

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤:', error);
            showError('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã');
        }
    }

    async function voteForOption(questionId, optionIndex) {
        if (!currentUser || !db) return;

        const questionRef = db.collection('questions').doc(questionId);
        const userId = currentUser.uid;

        try {
            await db.runTransaction(async (transaction) => {
                const doc = await transaction.get(questionRef);
                if (!doc.exists) throw "–í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω!";

                const questionData = doc.data();
                if (!Array.isArray(questionData.options)) return;
                
                // –°–æ–∑–¥–∞–µ–º –≥–ª—É–±–æ–∫—É—é –∫–æ–ø–∏—é –º–∞—Å—Å–∏–≤–∞ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è
                const newOptions = JSON.parse(JSON.stringify(questionData.options));
                const option = newOptions[optionIndex];

                // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
                if (!Array.isArray(option.votedBy)) {
                    option.votedBy = [];
                }

                const voteIndex = option.votedBy.indexOf(userId);

                if (voteIndex > -1) {
                    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≥–æ–ª–æ—Å–æ–≤–∞–ª - —É–¥–∞–ª—è–µ–º –µ–≥–æ –≥–æ–ª–æ—Å
                    option.votedBy.splice(voteIndex, 1);
                } else {
                    // –ï—Å–ª–∏ –Ω–µ –≥–æ–ª–æ—Å–æ–≤–∞–ª - –¥–æ–±–∞–≤–ª—è–µ–º
                    option.votedBy.push(userId);
                }

                // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤ –æ–±—Ä–∞—Ç–Ω–æ
                transaction.update(questionRef, { options: newOptions });
            });
        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–∏:", error);
            showError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞—Ç—å. " + error);
        }
    }

    async function voteForFavoriteOption(favoriteId, optionIndex) {
        if (!currentUser || !db) return;

        const favoriteRef = db.collection('favorites').doc(favoriteId);
        const userId = currentUser.uid;

        try {
            await db.runTransaction(async (transaction) => {
                const doc = await transaction.get(favoriteRef);
                if (!doc.exists) throw "–ò–∑–±—Ä–∞–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!";

                const favoriteData = doc.data();
                const questionContent = favoriteData.content;
                if (!Array.isArray(questionContent.options)) return;
                
                const newOptions = JSON.parse(JSON.stringify(questionContent.options));
                const option = newOptions[optionIndex];

                if (!Array.isArray(option.votedBy)) {
                    option.votedBy = [];
                }

                const voteIndex = option.votedBy.indexOf(userId);

                if (voteIndex > -1) {
                    option.votedBy.splice(voteIndex, 1);
                } else {
                    option.votedBy.push(userId);
                }

                transaction.update(favoriteRef, { 'content.options': newOptions });
            });
        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–∏ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º:", error);
            showError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞—Ç—å. " + error);
        }
    }
        
    async function addToFavorites(itemObject, type) { 
        if (!currentUser || !db) {
            showError("–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è.");
            openAuthModal(); 
            return;
        }
        try {
            // --- –ù–ê–ß–ê–õ–û –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø ---
            // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ Firestore
            const favorite = {
                userId: currentUser.uid,
                content: itemObject, // –°–æ–¥–µ—Ä–∂–∏–º–æ–µ, –∫–æ—Ç–æ—Ä–æ–µ –ø—Ä–∏—à–ª–æ –≤ —Ñ—É–Ω–∫—Ü–∏—é
                type: type,          // –¢–∏–ø —ç–ª–µ–º–µ–Ω—Ç–∞ ('question')
                createdAt: firebase.firestore.FieldValue.serverTimestamp() // –í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è
            };
            // --- –ö–û–ù–ï–¶ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø ---

            await db.collection('favorites').add(favorite); // –¢–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç
            alert('–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ!');

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ:', error);
            showError('–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ');
        }
    }

    
    async function removeFromFavorites(favoriteId) {
        if (!currentUser || !db) return;
        
        try {
            await db.collection('favorites').doc(favoriteId).delete();
            // –û–±–Ω–æ–≤–ª—è–µ–º –≤–∏–¥, —á—Ç–æ–±—ã —ç–ª–µ–º–µ–Ω—Ç –∏—Å—á–µ–∑
            loadFavorites();
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ:', error);
            showError('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ');
        }
    }
    
    // ========== CHANNELS & PRESENCE ==========
    function setupPresenceSystem() {
        if (!currentUser || !db) return;
        const presenceRef = db.collection('presence').doc(currentUser.uid);
        const heartbeat = () => presenceRef.update({ lastSeen: firebase.firestore.FieldValue.serverTimestamp() }).catch(console.error);
        presenceRef.set({ online: true, lastSeen: firebase.firestore.FieldValue.serverTimestamp(), username: currentUser.displayName || currentUser.email, uid: currentUser.uid })
            .then(() => {
                if (heartbeatInterval) clearInterval(heartbeatInterval);
                heartbeatInterval = setInterval(heartbeat, 30000);
            });
        window.addEventListener('beforeunload', () => {
            if (!currentUser) return;
            presenceRef.update({ online: false });
            clearInterval(heartbeatInterval);
        });
        if (presenceListener) presenceListener();
        presenceListener = db.collection('presence').onSnapshot(snapshot => {
            const now = Date.now();
            onlineUsers.clear();
            snapshot.forEach(doc => {
                const data = doc.data();
                const lastSeenDate = data.lastSeen?.toDate();
                if (data.online && lastSeenDate && (now - lastSeenDate.getTime() < 60000)) {
                    onlineUsers.set(doc.id, data);
                }
            });
            updateOnlineUsersList();
            if(currentTab === 'users') loadUsers(); // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –µ—Å–ª–∏ –æ–Ω –æ—Ç–∫—Ä—ã—Ç
        });
    }

    function cleanupPresenceSystem() {
        if (presenceListener) presenceListener();
        if (heartbeatInterval) clearInterval(heartbeatInterval);
        if (pmUnreadListener) pmUnreadListener(); // <-- –î–û–ë–ê–í–õ–ï–ù–û
        if (publicUnreadListener) publicUnreadListener(); // <-- –î–û–ë–ê–í–õ–ï–ù–û
        onlineUsers.clear();
        updateOnlineUsersList();
    }



    function updateOnlineUsersList() {
        if (!onlineUsersList) return;
        onlineUsersList.innerHTML = '';
        // –û–±–Ω–æ–≤–ª—è–µ–º –¢–û–õ–¨–ö–û —Å—á–µ—Ç—á–∏–∫ –æ–Ω–ª–∞–π–Ω-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        if (tabCounters['online']) tabCounters['online'].textContent = onlineUsers.size;

        if (onlineUsers.size === 0) {
            onlineUsersList.innerHTML = '<div style="padding: 10px; text-align: center; color: var(--secondary-text-color);">–ù–∏–∫–æ–≥–æ –Ω–µ—Ç –æ–Ω–ª–∞–π–Ω</div>';
            return;
        }
        onlineUsers.forEach(userData => {
            const userEl = document.createElement('div');
            userEl.className = 'online-user';
            userEl.innerHTML = `<span class="status-indicator online"></span><span class="username" title="${escapeHTML(userData.username)}">${escapeHTML(userData.username)}</span>`;
            onlineUsersList.appendChild(userEl);
        });
    }

    function initializeDataListeners() {
        if (!currentUser || !db) return;

        console.log("–ó–∞–ø—É—Å–∫ –ø–æ—Å—Ç–æ—è–Ω–Ω—ã—Ö —Å–ª—É—à–∞—Ç–µ–ª–µ–π –¥–∞–Ω–Ω—ã—Ö...");

        // –°–ª—É—à–∞—Ç–µ–ª—å –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤
        db.collection('questions')
          .where('channelId', '==', currentChannel) // –ú–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∫–∞–Ω–∞–ª–∞
          .onSnapshot(snapshot => {
              updateTabCounter('questions', snapshot.size);
          }, err => console.error("–û—à–∏–±–∫–∞ —Å–ª—É—à–∞—Ç–µ–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤:", err));

        // –°–ª—É—à–∞—Ç–µ–ª—å –¥–ª—è –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
        db.collection('favorites')
          .where('userId', '==', currentUser.uid)
          .onSnapshot(snapshot => {
              updateTabCounter('favorites', snapshot.size);
          }, err => console.error("–û—à–∏–±–∫–∞ —Å–ª—É—à–∞—Ç–µ–ª—è –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ:", err));

        // –°–ª—É—à–∞—Ç–µ–ª–∏ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —É–∂–µ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ, –∏—Ö —Ç—Ä–æ–≥–∞—Ç—å –Ω–µ –Ω—É–∂–Ω–æ.
    }

    function renderChannelsList() {
        if(!channelsList) return;
        channelsList.innerHTML = '';
        channels.forEach(channel => {
            const isOwner = channel.createdBy === currentUser.uid;
            const channelEl = document.createElement('div');
            // –î–æ–±–∞–≤–ª—è–µ–º data-–∞—Ç—Ä–∏–±—É—Ç –¥–ª—è –ª–µ–≥–∫–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
            channelEl.dataset.channelId = channel.id; // <-- –î–û–ë–ê–í–õ–ï–ù–û
            channelEl.className = `channel-item ${channel.id === currentChannel && currentChannelType === 'public' ? 'active' : ''}`;

            const lockIcon = channel.hasPassword ? 'üîí ' : '';
            const settingsIcon = isOwner ? `<button class="channel-settings-btn" onclick="event.stopPropagation(); ChatModule.showChannelEditModal('${channel.id}')">‚öôÔ∏è</button>` : '';
            const unreadCount = unreadCounts.get(channel.id) || 0; // <-- –î–û–ë–ê–í–õ–ï–ù–û

            // –î–æ–±–∞–≤–ª—è–µ–º HTML –¥–ª—è —Å—á–µ—Ç—á–∏–∫–∞
            channelEl.innerHTML = `
                <span class="channel-name">${lockIcon}# ${escapeHTML(channel.name)}</span>
                <span class="unread-channel-badge ${unreadCount > 0 ? '' : 'hidden'}">${unreadCount}</span>
                ${settingsIcon}
            `; // <-- –ò–ó–ú–ï–ù–ï–ù–û

            channelEl.addEventListener('click', () => handleChannelClick(channel));
            channelsList.appendChild(channelEl);
        });
    }

    async function loadPrivateChats() {
        if (!db || !currentUser) return;
        const userDoc = await db.collection('users').doc(currentUser.uid).get();
        if (!userDoc.exists) return;

        const userData = userDoc.data();
        // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∞ –ø–æ—Ç–æ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ –±–µ—Ä–µ–º –ø–æ–ª–µ.
        // –ï—Å–ª–∏ –ø–æ–ª—è privateChatPartners –Ω–µ—Ç, partnerIds —Å—Ç–∞–Ω–µ—Ç –ø—É—Å—Ç—ã–º –º–∞—Å—Å–∏–≤–æ–º [].
        const partnerIds = userData?.privateChatPartners || []; 

        // --- –ù–ê–ß–ê–õ–û –ù–û–í–û–ì–û –ö–û–î–ê ---

        // 1. –°–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤ –ø—Ä–æ–º–∏—Å–æ–≤, —á—Ç–æ–±—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –ø–æ–ª—É—á–∏—Ç—å –¥–æ–ø. –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        const privateChatsPromises = partnerIds.map(async (partnerId) => {
            // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–∞–º–æ–≥–æ –ø–∞—Ä—Ç–Ω–µ—Ä–∞ (–∫–∞–∫ –∏ —Ä–∞–Ω—å—à–µ)
            let partnerData = allUsers.get(partnerId);
            if (!partnerData) {
                const partnerDoc = await db.collection('users').doc(partnerId).get();
                if (partnerDoc.exists) partnerData = partnerDoc.data();
            }
            if (!partnerData) return null; // –ï—Å–ª–∏ –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –Ω–µ –Ω–∞—à–ª–∏, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º

            // 2. –û–ø—Ä–µ–¥–µ–ª—è–µ–º ID –ª–∏—á–Ω–æ–≥–æ —á–∞—Ç–∞
            const channelId = `private_${[currentUser.uid, partnerId].sort().join('_')}`;

            // 3. –ù–∞—Ö–æ–¥–∏–º –ü–û–°–õ–ï–î–ù–ï–ï —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —ç—Ç–æ–º —á–∞—Ç–µ, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –µ–≥–æ –≤—Ä–µ–º—è
            const messagesQuery = await db.collection('messages')
                .where('channelId', '==', channelId)
                .orderBy('createdAt', 'desc')
                .limit(1)
                .get();

            let lastMessageTimestamp = null;
            if (!messagesQuery.empty) {
                // –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –µ—Å—Ç—å, –±–µ—Ä–µ–º –≤—Ä–µ–º—è —Å–∞–º–æ–≥–æ –Ω–æ–≤–æ–≥–æ
                lastMessageTimestamp = messagesQuery.docs[0].data().createdAt;
            }

            // 4. –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ä–µ–∫—Ç, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –∏ –¥–∞–Ω–Ω—ã–µ –ø–∞—Ä—Ç–Ω–µ—Ä–∞, –∏ –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            return { ...partnerData, lastMessageTimestamp };
        });

        // –ñ–¥–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        let fetchedChats = await Promise.all(privateChatsPromises);

        // –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤—ã–≤–∞–µ–º –ø—É—Å—Ç—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã (–µ—Å–ª–∏ –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏)
        fetchedChats = fetchedChats.filter(chat => chat !== null);

        // 5. –°–û–†–¢–ò–†–£–ï–ú —á–∞—Ç—ã: —É –∫–æ–≥–æ –Ω–æ–≤–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Ç–æ—Ç –≤—ã—à–µ
        fetchedChats.sort((a, b) => {
            const timeA = a.lastMessageTimestamp ? a.lastMessageTimestamp.toMillis() : 0;
            const timeB = b.lastMessageTimestamp ? b.lastMessageTimestamp.toMillis() : 0;
            return timeB - timeA; // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —É–±—ã–≤–∞–Ω–∏—é (–Ω–æ–≤–æ–µ –≤–≤–µ—Ä—Ö—É)
        });

        privateChats = fetchedChats;

        // --- –ö–û–ù–ï–¶ –ù–û–í–û–ì–û –ö–û–î–ê ---

        renderPrivateChatsList();
    }

     function renderPrivateChatsList() {
        if (!privateChatsList) return;
        privateChatsList.innerHTML = '';
        privateChats.forEach(chatPartner => {
            const channelId = `private_${[currentUser.uid, chatPartner.uid].sort().join('_')}`;
            const chatEl = document.createElement('div');
            
            chatEl.dataset.channelId = channelId; // <--- –î–û–ë–ê–í–õ–ï–ù–û: –ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º ID –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å—á–µ—Ç—á–∏–∫–∞

            chatEl.className = `channel-item ${channelId === currentChannel && currentChannelType === 'private' ? 'active' : ''}`;
            const isOnline = onlineUsers.has(chatPartner.uid);
            const unreadCount = unreadCounts.get(channelId) || 0; // <--- –î–û–ë–ê–í–õ–ï–ù–û: –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—á–µ—Ç—á–∏–∫

            // –ò–ó–ú–ï–ù–ï–ù–û: –î–æ–±–∞–≤–ª—è–µ–º HTML-—ç–ª–µ–º–µ–Ω—Ç –¥–ª—è —Å—á–µ—Ç—á–∏–∫–∞
            chatEl.innerHTML = `
                <span class="status-indicator ${isOnline ? 'online' : ''}" style="margin-right: 8px;"></span>
                <span class="channel-name">${escapeHTML(chatPartner.username)}</span>
                <span class="unread-channel-badge ${unreadCount > 0 ? '' : 'hidden'}">${unreadCount}</span>
            `;

            chatEl.addEventListener('click', () => switchToChannel(channelId, chatPartner.username, 'private'));
            privateChatsList.appendChild(chatEl);
        });
    }
   
 
    function switchToChannel(channelId, channelName, type = 'public') {
        // –î–µ–π—Å—Ç–≤–∏–µ ‚Ññ1: –í—Å–µ–≥–¥–∞ –æ–±–Ω—É–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –¥–ª—è –∫–∞–Ω–∞–ª–∞, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –∫–ª–∏–∫–Ω—É–ª–∏.
        // –≠—Ç–æ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ —Å—á–µ—Ç—á–∏–∫ –∏—Å—á–µ–∑–Ω–µ—Ç –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ.
        updateUnreadCount(channelId, 0, true);

        // –î–µ–π—Å—Ç–≤–∏–µ ‚Ññ2: –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –∫–∞–Ω–∞–ª–∞
        const channelNameEl = document.getElementById('currentChannelName');
        if (channelNameEl) {
            const prefix = type === 'public' ? '# ' : '@ ';
            channelNameEl.textContent = `${prefix}${channelName}`;
        }

        // –î–µ–π—Å—Ç–≤–∏–µ ‚Ññ3: –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –Ω–∞–º –ø–æ–ª–Ω–æ—Å—Ç—å—é –º–µ–Ω—è—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç
        if (currentChannel !== channelId) {
            // –ï—Å–ª–∏ –º—ã –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –î–†–£–ì–û–ô –∫–∞–Ω–∞–ª:
            currentChannel = channelId;
            currentChannelType = type;
            // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –Ω–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞
            loadMessages();
        }

        // –î–µ–π—Å—Ç–≤–∏–µ ‚Ññ4: –í –ª—é–±–æ–º —Å–ª—É—á–∞–µ, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –≤–∫–ª–∞–¥–∫—É "–°–æ–æ–±—â–µ–Ω–∏—è"
        // –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –≤–∏–∑—É–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏.
        // –§—É–Ω–∫—Ü–∏—è switchTab —Å–∞–º–∞ –ø–æ–∑–∞–±–æ—Ç–∏—Ç—Å—è –æ —Ç–æ–º, —á—Ç–æ–±—ã –Ω–µ –¥–µ–ª–∞—Ç—å –ª–∏—à–Ω–µ–π —Ä–∞–±–æ—Ç—ã.
        switchTab('messages');
        renderChannelsList();
        renderPrivateChatsList();
    }
    
    function loadChannels() {
        if (!db) return;
        db.collection('channels').orderBy('createdAt').onSnapshot(snapshot => {
            channels = [];
            snapshot.forEach(doc => channels.push({ id: doc.id, ...doc.data() }));
            renderChannelsList();
            if (channels.length === 0) createDefaultChannel();
        });
    }

    async function showChannelEditModal(channelId) { 
        const channel = channels.find(c => c.id === channelId);
        if (!channel) return;

        document.getElementById('editChannelId').value = channel.id;
        document.getElementById('editChannelNameInput').value = channel.name;
        document.getElementById('editChannelDescInput').value = channel.description || '';
        document.getElementById('editChannelPasswordInput').value = ''; 

        const membersSection = document.getElementById('channelMembersSection');
        const membersList = document.getElementById('channelMembersList');
        membersList.innerHTML = '<li>–ó–∞–≥—Ä—É–∑–∫–∞...</li>'; // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏

        if (channel.members && channel.members.length > 0) {
            membersSection.classList.remove('hidden');
            const memberItems = await Promise.all(channel.members.map(async (memberId) => {
                if (memberId === channel.createdBy) return ''; // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É —É–¥–∞–ª–µ–Ω–∏—è –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞

                let memberData = allUsers.get(memberId);
                if (!memberData) {
                    const doc = await db.collection('users').doc(memberId).get();
                    if (doc.exists) memberData = doc.data();
                }

                if (memberData) {
                    return `<li>
                                <span>${escapeHTML(memberData.username)}</span>
                                <button class="kick-btn" onclick="ChatModule.removeUserFromChannel('${channel.id}', '${memberId}')">–£–¥–∞–ª–∏—Ç—å</button>
                            </li>`;
                }
                return '';
            }));
            membersList.innerHTML = memberItems.join('');
        } else {
            membersSection.classList.add('hidden');
        }
        
        showModal('channelEditModal');
    }


    async function removeUserFromChannel(channelId, userId) {
        if (!confirm("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∏–∑ –∫–∞–Ω–∞–ª–∞?")) return;
        try {
            const channelRef = db.collection('channels').doc(channelId);
            await channelRef.update({
                members: firebase.firestore.FieldValue.arrayRemove(userId)
            });
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ
            await showChannelEditModal(channelId);
        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞:", error);
            showError("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞.");
        }
    }


    async function saveChannelEdit() {
        const channelId = document.getElementById('editChannelId').value;
        const newName = document.getElementById('editChannelNameInput').value.trim();
        const newDesc = document.getElementById('editChannelDescInput').value.trim();
        const newPassword = document.getElementById('editChannelPasswordInput').value;

        if (!channelId || !newName) {
            alert("–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.");
            return;
        }

        const updates = {
            name: newName,
            description: newDesc
        };

        if (newPassword) {
            updates.hasPassword = true;
            updates.passwordHash = await hashPassword(newPassword);
        } else {
            updates.hasPassword = false;
            updates.passwordHash = null;
        }

        try {
            await db.collection('channels').doc(channelId).update(updates);
            closeModal('channelEditModal');
        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞:", error);
            alert("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è.");
        }
    }






    async function deleteChannel() {
        const channelId = document.getElementById('editChannelId').value;
        if (!channelId) return;

        if (channelId === 'general') {
            alert("–û—Å–Ω–æ–≤–Ω–æ–π –∫–∞–Ω–∞–ª —É–¥–∞–ª–∏—Ç—å –Ω–µ–ª—å–∑—è.");
            return;
        }

        if (confirm("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –∫–∞–Ω–∞–ª? –í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –Ω–µ–º –±—É–¥—É—Ç –ø–æ—Ç–µ—Ä—è–Ω—ã. –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ.")) {
            try {
                await db.collection('channels').doc(channelId).delete();
                // –í –∏–¥–µ–∞–ª–µ, –∑–¥–µ—Å—å –Ω—É–∂–Ω–æ –ø—Ä–æ–π—Ç–∏—Å—å –∏ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —ç—Ç–æ–≥–æ –∫–∞–Ω–∞–ª–∞,
                // –Ω–æ –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –ø–æ–∫–∞ –æ—Å—Ç–∞–≤–∏–º —Ç–∞–∫.
                closeModal('channelEditModal');
                if (currentChannel === channelId) {
                    // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –æ–±—â–∏–π –∫–∞–Ω–∞–ª, –µ—Å–ª–∏ —É–¥–∞–ª–∏–ª–∏ —Ç–µ–∫—É—â–∏–π
                    const generalChannel = channels.find(c => c.id === 'general');
                    if(generalChannel) handleChannelClick(generalChannel);
                }
            } catch (error) {
                console.error("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞:", error);
                alert("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª.");
            }
        }
    }



    
    function createDefaultChannel() {
        if (!currentUser) return;
        
        db.collection('channels').doc('general').set({
            name: '–û–±—â–∏–π',
            description: '–û—Å–Ω–æ–≤–Ω–æ–π –∫–∞–Ω–∞–ª –¥–ª—è –æ–±—â–µ–Ω–∏—è',
            createdBy: currentUser.uid,
            createdAt: firebase.firestore.FieldValue.serverTimestamp(),
            hasPassword: false // <-- –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º
        });
    }

    // --- –ù–ê–ß–ê–õ–û: –ù–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —Ä–∞–±–æ—Ç—ã —Å –ø–∞—Ä–æ–ª—è–º–∏ ---
    async function hashPassword(password) {
        if (!password) return null;
        const encoder = new TextEncoder();
        const data = encoder.encode(password);
        const hashBuffer = await window.crypto.subtle.digest('SHA-256', data);
        const hashArray = Array.from(new Uint8Array(hashBuffer));
        const hashHex = hashArray.map(b => b.toString(16).padStart(2, '0')).join('');
        return hashHex;
    }

    async function handleChannelClick(channel) {
        // --- –ù–ê–ß–ê–õ–û –ù–û–í–û–ì–û –ö–û–î–ê ---

        // –§—É–Ω–∫—Ü–∏—è-–ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –∫–∞–Ω–∞–ª –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —É—á–∞—Å—Ç–Ω–∏–∫–∏
        const enterChannel = async () => {
            // –†–ï–®–ï–ù–ò–ï –ü–†–û–ë–õ–ï–ú–´ ‚Ññ2: –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –ø—Ä–∏ –≤—Ö–æ–¥–µ
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–∞–Ω–∞–ª –∏ —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â–µ –Ω–µ —É—á–∞—Å—Ç–Ω–∏–∫
            if (channel.id !== 'general' && (!channel.members || !channel.members.includes(currentUser.uid))) {
                try {
                    const channelRef = db.collection('channels').doc(channel.id);
                    await channelRef.update({
                        members: firebase.firestore.FieldValue.arrayUnion(currentUser.uid)
                    });
                    console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${currentUser.displayName} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –∫–∞–Ω–∞–ª–∞ "${channel.name}"`);
                } catch (error) {
                    console.error("–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —É—á–∞—Å—Ç–Ω–∏–∫–∏:", error);
                }
            }
            // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –∫–∞–Ω–∞–ª
            switchToChannel(channel.id, channel.name, 'public');
        };

        // –ï—Å–ª–∏ –∫–∞–Ω–∞–ª –∑–∞—â–∏—â–µ–Ω –ø–∞—Ä–æ–ª–µ–º
        if (channel.hasPassword) {
            // –†–ï–®–ï–ù–ò–ï –ü–†–û–ë–õ–ï–ú–´ ‚Ññ1: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—Å–µ –µ—â–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–º
            const isMember = channel.members && channel.members.includes(currentUser.uid);

            // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ù–ï —É—á–∞—Å—Ç–Ω–∏–∫ (–∏–ª–∏ —Å–ø–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –Ω–µ—Ç), —Ç–æ –∫–ª—é—á –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω
            if (!isMember) {
                // –ï—Å–ª–∏ –æ–Ω –±—ã–ª —É–¥–∞–ª–µ–Ω, –Ω–æ –∫–ª—é—á –æ—Å—Ç–∞–ª—Å—è –≤ –±—Ä–∞—É–∑–µ—Ä–µ - –∞–Ω–Ω—É–ª–∏—Ä—É–µ–º –∫–ª—é—á
                if (unlockedChannels.has(channel.id)) {
                    unlockedChannels.delete(channel.id);
                    localStorage.setItem(`unlockedChannels_${currentUser.uid}`, JSON.stringify(Array.from(unlockedChannels)));
                    console.log(`–õ–æ–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è –∫–∞–Ω–∞–ª–∞ "${channel.name}" –∞–Ω–Ω—É–ª–∏—Ä–æ–≤–∞–Ω, —Ç–∞–∫ –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª —É–¥–∞–ª–µ–Ω.`);
                }
            }

            // –¢–µ–ø–µ—Ä—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å–ª–∏ –∫–∞–Ω–∞–ª –≤—Å–µ –µ—â–µ –Ω–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–∞—Ä–æ–ª—å
            if (!unlockedChannels.has(channel.id)) {
                const password = prompt(_chat('channel_enter_password_prompt', {
                    channelName: channel.name
                }));
                if (password === null) return;

                const enteredPasswordHash = await hashPassword(password);
                if (enteredPasswordHash === channel.passwordHash) {
                    // –ï—Å–ª–∏ –ø–∞—Ä–æ–ª—å –≤–µ—Ä–Ω—ã–π, —Ä–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –∏ –≤—Ö–æ–¥–∏–º
                    unlockedChannels.add(channel.id);
                    localStorage.setItem(`unlockedChannels_${currentUser.uid}`, JSON.stringify(Array.from(unlockedChannels)));
                    await enterChannel();
                } else {
                    alert(_chat('invalid_channel_password'));
                }
            } else {
                // –ï—Å–ª–∏ –∫–ª—é—á –µ—Å—Ç—å –∏ –æ–Ω –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—Å–µ –µ—â–µ —É—á–∞—Å—Ç–Ω–∏–∫), –ø—Ä–æ—Å—Ç–æ –≤—Ö–æ–¥–∏–º
                await enterChannel();
            }
        } else {
            // –ï—Å–ª–∏ –∫–∞–Ω–∞–ª –ø—É–±–ª–∏—á–Ω—ã–π (–±–µ–∑ –ø–∞—Ä–æ–ª—è), –ø—Ä–æ—Å—Ç–æ –≤—Ö–æ–¥–∏–º
            await enterChannel();
        }
        // --- –ö–û–ù–ï–¶ –ù–û–í–û–ì–û –ö–û–î–ê ---
    }
    
    async function createChannel() {
        const name = document.getElementById('channelNameInput').value.trim();
        const description = document.getElementById('channelDescInput').value.trim();
        const password = document.getElementById('channelPasswordInput').value;
        // --- –ù–û–í–´–ô –ö–û–î ---
        const isForTesting = document.getElementById('channelIsForTesting').checked;
        // --- –ö–û–ù–ï–¶ –ù–û–í–û–ì–û –ö–û–î–ê ---
        
        if (!name) {
            alert('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞');
            return;
        }

        const passwordHash = await hashPassword(password);
        
        try {
            await db.collection('channels').add({
                name: name,
                description: description,
                createdBy: currentUser.uid,
                createdAt: firebase.firestore.FieldValue.serverTimestamp(),
                hasPassword: !!password,
                passwordHash: passwordHash,
                // --- –ù–û–í–´–ô –ö–û–î ---
                isForTesting: isForTesting // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π —Ñ–ª–∞–≥
                // --- –ö–û–ù–ï–¶ –ù–û–í–û–ì–û –ö–û–î–ê ---
            });
            
            closeModal('channelCreateModal');
            document.getElementById('channelNameInput').value = '';
            document.getElementById('channelDescInput').value = '';
            document.getElementById('channelPasswordInput').value = '';
            // --- –ù–û–í–´–ô –ö–û–î ---
            document.getElementById('channelIsForTesting').checked = false;
            // --- –ö–û–ù–ï–¶ –ù–û–í–û–ì–û –ö–û–î–ê ---
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞–Ω–∞–ª–∞:', error);
            showError('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–∞–Ω–∞–ª');
        }
    }
    
    // ========== UI HELPERS ==========
    function showModal(modalId) {
        document.getElementById(modalId)?.classList.remove('hidden');
    }
    
    function closeModal(modalId) {
        document.getElementById(modalId)?.classList.add('hidden');
    }
    



    // –ó–ê–ú–ï–ù–ò–¢–ï –í–°–Æ –°–¢–ê–†–£–Æ –§–£–ù–ö–¶–ò–Æ –ù–ê –≠–¢–û–¢ –ö–û–î
    function showEmojiPicker() {
        const emojiBtn = document.getElementById('emojiBtn');
        if (!emojiBtn) return;

        if (!customElements.get('emoji-picker')) {
            console.warn('Emoji picker –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω');
            return;
        }

        // --- –ù–ê–ß–ê–õ–û –ù–û–í–û–ô, –ù–ê–î–ï–ñ–ù–û–ô –õ–û–ì–ò–ö–ò ---

        const existingPicker = document.querySelector('emoji-picker.main-input-picker');
        // 1. –ï—Å–ª–∏ –ø–∏–∫–µ—Ä —É–∂–µ –æ—Ç–∫—Ä—ã—Ç, –º—ã –µ–≥–æ –ø—Ä–æ—Å—Ç–æ —É–¥–∞–ª—è–µ–º –∏ –≤—ã—Ö–æ–¥–∏–º.
        // –≠—Ç–æ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –ø–æ–≤–µ–¥–µ–Ω–∏–µ "–≤–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å".
        if (existingPicker) {
            existingPicker.remove();
            return;
        }

        // 2. –°–æ–∑–¥–∞–µ–º –ù–û–í–´–ô —ç–ª–µ–º–µ–Ω—Ç –ø–∏–∫–µ—Ä–∞ –ö–ê–ñ–î–´–ô —Ä–∞–∑ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏.
        const picker = document.createElement('emoji-picker');
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å, —á—Ç–æ–±—ã –ª–µ–≥–∫–æ –µ–≥–æ –Ω–∞—Ö–æ–¥–∏—Ç—å
        picker.classList.add('main-input-picker'); 

        picker.addEventListener('emoji-click', event => {
            insertEmoji(event.detail.unicode);
            // –ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —Å–º–∞–π–ª–∏–∫–∞ –ø–∏–∫–µ—Ä –º–æ–∂–Ω–æ —Å—Ä–∞–∑—É –∑–∞–∫—Ä—ã—Ç—å
            if (picker.parentNode) {
                picker.remove();
            }
        });

        // 3. –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–∞—à—É –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—É—é –ª–æ–≥–∏–∫—É –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        document.body.appendChild(picker);
        picker.style.visibility = 'hidden';
        picker.style.position = 'fixed';
        picker.style.left = '-9999px';
        picker.style.top = '-9999px';

        const pickerRect = picker.getBoundingClientRect();
        const btnRect = emojiBtn.getBoundingClientRect();
        const viewportWidth = window.innerWidth;
        const margin = 10;

        let leftPos = btnRect.left + (btnRect.width / 2) - (pickerRect.width / 2);
        if (leftPos < margin) leftPos = margin;
        if (leftPos + pickerRect.width > viewportWidth - margin) {
            leftPos = viewportWidth - pickerRect.width - margin;
        }

        let topPos = btnRect.top - pickerRect.height - margin;
        if (topPos < margin) {
            topPos = btnRect.bottom + margin;
        }

        picker.style.top = `${topPos}px`;
        picker.style.left = `${leftPos}px`;
        
        if (document.body.classList.contains('dark-mode')) {
            picker.classList.add('dark');
        } else {
            picker.classList.add('light');
        }

        picker.style.visibility = 'visible';
        picker.classList.add('visible');

        // 4. –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—à–∞—Ç–µ–ª—å, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –£–î–ê–õ–Ø–¢–¨ –ø–∏–∫–µ—Ä –ø—Ä–∏ –∫–ª–∏–∫–µ —Å–Ω–∞—Ä—É–∂–∏.
        const closeOnClickOutside = (e) => {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–∏–∫–µ—Ä –≤—Å–µ –µ—â–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –∫–ª–∏–∫ –±—ã–ª –Ω–µ –ø–æ –Ω–µ–º—É –∏ –Ω–µ –ø–æ –∫–Ω–æ–ø–∫–µ
            if (document.body.contains(picker) && !picker.contains(e.target) && !emojiBtn.contains(e.target)) {
                picker.remove(); // <-- –°–ê–ú–û–ï –ì–õ–ê–í–ù–û–ï: –ü–û–õ–ù–û–ï –£–î–ê–õ–ï–ù–ò–ï
                // –ü–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É–±–∏—Ä–∞–µ–º —Å–∞–º —Å–ª—É—à–∞—Ç–µ–ª—å, —á—Ç–æ–±—ã –æ–Ω –Ω–µ "–≤–∏—Å–µ–ª" –≤ –ø–∞–º—è—Ç–∏
                window.removeEventListener('click', closeOnClickOutside);
            }
        };
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–ª—É—à–∞—Ç–µ–ª—å
        setTimeout(() => {
            window.addEventListener('click', closeOnClickOutside);
        }, 0);
    }
    



    function insertEmoji(emoji) {
        if (!chatInput) return;
        
        const start = chatInput.selectionStart;
        const end = chatInput.selectionEnd;
        chatInput.value = chatInput.value.substring(0, start) + emoji + chatInput.value.substring(end);
        chatInput.selectionStart = chatInput.selectionEnd = start + emoji.length;
        
        chatInput.focus();
    }
    


    
    
    function clearChatData() {
        // –û–ß–ò–©–ê–ï–ú –•–†–ê–ù–ò–õ–ò–©–ï –ü–†–ò –í–´–•–û–î–ï
        if (currentUser) {
            localStorage.removeItem(`unlockedChannels_${currentUser.uid}`);
        }

        allMessages = [];
        channels = [];
        privateChats = [];
        unlockedChannels.clear(); // <-- –î–û–ë–ê–í–õ–ï–ù–û: –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã
        if (messageArea) messageArea.innerHTML = '<div class="empty-state">–í–æ–π–¥–∏—Ç–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞</div>';
        Object.keys(TABS).forEach(tabId => {
            if(tabCounters[tabId]) updateTabCounter(tabId, 0);
        });
    }


    
    function scrollToBottom() { if (messageArea) messageArea.scrollTop = messageArea.scrollHeight; }
    
    function escapeHTML(str) { 
        const div = document.createElement('div'); 
        div.textContent = str; return div.innerHTML; 
    }

    async function deleteAccount() {
        if (!currentUser) return;

        if (!confirm("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –ù–ï–û–ë–†–ê–¢–ò–ú–û.")) {
            return;
        }

        const password = prompt("–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ç–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å:");
        if (password === null || password === "") {
            alert("–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –ü–∞—Ä–æ–ª—å –Ω–µ –±—ã–ª –≤–≤–µ–¥–µ–Ω.");
            return;
        }

        console.log(`–ù–∞—á–∞–ª–æ —É–¥–∞–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${currentUser.uid}`);
        const deleteButton = document.getElementById('deleteAccountBtn');
        if (deleteButton) {
            deleteButton.disabled = true;
            deleteButton.textContent = '–£–¥–∞–ª–µ–Ω–∏–µ...';
        }
        
        try {
            const userId = currentUser.uid;
            
            const credential = firebase.auth.EmailAuthProvider.credential(currentUser.email, password);
            await currentUser.reauthenticateWithCredential(credential);
            console.log("–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ.");

            await db.collection('users').doc(userId).delete();
            console.log(`–î–æ–∫—É–º–µ–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} —É–¥–∞–ª–µ–Ω –∏–∑ Firestore.`);

            await currentUser.delete();
            console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} —É–¥–∞–ª–µ–Ω –∏–∑ Firebase Auth.`);

            alert('–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –±—ã–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.');
            
            ChatModule.closeModal('profileEditModal');
            ChatModule.closeChatModal();

        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞:", error);
            let errorMessage = '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞.';
            
            if (error.code === 'auth/wrong-password') {
                errorMessage = '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.';
            } else if (error.code === 'auth/requires-recent-login') {
                errorMessage += ' –î–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–µ–¥–∞–≤–Ω–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–π–¥–∏—Ç–µ –∏ –≤–æ–π–¥–∏—Ç–µ —Å–Ω–æ–≤–∞.';
            }
            
            alert(errorMessage);
        } finally {
            if (deleteButton) {
                deleteButton.disabled = false;
                deleteButton.textContent = 'üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç';
            }
        }
    }



    // --- –ù–ê–ß–ê–õ–û –ù–û–í–û–ì–û –ö–û–î–ê: –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª —Ñ–∞–π–ª–æ–≤ –≤ —á–∞—Ç–µ ---

    function handleChatFileUploadTrigger() {
        document.getElementById('chatFileInput')?.click();
    }

    function handleChatFileSelected(event) {
        const file = event.target.files[0];
        if (!file) return;

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
        const allowedExtensions = ['.qst', '.txt'];
        const fileExtension = '.' + file.name.split('.').pop().toLowerCase();
        if (!allowedExtensions.includes(fileExtension)) {
            alert('–ú–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ñ–∞–π–ª—ã .qst –∏ .txt');
            return;
        }

        const reader = new FileReader();
        reader.onload = async (e) => {
            const fileContent = e.target.result;
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
            const sendBtn = document.getElementById('sendBtn');
            sendBtn.disabled = true;
            sendBtn.classList.add('loading');
            sendBtn.innerHTML = ''; 

            try {
                // 1. –ü–∞—Ä—Å–∏–º —Ñ–∞–π–ª, —á—Ç–æ–±—ã –ø–æ—Å—á–∏—Ç–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã
                const questions = window.mainApp.parseQstContent(fileContent);
                const questionCount = questions.length;

                // 2. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –Ω–∞ —Å–µ—Ä–≤–µ—Ä –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
                const response = await fetch(googleAppScriptUrl, {
                    method: 'POST',
                    mode: 'no-cors', // –í–∞–∂–Ω–æ –¥–ª—è –æ–±—Ö–æ–¥–∞ CORS
                    body: JSON.stringify({
                        action: 'chatFileUpload',
                        fileName: file.name,
                        content: fileContent
                    })
                });

                // –¢–∞–∫ –∫–∞–∫ mode='no-cors', –º—ã –Ω–µ –º–æ–∂–µ–º –ø—Ä–æ—á–∏—Ç–∞—Ç—å –æ—Ç–≤–µ—Ç –Ω–∞–ø—Ä—è–º—É—é.
                // –í–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ, –¥–µ–ª–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å ID —Ñ–∞–π–ª–∞.
                // –≠—Ç–æ –æ–±—Ö–æ–¥–Ω–æ–π –ø—É—Ç—å –¥–ª—è Google Apps Script.
                 setTimeout(async () => {
                    try {
                        const checkResponse = await fetch(`${googleAppScriptUrl}?action=getChatFileInfoByName&fileName=${encodeURIComponent(file.name)}`);
                        const fileData = await checkResponse.json();
                        
                        if(fileData.success && fileData.fileId){
                            // 3. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ñ–∞–π–ª–µ
                            await sendFileMessage(file.name, fileData.fileId, questionCount);
                        } else {
                            throw new Error(fileData.error || '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID —Ñ–∞–π–ª–∞ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏.');
                        }
                    } catch(error) {
                        console.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è ID —Ñ–∞–π–ª–∞: ", error);
                        showError("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª.");
                    } finally {
                        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–Ω–æ–ø–∫—É –≤ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                        sendBtn.disabled = false;
                        sendBtn.classList.remove('loading');
                        sendBtn.innerHTML = '‚û§';
                    }
                }, 2000); // –î–∞–µ–º —Å–µ—Ä–≤–µ—Ä—É –≤—Ä–µ–º—è –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É

            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ —á–∞—Ç–∞:', error);
                showError('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–∞–π–ª.');
                sendBtn.disabled = false;
                sendBtn.classList.remove('loading');
                sendBtn.innerHTML = '‚û§';
            }
        };
        reader.readAsText(file, 'UTF-8');

        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∏–Ω–ø—É—Ç–∞, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–æ—Ç –∂–µ —Ñ–∞–π–ª –µ—â–µ —Ä–∞–∑
        event.target.value = '';
    }

    async function sendFileMessage(fileName, fileId, questionCount) {
        if (!currentUser || !db) return;

        const message = {
            authorId: currentUser.uid,
            authorName: currentUser.displayName || currentUser.email || '–ê–Ω–æ–Ω–∏–º',
            channelId: currentChannel,
            createdAt: firebase.firestore.FieldValue.serverTimestamp(),
            type: 'file_share', // –ù–æ–≤—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è
            fileInfo: {
                id: fileId,
                name: fileName,
                questions: questionCount
            }
        };

        await db.collection('messages').add(message);
    }

    function showFileActionsModal(fileId, fileName, isTestingChannel = false) {
        document.getElementById('fileActionsModalTitle').textContent = `${_chat('file_actions_modal_title')} ${decodeURIComponent(fileName)}`;

        const downloadBtn = document.getElementById('fileActionDownloadBtn');
        const testBtn = document.getElementById('fileActionTestBtn');
        const modalButtonsContainer = testBtn.parentElement;

        // –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø—Ä–æ–±–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞, –µ—Å–ª–∏ –æ–Ω–∞ –±—ã–ª–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ —Ä–∞–Ω–µ–µ
        const oldPracticeBtn = document.getElementById('fileActionPracticeTestBtn');
        if (oldPracticeBtn) {
            oldPracticeBtn.remove();
        }

        // –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –∏ –ø–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∫–∞–Ω–∞–ª–∞
        if (isTestingChannel) {
            // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É "–ü—Ä–æ–±–Ω—ã–π —Ç–µ—Å—Ç"
            const practiceTestBtn = document.createElement('button');
            practiceTestBtn.id = 'fileActionPracticeTestBtn';
            practiceTestBtn.textContent = _chat('practice_test_button');
            // –ü—Ä–æ–±–Ω—ã–π —Ç–µ—Å—Ç –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            practiceTestBtn.onclick = () => startTestFromShare(fileId, fileName, { isPractice: true });
            
            // –í—Å—Ç–∞–≤–ª—è–µ–º –µ–µ –ø–µ—Ä–µ–¥ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–Ω–æ–ø–∫–æ–π "–ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç"
            modalButtonsContainer.insertBefore(practiceTestBtn, testBtn);
            
            // –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∫–Ω–æ–ø–∫—É –∏ –∑–∞–¥–∞–µ–º –µ–π –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ
            testBtn.textContent = _chat('official_test_button');
            testBtn.onclick = () => startTestFromShare(fileId, fileName, { isPractice: false });

        } else {
            // –î–ª—è –æ–±—ã—á–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –≤—Å–µ –∫–∞–∫ —Ä–∞–Ω—å—à–µ
            testBtn.textContent = _chat('file_actions_test');
            testBtn.onclick = () => startTestFromShare(fileId, fileName, { isPractice: true }); // –û–±—ã—á–Ω—ã–π —Ç–µ—Å—Ç - —ç—Ç–æ "–ø—Ä–æ–±–Ω—ã–π"
        }
        
        // –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –æ–¥–∏–Ω–∞–∫–æ–≤–æ
        downloadBtn.onclick = () => downloadSharedFile(fileId, fileName);
        
        showModal('fileActionsModal');
    }

    async function downloadSharedFile(fileId, fileName) {
        try {
            closeModal('fileActionsModal');
            const url = `${googleAppScriptUrl}?action=getChatFileContent&fileId=${fileId}`;
            const response = await fetch(url);
            const data = await response.json();
            if (!data.success) throw new Error(data.error);

            await window.mainApp.downloadOrShareFile(fileName, data.content, 'text/plain;charset=utf-8', `–§–∞–π–ª`);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞ –∏–∑ —á–∞—Ç–∞:', error);
            alert(`–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª: ${error.message}`);
        }
    }



    async function startTestFromShare(fileId, fileName, options = { isPractice: true }) {
         try {
            closeModal('fileActionsModal');
            ChatModule.closeChatModal();

            window.mainApp.showGlobalLoader(`–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ—Å—Ç–∞ "${decodeURIComponent(fileName)}"...`);

            const url = `${googleAppScriptUrl}?action=getChatFileContent&fileId=${fileId}`;
            const response = await fetch(url);
            const data = await response.json();
            if (!data.success) throw new Error(data.error);
            
            // --- –ù–û–í–´–ô –ö–û–î ---
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –∑–∞–ø–∏—Å–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            const quizContext = {
                fileId: fileId,
                channelId: currentChannel,
                isPractice: options.isPractice
            };
            // –ü–µ—Ä–µ–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏ —Ä–µ–∂–∏–º –≤ —Å–ª–µ–¥—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é
            window.mainApp.processFile(decodeURIComponent(fileName), data.content, quizContext);
            // --- –ö–û–ù–ï–¶ –ù–û–í–û–ì–û –ö–û–î–ê ---

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–∞ –∏–∑ —á–∞—Ç–∞:', error);
            window.mainApp.hideGlobalLoader();
            alert(`–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç: ${error.message}`);
        }
    }



    async function uploadFileToServer(fileName, fileContent, url) { // <-- 1. –î–æ–±–∞–≤–ª–µ–Ω 'url'
        if (!fileName || !fileContent) {
            console.warn("–ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—É—Å—Ç–æ–π —Ñ–∞–π–ª. –û—Ç–º–µ–Ω–µ–Ω–æ.");
            return;
        }
        if (!url) {
            console.error("URL –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω. –ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.");
            return;
        }

        console.log(`–û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ "${fileName}" –Ω–∞ —Å–µ—Ä–≤–µ—Ä...`);

        try {
            const payload = {
                fileName: fileName,
                content: fileContent,
                isQstValid: true
            };

            const response = await fetch(url, { // <-- 2. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è 'url' –≤–º–µ—Å—Ç–æ googleAppScriptUrl
                method: 'POST',
                mode: 'no-cors',
                cache: 'no-cache',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(payload)
            });

            console.log("–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä –¥–ª—è –∞—Ä—Ö–∏–≤–∞—Ü–∏–∏.");

        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä:", error);
        }
    }

    function toggleNotifications() {
        notificationsEnabled = !notificationsEnabled;

        const notificationBtn = document.getElementById('notificationToggle');
        if (notificationBtn) {
            notificationBtn.classList.toggle('active', notificationsEnabled);
            notificationBtn.title = `–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ${notificationsEnabled ? '–≤–∫–ª—é—á–µ–Ω—ã' : '–≤—ã–∫–ª—é—á–µ–Ω—ã'}`;
        }

        alert(`–ó–≤—É–∫–æ–≤—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ${notificationsEnabled ? '–≤–∫–ª—é—á–µ–Ω—ã' : '–≤—ã–∫–ª—é—á–µ–Ω—ã'}.`);
        console.log(`–°—Ç–∞—Ç—É—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: ${notificationsEnabled}`);
    }


    function showNotification(playSound) {
        if (!notificationsEnabled) return;

        if (document.hidden) {
            try {
                if (playSound) {
                    const sound = document.getElementById('notificationSound');
                    if (sound) {
                        sound.currentTime = 0;
                        sound.play().catch(e => console.warn("–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –∑–≤—É–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è."));
                    }
                }

                unreadMessageCount++;
                document.title = `(${unreadMessageCount}) –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!`;
            } catch(e) {
                console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:", e);
            }
        }
    }

    function setupVisibilityListener() {
        document.addEventListener('visibilitychange', () => {
            if (!document.hidden) {
                if (unreadMessageCount > 0) {
                    unreadMessageCount = 0;
                    setTimeout(() => {
                        document.title = originalTitle;
                    }, 2000);
                }
            }
        });
    }

    async function togglePinMessage(messageId) {
        if (!db || !currentUser) return;

        const messageRef = db.collection('messages').doc(messageId);
        try {
            const doc = await messageRef.get();
            if (!doc.exists) return;

            const isCurrentlyPinned = doc.data().isPinned || false;
            await messageRef.update({
                isPinned: !isCurrentlyPinned
            });
            console.log(`–°–æ–æ–±—â–µ–Ω–∏–µ ${messageId} ${!isCurrentlyPinned ? '–∑–∞–∫—Ä–µ–ø–ª–µ–Ω–æ' : '–æ—Ç–∫—Ä–µ–ø–ª–µ–Ω–æ'}`);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
            showError('–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è.');
        }
    }

    function togglePinnedModeView() {
        isPinnedMode = !isPinnedMode;
        
        const toggleBtn = document.getElementById('togglePinnedBtn');
        if (toggleBtn) {
            toggleBtn.classList.toggle('active', isPinnedMode);
            toggleBtn.title = isPinnedMode ? '–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è' : '–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–µ';
        }

        displayMessages();
    }
    
    // === –ù–ê–ß–ê–õ–û –ù–û–í–´–• –§–£–ù–ö–¶–ò–ô –î–õ–Ø –ö–ù–û–ü–û–ö ===
    
    function setupTabActions(tabId) {
        const container = document.getElementById('tabActionsContainer');
        if (!container) return;
        
        container.innerHTML = ''; 
        container.classList.remove('hidden');
    
        if (tabId === 'questions' || tabId === 'favorites') {
            const downloadQstBtn = document.createElement('button');
            downloadQstBtn.textContent = _chat('download_qst_button'); // –ò–ó–ú–ï–ù–ï–ù–û
            downloadQstBtn.onclick = () => handleDownload(tabId, 'qst');
            container.appendChild(downloadQstBtn);
    
            const downloadTxtBtn = document.createElement('button');
            downloadTxtBtn.textContent = _chat('download_txt_button'); // –ò–ó–ú–ï–ù–ï–ù–û
            downloadTxtBtn.onclick = () => handleDownload(tabId, 'txt');
            container.appendChild(downloadTxtBtn);
        }
    
        if (tabId === 'favorites') {
            const clearBtn = document.createElement('button');
            clearBtn.textContent = _chat('clear_favorites_button'); // –ò–ó–ú–ï–ù–ï–ù–û
            clearBtn.classList.add('btn-danger'); 
            clearBtn.onclick = () => clearAllFavorites();
            container.appendChild(clearBtn);
        }
    }





    async function handleDownload(dataType, format) {
        if (!currentUser) {
            alert("–î–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –≤ —á–∞—Ç–µ.");
            return;
        }
        
        let itemsToProcess = [];
        const fileName = `${dataType}_${new Date().toISOString().slice(0, 10)}`;

        try {
            if (dataType === 'favorites') {
                const snapshot = await db.collection('favorites').where('userId', '==', currentUser.uid).get();
                itemsToProcess = snapshot.docs.map(doc => {
                    const data = doc.data();
                    return { ...data.content, type: data.type };
                });

            } else if (dataType === 'questions') {
                const snapshot = await db.collection('questions').where('channelId', '==', currentChannel).get();
                itemsToProcess = snapshot.docs.map(doc => ({ id: doc.id, type: 'question', ...doc.data() }));
            }

            if (itemsToProcess.length === 0) {
                alert(`–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≤ —Ä–∞–∑–¥–µ–ª–µ "${dataType}".`);
                return;
            }

            let fileContent = '';
            if (format === 'qst') {
                fileContent = itemsToProcess.map(item => {
                    let qstBlock = `? ${item.text || ''}\n`;
                    if (item.type === 'question' && item.options) {
                        item.options.forEach(opt => {
                            qstBlock += `${opt.isCorrect ? '+' : '-'} ${opt.text}\n`;
                        });
                    } else { 
                        qstBlock += `+ ${item.text || ''}\n`;
                    }
                    return qstBlock;
                }).join('\n');
            } else { // txt format
                fileContent = itemsToProcess.map(item => {
                    if (item.type === 'question' && item.options) {
                        const correctAnswer = item.options.find(opt => opt.isCorrect)?.text || 'N/A';
                        return `–í–æ–ø—Ä–æ—Å: ${item.text}\n–û—Ç–≤–µ—Ç: ${correctAnswer}\n`;
                    } else {
                        return `–°–æ–æ–±—â–µ–Ω–∏–µ: ${item.text}\n`;
                    }
                }).join('----------------------------------\n');
            }

            const fullFileName = `${fileName}.${format}`;
            const shareTitle = dataType === 'favorites' ? '–ò–∑–±—Ä–∞–Ω–Ω–æ–µ' : '–í–æ–ø—Ä–æ—Å—ã';
            
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
            if (window.mainApp && typeof window.mainApp.downloadOrShareFile === 'function') {
                console.log('–ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∏–∑ —á–∞—Ç–∞');
                await window.mainApp.downloadOrShareFile(fullFileName, fileContent, 'text/plain;charset=utf-8', shareTitle);
            } else {
                console.warn('–ù–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback');
                // Fallback –Ω–∞ —Å—Ç–∞—Ä—É—é —Å–∏—Å—Ç–µ–º—É
                if (window.mainApp && typeof window.mainApp.downloadFile === 'function') {
                    window.mainApp.downloadFile(fullFileName, fileContent, 'text/plain;charset=utf-8');
                } else {
                    alert('–°–∏—Å—Ç–µ–º–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
                }
            }

        } catch (error) {
            console.error(`–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –¥–ª—è ${dataType}:`, error);
            alert("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –¥–∞–Ω–Ω—ã–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.");
        }
    }
    



    async function clearAllFavorites() {
        if (!currentUser || !db) return;
    
        if (!confirm("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –í–°–ï —ç–ª–µ–º–µ–Ω—Ç—ã –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ.")) {
            return;
        }
    
        try {
            const querySnapshot = await db.collection('favorites')
                .where('userId', '==', currentUser.uid)
                .get();
    
            if (querySnapshot.empty) {
                alert("–ò–∑–±—Ä–∞–Ω–Ω–æ–µ —É–∂–µ –ø—É—Å—Ç–æ.");
                return;
            }
    
            const batch = db.batch();
            querySnapshot.docs.forEach(doc => {
                batch.delete(doc.ref);
            });
            await batch.commit();
    
            alert("–ò–∑–±—Ä–∞–Ω–Ω–æ–µ —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω–æ.");
            loadFavorites(); 
    
        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ:", error);
            showError("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å –∏–∑–±—Ä–∞–Ω–Ω–æ–µ.");
        }
    }



    async function copyQuestionAsQst(questionObject) {
        if (!questionObject || !questionObject.text || !Array.isArray(questionObject.options)) {
            console.error("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞.");
            return;
        }

        // 1. –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ .qst —Ñ–æ—Ä–º–∞—Ç
        let qstContent = `? ${questionObject.text}\n`;
        questionObject.options.forEach(opt => {
            qstContent += `${opt.isCorrect ? '+' : '-'} ${opt.text}\n`;
        });

        // 2. –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑ mainApp
        try {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–∞—à—É –≥–ª–æ–±–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
            await copyToClipboardMain(qstContent);
            // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –≤—Å—Ç—Ä–æ–µ–Ω–æ –≤ copyToClipboardMain
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞:', error);
            alert('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å.');
        }
    }

    async function showTestResults(fileId, channelId) {
        const modalTitle = document.getElementById('testResultsModalTitle');
        const tableContainer = document.getElementById('testResultsTableContainer');
        
        modalTitle.textContent = '–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ —Ç–µ—Å—Ç—É';
        tableContainer.innerHTML = `<div class="loading-placeholder">${_chat('loading_message')}</div>`;
        showModal('testResultsModal');

        try {
            const querySnapshot = await db.collection('testResults')
                .where('fileId', '==', fileId)
                .where('channelId', '==', channelId)
                .orderBy('accuracy', 'desc') // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ç–æ—á–Ω–æ—Å—Ç–∏ (–ª—É—á—à–∏–µ –≤–≤–µ—Ä—Ö—É)
                .get();
                
            if (querySnapshot.empty) {
                tableContainer.innerHTML = `<div class="results-empty-state">–ü–æ —ç—Ç–æ–º—É —Ç–µ—Å—Ç—É –ø–æ–∫–∞ –Ω–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.</div>`;
                return;
            }
            
            let tableHTML = `
                <table>
                    <thead>
                        <tr>                      
                            <th>${_chat('results_table_header_num')}</th>
                            <th>${_chat('results_table_header_user')}</th>
                            <th>${_chat('results_table_header_accuracy')}</th>
                            <th>${_chat('results_table_header_time')}</th>
                        </tr>
                    </thead>
                    <tbody>
            `;

            querySnapshot.docs.forEach((doc, index) => {
                const result = doc.data();
                const time = result.timeSpentSeconds;
                const minutes = Math.floor(time / 60);
                const seconds = time % 60;
                const timeFormatted = `${String(minutes).padStart(2, '0')}:${String(seconds).padStart(2, '0')}`;
                
                tableHTML += `
                    <tr>
                        <td>${index + 1}</td>
                        <td>${escapeHTML(result.userName || '–ê–Ω–æ–Ω–∏–º')}</td>
                        <td>${result.accuracy.toFixed(1)}%</td>
                        <td>${timeFormatted}</td>
                    </tr>
                `;
            });
            
            tableHTML += `</tbody></table>`;
            tableContainer.innerHTML = tableHTML;

        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∞:", error);
            tableContainer.innerHTML = `<div class="results-empty-state">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: ${error.message}</div>`;
        }
    }



    // ========== PUBLIC METHODS ==========
    return {
        init,
        setCurrentUser: (user) => {
            currentUser = user;
            updateUserUI();
        },

        openChatModal: () => {
            if (!chatOverlay) return;
            
            // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–∫–Ω–æ –≤—Ö–æ–¥–∞
            if (!currentUser) {
                openChatAfterAuth = true;
                ChatModule.openAuthModal();
                return;
            }
            
            // –ü—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —á–∞—Ç. –¢–µ–∫—Å—Ç –≤ –Ω–µ–º —É–∂–µ –±—É–¥–µ—Ç –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —è–∑—ã–∫–µ.
            chatOverlay.classList.remove('hidden');

            // –ö–ª—é—á–µ–≤–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ–∫—É—â–µ–π –≤–∫–ª–∞–¥–∫–∏ –ö–ê–ñ–î–´–ô –†–ê–ó –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏.
            // –≠—Ç–æ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–æ–±—Ä–∞–∑—è—Ç—Å—è, –¥–∞–∂–µ –µ—Å–ª–∏ –æ–Ω–∏ –∑–∞–≥—Ä—É–∑–∏–ª–∏—Å—å –≤ —Ñ–æ–Ω–µ.
            loadTabData(currentTab); 
        },

        showTestResults,

        closeChatModal: () => {
            if (chatOverlay) {
                chatOverlay.classList.add('hidden');
            }
        },
        openAuthModal: () => {
            if (authOverlay) {
                authOverlay.classList.remove('hidden');
            }
        },
        closeAuthModal: () => {
            if (authOverlay) {
                authOverlay.classList.add('hidden');
            }
        },
        
        // === –ù–ê–ß–ê–õ–û –ù–û–í–û–ì–û –ú–ï–¢–û–î–ê ===
        /**
         * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —è–∑—ã–∫ –¥–ª—è –º–æ–¥—É–ª—è —á–∞—Ç–∞ –∏ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ—Ç –µ–≥–æ UI,
         * –¥–∞–∂–µ –µ—Å–ª–∏ –æ–Ω —Å–∫—Ä—ã—Ç.
         * @param {string} lang - –ö–æ–¥ —è–∑—ã–∫–∞ ('ru' –∏–ª–∏ 'en').
         */
        setLanguage: (lang) => {
            if (LANG_PACK_CHAT[lang]) {
                currentChatLang = lang;
                localStorage.setItem('chatLanguage', lang);
                updateChatUIText();

                // === –ù–ê–ß–ê–õ–û –ù–û–í–û–ì–û –ö–û–î–ê: –ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥ ===
                // –ï—Å–ª–∏ –æ—Ç–∫—Ä—ã—Ç —á–∞—Ç –∏ –∞–∫—Ç–∏–≤–Ω–∞ –≤–∫–ª–∞–¥–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π,
                // –ø–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –∏—Ö, —á—Ç–æ–±—ã –ø—Ä–∏–º–µ–Ω–∏–ª—Å—è –Ω–æ–≤—ã–π —è–∑—ã–∫.
                if (chatOverlay && !chatOverlay.classList.contains('hidden') && currentTab === 'messages') {
                    displayMessages();
                }
                // === –ö–û–ù–ï–¶ –ù–û–í–û–ì–û –ö–û–î–ê ===
            }
        },
        // === –ö–û–ù–ï–¶ –ù–û–í–û–ì–û –ú–ï–¢–û–î–ê ===




        // Action methods
        sendChatMessage: sendMessage,
        createChannel,
        createQuestion,
        voteForOption,
        navigateToQuestion,
        startReply, 
        cancelReply, 
        startEditMessage, 
        saveMessageEdit, 
        showReactionPicker, 
        toggleReaction, 
        scrollToMessage,
        deleteMessage,   
        deleteQuestion,
        showProfileModal, 
        saveProfile,     
        logout,           
        addToFavorites,
        removeFromFavorites,
        toggleNotifications,
        closeModal,
        deleteAccount,
        insertEmoji,
        togglePinMessage,
        showChannelEditModal,
        saveChannelEdit,
        deleteChannel,
        showUserActions,
        startPrivateChat,
        uploadFileToServer,
        removeUserFromChannel,
        copyQuestionAsQst,
        voteForFavoriteOption,
        showFileActionsModal, 
        showModal: showModal, 
        closeModal: closeModal,
        
        // Getters
        isInitialized: () => isInitialized,
        getCurrentUser: () => currentUser,
        getCurrentTab: () => currentTab
    };
})();



// –û–±–Ω–æ–≤–ª—è–µ–º —Å—Å—ã–ª–∫–∏ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
window.ChatModule = ChatModule;



// –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞ (–≤–µ—Ä—Å–∏—è –¥–ª—è mainApp)
async function copyToClipboardMain(text) {
    try {
        if (navigator.clipboard && navigator.clipboard.writeText) {
            await navigator.clipboard.writeText(text);
            alert('–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!');
        } else {
            // Fallback –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤
            const textArea = document.createElement('textarea');
            textArea.value = text;
            document.body.appendChild(textArea);
            textArea.select();
            textArea.setSelectionRange(0, 99999);
            document.execCommand('copy');
            document.body.removeChild(textArea);
            alert('–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!');
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
        alert('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Ç–µ–∫—Å—Ç –≤—Ä—É—á–Ω—É—é.');
    }
}








const googleAppScriptUrl = 'https://script.google.com/macros/s/AKfycbyBtPbM0J91gDiuj4Ha-gTLesCMI8gSqMC3D0GYbGZ0YHIsP2mvu5ePmiftA03GLso/exec';












// ============================================
// –û–°–ù–û–í–ù–û–ô –°–ö–†–ò–ü–¢ –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø
// ============================================    

const mainApp = (function() {
    'use strict';

// --- –°–õ–û–í–ê–†–¨ –ü–ï–†–ï–í–û–î–û–í ---
    const LANG_PACK = {
        ru: {
            // –ì–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω
            continue_later_button: '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–∑–∂–µ',
            continue_sessions: '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å:',
            answered_of: '–û—Ç–≤–µ—á–µ–Ω–æ',
            from: '–∏–∑',
            time_left: '–û—Å—Ç–∞–ª–æ—Å—å –≤—Ä–µ–º–µ–Ω–∏',
            continue_quiz_button: '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å',
            delete_session_button: '–£–¥–∞–ª–∏—Ç—å',
            search_in_db: '–ü–æ–∏—Å–∫ –≤–æ–ø—Ä–æ—Å–∞ –≤ –±–∞–∑–µ:',
            search_placeholder: '–í–≤–µ–¥–∏—Ç–µ —á–∞—Å—Ç—å —Ç–µ–∫—Å—Ç–∞ –≤–æ–ø—Ä–æ—Å–∞...',
            find_button: '–ù–∞–π—Ç–∏',
            searching_in_db: '–ò–¥–µ—Ç –ø–æ–∏—Å–∫ –ø–æ –±–∞–∑–µ...',
            or_divider: '-- –∏–ª–∏ --',
            choose_file: '–í—ã–±–µ—Ä–∏—Ç–µ .qst –ª–∏–±–æ .txt —Ñ–∞–π–ª —Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:',
            gradus_button_main: 'GRADUS',
            gradus_subtitle: '(General Repository for Academic Data, Utility & Structure)',
            parser_button_main: '–ü–µ—Ä–µ–≤–µ—Å—Ç–∏',
            parser_subtitle: '—Ç–µ–∫—Å—Ç –≤ —Ñ–æ—Ä–º–∞—Ç .qst',
            recent_files: '–ù–µ–¥–∞–≤–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ:',
            // –ù–∞–≤–∏–≥–∞—Ü–∏—è –∏ –∑–∞–≥–æ–ª–æ–≤–∫–∏
            nav_gradus: '–ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ GRADUS',
            back_to_main: '–ù–∞–∑–∞–¥ –∫ –≥–ª–∞–≤–Ω–æ–º—É —ç–∫—Ä–∞–Ω—É',
            search_results_title: '–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞',
            back_to_search: '–ù–æ–≤—ã–π –ø–æ–∏—Å–∫',
            quiz_settings_title: '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–µ—Å—Ç–∞',
            cheat_sheet_title: '–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —à–ø–æ—Ä–∞:',
            quiz_finished_title: '–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!',
            parser_title: '–ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä –≤ .qst',
            parser_description: '–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –∏–ª–∏ –≤—Å—Ç–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç —Ç–µ—Å—Ç–∞.',
            // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–µ—Å—Ç–∞
            time_limit: '–õ–∏–º–∏—Ç –≤—Ä–µ–º–µ–Ω–∏ (–º–∏–Ω—É—Ç—ã, 0 - –±–µ–∑ –ª–∏–º–∏—Ç–∞):',
            time_limit_minutes: '–º–∏–Ω',
            question_range: '–î–∏–∞–ø–∞–∑–æ–Ω –≤–æ–ø—Ä–æ—Å–æ–≤:',
            range_from: '–û—Ç',
            range_to: '–î–æ',
            total_questions_label: '–≤—Å–µ–≥–æ',
            questions_label_for_range: '–≤–æ–ø—Ä–æ—Å–æ–≤',
            shuffle_questions: '–ü–µ—Ä–µ–º–µ—à–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã',
            shuffle_answers: '–ü–µ—Ä–µ–º–µ—à–∞—Ç—å –æ—Ç–≤–µ—Ç—ã',
            feedback_mode: '–†–µ–∂–∏–º –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ (—Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—à–∏–±–∫–∏)',
            reading_mode: '–†–µ–∂–∏–º —á—Ç–µ–Ω–∏—è (–ø–µ—Ä–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –≤–µ—Ä–Ω—ã–π)',
            start_quiz_button: '–ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç',
            generate_cheat_sheet_button: '–°–æ–∑–¥–∞—Ç—å —à–ø–æ—Ä—É',
            choose_another_file_button: '–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π —Ñ–∞–π–ª',
            // –®–ø–∞—Ä–≥–∞–ª–∫–∞
            download_cheat_sheet_button: '–°–∫–∞—á–∞—Ç—å —à–ø–æ—Ä—É (.txt)',
            back_to_settings_button: '–ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º',
            // –≠–∫—Ä–∞–Ω —Ç–µ—Å—Ç–∞
            timer_label: '–í—Ä–µ–º—è:',
            prev_question_button: '–ü—Ä–µ–¥—ã–¥—É—â–∏–π',
            next_question_button: '–°–ª–µ–¥—É—é—â–∏–π',
            finish_button: '–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ç–µ—Å—Ç',
            question_label: '–í–æ–ø—Ä–æ—Å:',
            correct_label: '–ü—Ä–∞–≤–∏–ª—å–Ω–æ:',
            quick_nav_title: '–ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –≤–æ–ø—Ä–æ—Å–∞–º:',
            finish_early_button: '–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ç–µ—Å—Ç',
            // –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
            your_result: '–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç:',
            of_label: '–∏–∑',
            accuracy_label: '–¢–æ—á–Ω–æ—Å—Ç—å:',
            download_errors_button: '–°–∫–∞—á–∞—Ç—å –Ω–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã–µ/–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã',
            review_errors_button: '–†–∞–±–æ—Ç–∞ –Ω–∞–¥ –æ—à–∏–±–∫–∞–º–∏',
            download_triggered_quiz_button: '–°–∫–∞—á–∞—Ç—å —Ç–µ—Å—Ç —Å —Ç—Ä–∏–≥–≥–µ—Ä–∞–º–∏',
            restart_button: '–ü—Ä–æ–π—Ç–∏ –¥—Ä—É–≥–æ–π —Ç–µ—Å—Ç',
            // –ü–∞—Ä—Å–µ—Ä
            parser_upload_or_paste: '1. –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª (.txt) –∏–ª–∏ –≤—Å—Ç–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –Ω–∏–∂–µ:',
            clear_parser_input: '–û—á–∏—Å—Ç–∏—Ç—å –ø–æ–ª–µ',
            parser_input_placeholder: '–ò–ª–∏ –≤—Å—Ç–∞–≤—å—Ç–µ —Å—é–¥–∞ —Ç–µ–∫—Å—Ç –∏–∑ –≤–∞—à–µ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞...',
            parser_select_format: '2. –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç (–∏–ª–∏ –æ—Å—Ç–∞–≤—å—Ç–µ –¥–ª—è –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è):',
            parser_auto_detect: '-- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ --',
            parser_run_button: '3. –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å',
            parser_errors_found: '‚ö†Ô∏è –û—à–∏–±–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è',
            parser_result_title: '–†–µ–∑—É–ª—å—Ç–∞—Ç:',
            download_parsed_button: '–°–∫–∞—á–∞—Ç—å .qst —Ñ–∞–π–ª',
            back_button: '–ù–∞–∑–∞–¥',
            // –ö–Ω–æ–ø–∫–∏ –≤ —à–∞–ø–∫–µ (–î–û–ë–ê–í–õ–ï–ù–û –¥–ª—è –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–∏—è)
            copy_question_title: '–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å',
            search_web_title: '–ù–∞–π—Ç–∏ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ',
            chat_button_title: '–û—Ç–∫—Ä—ã—Ç—å —á–∞—Ç',
            quick_mode_title: '–ë—ã—Å—Ç—Ä—ã–π —Ä–µ–∂–∏–º (–ê–≤—Ç–æ–ø–µ—Ä–µ—Ö–æ–¥)',
            trigger_words_title: '–¢—Ä–∏–≥–≥–µ—Ä-—Å–ª–æ–≤–∞',
            theme_button_title: '–°–º–µ–Ω–∏—Ç—å —Ç–µ–º—É',
            language_toggle_title: '–°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫',
            favorite_button_title: '–î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ',
            // –°–æ–æ–±—â–µ–Ω–∏—è (–î–û–ë–ê–í–õ–ï–ù–û)
            search_query_too_short: '–ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞.',
            file_empty_or_invalid_part1: '–§–∞–π–ª "',
            file_empty_or_invalid_part2: '" –ø—É—Å—Ç –∏–ª–∏ –∏–º–µ–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.',
            no_questions_for_settings: '–ù–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∞ —Å —Ç–µ–∫—É—â–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏.',
            confirm_finish_early: '–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ç–µ—Å—Ç –¥–æ—Å—Ä–æ—á–Ω–æ?',
            copy_button: "–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å",
            search_provider_db: "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö",
            relevance_tag: "–†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å:",
            copy_button: "–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å",
            copy_question_tooltip: "–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å",
            favorite_question_tooltip: "–î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ",

            ai_explanation_title: 'üí° –û–±—ä—è—Å–Ω–µ–Ω–∏–µ –æ—Ç –ò–ò',
            ai_explanation_style_label: '–°—Ç–∏–ª—å –æ–±—ä—è—Å–Ω–µ–Ω–∏—è:',
            ai_explain_button: 'üí° –û–±—ä—è—Å–Ω–∏—Ç—å',
            ai_explanation_loading: '–ò–ò –≥–æ—Ç–æ–≤–∏—Ç –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ...',
            ai_generating_button: 'ü§ñ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è...',
            ai_error_text_empty: '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—Å—Ç–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.',
            ai_error_generation: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–∞.',
            ai_question_count_label: '4. –£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –ò–ò:',
            ai_auto_mode_label: '–ê–≤—Ç–æ',
            ai_generate_button: 'ü§ñ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ—Å—Ç (–ò–ò)',
            ai_style_simple: "–ü—Ä–æ—Å—Ç–æ",
            ai_style_scientific: "–ù–∞—É—á–Ω–æ",
            ai_style_associative: "–ê–Ω–∞–ª–æ–≥–∏—è",
            ai_style_stepbystep: "–ü–æ—à–∞–≥–æ–≤–æ",
            ai_style_practical: "–ü—Ä–∞–∫—Ç–∏—á–Ω–æ",
            ai_style_visual: "–ù–∞–≥–ª—è–¥–Ω–æ",
            ai_answer_count_label: '5. –£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞:',  


        },
        kz: {
            // Main Screen
            continue_later_button: '–ö–µ–π—ñ–Ω—ñ—Ä–µ–∫ –∂–∞–ª“ì–∞—Å—Ç—ã—Ä—É',
            continue_sessions: '–ñ–∞–ª“ì–∞—Å—Ç—ã—Ä—É:',
            answered_of: '–ñ–∞—É–∞–ø –±–µ—Ä—ñ–ª–¥—ñ:',
            from: ', –∂–∞–ª–ø—ã:',
            time_left: '“ö–∞–ª“ì–∞–Ω —É–∞“õ—ã—Ç',
            continue_quiz_button: '–ñ–∞–ª“ì–∞—Å—Ç—ã—Ä—É',
            delete_session_button: '–ñ–æ—é',
            search_in_db: '–î–µ—Ä–µ–∫“õ–æ—Ä–¥–∞–Ω —Å“±—Ä–∞“õ—Ç—ã —ñ–∑–¥–µ—É:',
            search_placeholder: '–°“±—Ä–∞“õ –º”ô—Ç—ñ–Ω—ñ–Ω—ñ“£ –±”©–ª—ñ–≥—ñ–Ω –µ–Ω–≥—ñ–∑—ñ“£—ñ–∑...',
            find_button: '–Ü–∑–¥–µ—É',
            searching_in_db: '–î–µ—Ä–µ–∫“õ–æ—Ä–¥–∞–Ω —ñ–∑–¥–µ—É –∂“Ø—Ä—ñ–ø –∂–∞—Ç—ã—Ä...',
            or_divider: '-- –Ω–µ–º–µ—Å–µ --',
            choose_file: '“ö“±—Ä—ã–ª“ì—ã–¥–∞–Ω .qst –Ω–µ–º–µ—Å–µ .txt —Ñ–∞–π–ª—ã–Ω —Ç–∞“£–¥–∞“£—ã–∑:',
            gradus_button_main: 'GRADUS',
            gradus_subtitle: '(General Repository for Academic Data, Utility & Structure)',
            parser_button_main: '–ú”ô—Ç—ñ–Ω–¥—ñ',
            parser_subtitle: '.qst –ø—ñ—à—ñ–º—ñ–Ω–µ –∞—É–¥–∞—Ä—É',
            recent_files: '–ñ–∞“õ—ã–Ω–¥–∞ –ø–∞–π–¥–∞–ª–∞–Ω—ã–ª“ì–∞–Ω–¥–∞—Ä:',
            // Navigation & Headers
            nav_gradus: 'GRADUS –±–æ–π—ã–Ω—à–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏—è',
            back_to_main: '–ë–∞—Å—Ç—ã —ç–∫—Ä–∞–Ω“ì–∞ –æ—Ä–∞–ª—É',
            search_results_title: '–Ü–∑–¥–µ—É –Ω”ô—Ç–∏–∂–µ–ª–µ—Ä—ñ',
            back_to_search: '–ñ–∞“£–∞ —ñ–∑–¥–µ—É',
            quiz_settings_title: '–¢–µ—Å—Ç –±–∞–ø—Ç–∞—É–ª–∞—Ä—ã',
            cheat_sheet_title: '–î–∞–π—ã–Ω–¥–∞–ª“ì–∞–Ω —à–ø–∞—Ä–≥–∞–ª–∫–∞:',
            quiz_finished_title: '–¢–µ—Å—Ç –∞—è“õ—Ç–∞–ª–¥—ã!',
            parser_title: '.qst —Ñ–æ—Ä–º–∞—Ç—ã–Ω–∞ —Ç“Ø—Ä–ª–µ–Ω–¥—ñ—Ä–≥—ñ—à',
            parser_description: '–¢–µ—Å—Ç –ø—ñ—à—ñ–º—ñ–Ω–µ —Ç“Ø—Ä–ª–µ–Ω–¥—ñ—Ä—É “Ø—à—ñ–Ω —Ñ–∞–π–ª–¥—ã –∂“Ø–∫—Ç–µ“£—ñ–∑ –Ω–µ–º–µ—Å–µ –º”ô—Ç—ñ–Ω–¥—ñ “õ–æ–π—ã“£—ã–∑.',
            // Quiz Settings
            time_limit: '–£–∞“õ—ã—Ç —à–µ–∫—Ç–µ—É—ñ (–º–∏–Ω—É—Ç, 0 - —à–µ–∫—Ç–µ—É—Å—ñ–∑):',
            time_limit_minutes: '–º–∏–Ω',
            question_range: '–°“±—Ä–∞“õ—Ç–∞—Ä –∞—É“õ—ã–º—ã:',
            range_from: '–ë–∞—Å—Ç–∞–ø',
            range_to: '–î–µ–π—ñ–Ω',
            total_questions_label: '–±–∞—Ä–ª—ã“ì—ã',
            questions_label_for_range: '—Å“±—Ä–∞“õ',
            shuffle_questions: '–°“±—Ä–∞“õ—Ç–∞—Ä–¥—ã –∞—Ä–∞–ª–∞—Å—Ç—ã—Ä—É',
            shuffle_answers: '–ñ–∞—É–∞–ø—Ç–∞—Ä–¥—ã –∞—Ä–∞–ª–∞—Å—Ç—ã—Ä—É',
            feedback_mode: '–ö–µ—Ä—ñ –±–∞–π–ª–∞–Ω—ã—Å —Ä–µ–∂–∏–º—ñ (“õ–∞—Ç–µ–ª–µ—Ä–¥—ñ —Å–∞“õ—Ç–∞—É)',
            reading_mode: '–û“õ—É —Ä–µ–∂–∏–º—ñ (–±—ñ—Ä—ñ–Ω—à—ñ –∂–∞—É–∞–ø –¥“±—Ä—ã—Å)',
            start_quiz_button: '–¢–µ—Å—Ç—Ç—ñ –±–∞—Å—Ç–∞—É',
            generate_cheat_sheet_button: '–®–ø–∞—Ä–≥–∞–ª–∫–∞ –∂–∞—Å–∞—É',
            choose_another_file_button: '–ë–∞—Å“õ–∞ —Ñ–∞–π–ª —Ç–∞“£–¥–∞—É',
            // Cheat Sheet
            download_cheat_sheet_button: '–®–ø–∞—Ä–≥–∞–ª–∫–∞–Ω—ã –∂“Ø–∫—Ç–µ—É (.txt)',
            back_to_settings_button: '–ë–∞–ø—Ç–∞—É–ª–∞—Ä“ì–∞ –æ—Ä–∞–ª—É',
            // Quiz Screen
            timer_label: '–£–∞“õ—ã—Ç:',
            prev_question_button: '–ê–ª–¥—ã“£“ì—ã',
            next_question_button: '–ö–µ–ª–µ—Å—ñ',
            finish_button: '–¢–µ—Å—Ç—Ç—ñ –∞—è“õ—Ç–∞—É',
            question_label: '–°“±—Ä–∞“õ:',
            correct_label: '–î“±—Ä—ã—Å:',
            quick_nav_title: '–°“±—Ä–∞“õ—Ç–∞—Ä –±–æ–π—ã–Ω—à–∞ –∂—ã–ª–¥–∞–º ”©—Ç—É:',
            finish_early_button: '–¢–µ—Å—Ç—Ç—ñ –∞—è“õ—Ç–∞—É',
            // Results
            your_result: '–°—ñ–∑–¥—ñ“£ –Ω”ô—Ç–∏–∂–µ“£—ñ–∑:',
            of_label: '—ñ—à—ñ–Ω–µ–Ω',
            accuracy_label: '–î”ô–ª–¥—ñ–∫:',
            download_errors_button: '–ñ–∞—É–∞–ø –±–µ—Ä—ñ–ª–º–µ–≥–µ–Ω/“õ–∞—Ç–µ —Å“±—Ä–∞“õ—Ç–∞—Ä–¥—ã –∂“Ø–∫—Ç–µ—É',
            review_errors_button: '“ö–∞—Ç–µ–ª–µ—Ä–º–µ–Ω –∂“±–º—ã—Å',
            download_triggered_quiz_button: '–¢—Ä–∏–≥–≥–µ—Ä–ª–µ—Ä—ñ –±–∞—Ä —Ç–µ—Å—Ç—Ç—ñ –∂“Ø–∫—Ç–µ—É',
            restart_button: '–ë–∞—Å“õ–∞ —Ç–µ—Å—Ç ”©—Ç—É',
            // Parser
            parser_upload_or_paste: '1. –§–∞–π–ª–¥—ã (.txt) –∂“Ø–∫—Ç–µ“£—ñ–∑ –Ω–µ–º–µ—Å–µ –º”ô—Ç—ñ–Ω–¥—ñ —Ç”©–º–µ–Ω–≥–µ “õ–æ–π—ã“£—ã–∑:',
            clear_parser_input: '”®—Ä—ñ—Å—Ç—ñ —Ç–∞–∑–∞—Ä—Ç—É',
            parser_input_placeholder: '–ù–µ–º–µ—Å–µ “õ“±–∂–∞—Ç—Ç–∞“ì—ã –º”ô—Ç—ñ–Ω–¥—ñ –æ—Å—ã–Ω–¥–∞ “õ–æ–π—ã“£—ã–∑...',
            parser_select_format: '2. –ü—ñ—à—ñ–º–¥—ñ —Ç–∞“£–¥–∞“£—ã–∑ (–Ω–µ–º–µ—Å–µ –∞–≤—Ç–æ–∞–Ω—ã“õ—Ç–∞—É “Ø—à—ñ–Ω “õ–∞–ª–¥—ã—Ä—ã“£—ã–∑):',
            parser_auto_detect: '-- –ê–≤—Ç–æ–º–∞—Ç—Ç—ã —Ç“Ø—Ä–¥–µ –∞–Ω—ã“õ—Ç–∞—É --',
            parser_run_button: '3. –¢“Ø—Ä–ª–µ–Ω–¥—ñ—Ä—É',
            parser_errors_found: '‚ö†Ô∏è –ü—ñ—à—ñ–º–¥–µ—É “õ–∞—Ç–µ–ª–µ—Ä—ñ',
            parser_result_title: '–ù”ô—Ç–∏–∂–µ:',
            download_parsed_button: '.qst —Ñ–∞–π–ª—ã–Ω –∂“Ø–∫—Ç–µ—É',
            back_button: '–ê—Ä—Ç“õ–∞',
            // Header Buttons
            copy_question_title: '–ê“ì—ã–º–¥–∞“ì—ã —Å“±—Ä–∞“õ—Ç—ã –∫”©—à—ñ—Ä—É',
            search_web_title: '–ò–Ω—Ç–µ—Ä–Ω–µ—Ç—Ç–µ–Ω —ñ–∑–¥–µ—É',
            chat_button_title: '–ß–∞—Ç—Ç—ã –∞—à—É',
            quick_mode_title: '–ñ—ã–ª–¥–∞–º —Ä–µ–∂–∏–º (–ê–≤—Ç–æ–º–∞—Ç—Ç—ã ”©—Ç—É)',
            trigger_words_title: '–¢—Ä–∏–≥–≥–µ—Ä-—Å”©–∑–¥–µ—Ä',
            theme_button_title: '–¢–∞“õ—ã—Ä—ã–ø—Ç—ã ”©–∑–≥–µ—Ä—Ç—É',
            language_toggle_title: '–¢—ñ–ª–¥—ñ ”©–∑–≥–µ—Ä—Ç—É',
            favorite_button_title: '–¢–∞“£–¥–∞—É–ª—ã–ª–∞—Ä“ì–∞ “õ–æ—Å—É',
            // Messages
            search_query_too_short: '–Ü–∑–¥–µ—É —Å“±—Ä–∞–Ω—ã—Å—ã –∫–µ–º—ñ–Ω–¥–µ 3 —Ç–∞“£–±–∞–¥–∞–Ω —Ç“±—Ä—É—ã –∫–µ—Ä–µ–∫.',
            file_empty_or_invalid_part1: '"',
            file_empty_or_invalid_part2: '" —Ñ–∞–π–ª—ã –±–æ—Å –Ω–µ–º–µ—Å–µ –ø—ñ—à—ñ–º—ñ –∂–∞—Ä–∞–º—Å—ã–∑.',
            no_questions_for_settings: '–ê“ì—ã–º–¥–∞“ì—ã –±–∞–ø—Ç–∞—É–ª–∞—Ä “Ø—à—ñ–Ω —Å“±—Ä–∞“õ—Ç–∞—Ä —Ç–∞–±—ã–ª–º–∞–¥—ã.',
            confirm_finish_early: '–¢–µ—Å—Ç—Ç—ñ –º–µ—Ä–∑—ñ–º—ñ–Ω–µ–Ω –±“±—Ä—ã–Ω –∞—è“õ—Ç–∞“ì—ã“£—ã–∑ –∫–µ–ª–µ—Ç—ñ–Ω—ñ–Ω–µ —Å–µ–Ω—ñ–º–¥—ñ—Å—ñ–∑ –±–µ?',
            copy_button: "–ö”©—à—ñ—Ä—É",
            search_provider_db: "–î–µ—Ä–µ–∫“õ–æ—Ä",
            relevance_tag: "–°”ô–π–∫–µ—Å—Ç—ñ–ª—ñ–∫:",
            copy_button: "–ö”©—à—ñ—Ä—É", 
            copy_question_tooltip: "–°“±—Ä–∞“õ—Ç—ã –∫”©—à—ñ—Ä—É",
            favorite_question_tooltip: "–¢–∞“£–¥–∞—É–ª—ã–ª–∞—Ä“ì–∞ “õ–æ—Å—É",


            ai_explanation_title: 'üí° –ñ–ò —Ç“Ø—Å—ñ–Ω–¥—ñ—Ä–º–µ—Å—ñ',
            ai_explanation_style_label: '–¢“Ø—Å—ñ–Ω–¥—ñ—Ä—É —Å—Ç–∏–ª—ñ:',
            ai_explain_button: 'üí° –¢“Ø—Å—ñ–Ω–¥—ñ—Ä—É',
            ai_explanation_loading: '–ñ–ò —Ç“Ø—Å—ñ–Ω–¥—ñ—Ä–º–µ –¥–∞–π—ã–Ω–¥–∞—É–¥–∞...',
            ai_generating_button: 'ü§ñ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è...',
            ai_error_text_empty: '–¢–∞–ª–¥–∞—É “Ø—à—ñ–Ω –º”ô—Ç—ñ–Ω–¥—ñ –µ–Ω–≥—ñ–∑—ñ“£—ñ–∑.',
            ai_error_generation: '–¢–µ—Å—Ç –∂–∞—Å–∞—É –∫–µ–∑—ñ–Ω–¥–µ “õ–∞—Ç–µ –ø–∞–π–¥–∞ –±–æ–ª–¥—ã.',
            ai_question_count_label: '4. –ñ–ò “Ø—à—ñ–Ω —Å“±—Ä–∞“õ—Ç–∞—Ä —Å–∞–Ω—ã–Ω –∫”©—Ä—Å–µ—Ç—ñ“£—ñ–∑:',
            ai_auto_mode_label: '–ê–≤—Ç–æ',
            ai_generate_button: 'ü§ñ –¢–µ—Å—Ç “õ“±—Ä—É (–ñ–ò)',
            ai_style_simple: "“ö–∞—Ä–∞–ø–∞–π—ã–º",
            ai_style_scientific: "“í—ã–ª—ã–º–∏",
            ai_style_associative: "–ê–Ω–∞–ª–æ–≥–∏—è",
            ai_style_stepbystep: "“ö–∞–¥–∞–º–º–µ–Ω",
            ai_style_practical: "–ü—Ä–∞–∫—Ç–∏–∫–∞–ª—ã“õ",
            ai_style_visual: "–ö”©—Ä–Ω–µ–∫—ñ",
            ai_answer_count_label: '5. –ñ–∞—É–∞–ø –Ω“±—Å“õ–∞–ª–∞—Ä—ã–Ω—ã“£ —Å–∞–Ω—ã–Ω –∫”©—Ä—Å–µ—Ç—ñ“£—ñ–∑:',
        },
        en: {
            // Main Screen
            continue_later_button: 'Continue Later',
            continue_sessions: 'Continue:',
            answered_of: 'Answered',
            from: 'of',
            time_left: 'Time left',
            continue_quiz_button: 'Continue',
            delete_session_button: 'Delete',
            search_in_db: 'Search question in database:',
            search_placeholder: 'Enter part of the question text...',
            find_button: 'Search',
            searching_in_db: 'Searching database...',
            or_divider: '-- or --',
            choose_file: 'Select a .qst or .txt file from your device:',
            gradus_button_main: 'GRADUS',
            gradus_subtitle: '(General Repository for Academic Data, Utility & Structure)',
            parser_button_main: 'Convert',
            parser_subtitle: 'text to .qst format',
            recent_files: 'Recently used:',
            // Navigation & Headers
            nav_gradus: 'GRADUS Navigation',
            back_to_main: 'Back to Main Screen',
            search_results_title: 'Search Results',
            back_to_search: 'New Search',
            quiz_settings_title: 'Quiz Settings',
            cheat_sheet_title: 'Generated Cheat Sheet:',
            quiz_finished_title: 'Quiz Finished!',
            parser_title: 'Converter to .qst',
            parser_description: 'Upload a file or paste text to convert into a quiz format.',
            // Quiz Settings
            time_limit: 'Time limit (minutes, 0 - no limit):',
            time_limit_minutes: 'min',
            question_range: 'Question Range:',
            range_from: 'From',
            range_to: 'To',
            total_questions_label: 'total',
            questions_label_for_range: 'questions',
            shuffle_questions: 'Shuffle questions',
            shuffle_answers: 'Shuffle answers',
            feedback_mode: 'Feedback mode (save mistakes)',
            reading_mode: 'Reading mode (first option is correct)',
            start_quiz_button: 'Start Quiz',
            generate_cheat_sheet_button: 'Generate Cheat Sheet',
            choose_another_file_button: 'Choose Another File',
            // Cheat Sheet
            download_cheat_sheet_button: 'Download Cheat Sheet (.txt)',
            back_to_settings_button: 'Back to Settings',
            // Quiz Screen
            timer_label: 'Time:',
            prev_question_button: 'Previous',
            next_question_button: 'Next',
            finish_button: 'Finish Quiz',
            question_label: 'Question:',
            correct_label: 'Correct:',
            quick_nav_title: 'Quick Navigation:',
            finish_early_button: 'Finish Quiz',
            // Results
            your_result: 'Your result:',
            of_label: 'of',
            accuracy_label: 'Accuracy:',
            download_errors_button: 'Download unanswered/incorrect questions',
            review_errors_button: 'Review Mistakes',
            download_triggered_quiz_button: 'Download Quiz with Triggers',
            restart_button: 'Take Another Quiz',
            // Parser
            parser_upload_or_paste: '1. Upload a file (.txt) or paste text below:',
            clear_parser_input: 'Clear input',
            parser_input_placeholder: 'Or paste text from your document here...',
            parser_select_format: '2. Select format (or leave for auto-detection):',
            parser_auto_detect: '-- Automatic detection --',
            parser_run_button: '3. Convert',
            parser_errors_found: '‚ö†Ô∏è Formatting errors',
            parser_result_title: 'Result:',
            download_parsed_button: 'Download .qst file',
            back_button: 'Back',
            // Header Buttons (–ü–û–õ–ù–û–°–¢–¨–Æ –ü–ï–†–ï–í–ï–î–ï–ù–û)
            copy_question_title: 'Copy current question',
            search_web_title: 'Search the web',
            chat_button_title: 'Open Chat',
            quick_mode_title: 'Quick Mode (Auto-advance)',
            trigger_words_title: 'Trigger Words',
            theme_button_title: 'Change Theme',
            language_toggle_title: 'Change Language',
            favorite_button_title: 'Add to Favorites',
            // Messages (–ü–û–õ–ù–û–°–¢–¨–Æ –ü–ï–†–ï–í–ï–î–ï–ù–û)
            search_query_too_short: 'Search query must contain at least 3 characters.',
            file_empty_or_invalid_part1: 'File "',
            file_empty_or_invalid_part2: '" is empty or has an invalid format.',
            no_questions_for_settings: 'No questions found for the current settings.',
            confirm_finish_early: 'Are you sure you want to finish the quiz early?',
            copy_button: "Copy",
            search_provider_db: "Database",
            relevance_tag: "Relevance:",
            copy_button: "Copy",
            copy_question_tooltip: "Copy question",
            favorite_question_tooltip: "Add to favorites",
            ai_generating_button: 'ü§ñ Generating...',
            ai_error_text_empty: 'Please paste text to analyze.',
            ai_error_generation: 'An error occurred while generating the test.',


            ai_explanation_title: 'üí° AI Explanation',
            ai_explanation_style_label: 'Explanation Style:',
            ai_explain_button: 'üí° Explain',
            ai_explanation_loading: 'AI is preparing an explanation...',
            ai_generating_button: 'ü§ñ Generating...',
            ai_error_text_empty: 'Please paste text to analyze.',
            ai_error_generation: 'An error occurred while generating the test.',
            ai_question_count_label: '4. Specify the number of questions for the AI:',
            ai_auto_mode_label: 'Auto',
            ai_generate_button: 'ü§ñ Generate Test (AI)',
            ai_style_simple: "Simple",
            ai_style_scientific: "Scientific",
            ai_style_associative: "Analogy",
            ai_style_stepbystep: "Step-by-step",
            ai_style_practical: "Practical",
            ai_style_visual: "Visual",
            ai_answer_count_label: '5. Specify the number of answer choices:',
        }


    };



    function _(key) {
        const currentLang = localStorage.getItem('appLanguage') || 'ru';
        return LANG_PACK[currentLang][key] || key;
    }

    const getEl = (id) => document.getElementById(id);


    // --- Firebase & Auth ---
    let db, auth, currentUser = null;
    const FIREBASE_CONFIG = {
        apiKey: "AIzaSyDk4J8N0mdPpFtulT5DMr2Y8tHX93HrU2s",
        authDomain: "qst-chat.firebaseapp.com",
        projectId: "qst-chat",
        storageBucket: "qst-chat.appspot.com",
        messagingSenderId: "24969645733",
        appId: "1:24969645733:web:47bc96a13817544246074c"
    };


    // --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –û–±—ä—è–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∑–¥–µ—Å—å, –Ω–æ –Ω–µ –ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è ---
    let fileInput, fileUploadArea, quizSetupArea, quizArea, resultsArea,
        questionTextEl, answerOptionsEl, feedbackAreaEl, prevQuestionButton,
        nextButton, restartButton, startQuizButton, currentQuestionNumEl,
        totalQuestionsNumEl, correctAnswersCountEl, finalCorrectEl, finalTotalEl,
        finalPercentageEl, timeLimitInput, timeLimitValueDisplay,
        questionRangeStartInput, questionRangeEndInput, maxQuestionsInfoEl,
        shuffleQuestionsCheckbox, shuffleAnswersCheckbox, feedbackModeCheckbox,
        timerDisplayEl, timeLeftEl, quickNavPanel, quickNavButtonsContainer,
        feedbackDownloadArea, downloadErrorsButton, themeToggleButton,
        quickModeToggle, triggerWordToggle, recentFilesArea, recentFilesListEl,
        errorReviewArea, reviewErrorsButton, generateCheatSheetButton,
        cheatSheetResultArea, cheatSheetOutputEl, downloadCheatSheetButton,
        backToSettingsButton, chooseAnotherFileButton, finishTestButton,
        triggeredQuizDownloadArea, downloadTriggeredQuizButton, gradusButton,
        gradusFoldersContainer, gradusFolderList, backToFileUploadButton,
        gradusBreadcrumbs, searchContainer, searchQueryInput, searchButton,
        searchResultsContainer, backToSearchButton, webSearchDropdown,
        searchWebButton, searchDropdownContent, chatToggleBtn, languageToggle,
        copyQuestionBtnQuiz, parserArea, parserButton, backToMainFromParserBtn,
        parserFileInput, parserInput, parserPatternSelect, runParserBtn,
        parserOutputArea, parserOutput, downloadParsedBtn, clearParserInputBtn,
        filterVariantsBtn, filterVariantsDropdown, filterVariantCheckboxes,
        applyVariantFilterBtn, resetVariantFilterBtn, searchNavigation,
        prevResultBtn, nextResultBtn, resultCounterEl, readingModeCheckbox, 
        searchResultCardsContainer, continueLaterButton, savedSessionArea, 
        savedSessionList;

    let generateTestFromTextBtn, aiQuestionCount, aiAutoCount;


    // --- State Variables ---
    let allParsedQuestions = [];
    let questionsForCurrentQuiz = [];
    let currentQuestionIndex = 0;
    let userAnswers = [];
    let score = 0;
    let quizSettings = { timeLimit: 0, shuffleQuestions: false, shuffleAnswers: false, questionRangeStart: 1, questionRangeEnd: 0, feedbackMode: false };
    let quickModeEnabled = localStorage.getItem('quizQuickModeEnabled') === 'true';
    const QUICK_MODE_DELAY = 1000;
    let triggerWordModeEnabled = false;
    let triggerWordsUsedInQuiz = false;
    let incorrectlyAnsweredQuestionsData = [];
    let timerInterval = null;
    let timeLeftInSeconds = 0;
    const MAX_RECENT_FILES = 5;
    const RECENT_FILES_STORAGE_KEY = 'recentQstFilesData';
    const SAVED_SESSIONS_STORAGE_KEY = 'savedQuizSessions'; 
    let originalFileNameForReview = '';
    let generatedCheatSheetContent = '';
    let breadcrumbs = [];
    let searchResultsData = [];
    let currentResultIndex = 0;
    let currentQuizContext = null;
    let quizStartTime = 0;
    let currentAIQuestion = null; // –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞

    // --- Constants ---

    const GRADUS_ROOT_FOLDER_ID = '1RLrkW1CZUo8PvpJt-C7xZgK0xzHnXmZ7';


    const handleBeforeUnload = (event) => {
        // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Å–ø–æ—Å–æ–± –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –≤ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –±—Ä–∞—É–∑–µ—Ä–∞—Ö
        event.preventDefault();
        // Chrome —Ç—Ä–µ–±—É–µ—Ç, —á—Ç–æ–±—ã returnValue –±—ã–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.
        event.returnValue = '';
    };

    function initializeApp() {
        // --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º –∑–¥–µ—Å—å ---
        
        
        fileInput = getEl('fileInput');
        fileUploadArea = getEl('fileUploadArea');
        quizSetupArea = getEl('quizSetupArea');
        quizArea = getEl('quizArea');
        resultsArea = getEl('resultsArea');
        questionTextEl = getEl('questionText');
        answerOptionsEl = getEl('answerOptions');
        feedbackAreaEl = getEl('feedbackArea');
        prevQuestionButton = getEl('prevQuestionButton');
        nextButton = getEl('nextButton');
        restartButton = getEl('restartButton');
        startQuizButton = getEl('startQuizButton');
        currentQuestionNumEl = getEl('currentQuestionNum');
        totalQuestionsNumEl = getEl('totalQuestionsNum');
        correctAnswersCountEl = getEl('correctAnswersCount');
        finalCorrectEl = getEl('finalCorrect');
        finalTotalEl = getEl('finalTotal');
        finalPercentageEl = getEl('finalPercentage');
        timeLimitInput = getEl('timeLimit');
        timeLimitValueDisplay = getEl('timeLimitValue');
        questionRangeStartInput = getEl('questionRangeStart');
        questionRangeEndInput = getEl('questionRangeEnd');
        maxQuestionsInfoEl = getEl('maxQuestionsInfo');
        shuffleQuestionsCheckbox = getEl('shuffleQuestions');
        shuffleAnswersCheckbox = getEl('shuffleAnswers');
        feedbackModeCheckbox = getEl('feedbackMode');
        readingModeCheckbox = getEl('readingMode');
        timerDisplayEl = getEl('timerDisplay');
        timeLeftEl = getEl('timeLeft');
        quickNavPanel = getEl('quickNavPanel');
        quickNavButtonsContainer = getEl('quickNavButtons');
        feedbackDownloadArea = getEl('feedbackDownloadArea');
        downloadErrorsButton = getEl('downloadErrorsButton');
        themeToggleButton = getEl('themeToggle');
        quickModeToggle = getEl('quickModeToggle');
        triggerWordToggle = getEl('triggerWordToggle');
        recentFilesArea = getEl('recentFilesArea');
        recentFilesListEl = getEl('recentFilesList');
        errorReviewArea = getEl('errorReviewArea');
        reviewErrorsButton = getEl('reviewErrorsButton');
        generateCheatSheetButton = getEl('generateCheatSheetButton');
        cheatSheetResultArea = getEl('cheatSheetResultArea');
        cheatSheetOutputEl = getEl('cheatSheetOutput');
        downloadCheatSheetButton = getEl('downloadCheatSheetButton');
        backToSettingsButton = getEl('backToSettingsButton');
        chooseAnotherFileButton = getEl('chooseAnotherFileButton');
        finishTestButton = getEl('finishTestButton');
        triggeredQuizDownloadArea = getEl('triggeredQuizDownloadArea');
        downloadTriggeredQuizButton = getEl('downloadTriggeredQuizButton');
        gradusButton = getEl('gradusButton');
        gradusFoldersContainer = getEl('gradusFoldersContainer');
        gradusFolderList = getEl('gradusFolderList');
        backToFileUploadButton = getEl('backToFileUploadButton');
        gradusBreadcrumbs = getEl('gradusBreadcrumbs');
        searchContainer = getEl('searchContainer');
        searchQueryInput = getEl('searchQueryInput');
        searchButton = getEl('searchButton');
        searchResultsContainer = getEl('searchResultsContainer');
        backToSearchButton = getEl('backToSearchButton');
        webSearchDropdown = getEl('webSearchDropdown');
        searchWebButton = getEl('searchWebButton');
        searchDropdownContent = getEl('searchDropdownContent');
        chatToggleBtn = getEl('chatToggle');
        languageToggle = getEl('languageToggle');
        copyQuestionBtnQuiz = getEl('copyQuestionBtnQuiz');
        parserArea = getEl('parserArea');
        parserButton = getEl('parserButton');
        backToMainFromParserBtn = getEl('backToMainFromParserBtn');
        parserFileInput = getEl('parserFileInput');
        parserInput = getEl('parserInput');
        parserPatternSelect = getEl('parserPatternSelect');
        runParserBtn = getEl('runParserBtn');
        parserOutputArea = getEl('parserOutputArea');
        parserOutput = getEl('parserOutput');
        downloadParsedBtn = getEl('downloadParsedBtn');
        clearParserInputBtn = getEl('clearParserInputBtn');
        filterVariantsBtn = getEl('filterVariantsBtn');
        filterVariantsDropdown = getEl('filterVariantsDropdown');
        filterVariantCheckboxes = getEl('filterVariantCheckboxes');
        applyVariantFilterBtn = getEl('applyVariantFilterBtn');
        resetVariantFilterBtn = getEl('resetVariantFilterBtn');
        searchNavigation = getEl('searchNavigation');
        prevResultBtn = getEl('prevResultBtn');
        nextResultBtn = getEl('nextResultBtn');
        resultCounterEl = getEl('resultCounter');
        searchResultCardsContainer = getEl('searchResultCards');
        continueLaterButton = getEl('continueLaterButton');
        savedSessionArea = getEl('savedSessionArea');
        savedSessionList = getEl('savedSessionList');
        generateTestFromTextBtn = getEl('generateTestFromTextBtn');
        aiQuestionCount = getEl('aiQuestionCount');
        aiAutoCount = getEl('aiAutoCount');

        // –û—Å—Ç–∞–ª—å–Ω–∞—è —á–∞—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏ initializeApp
        try {
            if (typeof firebase === 'undefined') {
                throw new Error('Firebase SDK –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω');
            }
            firebase.initializeApp(FIREBASE_CONFIG);
            db = firebase.firestore();
            auth = firebase.auth();
            console.log('‚úÖ Firebase –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ');
            ChatModule.init(db, auth);
            auth.onAuthStateChanged(user => {
                currentUser = user;
                ChatModule.setCurrentUser(user);
            });
        } catch (e) {
            console.error("‚ùå Firebase initialization failed:", e);
            alert("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å Firebase. –ß–∞—Ç –±—É–¥–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –û—à–∏–±–∫–∞: " + e.message);
            ChatModule.init(null, null);
        }
        
        setupEventListeners();
        loadTheme();
        updateQuickModeToggleVisual();
        updateTriggerWordToggleVisual();
        loadRecentFiles();
        loadSavedSession();
        const savedLang = localStorage.getItem('appLanguage') || 'ru';
        populateParserPatterns();
        setLanguage(savedLang);
        createVariantFilterCheckboxes();
    }



    
    function setupEventListeners() {
        getEl('favoriteQuestionBtn')?.addEventListener('click', handleFavoriteClickInQuiz);
        getEl('copyExplanationBtn')?.addEventListener('click', handleCopyExplanation);
        fileInput.addEventListener('change', handleFileSelect);
        startQuizButton.addEventListener('click', () => applySettingsAndStartQuiz(false, null));
        gradusButton?.addEventListener('click', () => {
            fileUploadArea.classList.add('hidden');
            gradusFoldersContainer.classList.remove('hidden');
            renderGradusView(GRADUS_ROOT_FOLDER_ID, 'GRADUS', true);
        });
        backToFileUploadButton?.addEventListener('click', () => {
            gradusFoldersContainer.classList.add('hidden');
            fileUploadArea.classList.remove('hidden');
        });
        searchButton?.addEventListener('click', performSearch);
        backToSearchButton?.addEventListener('click', () => {
            searchResultsContainer.classList.add('hidden');
            fileUploadArea.classList.remove('hidden');
            searchQueryInput.value = '';
        });
        searchWebButton?.addEventListener('click', (event) => {
            event.stopPropagation();
            searchDropdownContent.classList.toggle('show');
        });
        searchDropdownContent?.addEventListener('click', handleWebSearch);
        window.addEventListener('click', (event) => {
            if (!event.target.matches('#searchWebButton') && searchDropdownContent?.classList.contains('show')) {
                searchDropdownContent.classList.remove('show');
            }
        });


        generateTestFromTextBtn?.addEventListener('click', handleAIGenerationRequest);
        aiAutoCount?.addEventListener('change', () => {
            aiQuestionCount.disabled = aiAutoCount.checked;
        });


        // –í–Ω—É—Ç—Ä–∏ setupEventListeners()
        getEl('aiExplanationStyleButtons').addEventListener('click', (e) => {
            if (e.target.tagName === 'BUTTON') {
                getEl('aiExplanationStyleButtons').querySelectorAll('button').forEach(btn => btn.classList.remove('active'));
                e.target.classList.add('active');
                fetchAndDisplayExplanation(e.target.dataset.style);
            }
        });

        // –í–Ω—É—Ç—Ä–∏ —Ñ—É–Ω–∫—Ü–∏–∏ setupEventListeners()
        parserButton?.addEventListener('click', () => {
            fileUploadArea.classList.add('hidden');
            parserArea.classList.remove('hidden');
        });

        backToMainFromParserBtn?.addEventListener('click', () => {
            parserArea.classList.add('hidden');
            fileUploadArea.classList.remove('hidden');
        });

        parserFileInput?.addEventListener('change', handleParserFileInput);
        runParserBtn?.addEventListener('click', runParser);
        downloadParsedBtn?.addEventListener('click', downloadParsedQst);
        clearParserInputBtn?.addEventListener('click', clearParserInput);


        nextButton.addEventListener('click', handleNextButtonClick);
        prevQuestionButton.addEventListener('click', loadPreviousQuestion);
        restartButton.addEventListener('click', resetQuizForNewFile);
        downloadErrorsButton.addEventListener('click', downloadErrorFile);
        copyQuestionBtnQuiz?.addEventListener('click', handleCopyQuestionInQuiz);
        reviewErrorsButton?.addEventListener('click', startErrorReviewQuiz);
        generateCheatSheetButton?.addEventListener('click', handleGenerateCheatSheet);
        downloadCheatSheetButton?.addEventListener('click', handleDownloadOrShareCheatSheet);
        backToSettingsButton?.addEventListener('click', () => {
            cheatSheetResultArea.classList.add('hidden');
            quizSetupArea.classList.remove('hidden');
        });
        chooseAnotherFileButton?.addEventListener('click', () => resetQuizForNewFile(true));
        continueLaterButton?.addEventListener('click', saveSessionForLater);
        finishTestButton?.addEventListener('click', () => {
            if (confirm(_('confirm_finish_early'))) {
                if (timerInterval) clearInterval(timerInterval);
                showResults();
            }
        });

        quickModeToggle?.addEventListener('click', toggleQuickMode);
        triggerWordToggle?.addEventListener('click', toggleTriggerWordMode);
        downloadTriggeredQuizButton?.addEventListener('click', downloadTriggeredQuizFile);
        readingModeCheckbox?.addEventListener('change', handleReadingModeChange);
        timeLimitInput.addEventListener('input', () => timeLimitValueDisplay.textContent = timeLimitInput.value);
        themeToggleButton?.addEventListener('click', toggleTheme);
        languageToggle?.addEventListener('click', toggleLanguage);
        chatToggleBtn?.addEventListener('click', () => {
            ChatModule.openChatModal();
        });
                
        prevResultBtn?.addEventListener('click', () => {
            if (currentResultIndex > 0) {
                currentResultIndex--;
                displaySingleResult(currentResultIndex);
            }
        });
        nextResultBtn?.addEventListener('click', () => {
            if (currentResultIndex < searchResultsData.length - 1) {
                currentResultIndex++;
                displaySingleResult(currentResultIndex);
            }
        });

        // –ù–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞
        filterVariantsBtn?.addEventListener('click', (event) => {
            event.stopPropagation(); // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –∑–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –∫–ª–∏–∫—É –Ω–∞ —Å–∞–º—É –∫–Ω–æ–ø–∫—É
            filterVariantsDropdown.classList.toggle('hidden');
        });

        applyVariantFilterBtn?.addEventListener('click', filterByVariantCount);
        resetVariantFilterBtn?.addEventListener('click', resetVariantFilter);
        
        // –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—ã–ø–∞–¥–∞—é—â–µ–µ –º–µ–Ω—é –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –µ–≥–æ
        window.addEventListener('click', (event) => {
            if (filterVariantsDropdown && !filterVariantsDropdown.classList.contains('hidden')) {
                if (!filterVariantsDropdown.contains(event.target) && event.target !== filterVariantsBtn) {
                    filterVariantsDropdown.classList.add('hidden');
                }
            }
        });



    }


    function showGlobalLoader(message = '–ó–∞–≥—Ä—É–∑–∫–∞...') {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ª–æ–∞–¥–µ—Ä, —á—Ç–æ–±—ã –Ω–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –¥—É–±–ª–∏–∫–∞—Ç—ã
        if (document.getElementById('globalLoader')) return;

        const loaderHTML = `
            <div id="globalLoader" class="global-loader-overlay">
                <div class="loader-content">
                    <div class="loader-spinner"></div>
                    <p>${escapeHTML(message)}</p>
                </div>
            </div>
        `;
        document.body.insertAdjacentHTML('beforeend', loaderHTML);
    }

    function hideGlobalLoader() {
        const loader = document.getElementById('globalLoader');
        if (loader) {
            loader.remove();
        }
    }



    async function performSearch() {
        const query = searchQueryInput.value.trim();
        if (query.length < 3) {
            alert(_('search_query_too_short'));
            return;
        }

        fileUploadArea.classList.add('hidden');
        searchResultsContainer.classList.remove('hidden');
        
        // –≠—Ç–∞ —Å—Ç—Ä–æ–∫–∞ —Ç–µ–ø–µ—Ä—å –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ
        searchResultCardsContainer.innerHTML = `
            <div class="loading-placeholder">
            <div class="loading-spinner"></div>
            <span>${_('searching_in_db')}</span>
            </div>
        `;
        // –î–æ–±–∞–≤—å—Ç–µ –≤ LANG_PACK: searching_in_db: '–ò–¥–µ—Ç –ø–æ–∏—Å–∫ –ø–æ –±–∞–∑–µ...' / 'Searching database...'

        searchNavigation.classList.add('hidden');

        try {
            const url = `${googleAppScriptUrl}?action=searchQuestions&query=${encodeURIComponent(query)}`;
            const response = await fetch(url);
            if (!response.ok) {
                throw new Error(`–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: ${response.statusText}`);
            }
            const data = await response.json();

            if (!data.success) {
                throw new Error(data.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞');
            }

            renderSearchResults(data.success && data.results ? data.results : []);
        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ:", error);
            searchResultCardsContainer.innerHTML = `<div class="search-no-results-message">–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: ${error.message}</div>`;
        }
    }



    function renderSearchResults(results) {
        searchResultsData = results || [];
        currentResultIndex = 0;

        if (searchResultsData.length === 0) {
            searchNavigation.classList.add('hidden');
            searchResultCardsContainer.innerHTML = '<div class="search-no-results-message">–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.</div>';
            return;
        }
        
        searchNavigation.classList.remove('hidden');
        displaySingleResult(currentResultIndex);
    }
    
    function displaySingleResult(index) {
        const resultText = searchResultsData[index];
        if (!resultText) return;

        const cardContentHTML = parseAndRenderQuestionBlock(resultText);

        // --- –ù–ê–ß–ê–õ–û –ò–ó–ú–ï–ù–ï–ù–ò–ô ---
        searchResultCardsContainer.innerHTML = `
            <div class="result-card">
                <div class="result-card-header">
                    <span class="provider-tag">üóÑÔ∏è ${_('search_provider_db')}</span>
                    <div class="result-card-actions">
                        <span class="relevance-tag">${_('relevance_tag')} ${100 - index}%</span>
                        <button class="copy-search-result-btn" title="${_('copy_question_tooltip')}" onclick="window.mainApp.handleCopyClickInSearch(event, \`${escape(resultText)}\`)">üìã</button>
                        <button class="favorite-search-result-btn" title="${_('favorite_question_tooltip')}" onclick="window.mainApp.handleFavoriteClickInSearch(event, \`${escape(resultText)}\`)">‚≠ê</button>
                    </div>
                </div>
                <div class="result-card-content">
                    ${cardContentHTML}
                </div>
            </div>
        `;

        resultCounterEl.textContent = `${index + 1} / ${searchResultsData.length}`;
        prevResultBtn.disabled = (index === 0);
        nextResultBtn.disabled = (index >= searchResultsData.length - 1);
    }



    function parseAndRenderQuestionBlock(blockText) {
        if (!blockText) return '<div class="question-text-detail">–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö.</div>';

        const correctedText = blockText.replace(/\\n/g, '\n');
        const lines = correctedText.split('\n').filter(line => line.trim() !== '');

        let questionContentLines = [];
        let optionsHTML = [];
        let foundOptions = false;

        lines.forEach(line => {
            const trimmedLine = line.trim();
            if (trimmedLine.startsWith('+') || trimmedLine.startsWith('=') || trimmedLine.startsWith('-') || trimmedLine.startsWith('~')) {
                foundOptions = true;
                let className = 'answer-option';
                let icon = trimmedLine.startsWith('+') || trimmedLine.startsWith('=') ? '‚úì' : '‚úó';
                if (icon === '‚úì') className += ' correct';
                
                const answerText = trimmedLine.substring(1).trim();
                optionsHTML.push(`<div class="${className}">${icon} ${escapeHTML(answerText)}</div>`);
            } else if (!foundOptions) {
                const cleanLine = trimmedLine.startsWith('?') ? trimmedLine.substring(1).trim() : trimmedLine;
                questionContentLines.push(escapeHTML(cleanLine));
            }
        });

        const questionHTML = `<div class="question-text-detail">${questionContentLines.join('<br>')}</div>`;
        const optionsContainerHTML = optionsHTML.length > 0 ? `<div class="answer-options-container">${optionsHTML.join('')}</div>` : '';
        
        return questionHTML + optionsContainerHTML;
    }

    function handleWebSearch(event) {
        event.preventDefault();
        const engine = event.target.dataset.engine;
        if (!engine) return;

        if (currentQuestionIndex >= questionsForCurrentQuiz.length) {
            return;
        }

        const currentQuestion = questionsForCurrentQuiz[currentQuestionIndex];
        const isAnswered = userAnswers[currentQuestionIndex] && userAnswers[currentQuestionIndex].answered;

        let searchQuery = currentQuestion.text;

        if (isAnswered) {
            const correctAnswerText = currentQuestion.options[currentQuestion.correctAnswerIndex].text;
            searchQuery += ` ${correctAnswerText}`;
        }
        
        let searchUrl;
        const encodedQuery = encodeURIComponent(searchQuery);

        switch (engine) {
            case 'google':
                searchUrl = `https://www.google.com/search?q=${encodedQuery}`;
                window.open(searchUrl, '_blank');
                break;
            case 'yandex':
                searchUrl = `https://yandex.ru/search/?text=${encodedQuery}`;
                window.open(searchUrl, '_blank');
                break;
            case 'perplexity':
                searchUrl = `https://www.perplexity.ai/search?q=${encodedQuery}`;
                window.open(searchUrl, '_blank');
                break;
        }

        if (searchDropdownContent) {
            searchDropdownContent.classList.remove('show');
        }
    }

    function renderGradusView(folderId, folderName, isRoot = false) {
        if (isRoot) {
            breadcrumbs = [{ id: folderId, name: folderName }];
        } else {
            const currentIndex = breadcrumbs.findIndex(b => b.id === folderId);
            if (currentIndex > -1) {
                breadcrumbs = breadcrumbs.slice(0, currentIndex + 1);
            } else {
                breadcrumbs.push({ id: folderId, name: folderName });
            }
        }
        updateBreadcrumbs();

        const url = `${googleAppScriptUrl}?action=getFolderContents&folderId=${folderId}`;
        gradusFolderList.innerHTML = '<div class="loading-placeholder">–ó–∞–≥—Ä—É–∑–∫–∞...</div>';

        fetch(url)
            .then(response => response.json())
            .then(data => {
                gradusFolderList.innerHTML = '';
                if (!data.success) {
                    throw new Error(data.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ —Å–∫—Ä–∏–ø—Ç–∞');
                }

                (data.folders || []).forEach(folder => {
                    const li = document.createElement('li');
                    li.textContent = folder.name;
                    li.title = `–û—Ç–∫—Ä—ã—Ç—å –ø–∞–ø–∫—É "${folder.name}"`;
                    li.addEventListener('click', () => renderGradusView(folder.id, folder.name));
                    gradusFolderList.appendChild(li);
                });

                (data.files || []).forEach(file => {
                    const li = document.createElement('li');
                    li.textContent = file.name;
                    li.classList.add('file-item');
                    li.title = `–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç "${file.name}"`;
                    li.addEventListener('click', () => fetchAndLoadQstFile(file.id, file.name));
                    gradusFolderList.appendChild(li);
                });
                
                if (gradusFolderList.innerHTML === '') {
                    gradusFolderList.innerHTML = '<div class="loading-placeholder">–ü–∞–ø–∫–∞ –ø—É—Å—Ç–∞</div>';
                }
            })
            .catch(error => {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –ø–∞–ø–∫–∏:', error);
                gradusFolderList.innerHTML = `<div class="loading-placeholder">–û—à–∏–±–∫–∞: ${error.message}</div>`;
            });
    }

    function updateBreadcrumbs() {
        gradusBreadcrumbs.innerHTML = '';
        breadcrumbs.forEach((crumb, index) => {
            const link = document.createElement('a');
            link.textContent = crumb.name;
            link.dataset.id = crumb.id;
            link.addEventListener('click', () => renderGradusView(crumb.id, crumb.name));
            gradusBreadcrumbs.appendChild(link);

            if (index < breadcrumbs.length - 1) {
                const separator = document.createElement('span');
                separator.textContent = '>';
                gradusBreadcrumbs.appendChild(separator);
            }
        });
    }

    function fetchAndLoadQstFile(fileId, fileName) {
        gradusFolderList.innerHTML = `<div class="loading-placeholder">–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ—Å—Ç–∞ "${fileName}"...</div>`;
        const url = `${googleAppScriptUrl}?action=getFileContent&fileId=${fileId}`;

        fetch(url)
            .then(response => response.json())
            .then(data => {
                if (!data.success) {
                    throw new Error(data.error || '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞');
                }
                
                originalFileNameForReview = data.fileName;
                allParsedQuestions = parseQstContent(data.content);

                if (allParsedQuestions.length === 0) {
                    alert(`${_('file_empty_or_invalid_part1')}"${data.fileName}" ${_('file_empty_or_invalid_part2')}`);
                    renderGradusView(breadcrumbs[breadcrumbs.length - 1].id, breadcrumbs[breadcrumbs.length - 1].name);
                    return;
                }

                gradusFoldersContainer.classList.add('hidden');
                quizSetupArea.classList.remove('hidden');
                
                questionRangeStartInput.value = 1;
                questionRangeStartInput.max = allParsedQuestions.length;
                questionRangeEndInput.value = allParsedQuestions.length;
                questionRangeEndInput.max = allParsedQuestions.length;
                maxQuestionsInfoEl.textContent = `(–≤—Å–µ–≥–æ ${allParsedQuestions.length} –≤–æ–ø—Ä–æ—Å–æ–≤)`;
            })
            .catch(error => {
                alert(`–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª: ${error.message}`);
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞:', error);
                renderGradusView(breadcrumbs[breadcrumbs.length - 1].id, breadcrumbs[breadcrumbs.length - 1].name);
            });
    }

    function downloadFileBrowserFallback(fileName, content, contentType) {
        const blob = new Blob([content], { type: contentType });
        const link = document.createElement('a');
        link.href = URL.createObjectURL(blob);
        link.download = fileName;
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
        URL.revokeObjectURL(link.href);
    }
    






    async function downloadOrShareFile(fileName, content, contentType, shareDialogTitlePrefix = '–§–∞–π–ª') {
        console.log(`–ü–æ–ø—ã—Ç–∫–∞ —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª: ${fileName}`);
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –Ω–∞—Ö–æ–¥–∏–º—Å—è –ª–∏ –º—ã –Ω–∞ –º–æ–±–∏–ª—å–Ω–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ
        const isMobile = detectMobileDevice();
        console.log(`–ú–æ–±–∏–ª—å–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: ${isMobile}`);
        
        if (isMobile) {
            // === –ú–û–ë–ò–õ–¨–ù–´–ï –£–°–¢–†–û–ô–°–¢–í–ê: –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é —Å—Å—ã–ª–∫—É ===
            await createTemporaryDownloadLink(fileName, content, contentType, shareDialogTitlePrefix);
        } else {
            // === –ü–ö: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º–æ–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ ===
            downloadFileBrowserFallback(fileName, content, contentType);
        }
    }

    // 2. –£–ª—É—á—à–µ–Ω–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ (–ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ –≤ mainApp)
    function detectMobileDevice() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º User Agent
        const isMobileUA = /Android|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ touch —Å–æ–±—ã—Ç–∏—è
        const hasTouch = 'ontouchstart' in window || navigator.maxTouchPoints > 0;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —ç–∫—Ä–∞–Ω–∞
        const isSmallScreen = window.innerWidth <= 768;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ —ç—Ç–æ –º–æ–±–∏–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ (Capacitor/Cordova)
        const isMobileApp = !!(window.Capacitor || window.cordova);
        
        // –°—á–∏—Ç–∞–µ–º –º–æ–±–∏–ª—å–Ω—ã–º, –µ—Å–ª–∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —É—Å–ª–æ–≤–∏–µ
        const isMobile = isMobileUA || isMobileApp || (hasTouch && isSmallScreen);
        
        console.log(`Mobile UA: ${isMobileUA}, Touch: ${hasTouch}, Small screen: ${isSmallScreen}, Mobile app: ${isMobileApp}`);
        
        return isMobile;
    }



    async function createTemporaryDownloadLink(fileName, content, contentType, shareDialogTitlePrefix) {
        try {
            console.log('–°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é —Å—Å—ã–ª–∫—É –¥–ª—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ (v2)...');
            showMobileDownloadStatus('–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ñ–∞–π–ª–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è...', 'loading');

            // –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ –ø—Ä—è–º–æ –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
            const uniqueFileName = `qstium.com_${new Date().getTime()}_${fileName.replace(/[^a-zA-Z–∞-—è–ê-–Ø0-9.\-_]/g, '_')}`;

            // –§–æ—Ä–º–∏—Ä—É–µ–º URL —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
            const url = `${googleAppScriptUrl}?action=createTempFile&fileName=${encodeURIComponent(uniqueFileName)}`;

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ –∫–∞–∫ –ø—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å CORS preflight
            const response = await fetch(url, {
                method: 'POST',
                mode: 'cors', // –ò—Å–ø–æ–ª—å–∑—É–µ–º 'cors', —Ç–∞–∫ –∫–∞–∫ Google Script –≤–µ—Ä–Ω–µ—Ç JSON —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
                headers: {
                    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç
                    'Content-Type': 'text/plain;charset=utf-8',
                },
                body: content // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ –Ω–∞–ø—Ä—è–º—É—é
            });

            if (!response.ok) {
                throw new Error(`–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ${response.statusText}`);
            }

            const result = await response.json();

            if (result.success && result.downloadUrl) {
                showMobileDownloadLink(fileName, result.downloadUrl, shareDialogTitlePrefix);
            } else {
                throw new Error(result.error || '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—É—é —Å—Å—ã–ª–∫—É');
            }

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Å—Å—ã–ª–∫–∏:', error);
            showMobileDownloadFallback(fileName, content);
        }
    }




    // –ü–æ–∫–∞–∑ —Å—Å—ã–ª–∫–∏ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –Ω–∞ –º–æ–±–∏–ª—å–Ω–æ–º
    function showMobileDownloadLink(fileName, downloadUrl, shareDialogTitlePrefix) {
        showMobileDownloadStatus(`
            <div style="text-align: center;">
                <h3 style="color: #28a745; margin-bottom: 15px;">‚úÖ –§–∞–π–ª –≥–æ—Ç–æ–≤ –∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏—é!</h3>
                <p style="margin-bottom: 20px;"><strong>${fileName}</strong></p>
                <a href="${downloadUrl}" 
                   target="_blank" 
                   download="${fileName}"
                   style="
                       display: inline-block;
                       background: linear-gradient(135deg, #007bff, #0056b3);
                       color: white;
                       padding: 15px 30px;
                       text-decoration: none;
                       border-radius: 10px;
                       font-weight: bold;
                       font-size: 1.1em;
                       margin-bottom: 15px;
                       box-shadow: 0 4px 15px rgba(0,123,255,0.3);
                       transition: all 0.3s ease;
                   "
                   onmouseover="this.style.transform='translateY(-2px)'"
                   onmouseout="this.style.transform='translateY(0)'">
                    üì• –°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª
                </a>
                <p style="color: #6c757d; font-size: 0.9em; margin-top: 10px;">
                    üí° –°—Å—ã–ª–∫–∞ –±—É–¥–µ—Ç –∞–∫—Ç–∏–≤–Ω–∞ 1 –º–∏–Ω—É—Ç—É
                </p>
            </div>
        `, 'success');
    }

    // Fallback –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
    function showMobileDownloadFallback(fileName, content) {
        showMobileDownloadStatus(`
            <div style="text-align: center;">
                <h3 style="color: #f39c12; margin-bottom: 15px;">‚ö†Ô∏è –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–±</h3>
                <p style="margin-bottom: 15px;">–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—Å—ã–ª–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è.</p>
                <p style="margin-bottom: 20px;">–°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ <strong>${fileName}</strong>:</p>
                <textarea 
                    readonly 
                    style="
                        width: 100%;
                        height: 200px;
                        font-family: monospace;
                        font-size: 0.9em;
                        border: 1px solid #ddd;
                        border-radius: 5px;
                        padding: 10px;
                        margin-bottom: 15px;
                        background-color: #f8f9fa;
                    ">${content}</textarea>
                <button onclick="copyToClipboardMain('${escapeForJS(content)}')" 
                        style="
                            background: #28a745;
                            color: white;
                            border: none;
                            padding: 10px 20px;
                            border-radius: 5px;
                            font-weight: bold;
                            cursor: pointer;
                            margin-right: 10px;
                        ">
                    üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å
                </button>
            </div>
        `, 'warning');
    }

    // –ü–æ–∫–∞–∑ —Å—Ç–∞—Ç—É—Å–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –Ω–∞ –º–æ–±–∏–ª—å–Ω–æ–º
    function showMobileDownloadStatus(message, type = 'info') {
        // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ, –µ—Å–ª–∏ –µ—Å—Ç—å
        const existingModal = document.getElementById('mobileDownloadModal');
        if (existingModal) {
            existingModal.remove();
        }
        
        const modal = document.createElement('div');
        modal.id = 'mobileDownloadModal';
        modal.style.cssText = `
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0,0,0,0.8);
            z-index: 9999;
            display: flex;
            justify-content: center;
            align-items: center;
            padding: 20px;
            box-sizing: border-box;
            animation: fadeIn 0.3s ease;
        `;
        
        const content = document.createElement('div');
        content.style.cssText = `
            background: white;
            padding: 30px;
            border-radius: 15px;
            max-width: 500px;
            width: 100%;
            max-height: 80%;
            overflow-y: auto;
            color: black;
            text-align: center;
            box-shadow: 0 10px 40px rgba(0,0,0,0.3);
            position: relative;
        `;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∑–∞–∫—Ä—ã—Ç–∏—è
        const closeBtn = document.createElement('button');
        closeBtn.innerHTML = '√ó';
        closeBtn.style.cssText = `
            position: absolute;
            top: 10px;
            right: 15px;
            background: none;
            border: none;
            font-size: 2em;
            cursor: pointer;
            color: #999;
            line-height: 1;
            padding: 0;
            width: 30px;
            height: 30px;
        `;
        closeBtn.onclick = () => modal.remove();
        
        content.appendChild(closeBtn);
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
        const messageDiv = document.createElement('div');
        messageDiv.innerHTML = message;
        content.appendChild(messageDiv);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ –¥–ª—è —Ç–∏–ø–∞ 'loading'
        if (type === 'loading') {
            const spinner = document.createElement('div');
            spinner.style.cssText = `
                border: 4px solid #f3f3f3;
                border-top: 4px solid #007bff;
                border-radius: 50%;
                width: 40px;
                height: 40px;
                animation: spin 1s linear infinite;
                margin: 20px auto;
            `;
            content.appendChild(spinner);
            
            // –î–æ–±–∞–≤–ª—è–µ–º CSS –∞–Ω–∏–º–∞—Ü–∏—é
            if (!document.getElementById('spinnerStyle')) {
                const style = document.createElement('style');
                style.id = 'spinnerStyle';
                style.textContent = `
                    @keyframes spin {
                        0% { transform: rotate(0deg); }
                        100% { transform: rotate(360deg); }
                    }
                    @keyframes fadeIn {
                        from { opacity: 0; }
                        to { opacity: 1; }
                    }
                `;
                document.head.appendChild(style);
            }
        }
        
        modal.appendChild(content);
        document.body.appendChild(modal);
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–∫—Ä—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥ –¥–ª—è —É—Å–ø–µ—à–Ω—ã—Ö –∑–∞–≥—Ä—É–∑–æ–∫
        if (type === 'success') {
            setTimeout(() => {
                if (modal.parentNode) {
                    modal.remove();
                }
            }, 30000);
        }
    }



        // –ü–æ–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ–π –∞–Ω–∏–º–∞—Ü–∏–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
    function showCopySuccess(button) {
        // –í—Ä–µ–º–µ–Ω–Ω–æ –º–µ–Ω—è–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
        const originalText = button.textContent;
        const originalStyle = button.style.cssText;
        
        button.textContent = '‚úì –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ!';
        button.style.cssText = `
            ${originalStyle}
            background: #28a745 !important;
            transform: scale(1.1);
            transition: all 0.3s ease;
        `;
        button.classList.add('copied');
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π –≤–∏–¥ —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
        setTimeout(() => {
            button.textContent = originalText;
            button.style.cssText = originalStyle;
            button.classList.remove('copied');
        }, 2000);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        showCopyNotification('–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!');
    }


    // –ü–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏
    function showCopyNotification(message) {
        // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –µ—Å–ª–∏ –µ—Å—Ç—å
        const existingNotification = document.getElementById('copyNotification');
        if (existingNotification) {
            existingNotification.remove();
        }
        
        const notification = document.createElement('div');
        notification.id = 'copyNotification';
        notification.textContent = message;
        notification.style.cssText = `
            position: fixed;
            top: 20px;
            left: 50%;
            transform: translateX(-50%);
            background: #28a745;
            color: white;
            padding: 12px 20px;
            border-radius: 25px;
            font-weight: 500;
            z-index: 10000;
            box-shadow: 0 4px 15px rgba(40, 167, 69, 0.3);
            animation: slideDown 0.3s ease, fadeOut 0.3s ease 2.7s;
            pointer-events: none;
        `;
        
        document.body.appendChild(notification);
        
        // –£–¥–∞–ª—è–µ–º —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
        setTimeout(() => {
            if (notification.parentNode) {
                notification.remove();
            }
        }, 3000);
    }



    // –ü–æ–∫–∞–∑ –¥–∏–∞–ª–æ–≥–∞ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
    function showManualCopyDialog(text) {
        const modal = document.createElement('div');
        modal.style.cssText = `
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0,0,0,0.8);
            z-index: 10001;
            display: flex;
            justify-content: center;
            align-items: center;
            padding: 20px;
            box-sizing: border-box;
            animation: fadeIn 0.3s ease;
        `;
        
        const content = document.createElement('div');
        content.style.cssText = `
            background: white;
            padding: 25px;
            border-radius: 15px;
            max-width: 500px;
            width: 100%;
            max-height: 80%;
            overflow-y: auto;
            color: black;
            text-align: center;
            box-shadow: 0 10px 40px rgba(0,0,0,0.3);
            animation: slideUp 0.4s ease;
        `;
        
        content.innerHTML = `
            <h3 style="color: #f39c12; margin-bottom: 15px;">üìã –†—É—á–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ</h3>
            <p style="margin-bottom: 15px;">–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–¥–µ–ª–∏—Ç–µ –∏ —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ —Ç–µ–∫—Å—Ç –Ω–∏–∂–µ:</p>
            <textarea 
                readonly 
                style="
                    width: 100%;
                    height: 200px;
                    font-family: monospace;
                    font-size: 0.9em;
                    border: 2px solid #007bff;
                    border-radius: 8px;
                    padding: 10px;
                    margin-bottom: 15px;
                    background-color: #f8f9fa;
                    resize: vertical;
                "
                onclick="this.select()">${text}</textarea>
            <div style="display: flex; gap: 10px; justify-content: center;">
                <button onclick="this.parentElement.parentElement.parentElement.remove()" 
                        style="
                            background: #6c757d;
                            color: white;
                            border: none;
                            padding: 10px 20px;
                            border-radius: 5px;
                            cursor: pointer;
                            font-weight: 500;
                        ">
                    –ó–∞–∫—Ä—ã—Ç—å
                </button>
            </div>
        `;
        
        modal.appendChild(content);
        document.body.appendChild(modal);
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç
        const textarea = content.querySelector('textarea');
        setTimeout(() => {
            textarea.focus();
            textarea.select();
        }, 100);
    }


    // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–æ–±–∏–ª—å–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ (—É–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
    function isMobileDevice() {
        return /Android|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent) ||
               ('ontouchstart' in window) ||
               (navigator.maxTouchPoints > 0) ||
               !!(window.Capacitor || window.cordova);
    }

    // –î–æ–±–∞–≤–ª—è–µ–º CSS –∞–Ω–∏–º–∞—Ü–∏–∏, –µ—Å–ª–∏ –∏—Ö –µ—â–µ –Ω–µ—Ç
    if (!document.getElementById('copyAnimationStyles')) {
        const style = document.createElement('style');
        style.id = 'copyAnimationStyles';
        style.textContent = `
            @keyframes slideDown {
                from {
                    opacity: 0;
                    transform: translate(-50%, -20px);
                }
                to {
                    opacity: 1;
                    transform: translate(-50%, 0);
                }
            }
            
            @keyframes fadeOut {
                from { opacity: 1; }
                to { opacity: 0; }
            }
            
            .copy-success-animation {
                animation: success-bounce 0.6s ease;
            }
            
            @keyframes success-bounce {
                0%, 20%, 60%, 100% { transform: scale(1); }
                40% { transform: scale(1.1); }
                80% { transform: scale(1.05); }
            }
        `;
        document.head.appendChild(style);
    }




    // –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ JavaScript
    function escapeForJS(str) {
        return str.replace(/\\/g, '\\\\').replace(/'/g, "\\'").replace(/"/g, '\\"').replace(/\n/g, '\\n').replace(/\r/g, '\\r');
    }

    // –û—Å—Ç–∞–≤–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –±—Ä–∞—É–∑–µ—Ä–Ω–æ–≥–æ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    function downloadFileBrowserFallback(fileName, content, contentType) {
        try {
            const blob = new Blob([content], { type: contentType });
            const link = document.createElement('a');
            link.href = URL.createObjectURL(blob);
            link.download = fileName;
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
            URL.revokeObjectURL(link.href);
            console.log(`–§–∞–π–ª —Å–∫–∞—á–∞–Ω —á–µ—Ä–µ–∑ –±—Ä–∞—É–∑–µ—Ä: ${fileName}`);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –±—Ä–∞—É–∑–µ—Ä–Ω–æ–≥–æ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è:', error);
            alert(`–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª "${fileName}". –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.`);
        }
    }



    function updateQuickModeToggleVisual() {
        if (quickModeToggle) {
            quickModeToggle.classList.toggle('active', quickModeEnabled);
            quickModeToggle.title = quickModeEnabled ? "–ë—ã—Å—Ç—Ä—ã–π —Ä–µ–∂–∏–º –í–ö–õ (–ê–≤—Ç–æ–ø–µ—Ä–µ—Ö–æ–¥)" : "–ë—ã—Å—Ç—Ä—ã–π —Ä–µ–∂–∏–º –í–´–ö–õ (–†—É—á–Ω–æ–π –ø–µ—Ä–µ—Ö–æ–¥)";
        }
    }

    function toggleQuickMode() {
        quickModeEnabled = !quickModeEnabled;
        localStorage.setItem('quizQuickModeEnabled', quickModeEnabled);
        updateQuickModeToggleVisual();
    }

    function updateTriggerWordToggleVisual() {
        if (triggerWordToggle) {
            triggerWordToggle.classList.toggle('active', triggerWordModeEnabled);
            triggerWordToggle.title = triggerWordModeEnabled ? "–¢—Ä–∏–≥–≥–µ—Ä-—Å–ª–æ–≤–∞ –í–ö–õ (–ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ —Å–ª–æ–≤–æ –≤ –≤–æ–ø—Ä–æ—Å–µ)" : "–¢—Ä–∏–≥–≥–µ—Ä-—Å–ª–æ–≤–∞ –í–´–ö–õ";
        }
    }

    function toggleTriggerWordMode() {
        triggerWordModeEnabled = !triggerWordModeEnabled;
        updateTriggerWordToggleVisual();
        if (!quizArea.classList.contains('hidden') && questionsForCurrentQuiz.length > 0) {
            loadQuestion(currentQuestionIndex);
        }
    }

    function tokenizeText(text) {
        return text.split(/(\s+|[.,;:!?()"‚Äú‚Äù¬´¬ª-]+)/g).filter(token => token.length > 0);
    }

    function renderQuestionTextWithTriggers(question) {
        const tokens = tokenizeText(question.text);
        let html = '';
        let wordIndex = 0;
        tokens.forEach(token => {
            const isWord = /\S/.test(token) && !/^[.,;:!?()"‚Äú‚Äù¬´¬ª-]+$/.test(token);
            if (isWord) {
                const isTriggered = question.triggeredWordIndices && question.triggeredWordIndices.includes(wordIndex);
                let spanClasses = [];
                if (isTriggered) {
                    spanClasses.push('triggered-word');
                }
                if (triggerWordModeEnabled) {
                    spanClasses.push('triggerable-word');
                }
                if (spanClasses.length > 0) {
                    html += `<span class="${spanClasses.join(' ')}" data-word-index="${wordIndex}">${token}</span>`;
                } else {
                    html += token;
                }
                wordIndex++;
            } else {
                html += token;
            }
        });
        return html;
    }

    function handleWordTriggerClick(event) {
        if (!triggerWordModeEnabled) return;
        const clickedElement = event.target.closest('.triggerable-word, .triggered-word');
        if (!clickedElement || !clickedElement.dataset.hasOwnProperty('wordIndex')) return;
        event.stopPropagation();
        event.preventDefault();
        const wordIndex = parseInt(clickedElement.dataset.wordIndex);
        const currentQuestion = questionsForCurrentQuiz[currentQuestionIndex];
        if (!currentQuestion.triggeredWordIndices) {
            currentQuestion.triggeredWordIndices = [];
        }
        const indexInArray = currentQuestion.triggeredWordIndices.indexOf(wordIndex);
        if (indexInArray > -1) {
            currentQuestion.triggeredWordIndices.splice(indexInArray, 1);
        } else {
            currentQuestion.triggeredWordIndices.push(wordIndex);
            if (!triggerWordsUsedInQuiz && currentQuestion.triggeredWordIndices.length > 0) {
                triggerWordsUsedInQuiz = true;
            }
        }
        questionTextEl.innerHTML = renderQuestionTextWithTriggers(currentQuestion);
        addTriggerClickListeners();
    }

    function addTriggerClickListeners() {
        if (triggerWordModeEnabled) {
            questionTextEl.querySelectorAll('.triggerable-word, .triggered-word').forEach(span => {
                span.removeEventListener('click', handleWordTriggerClick);
                span.addEventListener('click', handleWordTriggerClick);
            });
        }
    }

    function ÿ±Ÿàÿ≥ŸäŸÅÿßŸäQuestionText(text) {
        const cleanedText = text.replace(/[.,\/#!$%\^&\*;:{}=\-_`~()?]/g,"").replace(/~+/g, '');
        let result = '';
        const wordsAndNumbers = cleanedText.match(/[–∞-—è–ê-–Øa-zA-Z]+|\d+/g) || [];
        wordsAndNumbers.forEach(part => {
            if (/\d+/.test(part)) {
                result += part;
            } else if (/[–∞-—è–ê-–Øa-zA-Z]+/.test(part)) {
                result += part.charAt(0);
            }
        });
        return result.toUpperCase();
    }

    function generateCheatSheet(questions) {
        let cheatSheet = '';
        const questionsForSheet = questions.map(q => ({ ...q, }));
        const sortedQuestions = [...questionsForSheet].sort((a, b) => a.text.localeCompare(b.text, 'ru', { sensitivity: 'base' }));
        sortedQuestions.forEach(question => {
            const ÿ±Ÿàÿ≥ŸäŸÅÿßŸädQuestion = ÿ±Ÿàÿ≥ŸäŸÅÿßŸäQuestionText(question.text);
            let correctAnswerText = question.options.find(opt => opt.isCorrect)?.text || '';
            cheatSheet += `${ÿ±Ÿàÿ≥ŸäŸÅÿßŸädQuestion}\n+ ${correctAnswerText}\n\n`;
        });
        return cheatSheet.trim();
    }

    function handleGenerateCheatSheet() {
        if (allParsedQuestions.length === 0) {
            alert("–°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏.");
            return;
        }
        let questionsToProcess = [];
        let startRange = parseInt(questionRangeStartInput.value);
        let endRange = parseInt(questionRangeEndInput.value);
        if (!isNaN(startRange) && !isNaN(endRange) && startRange >= 1 && endRange >= startRange && endRange <= allParsedQuestions.length) {
            questionsToProcess = allParsedQuestions.slice(startRange - 1, endRange);
        } else {
            questionsToProcess = allParsedQuestions;
        }
        if (questionsToProcess.length === 0) {
            alert("–ù–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —à–ø–æ—Ä—ã.");
            return;
        }
        generatedCheatSheetContent = generateCheatSheet(questionsToProcess);
        cheatSheetOutputEl.value = generatedCheatSheetContent;
        quizSetupArea.classList.add('hidden');
        quizArea.classList.add('hidden');
        resultsArea.classList.add('hidden');
        cheatSheetResultArea.classList.remove('hidden');
    }

    async function handleDownloadOrShareCheatSheet() {
        if (!generatedCheatSheetContent) {
            alert("–°–Ω–∞—á–∞–ª–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ —à–ø–æ—Ä—É.");
            return;
        }
        const fileNameBase = originalFileNameForReview ? originalFileNameForReview.replace(/\.qst$/i, '').replace(/\.txt$/i, '') : 'cheatsheet';
        const fileName = `${fileNameBase}_spora.txt`;
        await downloadOrShareFile(fileName, generatedCheatSheetContent, 'text/plain;charset=utf-8', `–®–ø–æ—Ä–∞`);
    }

    function saveRecentFile(fileName, fileContent) {
        let recentFiles = JSON.parse(localStorage.getItem(RECENT_FILES_STORAGE_KEY)) || [];
        recentFiles = recentFiles.filter(f => f.name !== fileName);
        recentFiles.unshift({ name: fileName, content: fileContent });
        if (recentFiles.length > MAX_RECENT_FILES) {
            recentFiles.pop();
        }
        try {
            localStorage.setItem(RECENT_FILES_STORAGE_KEY, JSON.stringify(recentFiles));
        } catch (e) {
            console.error("–û—à–∏–±–∫–∞ localStorage:", e);
            localStorage.removeItem(RECENT_FILES_STORAGE_KEY);
        }
        loadRecentFiles();
        ChatModule.uploadFileToServer(fileName, fileContent, googleAppScriptUrl); 
    }

    function loadRecentFiles() {
        const recentFilesData = JSON.parse(localStorage.getItem(RECENT_FILES_STORAGE_KEY)) || [];
        recentFilesListEl.innerHTML = '';
        if (recentFilesData.length > 0) {
            recentFilesArea.classList.remove('hidden');
            recentFilesData.forEach(fileData => {
                const li = document.createElement('li');
                li.textContent = fileData.name;
                li.title = `–ó–∞–≥—Ä—É–∑–∏—Ç—å ${fileData.name}`;
                li.addEventListener('click', () => {
                    fileInput.value = ''; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∏–Ω–ø—É—Ç
                    processFile(fileData.name, fileData.content);
                });
                recentFilesListEl.appendChild(li);
            });


        } else {
            recentFilesArea.classList.add('hidden');
        }
    }

    function handleFileSelect(event) {
        const file = event.target.files[0];
        if (!file) return;

        const reader = new FileReader();
        reader.onload = (e) => {
            processFile(file.name, e.target.result);
        };
        reader.readAsText(file, 'UTF-8');
    }

    function handleReadingModeChange() {
        if (readingModeCheckbox.checked) {
            // –ï—Å–ª–∏ —Ä–µ–∂–∏–º —á—Ç–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω, –æ—Ç–∫–ª—é—á–∞–µ–º –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –Ω–µ–Ω—É–∂–Ω—ã–µ –æ–ø—Ü–∏–∏
            shuffleQuestionsCheckbox.checked = false;
            shuffleQuestionsCheckbox.disabled = true;
            shuffleAnswersCheckbox.checked = false;
            shuffleAnswersCheckbox.disabled = true;
        } else {
            // –ï—Å–ª–∏ –≤—ã–∫–ª—é—á–µ–Ω, —Å–Ω–æ–≤–∞ –¥–µ–ª–∞–µ–º –æ–ø—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏
            shuffleQuestionsCheckbox.disabled = false;
            shuffleAnswersCheckbox.disabled = false;
        }
    }


    function processFile(fileName, fileContent, quizContext = null) {
        originalFileNameForReview = fileName;
        allParsedQuestions = parseQstContent(fileContent);
        currentQuizContext = quizContext; // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è

        hideGlobalLoader();

        if (allParsedQuestions.length > 0) {
            saveRecentFile(fileName, fileContent);
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω –Ω–∞—Å—Ç—Ä–æ–µ–∫
            fileUploadArea.classList.add('hidden');
            searchResultsContainer.classList.add('hidden');
            quizSetupArea.classList.remove('hidden');
            
            const questionCount = allParsedQuestions.filter(q => q.type !== 'category').length;
            questionRangeStartInput.value = 1;
            questionRangeStartInput.max = questionCount;
            questionRangeEndInput.value = questionCount;
            questionRangeEndInput.max = questionCount;
            maxQuestionsInfoEl.textContent = `(${_('total_questions_label')} ${questionCount} ${_('questions_label_for_range')})`;

            // --- –ù–ê–ß–ê–õ–û –ù–û–í–û–ô –õ–û–ì–ò–ö–ò: –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞/—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ ---
            // –ï—Å–ª–∏ —ç—Ç–æ "–æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π" —Ç–µ—Å—Ç
            if (quizContext && !quizContext.isPractice) {
                // –í—ã—Å—Ç–∞–≤–ª—è–µ–º –Ω—É–∂–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –±–ª–æ–∫–∏—Ä—É–µ–º –∏—Ö
                shuffleQuestionsCheckbox.checked = true;
                shuffleAnswersCheckbox.checked = true;
                readingModeCheckbox.checked = false;
                
                shuffleQuestionsCheckbox.disabled = true;
                shuffleAnswersCheckbox.disabled = true;
                readingModeCheckbox.disabled = true;
                questionRangeStartInput.disabled = true;
                questionRangeEndInput.disabled = true;
            } else {
                // –î–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤ (–ø—Ä–æ–±–Ω—ã–π —Ç–µ—Å—Ç, –æ–±—ã—á–Ω—ã–π —Ñ–∞–π–ª) - –≤—Å—ë —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ
                shuffleQuestionsCheckbox.disabled = false;
                shuffleAnswersCheckbox.disabled = false;
                readingModeCheckbox.disabled = false;
                questionRangeStartInput.disabled = false;
                questionRangeEndInput.disabled = false;
            }
            // --- –ö–û–ù–ï–¶ –ù–û–í–û–ô –õ–û–ì–ò–ö–ò ---

        } else {
            alert(`${_('file_empty_or_invalid_part1')}"${fileName}"${_('file_empty_or_invalid_part2')}`);
        }
    }





    function parseQstContent(content) {
        let parsedQs = [];
        const lines = content.split(/\r?\n/);
        let currentQuestionData = null;
        for (const line of lines) {
            const trimmedLine = line.trim();

            // --- –ù–ê–ß–ê–õ–û –ù–û–í–û–ì–û –ö–û–î–ê ---
            // –ü–†–û–í–ï–†–ö–ê –ù–ê –ö–ê–¢–ï–ì–û–†–ò–Æ
            if (trimmedLine.startsWith('#_#') && trimmedLine.endsWith('#_#')) {
                // –ï—Å–ª–∏ –º—ã –Ω–∞—à–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é, —Å–Ω–∞—á–∞–ª–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –≤–æ–ø—Ä–æ—Å, –µ—Å–ª–∏ –æ–Ω –±—ã–ª
                if (currentQuestionData && currentQuestionData.options.length > 0) {
                    parsedQs.push(currentQuestionData);
                    currentQuestionData = null;
                }
                // –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                const categoryName = trimmedLine.slice(3, -3).trim();
                // –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç —Å —Ç–∏–ø–æ–º 'category'
                parsedQs.push({ text: categoryName, type: 'category' });
                // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–æ–∫–µ
                continue;
            }           
            if (trimmedLine === '') {
                if (currentQuestionData && currentQuestionData.options.length > 0) {
                    parsedQs.push(currentQuestionData);
                    currentQuestionData = null;
                }
                continue;
            }
            if (trimmedLine.startsWith('?')) {
                if (currentQuestionData && currentQuestionData.options.length > 0) {
                    parsedQs.push(currentQuestionData);
                }
                let questionTextWithTildes = trimmedLine.substring(1).trim();
                let cleanText = "";
                let tempTriggeredIndices = [];
                let wordIndexInCleanText = 0;
                const parts = questionTextWithTildes.split('~');
                for (let i = 0; i < parts.length; i++) {
                    const part = parts[i];
                    if (i % 2 === 1) {
                        if (part.length > 0) {
                            cleanText += part;
                            const wordTokens = tokenizeText(part);
                            for (const wt of wordTokens) {
                                if (/\S/.test(wt) && !/^[.,;:!?()"‚Äú‚Äù¬´¬ª-]+$/.test(wt)) {
                                    tempTriggeredIndices.push(wordIndexInCleanText);
                                    wordIndexInCleanText++;
                                }
                            }
                        }
                    } else {
                        if (part.length > 0) {
                            cleanText += part;
                            const normalTokens = tokenizeText(part);
                            for (const nt of normalTokens) {
                                if (/\S/.test(nt) && !/^[.,;:!?()"‚Äú‚Äù¬´¬ª-]+$/.test(nt)) {
                                    wordIndexInCleanText++;
                                }
                            }
                        }
                    }
                }
                currentQuestionData = { text: cleanText, options: [], correctAnswerIndex: -1, originalRaw: [line], triggeredWordIndices: [...new Set(tempTriggeredIndices)] };
            } else if ((trimmedLine.startsWith('+') || trimmedLine.startsWith('-')) && currentQuestionData) {
                const isCorrect = trimmedLine.startsWith('+');
                const optionText = trimmedLine.substring(1).trim();
                currentQuestionData.options.push({ text: optionText, isCorrect: isCorrect });
                if (isCorrect && currentQuestionData.correctAnswerIndex === -1) {
                    currentQuestionData.correctAnswerIndex = currentQuestionData.options.length - 1;
                }
                currentQuestionData.originalRaw.push(line);
            } else if (currentQuestionData && !trimmedLine.startsWith('?')) {
                currentQuestionData.text += " " + trimmedLine;
                currentQuestionData.originalRaw.push(line);
            }
        }
        if (currentQuestionData && currentQuestionData.options.length > 0) {
            parsedQs.push(currentQuestionData);
        }
        // –§–∏–ª—å—Ç—Ä—É–µ–º, –ø—Ä–æ–ø—É—Å–∫–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –ø—Ä–æ–≤–µ—Ä—è—è —Ç–æ–ª—å–∫–æ –Ω–∞—Å—Ç–æ—è—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã
        return parsedQs.filter(q => q.type === 'category' || (q.options && q.options.some(opt => opt.isCorrect) && q.options.length > 1));
    }




    /**
     * –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –¥–∏–∞–ø–∞–∑–æ–Ω –Ω–æ–º–µ—Ä–æ–≤ –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ —Ä–µ–∞–ª—å–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã –º–∞—Å—Å–∏–≤–∞, –ø—Ä–æ–ø—É—Å–∫–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.
     * @param {Array} sourceArray - –ú–∞—Å—Å–∏–≤ —Å–æ –≤—Å–µ–º–∏ —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ (–≤–æ–ø—Ä–æ—Å–∞–º–∏ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏).
     * @param {number} startNum - –ù–∞—á–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –≤–æ–ø—Ä–æ—Å–∞ (–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è).
     * @param {number} endNum - –ö–æ–Ω–µ—á–Ω—ã–π –Ω–æ–º–µ—Ä –≤–æ–ø—Ä–æ—Å–∞ (–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è).
     * @returns {{startIndex: number, endIndex: number}} - –û–±—ä–µ–∫—Ç —Å –Ω–∞—á–∞–ª—å–Ω—ã–º –∏ –∫–æ–Ω–µ—á–Ω—ã–º –∏–Ω–¥–µ–∫—Å–∞–º–∏.
     */
    function mapQuestionRangeToIndices(sourceArray, startNum, endNum) {
        let questionCounter = 0;
        let startIndex = -1;
        let endIndex = -1;
        
        // –§–∏–ª—å—Ç—Ä—É–µ–º –º–∞—Å—Å–∏–≤, —á—Ç–æ–±—ã —Ä–∞–±–æ—Ç–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏
        const onlyQuestions = sourceArray.filter(item => item.type !== 'category');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∏–∞–ø–∞–∑–æ–Ω –Ω–µ –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ –ø—Ä–µ–¥–µ–ª—ã –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤–æ–ø—Ä–æ—Å–æ–≤
        if (startNum < 1) startNum = 1;
        if (endNum > onlyQuestions.length) endNum = onlyQuestions.length;

        sourceArray.forEach((item, index) => {
            // –°—á–∏—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ —Ä–µ–∞–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã
            if (item.type !== 'category') {
                questionCounter++;
                
                // –ù–∞—Ö–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –Ω–∞—á–∞–ª—É –¥–∏–∞–ø–∞–∑–æ–Ω–∞
                if (questionCounter === startNum && startIndex === -1) {
                    startIndex = index;
                }
                
                // –ù–∞—Ö–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –∫–æ–Ω—Ü—É –¥–∏–∞–ø–∞–∑–æ–Ω–∞
                if (questionCounter === endNum) {
                    endIndex = index;
                }
            }
        });

        // –ï—Å–ª–∏ –∫–æ–Ω–µ—á–Ω—ã–π –∏–Ω–¥–µ–∫—Å –Ω–µ –±—ã–ª –Ω–∞–π–¥–µ–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–∏–∞–ø–∞–∑–æ–Ω –¥–æ –∫–æ–Ω—Ü–∞),
        // –∏—â–µ–º –¥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –º–∞—Å—Å–∏–≤–∞.
        if (endIndex === -1) {
            endIndex = sourceArray.length - 1;
        }

        return { startIndex, endIndex };
    }



    function applySettingsAndStartQuiz(isErrorReview = false, questionsSource = null) {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —Ä–∞–Ω–µ–µ –≤ processFile
        let finalQuizContext = currentQuizContext; 
        
        let sourceArray;
        if (!isErrorReview) {
            // –ü—Ä–æ—Å—Ç–æ —Å—á–∏—Ç—ã–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è —Å —ç–∫—Ä–∞–Ω–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
            quizSettings.timeLimit = parseInt(timeLimitInput.value);
            quizSettings.shuffleQuestions = shuffleQuestionsCheckbox.checked;
            quizSettings.shuffleAnswers = shuffleAnswersCheckbox.checked;
            quizSettings.feedbackMode = feedbackModeCheckbox.checked;
            quizSettings.readingMode = readingModeCheckbox.checked;
            
            const totalQuestionsCount = allParsedQuestions.filter(q => q.type !== 'category').length;
            
            let startRange = parseInt(questionRangeStartInput.value);
            let endRange = parseInt(questionRangeEndInput.value);

            if (isNaN(startRange) || startRange < 1) startRange = 1;
            if (isNaN(endRange) || endRange < startRange) endRange = totalQuestionsCount;

            const indices = mapQuestionRangeToIndices(allParsedQuestions, startRange, endRange);

            let finalStartIndex = indices.startIndex;
            if (indices.startIndex > 0 && allParsedQuestions[indices.startIndex - 1].type === 'category') {
                finalStartIndex = indices.startIndex - 1;
            }

            sourceArray = allParsedQuestions.slice(finalStartIndex, indices.endIndex + 1)
                .map((question, localIndex) => ({
                    ...question,
                    originalIndex: finalStartIndex + localIndex
                }));     

        } else {
            sourceArray = questionsSource;
            quizSettings.timeLimit = 0;
            quizSettings.shuffleQuestions = false;
            quizSettings.shuffleAnswers = shuffleAnswersCheckbox.checked;
        }
        
        if (quizSettings.shuffleQuestions && !isErrorReview) {
            let shuffledQuiz = [];
            let questionGroup = [];

            sourceArray.forEach((item, index) => {
                if (item.type === 'category') {
                    if (questionGroup.length > 0) {
                        shuffleArray(questionGroup);
                        shuffledQuiz.push(...questionGroup);
                        questionGroup = []; 
                    }
                    shuffledQuiz.push(item);
                } else {
                    questionGroup.push(item);
                }
            });

            if (questionGroup.length > 0) {
                shuffleArray(questionGroup);
                shuffledQuiz.push(...questionGroup);
            }
            
            questionsForCurrentQuiz = shuffledQuiz;

        } else {
            questionsForCurrentQuiz = [...sourceArray];
        }

        questionsForCurrentQuiz = questionsForCurrentQuiz.map(q => JSON.parse(JSON.stringify(q)));
        triggerWordsUsedInQuiz = questionsForCurrentQuiz.some(q => q.type !== 'category' && q.triggeredWordIndices && q.triggeredWordIndices.length > 0);
        if (quizSettings.readingMode) {
            questionsForCurrentQuiz.forEach(q => {
                if (q.type !== 'category' && q.options && q.correctAnswerIndex > -1) {
                    const correctAnswer = q.options[q.correctAnswerIndex];
                    q.options.splice(q.correctAnswerIndex, 1);
                    q.options.unshift(correctAnswer);
                    q.correctAnswerIndex = 0;
                }
            });
        }

        if (quizSettings.shuffleAnswers) {
            questionsForCurrentQuiz.forEach(q => {
                if (q.type !== 'category' && q.options) {
                    const correctAnswerObject = q.options[q.correctAnswerIndex];
                    shuffleArray(q.options);
                    q.correctAnswerIndex = q.options.findIndex(opt => opt === correctAnswerObject);
                }
            });
        }
        
        if (questionsForCurrentQuiz.filter(q => q.type !== 'category').length === 0) {
            alert("–ù–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∞ —Å —Ç–µ–∫—É—â–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏.");
            return;
        }

        quizSetupArea.classList.add('hidden');
        cheatSheetResultArea.classList.add('hidden');
        gradusFoldersContainer.classList.add('hidden');
        quizArea.classList.remove('hidden');
        resultsArea.classList.add('hidden');
        startQuiz(finalQuizContext);
    }



    function startQuiz(quizContext = null) {
        currentQuizContext = quizContext; // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –≤—Å–µ–≥–æ —Ç–µ—Å—Ç–∞
        quizStartTime = new Date().getTime();
        currentQuestionIndex = 0;
        score = 0;
        userAnswers = new Array(questionsForCurrentQuiz.length).fill(null).map(() => ({ answered: false, correct: null, selectedOptionIndex: null }));
        incorrectlyAnsweredQuestionsData = [];
        totalQuestionsNumEl.textContent = questionsForCurrentQuiz.filter(q => q.type !== 'category').length;
        updateScoreDisplay();
        setupTimer();
        generateQuickNav();
        webSearchDropdown?.classList.remove('hidden');
        finishTestButton?.classList.remove('hidden');
        continueLaterButton?.classList.remove('hidden');
        copyQuestionBtnQuiz?.classList.remove('hidden');
        getEl('favoriteQuestionBtn')?.classList.remove('hidden');
        languageToggle?.classList.add('hidden');
        quickModeToggle?.classList.remove('hidden');
        triggerWordToggle?.classList.remove('hidden');
        loadQuestion(currentQuestionIndex);
        window.addEventListener('beforeunload', handleBeforeUnload);
    }



    function setupTimer() {
        if (timerInterval) clearInterval(timerInterval);
        if (quizSettings.timeLimit > 0) {
            timeLeftInSeconds = quizSettings.timeLimit * 60;
            timerDisplayEl.classList.remove('hidden');
            updateTimerDisplay();
            timerInterval = setInterval(() => {
                timeLeftInSeconds--;
                updateTimerDisplay();
                if (timeLeftInSeconds <= 0) {
                    clearInterval(timerInterval);
                    showResults();
                }
            }, 1000);
        } else {
            timerDisplayEl.classList.add('hidden');
        }
    }

    function updateTimerDisplay() {
        const minutes = Math.floor(timeLeftInSeconds / 60);
        const seconds = timeLeftInSeconds % 60;
        timeLeftEl.textContent = `${String(minutes).padStart(2, '0')}:${String(seconds).padStart(2, '0')}`;
    }



    function generateQuickNav() {
        quickNavButtonsContainer.innerHTML = '';
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–∞–Ω–µ–ª—å, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤ —Ç–µ—Å—Ç–µ –±–æ–ª—å—à–µ –æ–¥–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ (–≤–æ–ø—Ä–æ—Å–∞ –∏–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏)
        if (questionsForCurrentQuiz.length > 1) {
            quickNavPanel.classList.remove('hidden');
            
            let questionNumber = 1; // –ó–∞–≤–æ–¥–∏–º –æ—Ç–¥–µ–ª—å–Ω—ã–π —Å—á–µ—Ç—á–∏–∫ –¥–ª—è –Ω—É–º–µ—Ä–∞—Ü–∏–∏ –¢–û–õ–¨–ö–û –≤–æ–ø—Ä–æ—Å–æ–≤

            questionsForCurrentQuiz.forEach((item, index) => {
                // –ï–°–õ–ò –≠–¢–û –ö–ê–¢–ï–ì–û–†–ò–Ø
                if (item.type === 'category') {
                    const categoryHeader = document.createElement('div');
                    categoryHeader.className = 'quick-nav-category';
                    categoryHeader.textContent = item.text;
                    quickNavButtonsContainer.appendChild(categoryHeader);
                } 
                // –ï–°–õ–ò –≠–¢–û –û–ë–´–ß–ù–´–ô –í–û–ü–†–û–°
                else {
                    const btn = document.createElement('button');
                    btn.classList.add('quick-nav-btn');
                    btn.textContent = questionNumber; // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—à —Å—á–µ—Ç—á–∏–∫
                    btn.dataset.questionIndex = index; // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å –≤ –º–∞—Å—Å–∏–≤–µ
                    btn.addEventListener('click', () => loadQuestion(index));
                    quickNavButtonsContainer.appendChild(btn);

                    questionNumber++; // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —Ç–æ–ª—å–∫–æ –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤
                }
            });
        } else {
            quickNavPanel.classList.add('hidden');
        }
    }




    function updateQuickNavButtons() {
        const buttons = quickNavButtonsContainer.querySelectorAll('.quick-nav-btn');
        buttons.forEach((btn) => {
            const btnIndex = parseInt(btn.dataset.questionIndex);
            btn.classList.remove('current', 'answered', 'correct', 'incorrect');
            if (btnIndex === currentQuestionIndex) btn.classList.add('current');
            const answerState = userAnswers[btnIndex];
            if (answerState && answerState.answered) {
                btn.classList.add('answered', answerState.correct ? 'correct' : 'incorrect');
            }
        });
    }



    function displayCategoryPage(categoryName) {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –≤–æ–ø—Ä–æ—Å–∞
        questionContainer.classList.remove('hidden');
        // –û—á–∏—â–∞–µ–º –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
        questionTextEl.innerHTML = `
            <div class="quiz-category-screen">
                <span>–†–∞–∑–¥–µ–ª:</span>
                <h2>${escapeHTML(categoryName)}</h2>
            </div>
        `;
        getEl('score').style.visibility = 'hidden';
        // –ü—Ä—è—á–µ–º –Ω–µ–Ω—É–∂–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        answerOptionsEl.innerHTML = '';
        feedbackAreaEl.textContent = '';
        feedbackAreaEl.className = 'feedback-area';
        copyQuestionBtnQuiz?.classList.add('hidden');
        getEl('favoriteQuestionBtn')?.classList.add('hidden');
        webSearchDropdown?.classList.add('hidden');
    }



 
    function loadQuestion(index) {
        if (index < 0 || index >= questionsForCurrentQuiz.length) return;
        currentQuestionIndex = index;
        const item = questionsForCurrentQuiz[index];

        if (item.type === 'category') {
            displayCategoryPage(item.text);
        } else {
            getEl('score').style.visibility = 'visible';
            const questionNumber = questionsForCurrentQuiz.slice(0, index + 1).filter(q => q.type !== 'category').length;
            currentQuestionNumEl.textContent = questionNumber;
            
            questionTextEl.innerHTML = renderQuestionTextWithTriggers(item);
            addTriggerClickListeners();
            answerOptionsEl.innerHTML = '';
            
            // --- –ù–ê–ß–ê–õ–û –ò–ó–ú–ï–ù–ï–ù–ò–ô ---

            // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–∞–µ–º –æ–±–ª–∞—Å—Ç—å –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
            feedbackAreaEl.textContent = '';
            feedbackAreaEl.className = 'feedback-area';

            const answerState = userAnswers[index];

            // –¢–µ–ø–µ—Ä—å, –µ—Å–ª–∏ –Ω–∞ –≤–æ–ø—Ä–æ—Å —É–∂–µ –±—ã–ª –¥–∞–Ω –æ—Ç–≤–µ—Ç, –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            if (answerState && answerState.answered) {
                // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç "–ü—Ä–∞–≤–∏–ª—å–Ω–æ!"/"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ!"
                if (answerState.correct) {
                    feedbackAreaEl.textContent = '–ü—Ä–∞–≤–∏–ª—å–Ω–æ!';
                    feedbackAreaEl.className = 'feedback-area correct-feedback';
                } else {
                    feedbackAreaEl.textContent = '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ!';
                    feedbackAreaEl.className = 'feedback-area incorrect-feedback';
                }

                // –ò —Å–∞–º–æ–µ –≥–ª–∞–≤–Ω–æ–µ: –∑–∞–Ω–æ–≤–æ —Å–æ–∑–¥–∞–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–û–±—ä—è—Å–Ω–∏—Ç—å"
                const explainBtn = document.createElement('button');
                explainBtn.textContent = _('ai_explain_button');
                explainBtn.className = 'explain-btn';
                explainBtn.style.marginLeft = '15px';
                explainBtn.onclick = () => showAIExplanation(item);
                feedbackAreaEl.appendChild(explainBtn);
            }

            // --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–ô ---

            copyQuestionBtnQuiz?.classList.remove('hidden');
            getEl('favoriteQuestionBtn')?.classList.remove('hidden');
            webSearchDropdown?.classList.remove('hidden');
            
            if (!item.options) {
                console.error("–£ –≤–æ–ø—Ä–æ—Å–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–ø—Ü–∏–∏:", item);
                answerOptionsEl.innerHTML = "<li>–û—à–∏–±–∫–∞: –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.</li>";
            } else {
                 item.options.forEach((option, i) => {
                    const li = document.createElement('li');
                    li.textContent = option.text;
                    li.dataset.index = i;
                    
                    if (userAnswers[index] && userAnswers[index].answered) {
                        li.classList.add('answered');
                        if (i === userAnswers[index].selectedOptionIndex) {
                            li.classList.add(userAnswers[index].correct ? 'correct' : 'incorrect');
                        }
                        if (!userAnswers[index].correct && i === item.correctAnswerIndex) {
                            li.classList.add('actual-correct');
                        }
                    } else {
                        li.addEventListener('click', handleAnswerSelect);
                    }
                    answerOptionsEl.appendChild(li);
                });
            }
        }
        
        updateNavigationButtons();
        updateQuickNavButtons();
    }




    function handleAnswerSelect(event) {
        if (userAnswers[currentQuestionIndex].answered) return;
        const selectedOptionLi = event.target;
        const selectedIndex = parseInt(selectedOptionLi.dataset.index);
        const question = questionsForCurrentQuiz[currentQuestionIndex];
        const isCorrect = selectedIndex === question.correctAnswerIndex;
        userAnswers[currentQuestionIndex] = { answered: true, correct: isCorrect, selectedOptionIndex: selectedIndex };
        if (isCorrect) {
            selectedOptionLi.classList.add('correct');
            feedbackAreaEl.textContent = '–ü—Ä–∞–≤–∏–ª—å–Ω–æ!';
            feedbackAreaEl.className = 'feedback-area correct-feedback';
            score++;
        } else {
            selectedOptionLi.classList.add('incorrect');
            feedbackAreaEl.textContent = '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ!';
            feedbackAreaEl.className = 'feedback-area incorrect-feedback';
            const correctLi = answerOptionsEl.querySelector(`li[data-index="${question.correctAnswerIndex}"]`);
            if (correctLi) correctLi.classList.add('actual-correct');
            if (quizSettings.feedbackMode) {
                incorrectlyAnsweredQuestionsData.push(...question.originalRaw, "");
            }
        }
        Array.from(answerOptionsEl.children).forEach(li => {
            li.removeEventListener('click', handleAnswerSelect);
            li.classList.add('answered');
        });


        // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –∫–Ω–æ–ø–∫—É, –µ—Å–ª–∏ –æ–Ω–∞ –±—ã–ª–∞
        const existingBtn = feedbackAreaEl.querySelector('.explain-btn');
        if (existingBtn) existingBtn.remove();

        // –°–æ–∑–¥–∞–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∫–Ω–æ–ø–∫—É
        const explainBtn = document.createElement('button');
        explainBtn.textContent = _('ai_explain_button');
        explainBtn.className = 'explain-btn'; // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å—Ç–∏–ª–∏
        explainBtn.style.marginLeft = '15px';
        explainBtn.onclick = () => showAIExplanation(question); // `question` —É–∂–µ –¥–æ—Å—Ç—É–ø–µ–Ω –≤ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
        feedbackAreaEl.appendChild(explainBtn);
        updateScoreDisplay();
        updateNavigationButtons();
        updateQuickNavButtons();
        if (quickModeEnabled) {
            setTimeout(() => handleNextButtonClick(), QUICK_MODE_DELAY);
        }
    }

    function handleNextButtonClick() {
        if (currentQuestionIndex < questionsForCurrentQuiz.length - 1) {
            loadNextQuestion();
        } else {
            if (timerInterval) clearInterval(timerInterval);
            showResults();
        }
    }
    
    function loadNextQuestion() {
        currentQuestionIndex++;
        loadQuestion(currentQuestionIndex);
    }

    function loadPreviousQuestion() {
        if (currentQuestionIndex > 0) {
            currentQuestionIndex--;
            loadQuestion(currentQuestionIndex);
        }
    }

    function updateNavigationButtons() {
        prevQuestionButton.disabled = currentQuestionIndex === 0;
        const isLastQuestion = currentQuestionIndex === questionsForCurrentQuiz.length - 1;
        nextButton.textContent = isLastQuestion ? _('finish_button') : _('next_question_button');
        nextButton.classList.toggle('finish-test', isLastQuestion);
    }

    async function showResults() {
        localStorage.removeItem(SAVED_SESSIONS_STORAGE_KEY);
        window.removeEventListener('beforeunload', handleBeforeUnload);
        if (timerInterval) clearInterval(timerInterval);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ —ç—Ç–æ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å
        if (currentQuizContext && !currentQuizContext.isPractice && currentUser) {
            
            // --- –ò–ó–ú–ï–ù–ï–ù–ò–ï ‚Ññ1: –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–æ–¥—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ ---
            const timeTaken = quizStartTime > 0 ? Math.round((new Date().getTime() - quizStartTime) / 1000) : 0;
            
            const questionsInThisQuiz = questionsForCurrentQuiz.filter(q => q.type !== 'category');
            const finalAccuracy = questionsInThisQuiz.length > 0 
                ? ((score / questionsInThisQuiz.length) * 100) 
                : 0;

            const resultData = {
                userId: currentUser.uid,
                userName: currentUser.displayName || '–ê–Ω–æ–Ω–∏–º',
                fileId: currentQuizContext.fileId,
                channelId: currentQuizContext.channelId,
                accuracy: finalAccuracy,
                timeSpentSeconds: timeTaken,
                timestamp: firebase.firestore.FieldValue.serverTimestamp()
            };

            // --- –ò–ó–ú–ï–ù–ï–ù–ò–ï ‚Ññ2: –õ–æ–≥–∏–∫–∞ –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ ---
            try {
                // –ò—â–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —ç—Ç–æ–≥–æ –∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —ç—Ç–æ–≥–æ –∂–µ —Ñ–∞–π–ª–∞
                const querySnapshot = await db.collection('testResults')
                    .where('userId', '==', currentUser.uid)
                    .where('fileId', '==', currentQuizContext.fileId)
                    .limit(1)
                    .get();

                if (querySnapshot.empty) {
                    // –ï—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–µ—Ç - –ø—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π
                    await db.collection('testResults').add(resultData);
                    console.log("–†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!");
                } else {
                    // –ï—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –µ—Å—Ç—å - –æ–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π
                    const docId = querySnapshot.docs[0].id;
                    await db.collection('testResults').doc(docId).update(resultData);
                    console.log("–†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!");
                }
            } catch (err) {
                console.error("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è/–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:", err);
            }
        }
        
        currentQuizContext = null;
        quizStartTime = 0; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–∞–π–º–µ—Ä

        quizArea.classList.add('hidden');
        resultsArea.classList.remove('hidden');
        webSearchDropdown?.classList.add('hidden');
        finishTestButton?.classList.add('hidden');
        copyQuestionBtnQuiz?.classList.add('hidden');
        
        finalCorrectEl.textContent = score;
        const questionsInThisQuiz = questionsForCurrentQuiz.filter(q => q.type !== 'category');
        finalTotalEl.textContent = questionsInThisQuiz.length;
        const percentage = questionsInThisQuiz.length > 0 ? ((score / questionsInThisQuiz.length) * 100).toFixed(1) : 0;
        finalPercentageEl.textContent = percentage;

        if (quizSettings.feedbackMode && incorrectlyAnsweredQuestionsData.length > 0) {
            feedbackDownloadArea.classList.remove('hidden');
            errorReviewArea.classList.remove('hidden');
        } else {
            feedbackDownloadArea.classList.add('hidden');
            errorReviewArea.classList.add('hidden');
        }

        if (triggerWordsUsedInQuiz) {
            triggeredQuizDownloadArea.classList.remove('hidden');
        } else {
            triggeredQuizDownloadArea.classList.add('hidden');
        }
    }


    function startErrorReviewQuiz() {
        const errorContent = incorrectlyAnsweredQuestionsData.join('\n');
        const errorQuestions = parseQstContent(errorContent);
        if (errorQuestions.length > 0) {
            resultsArea.classList.add('hidden');
            applySettingsAndStartQuiz(true, errorQuestions);
        } else {
            alert("–ù–µ —É–¥–∞–ª–æ—Å—å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã –Ω–∞–¥ –æ—à–∏–±–∫–∞–º–∏.");
        }
    }

    function downloadErrorFile() {
        const content = incorrectlyAnsweredQuestionsData.join('\n').trim();
        const fileNameBase = originalFileNameForReview ? originalFileNameForReview.replace(/\.qst$|\.txt$/i, '') : 'test';
        const fileName = `errors_${fileNameBase}.qst`;
        downloadOrShareFile(fileName, content, 'text/plain;charset=utf-8', '–û—à–∏–±–∫–∏');
    }

    function downloadTriggeredQuizFile() {
        let content = '';
        questionsForCurrentQuiz.forEach(q => {
            const tokens = tokenizeText(q.text);
            let questionTextForFile = '? ';
            let wordIdx = 0;
            tokens.forEach(token => {
                const isWord = /\S/.test(token) && !/^[.,;:!?()"‚Äú‚Äù¬´¬ª-]+$/.test(token);
                if (isWord) {
                    if (q.triggeredWordIndices?.includes(wordIdx)) {
                        questionTextForFile += `~${token}~`;
                    } else {
                        questionTextForFile += token;
                    }
                    wordIdx++;
                } else {
                    questionTextForFile += token;
                }
            });
            content += questionTextForFile.trim() + '\n';
            q.options.forEach(opt => {
                content += `${opt.isCorrect ? '+' : '-'} ${opt.text}\n`;
            });
            content += '\n';
        });
        const fileNameBase = originalFileNameForReview ? originalFileNameForReview.replace(/\.qst$|\.txt$|\.txt$/i, '') : 'quiz';
        const fileName = `triggered_${fileNameBase}.qst`;
        downloadOrShareFile(fileName, content, 'text/plain;charset=utf-t', '–¢–µ—Å—Ç —Å —Ç—Ä–∏–≥–≥–µ—Ä–∞–º–∏');
    }

    function updateScoreDisplay() {
        correctAnswersCountEl.textContent = score;
    }

    function resetQuizForNewFile(clearInput = true) {
        // –ï—Å–ª–∏ –º—ã —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–µ—Å—Ç, –ø–æ—Ç–æ–º—É —á—Ç–æ –Ω–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π,
        // –∞ –Ω–µ –ø–æ—Ç–æ–º—É —á—Ç–æ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏ —Å—Ç–∞—Ä—ã–π, —Ç–æ —É–¥–∞–ª—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ.
        quizStartTime = 0;
        if (clearInput) {
             localStorage.removeItem(SAVED_SESSIONS_STORAGE_KEY);
        }
        window.removeEventListener('beforeunload', handleBeforeUnload);



        if (timerInterval) clearInterval(timerInterval);
        allParsedQuestions = [];
        questionsForCurrentQuiz = [];
        currentQuestionIndex = 0;
        score = 0;
        userAnswers = [];
        incorrectlyAnsweredQuestionsData = [];
        originalFileNameForReview = '';
        generatedCheatSheetContent = '';
        triggerWordsUsedInQuiz = false;
        
        const screensToHide = [quizSetupArea, quizArea, resultsArea, cheatSheetResultArea, gradusFoldersContainer, searchResultsContainer];
        screensToHide.forEach(el => el?.classList.add('hidden'));
        fileUploadArea?.classList.remove('hidden');
        
        timerDisplayEl?.classList.add('hidden');
        quickNavPanel?.classList.add('hidden');
        feedbackDownloadArea?.classList.add('hidden');
        errorReviewArea?.classList.add('hidden');
        copyQuestionBtnQuiz?.classList.add('hidden');
        triggeredQuizDownloadArea?.classList.add('hidden');
        finishTestButton?.classList.add('hidden');
        webSearchDropdown?.classList.add('hidden');
        getEl('favoriteQuestionBtn')?.classList.add('hidden');
        languageToggle?.classList.remove('hidden');
        quickModeToggle?.classList.add('hidden');
        triggerWordToggle?.classList.add('hidden');
        
        if (clearInput) fileInput.value = '';
        
        if(questionTextEl) questionTextEl.textContent = '';
        if(answerOptionsEl) answerOptionsEl.innerHTML = '';
        if(feedbackAreaEl) {
            feedbackAreaEl.textContent = '';
            feedbackAreaEl.className = 'feedback-area';
        }
        
        loadRecentFiles();
        loadSavedSession();
    }

    function shuffleArray(array) {
        for (let i = array.length - 1; i > 0; i--) {
            const j = Math.floor(Math.random() * (i + 1));
            [array[i], array[j]] = [array[j], array[i]];
        }
    }


    function saveSessionForLater() {
        if (questionsForCurrentQuiz.length === 0) return;

        // 1. –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –ù–û–í–û–ô —Å–µ—Å—Å–∏–∏
        const newSessionData = {
            questionOrderIndices: questionsForCurrentQuiz.map(q => q.originalIndex),
            userAnswers,
            currentQuestionIndex,
            score,
            quizSettings,
            timeLeftInSeconds,
            originalFileNameForReview,
            totalQuestionCount: questionsForCurrentQuiz.filter(q => q.type !== 'category').length,
            timestamp: new Date().getTime()
        };

        try {
            // 2. –ß–∏—Ç–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–∞—Å—Å–∏–≤ —Å–µ—Å—Å–∏–π (–∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π)
            const savedSessions = JSON.parse(localStorage.getItem(SAVED_SESSIONS_STORAGE_KEY)) || [];

            // 3. –ò—â–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–ª—è —ç—Ç–æ–≥–æ —Ñ–∞–π–ª–∞
            const existingSessionIndex = savedSessions.findIndex(
                session => session.originalFileNameForReview === newSessionData.originalFileNameForReview
            );

            if (existingSessionIndex > -1) {
                // –ï—Å–ª–∏ –µ—Å—Ç—å - –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ
                savedSessions[existingSessionIndex] = newSessionData;
            } else {
                // –ï—Å–ª–∏ –Ω–µ—Ç - –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –≤ –º–∞—Å—Å–∏–≤
                savedSessions.push(newSessionData);
            }

            // 4. –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤ –æ–±—Ä–∞—Ç–Ω–æ –≤ localStorage
            localStorage.setItem(SAVED_SESSIONS_STORAGE_KEY, JSON.stringify(savedSessions));

            alert('–¢–µ—Å—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω! –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –µ–≥–æ –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç —Å –≥–ª–∞–≤–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∞.');
            resetQuizForNewFile(false);

        } catch (e) {
            console.error("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏ –≤ localStorage:", e);
            alert("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–µ—Å—Å–∏—é. –í–æ–∑–º–æ–∂–Ω–æ, –≤ –±—Ä–∞—É–∑–µ—Ä–µ –∑–∞–∫–æ–Ω—á–∏–ª–æ—Å—å –º–µ—Å—Ç–æ.");
        }
    }





    function loadSavedSession() {
        const savedSessionsJSON = localStorage.getItem(SAVED_SESSIONS_STORAGE_KEY);
        const sessions = savedSessionsJSON ? JSON.parse(savedSessionsJSON) : [];

        if (sessions.length === 0) {
            savedSessionArea.classList.add('hidden');
            savedSessionList.innerHTML = '';
            return;
        }

        let allCardsHTML = '';
        sessions.forEach(sessionData => {
            const totalQuestions = sessionData.totalQuestionCount;
            const answeredQuestions = sessionData.userAnswers.filter(a => a && a.answered).length;
            const progress = totalQuestions > 0 ? (answeredQuestions / totalQuestions) * 100 : 0;

            let timeInfo = '';
            if (sessionData.quizSettings.timeLimit > 0 && sessionData.timeLeftInSeconds) {
                const minutes = Math.floor(sessionData.timeLeftInSeconds / 60);
                const seconds = sessionData.timeLeftInSeconds % 60;
                timeInfo = `<div class="saved-session-time">${_('time_left')}: ${String(minutes).padStart(2, '0')}:${String(seconds).padStart(2, '0')}</div>`;
            }

            // –í–ê–ñ–ù–û: –î–æ–±–∞–≤–ª—è–µ–º data-filename –∫ –∫–Ω–æ–ø–∫–∞–º!
            allCardsHTML += `
                <div class="saved-session-card">
                    <div class="saved-session-name">${sessionData.originalFileNameForReview || '–°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç'}</div>
                    <div class="saved-session-progress-info">
                        <span>${_('answered_of')} ${answeredQuestions} ${_('from')} ${totalQuestions}</span>
                        ${timeInfo}
                    </div>
                    <div class="progress-bar">
                        <div class="progress-bar-fill" style="width: ${progress}%;"></div>
                    </div>
                    <div class="saved-session-actions">
                        <button class="btn-resume" data-filename="${sessionData.originalFileNameForReview}">${_('continue_quiz_button')}</button>
                        <button class="btn-delete" data-filename="${sessionData.originalFileNameForReview}">${_('delete_session_button')}</button>
                    </div>
                </div>
            `;
        });

        savedSessionList.innerHTML = allCardsHTML;
        savedSessionArea.classList.remove('hidden');

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫
        savedSessionList.removeEventListener('click', handleSessionCardClick); // –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –¥—É–±–ª–µ–π
        savedSessionList.addEventListener('click', handleSessionCardClick);
    }

    // –≠—Ç–æ –Ω–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –≤ –∫–∞—Ä—Ç–æ—á–∫–∞—Ö
    function handleSessionCardClick(event) {
        const target = event.target;
        const fileName = target.dataset.filename;
        if (!fileName) return;

        if (target.classList.contains('btn-resume')) {
            restoreQuizSession(fileName);
        } else if (target.classList.contains('btn-delete')) {
            deleteSavedSession(fileName);
        }
    }

    function restoreQuizSession(fileName) { // <-- –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –∏–º—è —Ñ–∞–π–ª–∞
        const savedSessionsJSON = localStorage.getItem(SAVED_SESSIONS_STORAGE_KEY);
        if (!savedSessionsJSON) return;
        
        const sessions = JSON.parse(savedSessionsJSON);
        const sessionData = sessions.find(s => s.originalFileNameForReview === fileName); // <-- –ù–∞—Ö–æ–¥–∏–º –Ω—É–∂–Ω—É—é —Å–µ—Å—Å–∏—é –≤ –º–∞—Å—Å–∏–≤–µ
        
        if (!sessionData) {
            alert("–û—à–∏–±–∫–∞: —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è –¥–ª—è —ç—Ç–æ–≥–æ —Ñ–∞–π–ª–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.");
            return;
        }

        // 1. –ù–∞—Ö–æ–¥–∏–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª –≤ "–ù–µ–¥–∞–≤–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö"
        const recentFiles = JSON.parse(localStorage.getItem(RECENT_FILES_STORAGE_KEY)) || [];
        const originalFile = recentFiles.find(f => f.name === sessionData.originalFileNameForReview);

        if (!originalFile) {
            alert("–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–µ—Å—Å–∏—é. –ò—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ '–ù–µ–¥–∞–≤–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö'.");
            deleteSavedSession(); // –£–¥–∞–ª—è–µ–º "–æ—Å–∏—Ä–æ—Ç–µ–≤—à—É—é" —Å–µ—Å—Å–∏—é
            return;
        }

        // 2. –ó–∞–Ω–æ–≤–æ –ø–∞—Ä—Å–∏–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤
        allParsedQuestions = parseQstContent(originalFile.content);

        // 3. –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¢–û–ß–ù–´–ô –ø–æ—Ä—è–¥–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π "–∫–∞—Ä—Ç—ã"
        questionsForCurrentQuiz = sessionData.questionOrderIndices.map(originalIndex => {
            // –í–∞–∂–Ω–æ —Ç–∞–∫–∂–µ –¥–æ–±–∞–≤–∏—Ç—å originalIndex –æ–±—Ä–∞—Ç–Ω–æ –≤ –∫–∞–∂–¥—ã–π –≤–æ–ø—Ä–æ—Å
            return { ...allParsedQuestions[originalIndex], originalIndex };
        });

        // 4. –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        userAnswers = sessionData.userAnswers;
        currentQuestionIndex = sessionData.currentQuestionIndex;
        score = sessionData.score;
        quizSettings = sessionData.quizSettings;
        timeLeftInSeconds = sessionData.timeLeftInSeconds;
        originalFileNameForReview = sessionData.originalFileNameForReview;

        // 5. –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —ç–∫—Ä–∞–Ω —Ç–µ—Å—Ç–∞
        fileUploadArea.classList.add('hidden');
        quizSetupArea.classList.add('hidden');
        quizArea.classList.remove('hidden');

        // 6. –ó–∞–ø—É—Å–∫–∞–µ–º UI —Ç–µ—Å—Ç–∞ —Å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        totalQuestionsNumEl.textContent = questionsForCurrentQuiz.filter(q => q.type !== 'category').length;
        updateScoreDisplay();
        setupTimer();
        generateQuickNav();
        loadQuestion(currentQuestionIndex);

        // 7. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω—É–∂–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
        webSearchDropdown?.classList.remove('hidden');
        finishTestButton?.classList.remove('hidden');
        continueLaterButton?.classList.remove('hidden');
        copyQuestionBtnQuiz?.classList.remove('hidden');
        getEl('favoriteQuestionBtn')?.classList.remove('hidden');
        languageToggle?.classList.add('hidden');
        quickModeToggle?.classList.remove('hidden');
        triggerWordToggle?.classList.remove('hidden');

        // 8. –î–æ–±–∞–≤–ª—è–µ–º –∑–∞—â–∏—Ç—É –æ—Ç —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è –≤–∫–ª–∞–¥–∫–∏
        window.addEventListener('beforeunload', handleBeforeUnload);
    }
    
    function deleteSavedSession(fileName) { // <-- –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –∏–º—è —Ñ–∞–π–ª–∞
        if (confirm(`–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç "${fileName}"? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ.`)) {
            const savedSessionsJSON = localStorage.getItem(SAVED_SESSIONS_STORAGE_KEY);
            let sessions = savedSessionsJSON ? JSON.parse(savedSessionsJSON) : [];
            
            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –º–∞—Å—Å–∏–≤, –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–≤ —É–¥–∞–ª—è–µ–º—É—é —Å–µ—Å—Å–∏—é
            const updatedSessions = sessions.filter(s => s.originalFileNameForReview !== fileName);
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π –º–∞—Å—Å–∏–≤
            localStorage.setItem(SAVED_SESSIONS_STORAGE_KEY, JSON.stringify(updatedSessions));
            
            // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            loadSavedSession();
        }
    }

 

    function loadTheme() {
        const currentTheme = localStorage.getItem('theme') || 'claude'; 
        // –°–Ω–∞—á–∞–ª–∞ —É–±–∏—Ä–∞–µ–º –≤—Å–µ –∫–ª–∞—Å—Å—ã —Ç–µ–º
        document.body.classList.remove('dark-mode', 'claude-mode', 'synthwave-mode'); 

        if (currentTheme === 'dark') {
            document.body.classList.add('dark-mode');
            if (themeToggleButton) themeToggleButton.textContent = 'üî≠'; // –°–æ–ª–Ω—Ü–µ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ —Å–≤–µ—Ç–ª—É—é
        } else if (currentTheme === 'claude') {
            document.body.classList.add('claude-mode');
            if (themeToggleButton) themeToggleButton.textContent = 'üåô'; // –õ—É–Ω–∞ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ —Ç–µ–º–Ω—É—é
        } else if (currentTheme === 'synthwave') { // <-- –ù–∞—à –Ω–æ–≤—ã–π –±–ª–æ–∫
            document.body.classList.add('synthwave-mode');
            if (themeToggleButton) themeToggleButton.textContent = '‚òÄÔ∏è'; // –†–∞–∫–µ—Ç–∞ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ —Å–≤–µ—Ç–ª—É—é
        } else {
            // –°–≤–µ—Ç–ª–∞—è —Ç–µ–º–∞ (light) - –Ω–µ—Ç –∫–ª–∞—Å—Å–∞
            if (themeToggleButton) themeToggleButton.textContent = 'üå§Ô∏è'; // –ò–∫–æ–Ω–∫–∞ Claude –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ –Ω–µ–µ
        }
    }

    function toggleTheme() {
        const themes = ['light', 'claude', 'dark', 'synthwave']; // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ—Ä—è–¥–æ–∫ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è
        const currentTheme = localStorage.getItem('theme') || 'light';
        const currentIndex = themes.indexOf(currentTheme);
        const nextIndex = (currentIndex + 1) % themes.length; // –ù–∞—Ö–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å —Å–ª–µ–¥—É—é—â–µ–π —Ç–µ–º—ã
        const newTheme = themes[nextIndex];

        localStorage.setItem('theme', newTheme);
        loadTheme(); // –í—ã–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ç–µ–º—ã –∏ –∏–∫–æ–Ω–∫–∏
    }


      

    async function handleCopyExplanation() {
        const outputEl = getEl('aiExplanationOutput');
        if (!outputEl) return;

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º innerText, —á—Ç–æ–±—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç —Ç–∞–∫, –∫–∞–∫ –µ–≥–æ –≤–∏–¥–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å,
        // –±–µ–∑ HTML-—Ç–µ–≥–æ–≤, –Ω–æ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–µ—Ä–µ–Ω–æ—Å–∞–º–∏ —Å—Ç—Ä–æ–∫.
        const textToCopy = outputEl.innerText;

        if (textToCopy.trim()) {
            await copyToClipboardMain(textToCopy);
        }
    }


    // --- –ù–û–í–´–ï –§–£–ù–ö–¶–ò–ò –î–õ–Ø –ü–ï–†–ï–í–û–î–ê –Ø–ó–´–ö–ê ---

 

    function setLanguage(lang) {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        localStorage.setItem('appLanguage', lang);
        
        // –í—ã–∑—ã–≤–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫ —á–∞—Ç–∞
        ChatModule.setLanguage(lang);

        const translations = LANG_PACK[lang];

        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–∞—Ö —Å –∞—Ç—Ä–∏–±—É—Ç–æ–º data-lang-key
        document.querySelectorAll('[data-lang-key]').forEach(el => {
            const key = el.dataset.langKey;
            if (translations[key]) {
                if (el.placeholder) {
                    el.placeholder = translations[key];
                } else {
                    el.innerHTML = translations[key];
                }
            }
        });
        
        // –û–±–Ω–æ–≤–ª—è–µ–º title —É –∫–Ω–æ–ø–æ–∫
        getEl('copyQuestionBtnQuiz').title = translations.copy_question_title;
        getEl('searchWebButton').title = translations.search_web_title;
        getEl('chatToggle').title = translations.chat_button_title;
        getEl('quickModeToggle').title = translations.quick_mode_title;
        getEl('triggerWordToggle').title = translations.trigger_words_title;
        getEl('themeToggle').title = translations.theme_button_title;
        getEl('languageToggle').title = translations.language_toggle_title;
        getEl('favoriteQuestionBtn').title = translations.favorite_button_title;
        
        // –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê –î–õ–Ø –¢–ï–ö–°–¢–ê –ö–ù–û–ü–ö–ò
        const langs = ['ru', 'en', 'kz'];
        // –¢–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –ø–æ–∫–∞–∑–∞–Ω –Ω–∞ –∫–Ω–æ–ø–∫–µ, –∫–æ–≥–¥–∞ –∞–∫—Ç–∏–≤–µ–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —è–∑—ã–∫
        const displayLangs = ['En', '“ö–∞–∑', '–†—É'];
        const currentIndex = langs.indexOf(lang);
        languageToggle.textContent = displayLangs[currentIndex];

        // === –ù–ê–ß–ê–õ–û –ù–û–í–û–ì–û –ö–û–î–ê: –ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ ===
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç–∏–≤–µ–Ω –ª–∏ —ç–∫—Ä–∞–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ –∏ –µ—Å—Ç—å –ª–∏ —á—Ç–æ –ø–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞—Ç—å
        if (searchResultsContainer && !searchResultsContainer.classList.contains('hidden') && searchResultsData.length > 0) {
            console.log('–ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –¥–ª—è –Ω–æ–≤–æ–≥–æ —è–∑—ã–∫–∞...');
            // –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –∑–∞–Ω–æ–≤–æ –æ—Ç—Ä–∏—Å—É–µ—Ç —Ç–µ–∫—É—â—É—é –∫–∞—Ä—Ç–æ—á–∫—É —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏,
            // –∏—Å–ø–æ–ª—å–∑—É—è —É–∂–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å LANG_PACK.
            displaySingleResult(currentResultIndex);
        }
        // === –ö–û–ù–ï–¶ –ù–û–í–û–ì–û –ö–û–î–ê ===
        
        loadSavedSession();
    }



    function toggleLanguage() {
        const currentLang = localStorage.getItem('appLanguage') || 'ru';
        const langs = ['ru', 'en', 'kz']; // –ú–∞—Å—Å–∏–≤ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —è–∑—ã–∫–æ–≤
        const currentIndex = langs.indexOf(currentLang);
        // –í—ã—á–∏—Å–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π —è–∑—ã–∫, –∑–∞—Ü–∏–∫–ª–∏–≤–∞—è –º–∞—Å—Å–∏–≤
        const nextIndex = (currentIndex + 1) % langs.length;
        const newLang = langs[nextIndex];
        setLanguage(newLang);
    }

    function handleCopyQuestionInQuiz() {
        if (currentQuestionIndex >= questionsForCurrentQuiz.length) {
            alert("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è.");
            return;
        }

        const questionData = questionsForCurrentQuiz[currentQuestionIndex];
        
        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤ .qst —Ñ–æ—Ä–º–∞—Ç
        let qstContent = `? ${questionData.text}\n`;
        questionData.options.forEach(opt => {
            qstContent += `${opt.isCorrect ? '+' : '-'} ${opt.text}\n`;
        });

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–∞—à—É –≥–ª–æ–±–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
        copyToClipboardMain(qstContent.trim());
    }


    function handleFavoriteClickInQuiz() {
        if (!ChatModule.isInitialized() || !ChatModule.getCurrentUser()) {
            alert("–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç.");
            ChatModule.openAuthModal();
            return;
        }
        if (currentQuestionIndex >= questionsForCurrentQuiz.length) {
            alert("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å.");
            return;
        }
        const questionData = questionsForCurrentQuiz[currentQuestionIndex];
        const questionObject = {
            text: questionData.text,
            options: questionData.options,
        };
        ChatModule.addToFavorites(questionObject, 'question');
    }

    function handleFavoriteClickInSearch(event, rawQuestionText) {
        event.stopPropagation(); 
        if (!ChatModule.isInitialized() || !ChatModule.getCurrentUser()) {
            alert("–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç.");
            ChatModule.openAuthModal();
            return;
        }
        
        // –ò–°–ü–†–ê–í–¨–¢–ï —ç—Ç—É —Å—Ç—Ä–æ–∫—É - —É–±–µ—Ä–∏—Ç–µ escape():
        const cleanText = rawQuestionText.replace(/\\n/g, '\n');
        const parsedQuestion = parseQstContent(`? ${cleanText}`)[0];
        
        if (parsedQuestion) {
            const questionObject = {
                text: parsedQuestion.text,
                options: parsedQuestion.options
            };
            ChatModule.addToFavorites(questionObject, 'question');
        } else {
            alert("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–æ–ø—Ä–æ—Å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.");
        }
    }


    function handleCopyClickInSearch(event, rawQuestionText) {
    event.stopPropagation(); // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–µ –¥—Ä—É–≥–∏—Ö –∫–ª–∏–∫–æ–≤

    // –¢–µ–∫—Å—Ç –∏–∑ –±–∞–∑—ã –ø—Ä–∏—Ö–æ–¥–∏—Ç —Å —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –ø–µ—Ä–µ–Ω–æ—Å–∞–º–∏ —Å—Ç—Ä–æ–∫ (\\n). 
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∏—Ö –≤ –Ω–∞—Å—Ç–æ—è—â–∏–µ –ø–µ—Ä–µ–Ω–æ—Å—ã (\n).
    const cleanText = rawQuestionText.replace(/\\n/g, '\n');
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–∞—à—É –∂–µ —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
    copyToClipboardMain(cleanText); 
}


    
    function escape(str) {
        if (!str) return '';
        return str.replace(/`/g, '\\`').replace(/\$/g, '\\$').replace(/{/g, '\\{').replace(/}/g, '\\}');
    }

    function escapeHTML(str) {
        const p = document.createElement("p");
        p.textContent = str;
        return p.innerHTML;
    }

    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è "—É–º–Ω–æ–≥–æ" —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –Ω–∞ –±–ª–æ–∫–∏
    function smartSplitIntoBlocks(text) {
        // –°–Ω–∞—á–∞–ª–∞ –∑–∞–º–µ–Ω—è–µ–º –¥–≤–æ–π–Ω—ã–µ –∏–ª–∏ –±–æ–ª–µ–µ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫ –Ω–∞ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
        const withDelimiter = text.replace(/\n\s*\n/g, '<<<BLOCK_DELIMITER>>>');
        // –¢–µ–ø–µ—Ä—å –¥–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –ø–µ—Ä–µ–¥ —Ç–µ–≥–∞–º–∏ –≤–æ–ø—Ä–æ—Å–æ–≤, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ –≤ –Ω–∞—á–∞–ª–µ —Å—Ç—Ä–æ–∫–∏
        const finalWithDelimiter = withDelimiter.replace(/\n(?=<–í–æ–ø—Ä–æ—Å>|<question>)/gi, '<<<BLOCK_DELIMITER>>>');
        
        return finalWithDelimiter.split('<<<BLOCK_DELIMITER>>>').filter(b => b.trim() !== '');
    }

    // --- –ù–ê–ß–ê–õ–û –ù–û–í–û–ì–û –ö–û–î–ê: –î–í–ò–ñ–û–ö –ü–ê–†–°–ï–†–ê ---

    const PARSER_PATTERNS = [

        {
            id: 'plus_at_end_generic', // –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ù–æ–≤–æ–µ, –±–æ–ª–µ–µ –æ–±—â–µ–µ –∏–º—è
            name: "–û—Ç–≤–µ—Ç —Å '+' –≤ –∫–æ–Ω—Ü–µ —Å—Ç—Ä–æ–∫–∏",
            // –î–µ—Ç–µ–∫—Ç–æ—Ä: –ø—Ä–æ—Å—Ç–æ –∏—â–µ—Ç –ø–ª—é—Å –≤ –∫–æ–Ω—Ü–µ —Å—Ç—Ä–æ–∫–∏. –û—á–µ–Ω—å –Ω–∞–¥–µ–∂–Ω–æ.
            detector: (text) => /\+\s*$/m.test(text),
            processor: (text) => {
                const questions = [];
                const blocks = smartSplitIntoBlocks(text);

                for (const block of blocks) {
                    const lines = block.trim().split('\n'); // –ù–µ —É–¥–∞–ª—è–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ —Å—Ä–∞–∑—É
                    if (lines.length < 2) continue;

                    let questionLines = [];
                    const optionLines = [];
                    let correctAnswer = null;
                    
                    let firstOptionIndex = -1;

                    // –ò–©–ï–ú –ü–ï–†–í–£–Æ –°–¢–†–û–ö–£ –° –û–¢–°–¢–£–ü–û–ú (–¢–ê–ë–£–õ–Ø–¶–ò–ï–ô –ò–õ–ò –ü–†–û–ë–ï–õ–ê–ú–ò)
                    // –ù–∞—á–∏–Ω–∞–µ–º —Å–æ –≤—Ç–æ—Ä–æ–π —Å—Ç—Ä–æ–∫–∏ (i=1), —Ç–∞–∫ –∫–∞–∫ –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ - –≤—Å–µ–≥–¥–∞ —á–∞—Å—Ç—å –≤–æ–ø—Ä–æ—Å–∞.
                    for (let i = 1; i < lines.length; i++) {
                        // –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ /^\s/ –∏—â–µ—Ç –ª—é–±–æ–π –ø—Ä–æ–±–µ–ª—å–Ω—ã–π —Å–∏–º–≤–æ–ª –≤ –Ω–∞—á–∞–ª–µ —Å—Ç—Ä–æ–∫–∏
                        if (lines[i] && /^\s/.test(lines[i])) { 
                            firstOptionIndex = i;
                            break; // –ù–∞—à–ª–∏! –í—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞.
                        }
                    }

                    // –ï—Å–ª–∏ –º—ã —Ç–∞–∫ –∏ –Ω–µ –Ω–∞—à–ª–∏ —Å—Ç—Ä–æ–∫—É —Å –æ—Ç—Å—Ç—É–ø–æ–º (–Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–ø–∞–ª–æ),
                    // –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—ã–π "–∑–∞–ø–∞—Å–Ω–æ–π" –≤–∞—Ä–∏–∞–Ω—Ç: —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ –≤–æ–ø—Ä–æ—Å —Ç–æ–ª—å–∫–æ –≤ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–µ.
                    if (firstOptionIndex === -1) {
                        firstOptionIndex = 1;
                    }

                    questionLines = lines.slice(0, firstOptionIndex).filter(l => l.trim() !== '');
                    const rawOptionLines = lines.slice(firstOptionIndex).filter(l => l.trim() !== '');
                    
                    // –°–æ–±–∏—Ä–∞–µ–º —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞, —É–±–∏—Ä–∞—è –≤–æ–∑–º–æ–∂–Ω—É—é –Ω—É–º–µ—Ä–∞—Ü–∏—é –≤ –Ω–∞—á–∞–ª–µ
                    const questionText = questionLines.join(' ').replace(/^\s*\d+\s*\.?\s*/, '').trim();

                    rawOptionLines.forEach(line => {
                        const trimmedLine = line.trim();
                        if (trimmedLine.endsWith('+')) {
                            const answer = trimmedLine.slice(0, -1).trim();
                            correctAnswer = answer;
                            optionLines.push(answer);
                        } else {
                            optionLines.push(trimmedLine);
                        }
                    });

                    if (questionText && correctAnswer) {
                        questions.push({
                            text: questionText,
                            options: optionLines,
                            correctAnswer: correctAnswer
                        });
                    }
                }
                return questions;
            }
        },

         
        {
            id: 'first_answer_correct_fallback',
            name: '–ë–µ–∑ –º–∞—Ä–∫–µ—Ä–æ–≤ (–ø–µ—Ä–≤—ã–π –æ—Ç–≤–µ—Ç - –≤–µ—Ä–Ω—ã–π)',
            // –ú–û–î–ò–§–ò–¶–ò–†–û–í–ê–ù–ù–´–ô –î–ï–¢–ï–ö–¢–û–†
            detector: (text) => {
                // 1. –ë—ã—Å—Ç—Ä–∞—è –æ—Ç–±—Ä–∞–∫–æ–≤–∫–∞ "–º—É—Å–æ—Ä–Ω—ã—Ö" –∏–ª–∏ –ø—É—Å—Ç—ã—Ö –±–ª–æ–∫–æ–≤
                if (!text || text.trim() === '') {
                    return false;
                }

                // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤ —Ç–µ–∫—Å—Ç–µ –ù–ï–¢ –º–∞—Ä–∫–µ—Ä–æ–≤ –¥—Ä—É–≥–∏—Ö, –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤
                const hasPlusAtStart = /^\s*\+/m.test(text);
                const hasPlusAtEnd = /\+\s*$/m.test(text);
                const hasTags = /<question>|<variant>|<–í–æ–ø—Ä–æ—Å>|<–≤–∞—Ä–∏–∞–Ω—Ç>/i.test(text);

                // –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω –º–∞—Ä–∫–µ—Ä –¥—Ä—É–≥–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞, —ç—Ç–æ—Ç —à–∞–±–ª–æ–Ω –ù–ï –¥–æ–ª–∂–µ–Ω —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å
                if (hasPlusAtStart || hasPlusAtEnd || hasTags) {
                    return false;
                }

                // 3. –ù–û–í–´–ï –ü–†–û–í–ï–†–ö–ò: –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –±–ª–æ–∫ –ø–æ—Ö–æ–∂ –Ω–∞ –Ω–∞—Å—Ç–æ—è—â–∏–π –≤–æ–ø—Ä–æ—Å
                const lines = text.trim().split('\n');
                const hasAtLeastTwoLines = lines.length >= 2;
                const hasLetters = /[a-zA-Z–∞-—è–ê-–Ø]/.test(text); // –ï—Å—Ç—å –ª–∏ –≤ —Ç–µ–∫—Å—Ç–µ —Ö–æ—Ç—å –æ–¥–Ω–∞ –±—É–∫–≤–∞

                // –®–∞–±–ª–æ–Ω —Å—Ä–∞–±–æ—Ç–∞–µ—Ç, –¢–û–õ–¨–ö–û –ï–°–õ–ò –≤—ã–ø–æ–ª–Ω–µ–Ω—ã –≤—Å–µ —É—Å–ª–æ–≤–∏—è:
                // —ç—Ç–æ "—á–∏—Å—Ç—ã–π" —Ç–µ–∫—Å—Ç, –≤ –Ω–µ–º –º–∏–Ω–∏–º—É–º 2 —Å—Ç—Ä–æ–∫–∏ –ò –µ—Å—Ç—å –±—É–∫–≤—ã.
                return hasAtLeastTwoLines && hasLetters;
            },
            processor: (text) => {
                const questions = [];
                const blocks = smartSplitIntoBlocks(text);

                for (const block of blocks) {
                    const lines = block.trim().split('\n').filter(l => l.trim() !== '');
                    if (lines.length < 2) continue;

                    const questionText = lines.shift().replace(/^\s*\d+\s*\.?\s*/, '').trim();
                    const options = lines.map(l => l.trim());
                    
                    if (questionText && options.length > 0) {
                        questions.push({
                            text: questionText,
                            options: options,
                            correctAnswer: options[0]
                        });
                    }
                }
                return questions;
            }
        },


        {
            id: 'numbered_list_plus_answer',
            name: '–ù—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ (1.) —Å –æ—Ç–≤–µ—Ç–æ–º "+" –≤ –Ω–∞—á–∞–ª–µ',
            // –î–µ—Ç–µ–∫—Ç–æ—Ä: –∏—â–µ—Ç —Å—Ç—Ä–æ–∫–∏, –Ω–∞—á–∏–Ω–∞—é—â–∏–µ—Å—è —Å "—Ü–∏—Ñ—Ä–∞." –∏ —Å—Ç—Ä–æ–∫–∏, –Ω–∞—á–∏–Ω–∞—é—â–∏–µ—Å—è —Å "+"
            detector: (text) => /^\s*\d+\./m.test(text) && /^\s*\+/m.test(text),
            processor: (text) => {
                const questions = [];
                let currentQuestion = null;
                const lines = text.split(/\r?\n/);

                for (const line of lines) {
                    const trimmedLine = line.trim();
                    if (trimmedLine === '') continue;

                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ —Å –Ω–æ–º–µ—Ä–∞ (–Ω–∞–ø—Ä. "1.", "12. ")
                    if (/^\d+\.\s*/.test(trimmedLine)) {
                        // –ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å —Å–æ–±—Ä–∞–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ
                        if (currentQuestion && currentQuestion.correctAnswer) {
                            questions.push(currentQuestion);
                        }
                        // –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å, —É–¥–∞–ª—è—è –Ω–æ–º–µ—Ä –∏ —Ç–æ—á–∫—É –≤ –Ω–∞—á–∞–ª–µ
                        currentQuestion = {
                            text: trimmedLine.replace(/^\d+\.\s*/, '').trim(),
                            options: [],
                            correctAnswer: null
                        };
                    } else if (trimmedLine.startsWith('+') && currentQuestion) {
                        // –≠—Ç–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
                        const answerText = trimmedLine.substring(1).trim();
                        currentQuestion.correctAnswer = answerText;
                        currentQuestion.options.push(answerText);
                    } else if (currentQuestion && !currentQuestion.correctAnswer) {
                        // –≠—Ç–æ –Ω–µ–≤–µ—Ä–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞ (–∏–¥–µ—Ç –¥–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ)
                        currentQuestion.options.push(trimmedLine);
                    } else if (currentQuestion && currentQuestion.correctAnswer) {
                        // –≠—Ç–æ –Ω–µ–≤–µ—Ä–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞ (–∏–¥–µ—Ç –ø–æ—Å–ª–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ)
                        currentQuestion.options.push(trimmedLine);
                    }
                }

                // –ù–µ –∑–∞–±—ã–≤–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–∞–º—ã–π –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–æ–ø—Ä–æ—Å –ø–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ü–∏–∫–ª–∞
                if (currentQuestion && currentQuestion.correctAnswer) {
                    questions.push(currentQuestion);
                }

                return questions;
            }
        },


        {
            id: 'plus_at_start',
            name: '–û—Ç–≤–µ—Ç —Å "+" –≤ –Ω–∞—á–∞–ª–µ —Å—Ç—Ä–æ–∫–∏',
            // –ò—â–µ—Ç –±–ª–æ–∫, –≥–¥–µ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ —Å—Ç—Ä–æ–∫–∞, –Ω–∞—á–∏–Ω–∞—é—â–∞—è—Å—è —Å "+"
            detector: (text) => text.split('\n').some(line => line.trim().startsWith('+')),
            processor: (text) => {
                const questions = [];
                const blocks = text.split(/\n\s*\n/); // –î–µ–ª–∏–º –ø–æ –ø—É—Å—Ç—ã–º —Å—Ç—Ä–æ–∫–∞–º
                for (const block of blocks) {
                    const lines = block.trim().split('\n').filter(l => l.trim() !== '');
                    if (lines.length < 2) continue;

                    const questionLines = [];
                    const optionLines = [];
                    let correctAnswer = null;

                    lines.forEach(line => {
                        const trimmedLine = line.trim();
                        if (trimmedLine.startsWith('+')) {
                            correctAnswer = trimmedLine.substring(1).trim();
                            optionLines.push(correctAnswer);
                        } else if (/^[a-zA-Z–∞-—è–ê-–Ø0-9]/.test(trimmedLine) && correctAnswer !== null) {
                            optionLines.push(trimmedLine);
                        } else {
                            questionLines.push(trimmedLine);
                        }
                    });

                    if (questionLines.length > 0 && correctAnswer) {
                        questions.push({
                            text: questionLines.join(' '),
                            options: optionLines,
                            correctAnswer: correctAnswer
                        });
                    }
                }
                return questions;
            }
        },





        {
            id: 'tags_vopros_variant',
            name: '–¢–µ–≥–∏ <–í–æ–ø—Ä–æ—Å> –∏ <–≤–∞—Ä–∏–∞–Ω—Ç>',
            detector: (text) => /<–í–æ–ø—Ä–æ—Å>|<–≤–∞—Ä–∏–∞–Ω—Ç>/i.test(text),
            processor: (text) => {
                const questions = [];
                // –£–±–∏—Ä–∞–µ–º –Ω—É–º–µ—Ä–∞—Ü–∏—é —Ç–∏–ø–∞ "1. <–í–æ–ø—Ä–æ—Å>" –∏–ª–∏ "2 <–í–æ–ø—Ä–æ—Å>"
                const cleanedText = text.replace(/^\s*\d+\s*\.?\s*</gm, '<');
                const blocks = cleanedText.split(/<–í–æ–ø—Ä–æ—Å>/i).filter(b => b.trim() !== '');

                for (const block of blocks) {
                    const parts = block.split(/<–≤–∞—Ä–∏–∞–Ω—Ç>/i).map(p => p.trim());
                    if (parts.length < 2) continue;

                    const questionText = parts.shift();
                    // –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–µ —É–∫–∞–∑–∞–Ω, –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π
                    questions.push({
                        text: questionText,
                        options: parts,
                        correctAnswer: parts[0]
                    });
                }
                return questions;
            }
        },
        {
            id: 'tags_question_variant',
            name: '–¢–µ–≥–∏ <question> –∏ <variant>',
            detector: (text) => /<question|<variant>/i.test(text),
            processor: (text) => {
                const questions = [];
                const cleanedText = text.replace(/^\s*\d+\s*\.?\s*</gm, '<');
                const blocks = cleanedText.split(/<question.*?>/i).filter(b => b.trim() !== '');

                for (const block of blocks) {
                    const parts = block.split(/<variant>/i).map(p => p.trim().replace(/<\/?[^>]+(>|$)/g, "")); // –£–¥–∞–ª—è–µ–º –¥—Ä—É–≥–∏–µ —Ç–µ–≥–∏
                    if (parts.length < 2) continue;
                    
                    const questionText = parts.shift();
                    questions.push({
                        text: questionText,
                        options: parts,
                        correctAnswer: parts[0]
                    });
                }
                return questions;
            }
        }


    ];


    function processTextWithMultiFormat(text) {
        // === –ù–ê–ß–ê–õ–û –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø: –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∏ —Ä—É—á–Ω–æ–π –ø–æ–¥—Å—á—ë—Ç –∏–Ω–¥–µ–∫—Å–∞ ===

        let allParsedQuestions = [];
        let parsingErrors = [];

        // 1. –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –≤—Å–µ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫ –∫ –µ–¥–∏–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É '\n'.
        //    –≠—Ç–æ —Ä–µ—à–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—É —Å \r\n –∏ –¥–µ–ª–∞–µ—Ç –ø–æ–¥—Å—á–µ—Ç –Ω–∞–¥–µ–∂–Ω—ã–º.
        const normalizedText = text.replace(/\r\n/g, '\n');
        const lines = normalizedText.split('\n');

        const processAndAddBlock = (blockLines, startIndex) => {
            if (blockLines.length === 0) return;
            const blockText = blockLines.join('\n');
            // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–Ω–µ—á–Ω—ã–π –∏–Ω–¥–µ–∫—Å
            const endIndex = startIndex + blockText.length;

            const individualPatterns = PARSER_PATTERNS.filter(p => p.id !== 'multi_format');
            let blockParsed = false;

            for (const pattern of individualPatterns) {
                if (pattern.detector(blockText)) {
                    try {
                        const parsed = pattern.processor(blockText);
                        if (parsed.length > 0) {
                            allParsedQuestions.push(...parsed);
                            blockParsed = true;
                            break;
                        }
                    } catch (e) {
                        console.warn(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –±–ª–æ–∫–∞ —à–∞–±–ª–æ–Ω–æ–º "${pattern.name}":`, e);
                    }
                }
            }
            if (!blockParsed) {
                console.warn("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –±–ª–æ–∫–∞:\n---\n", blockText);
                parsingErrors.push({
                    text: blockText.trim(),
                    start: startIndex,
                    end: endIndex
                });
            }
        };

        // 2. –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä—É—á–Ω–æ–π –ø–æ–¥—Å—á–µ—Ç –∏–Ω–¥–µ–∫—Å–∞ –≤–º–µ—Å—Ç–æ –Ω–µ–Ω–∞–¥–µ–∂–Ω–æ–≥–æ indexOf.
        let currentIndex = 0;
        let currentBlockLines = [];
        let currentBlockStartIndex = 0;

        lines.forEach(line => {
            const trimmedLine = line.trim();
            const isCategoryTag = trimmedLine.startsWith('#_#') && trimmedLine.endsWith('#_#');
            const isNewBlockStart = /^\s*\d+\.\s+/.test(trimmedLine) || /^\s*<question>|^\s*<–í–æ–ø—Ä–æ—Å>/i.test(trimmedLine);
            
            if (isCategoryTag) {
                processAndAddBlock(currentBlockLines, currentBlockStartIndex);
                const categoryName = trimmedLine.slice(3, -3).trim();
                allParsedQuestions.push({ text: categoryName, type: 'category' });
                currentBlockLines = [];
            } else if (isNewBlockStart && currentBlockLines.length > 0) {
                processAndAddBlock(currentBlockLines, currentBlockStartIndex);
                currentBlockLines = [line];
                // –ù–æ–≤—ã–π –±–ª–æ–∫ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å —Ç–µ–∫—É—â–µ–π –ø–æ–∑–∏—Ü–∏–∏
                currentBlockStartIndex = currentIndex;
            } else {
                if (currentBlockLines.length === 0) {
                    // –≠—Ç–æ –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –Ω–æ–≤–æ–≥–æ –±–ª–æ–∫–∞
                    currentBlockStartIndex = currentIndex;
                }
                currentBlockLines.push(line);
            }

            // 3. –í –∫–æ–Ω—Ü–µ –∫–∞–∂–¥–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏ —Å–¥–≤–∏–≥–∞–µ–º –∏–Ω–¥–µ–∫—Å –Ω–∞ –¥–ª–∏–Ω—É —Å—Ç—Ä–æ–∫–∏ + 1 (–∑–∞ —Å–∏–º–≤–æ–ª '\n')
            currentIndex += line.length + 1;
        });

        // –ù–µ –∑–∞–±—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–∞–º—ã–π –ø–æ—Å–ª–µ–¥–Ω–∏–π –±–ª–æ–∫
        processAndAddBlock(currentBlockLines, currentBlockStartIndex);

        return {
            questions: allParsedQuestions,
            errors: parsingErrors
        };
        // === –ö–û–ù–ï–¶ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø ===
    }




    function populateParserPatterns() {
        PARSER_PATTERNS.forEach(pattern => {
            const option = document.createElement('option');
            option.value = pattern.id;
            option.textContent = pattern.name;
            parserPatternSelect.appendChild(option);
        });
    }

    function handleParserFileInput(event) {
        const file = event.target.files[0];
        if (!file) return;

        const reader = new FileReader();
        reader.onload = (e) => {
            parserInput.value = e.target.result;
        };
        reader.readAsText(file, 'UTF-8');
    }



    /**
     * –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –æ—à–∏–±–æ–∫ –∏ –ø—Ä–∏–≤—è–∑—ã–≤–∞–µ—Ç –∫ –Ω–∏–º –∫–ª–∏–∫–∏ –¥–ª—è –ø–æ–¥—Å–≤–µ—Ç–∫–∏ –≤ –Ω—É–∂–Ω–æ–º –ø–æ–ª–µ.
     * @param {HTMLTextAreaElement} targetTextarea - –ü–æ–ª–µ, –≤ –∫–æ—Ç–æ—Ä–æ–º –±—É–¥—É—Ç –ø–æ–¥—Å–≤–µ—á–∏–≤–∞—Ç—å—Å—è –æ—à–∏–±–∫–∏.
     * @param {Array<Object>} errors - –ú–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤ –æ—à–∏–±–æ–∫.
     */
    function renderErrors(targetTextarea, errors) {
        const errorsArea = getEl('parserErrorsArea');
        const errorCountEl = getEl('errorCount');
        const errorListEl = getEl('errorList');

        if (!errorsArea || !errorCountEl || !errorListEl) return;

        errorListEl.innerHTML = ''; 
        errorCountEl.textContent = errors.length;
        errorsArea.classList.remove('hidden');

        errors.forEach(error => {
            const li = document.createElement('li');
            li.className = 'error-list-item';
            // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É –æ—à–∏–±–∫–∏ –∏–ª–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç
            li.textContent = error.text.split('\n')[0].trim() || '[–ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞]';
            li.title = `–ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã –≤—ã–¥–µ–ª–∏—Ç—å –æ—à–∏–±–∫—É:\n\n${error.text}`;
            
            // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∫–ª–∏–∫ –∫ –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–û–ô —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ–¥—Å–≤–µ—Ç–∫–∏, –ø–µ—Ä–µ–¥–∞–≤–∞—è –ù–£–ñ–ù–û–ï –ø–æ–ª–µ
            li.addEventListener('click', () => {
                // –®–ê–ì 1: –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –∫–ª–∞—Å—Å. –ï—Å–ª–∏ –æ–Ω –µ—Å—Ç—å - —É–±–∏—Ä–∞–µ–º, –µ—Å–ª–∏ –Ω–µ—Ç - –¥–æ–±–∞–≤–ª—è–µ–º.
                li.classList.toggle('reviewed');
                
                // –®–ê–ì 2: –í—ã–ø–æ–ª–Ω—è–µ–º —É–∂–µ –∑–Ω–∞–∫–æ–º–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ - –ø–æ–¥—Å–≤–µ—Ç–∫—É –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º –ø–æ–ª–µ.
                highlightErrorInTextarea(targetTextarea, error.start, error.end);
            });
      
            
            errorListEl.appendChild(li);
        });
    }





    /**
     * –í—ã–¥–µ–ª—è–µ—Ç —Ñ—Ä–∞–≥–º–µ–Ω—Ç —Ç–µ–∫—Å—Ç–∞ –≤ –£–ö–ê–ó–ê–ù–ù–û–ú —Ç–µ–∫—Å—Ç–æ–≤–æ–º –ø–æ–ª–µ –∏ –ø—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ—Ç –∫ –Ω–µ–º—É.
     * @param {HTMLTextAreaElement} targetTextarea - –ü–æ–ª–µ <textarea>, –≤ –∫–æ—Ç–æ—Ä–æ–º –Ω—É–∂–Ω–æ –≤—ã–¥–µ–ª–∏—Ç—å —Ç–µ–∫—Å—Ç.
     * @param {number} start - –ù–∞—á–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è.
     * @param {number} end - –ö–æ–Ω–µ—á–Ω—ã–π –∏–Ω–¥–µ–∫—Å –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è.
     */
    function highlightErrorInTextarea(targetTextarea, start, end) {
        if (!targetTextarea) return;

        targetTextarea.focus();
        targetTextarea.setSelectionRange(start, end);

        const mirrorDiv = document.createElement('div');
        const computedStyle = getComputedStyle(targetTextarea);

        [
            'font', 'lineHeight', 'letterSpacing', 'wordSpacing',
            'paddingTop', 'paddingRight', 'paddingBottom', 'paddingLeft',
            'borderTopWidth', 'borderRightWidth', 'borderBottomWidth', 'borderLeftWidth',
            'boxSizing', 'whiteSpace', 'wordWrap', 'wordBreak'
        ].forEach(prop => {
            mirrorDiv.style[prop] = computedStyle[prop];
        });

        mirrorDiv.style.position = 'absolute';
        mirrorDiv.style.top = '-9999px';
        mirrorDiv.style.left = '0px';
        mirrorDiv.style.width = targetTextarea.clientWidth + 'px';
        mirrorDiv.textContent = targetTextarea.value.substring(0, start) + '\u00A0';
        document.body.appendChild(mirrorDiv);

        const scrollPosition = mirrorDiv.scrollHeight - 180;
        targetTextarea.scrollTop = scrollPosition > 0 ? scrollPosition : 0;

        document.body.removeChild(mirrorDiv);
    }



    function hideAndResetErrorArea() {
        getEl('parserErrorsArea')?.classList.add('hidden');
        getEl('errorList').innerHTML = '';
        getEl('errorCount').textContent = '0';
    }

 

    function createVariantFilterCheckboxes() {
        if (!filterVariantCheckboxes) return;
        let checkboxesHTML = '';
        for (let i = 1; i <= 10; i++) {
            checkboxesHTML += `
                <label>
                    <input type="checkbox" value="${i}">${i}
                </label>
            `;
        }
        filterVariantCheckboxes.innerHTML = checkboxesHTML;
    }

    /**
     * –ü–∞—Ä—Å–∏—Ç –≥–æ—Ç–æ–≤—ã–π .qst —Ç–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.
     * @param {string} qstText - –¢–µ–∫—Å—Ç –∏–∑ –ø–æ–ª—è "–†–µ–∑—É–ª—å—Ç–∞—Ç".
     * @returns {Array<Object>} –ú–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤ –≤–æ–ø—Ä–æ—Å–æ–≤ { text, variantCount, start, end }.
     */
    function parseQstResultForFiltering(qstText) {
        const questions = [];
        const delimiterRegex = /\n\s*\n/g; // –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø—É—Å—Ç—ã—Ö —Å—Ç—Ä–æ–∫-—Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–π
        let lastIndex = 0; // –ò–Ω–¥–µ–∫—Å, —Å –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–∞—á–∏–Ω–∞–µ–º –∏—Å–∫–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–π –±–ª–æ–∫

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ü–∏–∫–ª —Å —Ä–µ–≥—É–ª—è—Ä–Ω—ã–º –≤—ã—Ä–∞–∂–µ–Ω–∏–µ–º, —á—Ç–æ–±—ã –Ω–∞–¥–µ–∂–Ω–æ –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –ø–æ –≤—Å–µ–º—É —Ç–µ–∫—Å—Ç—É
        let match;
        while ((match = delimiterRegex.exec(qstText)) !== null) {
            // –¢–µ–∫—Å—Ç –±–ª–æ–∫–∞ - —ç—Ç–æ –≤—Å—ë, —á—Ç–æ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –º–µ–∂–¥—É lastIndex –∏ –Ω–∞—á–∞–ª–æ–º –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è
            const blockText = qstText.substring(lastIndex, match.index);
            const blockStart = lastIndex;

            if (blockText.trim() !== '') {
                const lines = blockText.split('\n');
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –≤–æ–ø—Ä–æ—Å (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å "?")
                if (lines.some(l => l.trim().startsWith('?'))) {
                    const variantCount = lines.filter(l => l.trim().startsWith('+') || l.trim().startsWith('-')).length;
                    questions.push({
                        text: blockText,
                        variantCount: variantCount,
                        start: blockStart, // –ù–∞–¥–µ–∂–Ω–∞—è —Å—Ç–∞—Ä—Ç–æ–≤–∞—è –ø–æ–∑–∏—Ü–∏—è
                        end: blockStart + blockText.length // –ù–∞–¥–µ–∂–Ω–∞—è –∫–æ–Ω–µ—á–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è
                    });
                }
            }
            // –°–¥–≤–∏–≥–∞–µ–º –∫—É—Ä—Å–æ—Ä –Ω–∞ –ø–æ–∑–∏—Ü–∏—é –ü–û–°–õ–ï –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è
            lastIndex = delimiterRegex.lastIndex;
        }

        // –ù–µ –∑–∞–±—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–∞–º—ã–π –ø–æ—Å–ª–µ–¥–Ω–∏–π –±–ª–æ–∫ —Ç–µ–∫—Å—Ç–∞, –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è
        const lastBlockText = qstText.substring(lastIndex);
        if (lastBlockText.trim() !== '') {
            const lines = lastBlockText.split('\n');
            if (lines.some(l => l.trim().startsWith('?'))) {
                const variantCount = lines.filter(l => l.trim().startsWith('+') || l.trim().startsWith('-')).length;
                questions.push({
                    text: lastBlockText,
                    variantCount: variantCount,
                    start: lastIndex,
                    end: lastIndex + lastBlockText.length
                });
            }
        }

        return questions;
    }

    function filterByVariantCount() {
        // –°–Ω–∞—á–∞–ª–∞ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ä—ã–µ –æ—à–∏–±–∫–∏
        hideAndResetErrorArea();

        const selectedCounts = Array.from(filterVariantCheckboxes.querySelectorAll('input:checked'))
                                    .map(input => parseInt(input.value));

        if (selectedCounts.length === 0) {
            alert("–ù–µ –≤—ã–±—Ä–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏.");
            return;
        }

        const qstText = parserOutput.value;
        const allQuestions = parseQstResultForFiltering(qstText);
        
        const defectiveQuestions = allQuestions.filter(q => !selectedCounts.includes(q.variantCount));

        if (defectiveQuestions.length > 0) {
            // –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –±–ª–æ–∫–∞ –æ—à–∏–±–æ–∫
            getEl('showErrorsBtn').innerHTML = `‚ö†Ô∏è –û—à–∏–±–∫–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ (<span id="errorCount">${defectiveQuestions.length}</span>)`;
            renderErrors(parserOutput, defectiveQuestions);
            alert(`–ù–∞–π–¥–µ–Ω–æ ${defectiveQuestions.length} –≤–æ–ø—Ä–æ—Å–æ–≤, –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö —Ñ–∏–ª—å—Ç—Ä—É.`);
        } else {
            alert("–í—Å–µ –≤–æ–ø—Ä–æ—Å—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –∑–∞–¥–∞–Ω–Ω–æ–º—É —Ñ–∏–ª—å—Ç—Ä—É!");
        }
        filterVariantsDropdown.classList.add('hidden');
    }

    function resetVariantFilter() {
        filterVariantCheckboxes.querySelectorAll('input:checked').forEach(input => input.checked = false);
        hideAndResetErrorArea(); // –°–∫—Ä—ã–≤–∞–µ–º –±–ª–æ–∫ –æ—à–∏–±–æ–∫
        filterVariantsDropdown.classList.add('hidden');
    }


    function runParser() {
        resetVariantFilter();
        const text = parserInput.value;
        if (text.trim() === '') {
            alert("–ü–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ –ø—É—Å—Ç–æ–µ!");
            return;
        }

        hideAndResetErrorArea();
        parserOutputArea.classList.add('hidden');

        const selectedPatternId = parserPatternSelect.value;
        let result;

        if (selectedPatternId === 'auto') {
            result = processTextWithMultiFormat(text);
        } else {
            const pattern = PARSER_PATTERNS.find(p => p.id === selectedPatternId);
            if (!pattern) {
                alert("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –í—ã–±—Ä–∞–Ω–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.");
                return;
            }
            result = {
                questions: pattern.processor(text),
                errors: []
            };
        }

        const parsedQuestions = result.questions;
        const errors = result.errors;
        
        if (errors.length > 0) {
            renderErrors(parserInput, errors);
        }

        if (parsedQuestions.length === 0) {
            if (errors.length > 0) {
                alert(`–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞. –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –æ—à–∏–±–æ–∫: ${errors.length}.`);
            } else {
                alert("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π.");
            }
            return;
        }

        // --- –ù–ê–ß–ê–õ–û –ò–ó–ú–ï–ù–ï–ù–ò–Ø ---
        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ .qst —Ñ–æ—Ä–º–∞—Ç, —Ç–µ–ø–µ—Ä—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        let qstResult = '';
        parsedQuestions.forEach(q => {
            // –ï–°–õ–ò –≠–¢–û –ö–ê–¢–ï–ì–û–†–ò–Ø
            if (q.type === 'category') {
                // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –µ—ë –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å
                qstResult += `#_#${q.text}#_#\n\n`; // –î–≤–æ–π–Ω–æ–π –ø–µ—Ä–µ–Ω–æ—Å –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
            }
            // –ï–°–õ–ò –≠–¢–û –í–û–ü–†–û–°
            else {
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—É—é –ø—Ä–æ–≤–µ—Ä–∫—É —Ç–æ–ª—å–∫–æ –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤
                if (q.text && q.options && q.options.length > 0) {
                    qstResult += `? ${q.text.replace(/\n/g, ' ')}\n`;
                    q.options.forEach(opt => {
                        const prefix = (opt === q.correctAnswer) ? '+' : '-';
                        qstResult += `${prefix} ${opt.replace(/\n/g, ' ')}\n`;
                    });
                    qstResult += '\n'; // –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
                }
            }
        });
        // --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–Ø ---

        parserOutput.value = qstResult.trim();
        parserOutputArea.classList.remove('hidden');


        // –ù–û–í–ê–Ø –£–ù–ò–§–ò–¶–ò–†–û–í–ê–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø
        if (errors.length > 0) {
            // –ï—Å–ª–∏ –µ—Å—Ç—å –æ—à–∏–±–∫–∏, –í–°–ï–ì–î–ê –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ä–æ–±–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            alert(`–û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n\n–†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ –≤–æ–ø—Ä–æ—Å–æ–≤: ${parsedQuestions.length}\n–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –æ—à–∏–±–æ–∫ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: ${errors.length}`);
        } else {
            // –ò —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ—à–∏–±–æ–∫ –Ω–µ—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
            alert(`–£—Å–ø–µ—à–Ω–æ —Å–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ ${parsedQuestions.length} –≤–æ–ø—Ä–æ—Å–æ–≤!`);
        }
    }



    async function downloadParsedQst() {
        const content = parserOutput.value;
        if (!content) return;
        await downloadOrShareFile('parsed_test.qst', content, 'text/plain;charset=utf-8', '–°–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ—Å—Ç');
    }


    function clearParserInput() {
        parserInput.value = '';
        parserFileInput.value = ''; // –í–∞–∂–Ω–æ —Ç–∞–∫–∂–µ —Å–±—Ä–æ—Å–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ñ–∞–π–ª!
        parserInput.focus(); // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫—É—Ä—Å–æ—Ä –≤ –ø–æ–ª–µ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
        hideAndResetErrorArea();
    }




    async function handleAIGenerationRequest() {
        const text = parserInput.value.trim();
        if (!text) {
            alert(_('ai_error_text_empty'));
            return;
        }

        // –í—Ä–µ–º–µ–Ω–Ω–æ –∏–∑–º–µ–Ω—è–µ–º –≤–∏–¥ –∫–Ω–æ–ø–∫–∏ –Ω–∞ –≤—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏
        const originalButtonHTML = generateTestFromTextBtn.innerHTML;
        generateTestFromTextBtn.disabled = true;
        generateTestFromTextBtn.innerHTML = `<span>${_('ai_generating_button')}</span>`;
        showGlobalLoader('–ò–ò –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –∏ —Å–æ–∑–¥–∞–µ—Ç –≤–æ–ø—Ä–æ—Å—ã...');

        const questionCount = aiAutoCount.checked ? 'auto' : aiQuestionCount.value;
        const answerCount = getEl('aiAnswerCount').value; // <-- –ù–û–í–ê–Ø –°–¢–†–û–ö–ê: –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–æ–≤

        try {
            const response = await fetch(googleAppScriptUrl, {
                method: 'POST',
                headers: {
                  'Content-Type': 'text/plain',
                },
                body: JSON.stringify({
                    action: 'generateTest',
                    text: text,
                    count: questionCount,
                    answerCount: answerCount // <-- –ù–û–í–ê–Ø –°–¢–†–û–ö–ê: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
                })
            });

            const result = await response.json();

            if (result.success && result.qst) {
                parserOutput.value = result.qst;
                parserOutputArea.classList.remove('hidden');
                parserOutputArea.scrollIntoView({ behavior: 'smooth' });
            } else {
                throw new Error(result.error || _('ai_error_generation'));
            }

        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–∞:", error);
            alert(error.message);
        } finally {
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–Ω–æ–ø–∫—É –≤ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            generateTestFromTextBtn.disabled = false;
            generateTestFromTextBtn.innerHTML = originalButtonHTML;
            hideGlobalLoader();
        }
    }


 
    function showAIExplanation(question) {
        currentAIQuestion = question;
        const questionEl = getEl('aiExplanationQuestion');
        const outputEl = getEl('aiExplanationOutput');

        const correctAnswerText = question.options[question.correctAnswerIndex].text;
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞
        questionEl.innerHTML = `<strong>–í–æ–ø—Ä–æ—Å:</strong> ${escapeHTML(question.text)}<br><strong>–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:</strong> ${escapeHTML(correctAnswerText)}`;
        
        // --- –ù–ê–ß–ê–õ–û –ù–û–í–û–ô –õ–û–ì–ò–ö–ò –°–í–û–†–ê–ß–ò–í–ê–ù–ò–Ø ---

        // –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –∫–Ω–æ–ø–∫—É, –µ—Å–ª–∏ –æ–Ω–∞ –≤–¥—Ä—É–≥ –æ—Å—Ç–∞–ª–∞—Å—å
        const oldBtn = questionEl.querySelector('.expand-question-btn');
        if (oldBtn) oldBtn.remove();
        // –ò —É–±–∏—Ä–∞–µ–º –∫–ª–∞—Å—Å—ã —Å –ø—Ä–æ—à–ª–æ–≥–æ —Ä–∞–∑–∞
        questionEl.classList.remove('collapsible', 'expanded');

        const MAX_HEIGHT = 120; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≤—ã—Å–æ—Ç–∞ –≤ –ø–∏–∫—Å–µ–ª—è—Ö –¥–æ —Å–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º setTimeout, —á—Ç–æ–±—ã –±—Ä–∞—É–∑–µ—Ä —É—Å–ø–µ–ª –æ—Ç—Ä–∏—Å–æ–≤–∞—Ç—å —ç–ª–µ–º–µ–Ω—Ç –∏ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –µ–≥–æ —Ä–µ–∞–ª—å–Ω—É—é –≤—ã—Å–æ—Ç—É
        setTimeout(() => {
            if (questionEl.scrollHeight > MAX_HEIGHT) {
                // –ï—Å–ª–∏ –±–ª–æ–∫ —Å–ª–∏—à–∫–æ–º –≤—ã—Å–æ–∫–∏–π, –¥–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å –¥–ª—è —Å–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è
                questionEl.classList.add('collapsible');

                // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É "–†–∞–∑–≤–µ—Ä–Ω—É—Ç—å"
                const expandBtn = document.createElement('button');
                expandBtn.className = 'expand-question-btn';
                expandBtn.textContent = '–†–∞–∑–≤–µ—Ä–Ω—É—Ç—å'; // –ù–∞—á–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç



                // –î–æ–±–∞–≤–ª—è–µ–º –û–ë–ù–û–í–õ–ï–ù–ù–´–ô –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –Ω–∞ –∫–Ω–æ–ø–∫—É
                expandBtn.onclick = function(e) {
                    e.stopPropagation(); 
                    const isExpanded = questionEl.classList.toggle('expanded');
                    this.textContent = isExpanded ? '–°–≤–µ—Ä–Ω—É—Ç—å' : '–†–∞–∑–≤–µ—Ä–Ω—É—Ç—å';
                    
                    // --- –ö–õ–Æ–ß–ï–í–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï ---
                    // –ù–∞—Ö–æ–¥–∏–º –±–ª–æ–∫ —Å –æ—Ç–≤–µ—Ç–æ–º –ò–ò
                    const outputEl = getEl('aiExplanationOutput');
                    if (outputEl) {
                        // –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –†–ê–ó–í–ï–†–ù–£–¢, –∑–∞–ø—Ä–µ—â–∞–µ–º –±–ª–æ–∫—É —Å –æ—Ç–≤–µ—Ç–æ–º —Ä–∞—Å—Ç–∏.
                        // –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –°–í–ï–†–ù–£–¢, —Ä–∞–∑—Ä–µ—à–∞–µ–º –µ–º—É —Å–Ω–æ–≤–∞ –∑–∞–Ω–∏–º–∞—Ç—å –≤—Å–µ –º–µ—Å—Ç–æ.
                        outputEl.style.flexGrow = isExpanded ? '0' : '1';
                    }
                };


                

                // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø—Ä—è–º–æ –≤ –±–ª–æ–∫ —Å –≤–æ–ø—Ä–æ—Å–æ–º
                questionEl.appendChild(expandBtn);
            }
        }, 0); // –ù—É–ª–µ–≤–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç –∫–æ–¥ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ —Ç–µ–∫—É—â–µ–≥–æ —Ü–∏–∫–ª–∞ –æ—Ç—Ä–∏—Å–æ–≤–∫–∏

        // --- –ö–û–ù–ï–¶ –ù–û–í–û–ô –õ–û–ì–ò–ö–ò –°–í–û–†–ê–ß–ò–í–ê–ù–ò–Ø ---
        
        outputEl.innerHTML = ''; 

        const styleButtonsContainer = getEl('aiExplanationStyleButtons');
        const allStyleButtons = styleButtonsContainer.querySelectorAll('button');
        const simpleButton = styleButtonsContainer.querySelector('button[data-style="simple"]');

        allStyleButtons.forEach(btn => btn.classList.remove('active'));
        if (simpleButton) {
            simpleButton.classList.add('active');
        }

        ChatModule.showModal('aiExplanationModal');
        fetchAndDisplayExplanation('simple');
    }


    async function fetchAndDisplayExplanation(style) {
        if (!currentAIQuestion) return;

        const outputEl = getEl('aiExplanationOutput');
        outputEl.innerHTML = `<div class="typing-loader-container"><div class="typing-loader">${_('ai_explanation_loading')}</div></div>`;

        try {
            const response = await fetch(googleAppScriptUrl, {
                method: 'POST',
                body: JSON.stringify({
                    action: 'getExplanation',
                    question_text: currentAIQuestion.text,
                    correct_answer_text: currentAIQuestion.options[currentAIQuestion.correctAnswerIndex].text,
                    style: style
                })
            });
            const result = await response.json();


            if (result.success) {
                            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ—É–Ω–∫—Ü–∏—è marked –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏ –≤–∏–¥–∏–º–æ—Å—Ç–∏
                            if (window.marked) {
                                // –ï—Å–ª–∏ –¥–∞, –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º Markdown –≤ HTML
                                outputEl.innerHTML = marked.parse(result.explanation);
                            } else {
                                // –ï—Å–ª–∏ –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –ø–æ –∫–∞–∫–æ–π-—Ç–æ –ø—Ä–∏—á–∏–Ω–µ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–∞—Å—å,
                                // –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥ —Å –ø–µ—Ä–µ–Ω–æ—Å–∞–º–∏ —Å—Ç—Ä–æ–∫
                                console.warn('–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ marked.js –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞. –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.');
                                outputEl.innerHTML = result.explanation.replace(/\n/g, '<br>');
                            }
                        } else {


                throw new Error(result.error);
            }
        } catch (error) {
            outputEl.innerHTML = `<p style="color: var(--feedback-incorrect-text);">${error.message}</p>`;
        }
    }



    // --- Public methods exposed from mainApp ---
    return {
        init: initializeApp,
        parseQstContent: parseQstContent, 
        processFile: processFile,         
        downloadFile: downloadFileBrowserFallback,
        downloadOrShareFile: downloadOrShareFile,
        handleFavoriteClickInSearch: handleFavoriteClickInSearch,
        handleCopyClickInSearch: handleCopyClickInSearch,
        showGlobalLoader: showGlobalLoader,
        hideGlobalLoader: hideGlobalLoader,
        testMobileDownload: () => {
            console.log('–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–±–∏–ª—å–Ω–æ–≥–æ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è...');
            console.log('detectMobileDevice():', detectMobileDevice());
            downloadOrShareFile('test.txt', '–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞', 'text/plain', '–¢–µ—Å—Ç');
        }        
    };
})();

document.addEventListener('DOMContentLoaded', mainApp.init);
// Expose mainApp to window for ChatModule access
window.mainApp = mainApp;

// script.js (–¥–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ–Ω–µ—Ü —Ñ–∞–π–ª–∞)

// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ª–∏ –±—Ä–∞—É–∑–µ—Ä Service Worker
if ('serviceWorker' in navigator) {
  // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –Ω–∞—à Service Worker. –õ—É—á—à–µ –¥–µ–ª–∞—Ç—å —ç—Ç–æ –ø–æ—Å–ª–µ –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã,
  // —á—Ç–æ–±—ã –Ω–µ –∑–∞–º–µ–¥–ª—è—Ç—å –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ.
  window.addEventListener('load', () => {
    navigator.serviceWorker.register('/service-worker.js')
      .then(registration => {
        // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ
        console.log('Service Worker –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ! –û–±–ª–∞—Å—Ç—å –≤–∏–¥–∏–º–æ—Å—Ç–∏:', registration.scope);
      })
      .catch(error => {
        // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å
        console.error('–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ Service Worker:', error);
      });
  });
}

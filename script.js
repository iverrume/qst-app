  function shouldEnableLowPowerMode() {
    try {
      // navigator.hardwareConcurrency –¥–æ—Å—Ç—É–ø–µ–Ω –≤ –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–µ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤
      const coreCount = navigator.hardwareConcurrency || 2;
      // navigator.deviceMemory - —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω–æ–µ API, –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ
      const memoryInGB = navigator.deviceMemory || 2;
      
      // –°—á–∏—Ç–∞–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ "—Å–ª–∞–±—ã–º", –µ—Å–ª–∏ —É –Ω–µ–≥–æ 4 –∏–ª–∏ –º–µ–Ω—å—à–µ —è–¥–µ—Ä, –ò–õ–ò 4 –ì–ë –∏–ª–∏ –º–µ–Ω—å—à–µ –û–ó–£.
      const isWeakHardware = coreCount <= 4 || memoryInGB <= 4;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É "–£–º–µ–Ω—å—à–∏—Ç—å –¥–≤–∏–∂–µ–Ω–∏–µ"
      const prefersReducedMotion = window.matchMedia && window.matchMedia('(prefers-reduced-motion: reduce)').matches;

      // –ù–û–í–ê–Ø –°–¢–†–û–ö–ê: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –º–æ–±–∏–ª—å–Ω—ã–º –ø–æ User Agent
      const isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
      
      // –ò–ó–ú–ï–ù–ï–ù–ê –≠–¢–ê –°–¢–†–û–ö–ê: –î–æ–±–∞–≤–∏–ª–∏ –≤ –ª–æ–≥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–±–∏–ª—å–Ω–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ
      console.log(`–û—Ü–µ–Ω–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: –Ø–¥—Ä–∞=${coreCount}, –ü–∞–º—è—Ç—å=${memoryInGB}GB. –°–ª–∞–±–æ–µ –∂–µ–ª–µ–∑–æ: ${isWeakHardware}. –£–º–µ–Ω—å—à–∏—Ç—å –¥–≤–∏–∂–µ–Ω–∏–µ: ${prefersReducedMotion}. –ú–æ–±–∏–ª—å–Ω–æ–µ: ${isMobile}`);
      
      // –ò–ó–ú–ï–ù–ï–ù–ê –≠–¢–ê –°–¢–†–û–ö–ê: –î–æ–±–∞–≤–∏–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É isMobile
      return isWeakHardware || prefersReducedMotion || isMobile;
    } catch (e) {
      console.warn("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞, –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ä–µ–∂–∏–º.", e);
      return false; // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏, —Ä–∞–±–æ—Ç–∞–µ–º –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º —Ä–µ–∂–∏–º–µ
    }
  }

    // –ü—Ä–∏–º–µ–Ω—è–µ–º "–ª–µ–≥–∫–∏–π" —Ä–µ–∂–∏–º, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    function applyLowPowerMode() {
      if (shouldEnableLowPowerMode()) {
        document.body.classList.add('low-power');
        console.log('–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω —Ä–µ–∂–∏–º –Ω–∏–∑–∫–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ (low-power).');
      }
    }

    // –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    applyLowPowerMode();



// ============================================
// –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ú–û–î–£–õ–¨ –ß–ê–¢–ê
// ============================================




const ChatModule = (function() {
    'use strict';

    const getEl = (id) => document.getElementById(id);

    const LOCALE_MAP = {
        ru: 'ru-RU',
        en: 'en-US',
        kk: 'kk-KZ'
    };

    // === –ù–ê–ß–ê–õ–û –ù–û–í–û–ì–û –ë–õ–û–ö–ê: –ü–ï–†–ï–í–û–î –ß–ê–¢–ê ===
    const LANG_PACK_CHAT = {
        ru: {
            active_quiz_title: '–£ –≤–∞—Å —É–∂–µ –∑–∞–ø—É—â–µ–Ω —Ç–µ—Å—Ç',
            active_quiz_text: '–ß—Ç–æ —Å–¥–µ–ª–∞—Ç—å —Å —Ç–µ–∫—É—â–∏–º —Ç–µ—Å—Ç–æ–º?',
            active_quiz_save_and_open: '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–∑–∂–µ',
            active_quiz_finish: '–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ç–µ—Å—Ç',
            // TABS
            tab_messages: "–°–æ–æ–±—â–µ–Ω–∏—è",
            tab_questions: "–í–æ–ø—Ä–æ—Å—ã",
            tab_favorites: "–ò–∑–±—Ä–∞–Ω–Ω–æ–µ",
            tab_users: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏",
            // Auth
            auth_title: "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è",
            auth_login_tab: "–í—Ö–æ–¥",
            auth_register_tab: "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è",
            auth_login_placeholder: "–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ Email",
            auth_password_placeholder: "–ü–∞—Ä–æ–ª—å",
            auth_login_button: "–í–æ–π—Ç–∏",
            auth_register_username_placeholder: "–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
            auth_register_email_placeholder: "Email",
            auth_register_password_placeholder: "–ü–∞—Ä–æ–ª—å (–º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤)",
            auth_register_confirm_placeholder: "–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–∞—Ä–æ–ª—å",
            auth_register_button: "–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è",
            auth_close_button: "–ó–∞–∫—Ä—ã—Ç—å",
            auth_or_divider: "–∏–ª–∏",
            auth_google_signin: "–í–æ–π—Ç–∏ —á–µ—Ä–µ–∑ Google",
            auth_forgot_password: "–ó–∞–±—ã–ª–∏ –ø–∞—Ä–æ–ª—å?",
            forgot_password_modal_title: "–°–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è",
            forgot_password_modal_text: "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à email. –ú—ã –æ—Ç–ø—Ä–∞–≤–∏–º –≤–∞–º —Å—Å—ã–ª–∫—É –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è.",
            forgot_password_email_placeholder: "–í–∞—à Email",
            forgot_password_send_button: "–û—Ç–ø—Ä–∞–≤–∏—Ç—å",
            // Main Chat
            chat_header_title: "–ß–∞—Ç",
            guest_user: "–ì–æ—Å—Ç—å",
            generic_user: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
            edit_profile_link: "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å",
            logout_link: "–í—ã–π—Ç–∏",
            notifications_title: "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è",
            sidebar_sections: "–†–∞–∑–¥–µ–ª—ã",
            sidebar_channels: "–ö–∞–Ω–∞–ª—ã",
            sidebar_create_channel: "+ –°–æ–∑–¥–∞—Ç—å –∫–∞–Ω–∞–ª",
            sidebar_private_messages: "–õ–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è",
            sidebar_online: "–û–Ω–ª–∞–π–Ω",
            channel_general: "# –û–±—â–∏–π",
            search_placeholder: "–ü–æ–∏—Å–∫...",
            pinned_toggle_title: "–ó–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–µ",
            reply_panel_title: "–û—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ:",
            emoji_button_title: "–≠–º–æ–¥–∑–∏",
            create_question_button_title: "–°–æ–∑–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å",
            attach_file_button_title: "–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–∞–π–ª",
            chat_input_placeholder: "–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...",
            download_qst_button: "–°–∫–∞—á–∞—Ç—å .qst",
            download_txt_button: "–°–∫–∞—á–∞—Ç—å .txt",
            add_to_favorites_button: "–í –∏–∑–±—Ä–∞–Ω–Ω–æ–µ",
            copy_question_button: "–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å",
            delete_question_button: "–£–¥–∞–ª–∏—Ç—å –≤–æ–ø—Ä–æ—Å",
            clear_favorites_button: "–û—á–∏—Å—Ç–∏—Ç—å", 
            question_label: "–í–æ–ø—Ä–æ—Å:",
            author_label: "–ê–≤—Ç–æ—Ä:",
            date_label: "–î–∞—Ç–∞:",
            anonymous_user: "–ê–Ω–æ–Ω–∏–º",
            expand_message: "–†–∞–∑–≤–µ—Ä–Ω—É—Ç—å", 
            collapse_message: "–°–≤–µ—Ä–Ω—É—Ç—å",
            edited_indicator: "(–∏–∑–º.)", 
            // Modals
            user_actions_title: "–î–µ–π—Å—Ç–≤–∏—è",
            user_actions_text: "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å.",
            user_actions_chat_button: "–ù–∞–ø–∏—Å–∞—Ç—å –≤ —á–∞—Ç–µ",
            user_actions_email_button: "–ù–∞–ø–∏—Å–∞—Ç—å –Ω–∞ Email",
            modal_cancel_button: "–û—Ç–º–µ–Ω–∞",
            channel_settings_title: "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–Ω–∞–ª–∞",
            channel_edit_name_placeholder: "–ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞",
            channel_edit_password_placeholder: "–ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å (–ø—É—Å—Ç–æ = –±–µ–∑ –ø–∞—Ä–æ–ª—è)",
            channel_edit_desc_placeholder: "–ù–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞",
            channel_members_title: "–£—á–∞—Å—Ç–Ω–∏–∫–∏ –∫–∞–Ω–∞–ª–∞",
            channel_members_loading: "–ó–∞–≥—Ä—É–∑–∫–∞...",
            modal_save_button: "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å",
            delete_channel_button: "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –ö–∞–Ω–∞–ª",
            create_channel_title: "–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∫–∞–Ω–∞–ª",
            channel_create_name_placeholder: "–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞",
            channel_create_password_placeholder: "–ü–∞—Ä–æ–ª—å (–æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –¥–ª—è –ø—É–±–ª–∏—á–Ω–æ–≥–æ)",
            channel_create_desc_placeholder: "–û–ø–∏—Å–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞",
            modal_create_button: "–°–æ–∑–¥–∞—Ç—å",
            create_question_title: "–°–æ–∑–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å",
            create_question_placeholder: `–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –≤ —Ñ–æ—Ä–º–∞—Ç–µ .qst\n\n?–°—Ç–æ–ª–∏—Ü–∞ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–∞\n+–ê—Å—Ç–∞–Ω–∞\n-–ù—É—Ä-–°—É–ª—Ç–∞–Ω\n-–£—Ç–µ—Ä–∞\n\n*–ú–æ–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ —Å—Ä–∞–∑—É –Ω–µ—Å–∫–æ–ª—å–∫–æ`,
            create_question_modal_button: "–°–æ–∑–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å",
            edit_message_title: "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ",
            edit_profile_title: "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å",
            edit_profile_name_placeholder: "–í–∞—à–µ –∏–º—è",
            edit_profile_new_password_placeholder: "–ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å (–æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º, –µ—Å–ª–∏ –Ω–µ –º–µ–Ω—è–µ—Ç–µ)",
            delete_account_button: "–£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç",
            file_actions_title: "–î–µ–π—Å—Ç–≤–∏—è —Å —Ñ–∞–π–ª–æ–º",
            file_actions_download: "–°–∫–∞—á–∞—Ç—å",
            file_actions_test: "–ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç",
            // JS Messages & Alerts
            auth_system_unavailable: "–°–∏—Å—Ç–µ–º–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞",
            fill_all_fields: "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è",
            password_min_length: "–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤",
            passwords_do_not_match: "–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç!",
            error_user_not_found: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω",
            error_wrong_password: "–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å",
            error_email_in_use: "Email —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è",
            error_weak_password: "–°–ª–∏—à–∫–æ–º —Å–ª–∞–±—ã–π –ø–∞—Ä–æ–ª—å",
            error_invalid_email: "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email",
            error_too_many_requests: "–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ",
            error_generic: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑",
            loading_messages: "–ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π...",
            loading_error: "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏.",
            pinned_messages_empty: "–ó–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–∫–∞ –Ω–µ—Ç",
            messages_empty: "–°–æ–æ–±—â–µ–Ω–∏–π –ø–æ–∫–∞ –Ω–µ—Ç. –ù–∞–ø–∏—à–∏—Ç–µ –ø–µ—Ä–≤—ã–º!",
            file_share_question_1: "–≤–æ–ø—Ä–æ—Å",
            file_share_question_2_4: "–≤–æ–ø—Ä–æ—Å–∞",
            file_share_question_5_more: "–≤–æ–ø—Ä–æ—Å–æ–≤",
            new_question_notification: "–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å",
            notification_new_message: "–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!",
            questions_empty: "–í–æ–ø—Ä–æ—Å–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç",
            favorites_empty: "–í –∏–∑–±—Ä–∞–Ω–Ω–æ–º –ø–æ–∫–∞ –Ω–∏—á–µ–≥–æ –Ω–µ—Ç",
            favorites_loading_error: "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ",
            users_not_found: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.",
            confirm_delete_message: "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ?",
            confirm_delete_question: "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ.",
            confirm_kick_user: "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∏–∑ –∫–∞–Ω–∞–ª–∞?",
            confirm_delete_channel: "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –∫–∞–Ω–∞–ª? –í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –Ω–µ–º –±—É–¥—É—Ç –ø–æ—Ç–µ—Ä—è–Ω—ã. –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ.",
            confirm_delete_account: "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –ù–ï–û–ë–†–ê–¢–ò–ú–û.",

            confirm_clear_favorites: "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –í–°–ï —ç–ª–µ–º–µ–Ω—Ç—ã –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ.",
            profile_updated_success: "–ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!",
            channel_name_empty: "–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.",
            cant_delete_general: "–û—Å–Ω–æ–≤–Ω–æ–π –∫–∞–Ω–∞–ª —É–¥–∞–ª–∏—Ç—å –Ω–µ–ª—å–∑—è.",
            invalid_channel_password: "–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å.",
            add_to_favorites_success: "–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ!",
            add_to_favorites_auth_required: "–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è.",
            question_format_unrecognized: "–§–æ—Ä–º–∞—Ç –≤–æ–ø—Ä–æ—Å–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å.",
            questions_added_from_chat_success: "–£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–∑ —á–∞—Ç–∞:",
            questions_added_success: "–£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤–æ–ø—Ä–æ—Å–æ–≤:",
            notifications_enabled: "–ó–≤—É–∫–æ–≤—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã",
            notifications_disabled: "–ó–≤—É–∫–æ–≤—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—ã–∫–ª—é—á–µ–Ω—ã",
            notifications_title_enabled: "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã",
            notifications_title_disabled: "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—ã–∫–ª—é—á–µ–Ω—ã",
            pinned_mode_on_title: "–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è",
            pinned_mode_off_title: "–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–µ",
            download_no_data: "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≤ —Ä–∞–∑–¥–µ–ª–µ",
            favorites_cleared_success: "–ò–∑–±—Ä–∞–Ω–Ω–æ–µ —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω–æ.",
            favorites_already_empty: "–ò–∑–±—Ä–∞–Ω–Ω–æ–µ —É–∂–µ –ø—É—Å—Ç–æ.",
            copy_success: "–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!",
            copy_error: "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Ç–µ–∫—Å—Ç –≤—Ä—É—á–Ω—É—é.",
            file_type_unsupported: "–ú–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ñ–∞–π–ª—ã .qst –∏ .txt",
            reauth_prompt: "–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ç–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å:",
            reauth_cancelled: "–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –ü–∞—Ä–æ–ª—å –Ω–µ –±—ã–ª –≤–≤–µ–¥–µ–Ω.",
            deleting_account_status: "–£–¥–∞–ª–µ–Ω–∏–µ...",
            delete_account_success: "–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –±—ã–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.",
            question_deleted_message: "–≠—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å –±—ã–ª —É–¥–∞–ª–µ–Ω.",
            file_download_error: "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª:",
            test_start_error: "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç:",
            global_loader_loading_test: "–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ—Å—Ç–∞",
            password_reauth_required: "–î–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–µ–¥–∞–≤–Ω–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–π–¥–∏—Ç–µ –∏ –≤–æ–π–¥–∏—Ç–µ —Å–Ω–æ–≤–∞.",
            channel_enter_password_prompt: "–ö–∞–Ω–∞–ª '{channelName}' –∑–∞—â–∏—â–µ–Ω. –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:",
            question_card_question_label: "–í–æ–ø—Ä–æ—Å:",
            question_card_author_label: "–ê–≤—Ç–æ—Ä:",
            question_card_date_label: "–î–∞—Ç–∞:",
            question_card_anonymous: "–ê–Ω–æ–Ω–∏–º",
            testing_channel_option: "–ö–∞–Ω–∞–ª –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (—Å –∑–∞–ø–∏—Å—å—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤)",
            results_button: "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã",
            practice_test_button: "–ü—Ä–æ–±–Ω—ã–π —Ç–µ—Å—Ç",
            official_test_button: "–ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç",
            results_modal_title: "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ —Ç–µ—Å—Ç—É",
            results_table_header_num: "#",
            results_table_header_user: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
            results_table_header_accuracy: "–¢–æ—á–Ω–æ—Å—Ç—å",
            results_table_header_time: "–í—Ä–µ–º—è",
            results_empty_state: "–ü–æ —ç—Ç–æ–º—É —Ç–µ—Å—Ç—É –ø–æ–∫–∞ –Ω–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.",
            // === –ù–ê–ß–ê–õ–û –ù–û–í–û–ì–û –ö–û–î–ê ===
            channel_password_modal_title: "–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–∞—Ä–æ–ª—å",
            channel_password_modal_text: "–ö–∞–Ω–∞–ª ¬´{channelName}¬ª –∑–∞—â–∏—â–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –¥–æ—Å—Ç—É–ø–∞.",
            channel_password_placeholder: "–ü–∞—Ä–æ–ª—å –æ—Ç –∫–∞–Ω–∞–ª–∞",
            modal_confirm_button: "–í–æ–π—Ç–∏",
            // === –ö–û–ù–ï–¶ –ù–û–í–û–ì–û –ö–û–î–ê ===
            file_actions_modal_title: "–§–∞–π–ª:",
            ai_helper_title: "AI-–ø–æ–º–æ—â–Ω–∏–∫",
            ai_summarize_from_selection: "–°–≤–æ–¥–∫–∞ —Å –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è",
            ai_summarize_all: "–ö—Ä–∞—Ç–∫–∞—è —Å–≤–æ–¥–∫–∞ –ø–æ –≤—Å–µ–º—É –∫–∞–Ω–∞–ª—É",
            ai_selection_banner_text: "–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Å –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–∞—á–∞—Ç—å —Å–≤–æ–¥–∫—É",
            ai_selection_cancel: "–û—Ç–º–µ–Ω–∞",
            ai_summary_title_selection: "–°–≤–æ–¥–∫–∞ —Å –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:",
            ai_summary_title_all: "–û–±—â–∞—è —Å–≤–æ–¥–∫–∞ –ø–æ –∫–∞–Ω–∞–ª—É:",
            password_reset_email_sent: "–ü–∏—Å—å–º–æ –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à—É –ø–æ—á—Ç—É (–≤–∫–ª—é—á–∞—è –ø–∞–ø–∫—É '–°–ø–∞–º').",
            error_user_not_found_for_reset: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email –Ω–µ –Ω–∞–π–¥–µ–Ω.",
            ai_analyzing_chat: '–ò–ò –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–µ—Ä–µ–ø–∏—Å–∫—É...',
            chat_translate_button_title_on: "–ü–æ–∫–∞–∑–∞—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª",
            chat_translate_button_title_off: "–ü–µ—Ä–µ–≤–µ—Å—Ç–∏ —á–∞—Ç",
            chat_translation_failed: "–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞",
            ai_error_summary_generic: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–≤–æ–¥–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.',
            ai_error_summary_server: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–≤–æ–¥–∫—É: –ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤—Ä–µ–º–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ.',
            smart_timestamp_yesterday: '–í—á–µ—Ä–∞',
            delete_favorite_button: 'Delete',
            error_no_messages_to_select: '–í —ç—Ç–æ–º –∫–∞–Ω–∞–ª–µ –µ—â–µ –Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –≤—ã–±–æ—Ä–∞.',
            chat_online_list_empty: '–í —Å–µ—Ç–∏ –Ω–∏–∫–æ–≥–æ –Ω–µ—Ç',
            chat_user_actions_for: '–î–µ–π—Å—Ç–≤–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {userName}',
            chat_kick_user_confirm: '–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∏–∑ –∫–∞–Ω–∞–ª–∞?',
            kick_user_button: '–£–¥–∞–ª–∏—Ç—å',
            chat_kick_user_fail: '–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞.',
            chat_cannot_delete_general_alert: '–û—Å–Ω–æ–≤–Ω–æ–π –∫–∞–Ω–∞–ª —É–¥–∞–ª–∏—Ç—å –Ω–µ–ª—å–∑—è.',
            chat_delete_channel_fail_alert: '–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª.',
            chat_channel_name_empty_alert: '–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.',
            chat_create_channel_fail_alert: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–∞–Ω–∞–ª.',
            chat_favorites_empty_to_clear: '–ò–∑–±—Ä–∞–Ω–Ω–æ–µ —É–∂–µ –ø—É—Å—Ç–æ.',
            chat_profile_update_password_error: '–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 6 —Å–∏–º–≤–æ–ª–æ–≤.',
            chat_profile_update_success: '–ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!',
            chat_profile_update_fail_prefix: '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è:',
            error_upload_file_type: "–ú–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ñ–∞–π–ª—ã .qst –∏ .txt",
            error_fetch_file_id_failed: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID —Ñ–∞–π–ª–∞ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏.',
            error_upload_failed: '–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å.',
            error_file_process_failed: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞.',
            chat_file_download_failed: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª –∏–∑ —á–∞—Ç–∞: {error}',
            error_start_test_failed: '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç: {error}',
            chat_analyze_no_messages: '–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.',
            chat_analyze_no_valid_messages: '–ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.',
            chat_test_results_empty: '–ü–æ —ç—Ç–æ–º—É —Ç–µ—Å—Ç—É –ø–æ–∫–∞ –Ω–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.',
            chat_test_results_loading_error: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∞:',
            chat_check_question_status_failed: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –≤–æ–ø—Ä–æ—Å–∞.',
            chat_question_deleted_alert: '–≠—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å –±—ã–ª —É–¥–∞–ª–µ–Ω.',
            chat_show_all_messages: '–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è',

            chat_show_pinned_messages: '–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–µ',
            tooltip_reply: '–û—Ç–≤–µ—Ç–∏—Ç—å',
            tooltip_add_reaction: '–î–æ–±–∞–≤–∏—Ç—å —Ä–µ–∞–∫—Ü–∏—é',
            tooltip_pin: '–ó–∞–∫—Ä–µ–ø–∏—Ç—å',
            tooltip_unpin: '–û—Ç–∫—Ä–µ–ø–∏—Ç—å',
            tooltip_edit_message: '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ',
            tooltip_delete_message: '–£–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ',

            download_file_question_label: "–í–æ–ø—Ä–æ—Å",
            download_file_answer_label: "–û—Ç–≤–µ—Ç",
            download_file_message_label: "–°–æ–æ–±—â–µ–Ω–∏–µ",

            error_save_message_failed: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è.',
            error_delete_question_failed: '–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤–æ–ø—Ä–æ—Å.',
            error_question_parse_failed_detailed: '–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç: –∫–∞–∂–¥—ã–π –≤–æ–ø—Ä–æ—Å –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å "?", –∞ –≤–∞—Ä–∏–∞–Ω—Ç—ã —Å "+" –∏–ª–∏ "-".',
            error_vote_failed: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞—Ç—å.',
            error_add_favorite_failed: '–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ',
            error_remove_favorite_failed: '–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ',
            error_start_private_chat_failed: '–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∞—Ç—å –ª–∏—á–Ω—ã–π —á–∞—Ç.',
            error_send_message_failed: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ',

            share_title_favorites: "–ò–∑–±—Ä–∞–Ω–Ω–æ–µ",
            share_title_questions: "–í–æ–ø—Ä–æ—Å—ã",
            share_title_generic_file: "–§–∞–π–ª",

            tooltip_choose_reaction: '–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é —Ä–µ–∞–∫—Ü–∏—é',

            default_channel_name: "–û–±—â–∏–π",
            default_channel_desc: "–û—Å–Ω–æ–≤–Ω–æ–π –∫–∞–Ω–∞–ª –¥–ª—è –æ–±—â–µ–Ω–∏—è",

            error_pin_message_failed: "–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è.",
            error_create_question_failed: "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å(—ã).",
            error_clear_favorites_failed: "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å –∏–∑–±—Ä–∞–Ω–Ω–æ–µ.",
            error_copy_question_failed: "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å.",
            error_download_system_unavailable: "–°–∏—Å—Ç–µ–º–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",

            error_vote_favorite_failed: "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º.",
            error_save_channel_failed: "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è.",
            error_remove_from_favorites_failed: "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ.",
            error_delete_message_failed: '–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ.',
            error_download_auth_required: "–î–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –≤ —á–∞—Ç–µ.",
            sidebar_search_placeholder: '–ü–æ–∏—Å–∫ –∫–∞–Ω–∞–ª–æ–≤...',
            error_add_to_favorites_failed: "–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ.",
            auth_required_to_view: '–í–æ–π–¥–∏—Ç–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞',
            ai_summary_modal_title: '–°–≤–æ–¥–∫–∞ –æ—Ç –ò–ò',

            reauth_wrong_password: "–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            results_modal_title: "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ —Ç–µ—Å—Ç—É",
            results_table_header_num: "#",
            results_table_header_user: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
            results_table_header_accuracy: "–¢–æ—á–Ω–æ—Å—Ç—å",
            results_table_header_time: "–í—Ä–µ–º—è",
            results_empty_state: "–ü–æ —ç—Ç–æ–º—É —Ç–µ—Å—Ç—É –ø–æ–∫–∞ –Ω–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤."


        },
        kk: {
            active_quiz_title: '–¢–µ—Å—Ç “õ–∞–∑—ñ—Ä –∂“Ø—Ä—ñ–ø –∂–∞—Ç—ã—Ä',
            active_quiz_text: '–ê“ì—ã–º–¥–∞“ì—ã —Ç–µ—Å—Ç–ø–µ–Ω –Ω–µ —ñ—Å—Ç–µ–π–º—ñ–∑?',
            active_quiz_save_and_open: '–ö–µ–π—ñ–Ω –∂–∞–ª“ì–∞—Å—Ç—ã—Ä—É',
            active_quiz_finish: '–¢–µ—Å—Ç—Ç—ñ –∞—è“õ—Ç–∞—É',
            // TABS
            tab_messages: "–•–∞–±–∞—Ä–ª–∞–º–∞–ª–∞—Ä",
            tab_questions: "–°“±—Ä–∞“õ—Ç–∞—Ä",
            tab_favorites: "–¢–∞“£–¥–∞—É–ª—ã–ª–∞—Ä",
            tab_users: "–ü–∞–π–¥–∞–ª–∞–Ω—É—à—ã–ª–∞—Ä",
            // Auth
            auth_title: "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è",
            auth_login_tab: "–ö—ñ—Ä—É",
            auth_register_tab: "–¢—ñ—Ä–∫–µ–ª—É",
            auth_login_placeholder: "–ü–∞–π–¥–∞–ª–∞–Ω—É—à—ã –∞—Ç—ã –Ω–µ–º–µ—Å–µ Email",
            auth_password_placeholder: "“ö“±–ø–∏—è —Å”©–∑",
            auth_login_button: "–ö—ñ—Ä—É",
            auth_register_username_placeholder: "–ü–∞–π–¥–∞–ª–∞–Ω—É—à—ã –∞—Ç—ã",
            auth_register_email_placeholder: "Email",
            auth_register_password_placeholder: "“ö“±–ø–∏—è —Å”©–∑ (–∫–µ–º—ñ–Ω–¥–µ 6 —Ç–∞“£–±–∞)",
            auth_register_confirm_placeholder: "“ö“±–ø–∏—è —Å”©–∑–¥—ñ “õ–∞–π—Ç–∞–ª–∞“£—ã–∑",
            auth_register_button: "–¢—ñ—Ä–∫–µ–ª—É",
            auth_close_button: "–ñ–∞–±—É",
            auth_or_divider: "–Ω–µ–º–µ—Å–µ",
            auth_google_signin: "Google –∞—Ä“õ—ã–ª—ã –∫—ñ—Ä—É",
            auth_forgot_password: "“ö“±–ø–∏—è —Å”©–∑–¥—ñ “±–º—ã—Ç—Ç—ã“£—ã–∑ –±–∞?",
            forgot_password_modal_title: "“ö“±–ø–∏—è —Å”©–∑–¥—ñ “õ–∞–ª–ø—ã–Ω–∞ –∫–µ–ª—Ç—ñ—Ä—É",
            forgot_password_modal_text: "Email –º–µ–∫–µ–Ω–∂–∞–π—ã“£—ã–∑–¥—ã –µ–Ω–≥—ñ–∑—ñ“£—ñ–∑. –ë—ñ–∑ —Å—ñ–∑–≥–µ “õ“±–ø–∏—è —Å”©–∑–¥—ñ “õ–∞–ª–ø—ã–Ω–∞ –∫–µ–ª—Ç—ñ—Ä—É —Å—ñ–ª—Ç–µ–º–µ—Å—ñ–Ω –∂—ñ–±–µ—Ä–µ–º—ñ–∑.",
            forgot_password_email_placeholder: "–°—ñ–∑–¥—ñ“£ Email",
            forgot_password_send_button: "–ñ—ñ–±–µ—Ä—É",
            // Main Chat
            chat_header_title: "–ß–∞—Ç",
            guest_user: "“ö–æ–Ω–∞“õ",
            generic_user: "–ü–∞–π–¥–∞–ª–∞–Ω—É—à—ã",
            edit_profile_link: "–ü—Ä–æ—Ñ–∏–ª—å–¥—ñ ”©“£–¥–µ—É",
            logout_link: "–®—ã“ì—É",
            notifications_title: "–•–∞–±–∞—Ä–ª–∞–Ω–¥—ã—Ä—É–ª–∞—Ä",
            sidebar_sections: "–ë”©–ª—ñ–º–¥–µ—Ä",
            sidebar_channels: "–ê—Ä–Ω–∞–ª–∞—Ä",
            sidebar_create_channel: "+ –ê—Ä–Ω–∞ “õ“±—Ä—É",
            sidebar_private_messages: "–ñ–µ–∫–µ —Ö–∞–±–∞—Ä–ª–∞–º–∞–ª–∞—Ä",
            sidebar_online: "–ñ–µ–ª—ñ–¥–µ",
            channel_general: "# –ñ–∞–ª–ø—ã",
            search_placeholder: "–Ü–∑–¥–µ—É...",
            pinned_toggle_title: "–ë–µ–∫—ñ—Ç—ñ–ª–≥–µ–Ω–¥–µ—Ä",
            reply_panel_title: "–ñ–∞—É–∞–ø –±–µ—Ä—É:",
            emoji_button_title: "–≠–º–æ–¥–∑–∏",
            create_question_button_title: "–°“±—Ä–∞“õ “õ“±—Ä—É",
            attach_file_button_title: "–§–∞–π–ª–¥—ã —Ç—ñ—Ä–∫–µ—É",
            chat_input_placeholder: "–•–∞–±–∞—Ä–ª–∞–º–∞ –µ–Ω–≥—ñ–∑—ñ“£—ñ–∑...",
            download_qst_button: ".qst –∂“Ø–∫—Ç–µ–ø –∞–ª—É",
            download_txt_button: ".txt –∂“Ø–∫—Ç–µ–ø –∞–ª—É",
            add_to_favorites_button: "–¢–∞“£–¥–∞—É–ª—ã–ª–∞—Ä“ì–∞ “õ–æ—Å—É",
            copy_question_button: "–ö”©—à—ñ—Ä—É",
            delete_question_button: "–°“±—Ä–∞“õ—Ç—ã –∂–æ—é",
            clear_favorites_button: "Clear All",
            question_label: "–°“±—Ä–∞“õ:",
            author_label: "–ê–≤—Ç–æ—Ä—ã:",
            date_label: "–ö“Ø–Ω—ñ:",
            anonymous_user: "–ê–Ω–æ–Ω–∏–º",
            expand_message: "–ö”©–±—ñ—Ä–µ–∫ –∫”©—Ä—Å–µ—Ç—É",
            collapse_message: "–ñ–∞—Å—ã—Ä—É",
            edited_indicator: "(”©–∑–≥.)",
            // Modals
            user_actions_title: "”ò—Ä–µ–∫–µ—Ç—Ç–µ—Ä",
            user_actions_text: "–ù–µ —ñ—Å—Ç–µ–≥—ñ“£—ñ–∑ –∫–µ–ª–µ—Ç—ñ–Ω—ñ–Ω —Ç–∞“£–¥–∞“£—ã–∑.",
            user_actions_chat_button: "–ß–∞—Ç—Ç–∞ –∂–∞–∑—É",
            user_actions_email_button: "Email-–≥–µ –∂–∞–∑—É",
            modal_cancel_button: "–ë–æ–ª–¥—ã—Ä–º–∞—É",
            channel_settings_title: "–ê—Ä–Ω–∞ –±–∞–ø—Ç–∞—É–ª–∞—Ä—ã",
            channel_edit_name_placeholder: "–ê—Ä–Ω–∞–Ω—ã“£ –∂–∞“£–∞ –∞—Ç–∞—É—ã",
            channel_edit_password_placeholder: "–ñ–∞“£–∞ “õ“±–ø–∏—è —Å”©–∑ (–±–æ—Å = “õ“±–ø–∏—è —Å”©–∑—Å—ñ–∑)",
            channel_edit_desc_placeholder: "–ê—Ä–Ω–∞–Ω—ã“£ –∂–∞“£–∞ —Å–∏–ø–∞—Ç—Ç–∞–º–∞—Å—ã",
            channel_members_title: "–ê—Ä–Ω–∞ –º“Ø—à–µ–ª–µ—Ä—ñ",
            channel_members_loading: "–ñ“Ø–∫—Ç–µ–ª—É–¥–µ...",
            modal_save_button: "–°–∞“õ—Ç–∞—É",
            delete_channel_button: "–ê—Ä–Ω–∞–Ω—ã –∂–æ—é",
            create_channel_title: "–ñ–∞“£–∞ –∞—Ä–Ω–∞ “õ“±—Ä—É",
            channel_create_name_placeholder: "–ê—Ä–Ω–∞ –∞—Ç–∞—É—ã",
            channel_create_password_placeholder: "“ö“±–ø–∏—è —Å”©–∑ (–∂–∞–ª–ø—ã“ì–∞ –æ—Ä—Ç–∞“õ “Ø—à—ñ–Ω –±–æ—Å “õ–∞–ª–¥—ã—Ä—ã“£—ã–∑)",
            channel_create_desc_placeholder: "–ê—Ä–Ω–∞ —Å–∏–ø–∞—Ç—Ç–∞–º–∞—Å—ã",
            modal_create_button: "“ö“±—Ä—É",
            create_question_title: "–°“±—Ä–∞“õ “õ“±—Ä—É",
            create_question_placeholder: `–°“±—Ä–∞“ì—ã“£—ã–∑–¥—ã .qst –ø—ñ—à—ñ–º—ñ–Ω–¥–µ –µ–Ω–≥—ñ–∑—ñ“£—ñ–∑\n\n?“ö–∞–∑–∞“õ—Å—Ç–∞–Ω–Ω—ã“£ –∞—Å—Ç–∞–Ω–∞—Å—ã\n+–ê—Å—Ç–∞–Ω–∞\n-–ù“±—Ä-–°“±–ª—Ç–∞–Ω\n-–£—Ç–µ—Ä–∞\n\n*–ë—ñ—Ä–¥–µ–Ω –±—ñ—Ä–Ω–µ—à–µ —Å“±—Ä–∞“õ –µ–Ω–≥—ñ–∑—É–≥–µ –±–æ–ª–∞–¥—ã`,
            create_question_modal_button: "–°“±—Ä–∞“õ—Ç—ã “õ“±—Ä—É",
            edit_message_title: "–•–∞–±–∞—Ä–ª–∞–º–∞–Ω—ã ”©“£–¥–µ—É",
            edit_profile_title: "–ü—Ä–æ—Ñ–∏–ª—å–¥—ñ ”©“£–¥–µ—É",
            edit_profile_name_placeholder: "–°—ñ–∑–¥—ñ“£ –∞—Ç—ã“£—ã–∑",
            edit_profile_new_password_placeholder: "–ñ–∞“£–∞ “õ“±–ø–∏—è —Å”©–∑ (”©–∑–≥–µ—Ä—Ç–ø–µ—Å–µ“£—ñ–∑ –±–æ—Å “õ–∞–ª–¥—ã—Ä—ã“£—ã–∑)",
            delete_account_button: "–ê–∫–∫–∞—É–Ω—Ç—Ç—ã –∂–æ—é",
            file_actions_title: "–§–∞–π–ª ”ô—Ä–µ–∫–µ—Ç—Ç–µ—Ä—ñ",
            file_actions_download: "–ñ“Ø–∫—Ç–µ–ø –∞–ª—É",
            file_actions_test: "–¢–µ—Å—Ç ”©—Ç—É",
            // JS Messages & Alerts
            auth_system_unavailable: "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∂“Ø–π–µ—Å—ñ “õ–æ–ª–∂–µ—Ç—ñ–º—Å—ñ–∑",
            fill_all_fields: "–ë–∞—Ä–ª—ã“õ ”©—Ä—ñ—Å—Ç–µ—Ä–¥—ñ —Ç–æ–ª—Ç—ã—Ä—ã“£—ã–∑",
            password_min_length: "“ö“±–ø–∏—è —Å”©–∑ –∫–µ–º—ñ–Ω–¥–µ 6 —Ç–∞“£–±–∞–¥–∞–Ω —Ç“±—Ä—É—ã –∫–µ—Ä–µ–∫",
            passwords_do_not_match: "“ö“±–ø–∏—è —Å”©–∑–¥–µ—Ä —Å”ô–π–∫–µ—Å –∫–µ–ª–º–µ–π–¥—ñ!",
            error_user_not_found: "–ü–∞–π–¥–∞–ª–∞–Ω—É—à—ã —Ç–∞–±—ã–ª–º–∞–¥—ã",
            error_wrong_password: "“ö–∞—Ç–µ “õ“±–ø–∏—è —Å”©–∑",
            error_email_in_use: "Email “õ–∞–∑—ñ—Ä–¥—ñ“£ ”©–∑—ñ–Ω–¥–µ “õ–æ–ª–¥–∞–Ω—ã—Å—Ç–∞",
            error_weak_password: "–¢—ã–º ”ô–ª—Å—ñ–∑ “õ“±–ø–∏—è —Å”©–∑",
            error_invalid_email: "–ñ–∞—Ä–∞–º—Å—ã–∑ email –ø—ñ—à—ñ–º—ñ",
            error_too_many_requests: "–¢—ã–º –∫”©–ø ”ô—Ä–µ–∫–µ—Ç. –ö–µ–π—ñ–Ω—ñ—Ä–µ–∫ “õ–∞–π—Ç–∞–ª–∞–ø –∫”©—Ä—ñ“£—ñ–∑",
            error_generic: "“ö–∞—Ç–µ –ø–∞–π–¥–∞ –±–æ–ª–¥—ã. “ö–∞–π—Ç–∞–ª–∞–ø –∫”©—Ä—ñ“£—ñ–∑",
            loading_messages: "–•–∞–±–∞—Ä–ª–∞–º–∞–ª–∞—Ä –∂“Ø–∫—Ç–µ–ª—É–¥–µ...",
            loading_error: "–ñ“Ø–∫—Ç–µ—É “õ–∞—Ç–µ—Å—ñ.",
            pinned_messages_empty: "–ë–µ–∫—ñ—Ç—ñ–ª–≥–µ–Ω —Ö–∞–±–∞—Ä–ª–∞–º–∞–ª–∞—Ä ”ô–∑—ñ—Ä–≥–µ –∂–æ“õ",
            messages_empty: "–•–∞–±–∞—Ä–ª–∞–º–∞–ª–∞—Ä ”ô–∑—ñ—Ä–≥–µ –∂–æ“õ. –ë—ñ—Ä—ñ–Ω—à—ñ –±–æ–ª—ã–ø –∂–∞–∑—ã“£—ã–∑!",
            file_share_question_1: "—Å“±—Ä–∞“õ",
            file_share_question_2_4: "—Å“±—Ä–∞“õ",
            file_share_question_5_more: "—Å“±—Ä–∞“õ",
            new_question_notification: "–ñ–∞“£–∞ —Å“±—Ä–∞“õ “õ“±—Ä—ã–ª–¥—ã",
            notification_new_message: "–ñ–∞“£–∞ —Ö–∞–±–∞—Ä–ª–∞–º–∞!",
            questions_empty: "–°“±—Ä–∞“õ—Ç–∞—Ä ”ô–∑—ñ—Ä–≥–µ –∂–æ“õ",
            favorites_empty: "–¢–∞“£–¥–∞—É–ª—ã–ª–∞—Ä–¥–∞ ”ô–∑—ñ—Ä–≥–µ –µ—à—Ç–µ“£–µ –∂–æ“õ",
            favorites_loading_error: "–¢–∞“£–¥–∞—É–ª—ã–ª–∞—Ä–¥—ã –∂“Ø–∫—Ç–µ—É “õ–∞—Ç–µ—Å—ñ",
            users_not_found: "–ü–∞–π–¥–∞–ª–∞–Ω—É—à—ã–ª–∞—Ä —Ç–∞–±—ã–ª–º–∞–¥—ã.",
            confirm_delete_message: "–û—Å—ã —Ö–∞–±–∞—Ä–ª–∞–º–∞–Ω—ã –∂–æ–π“ì—ã“£—ã–∑ –∫–µ–ª–µ—Ç—ñ–Ω—ñ–Ω–µ —Å–µ–Ω—ñ–º–¥—ñ—Å—ñ–∑ –±–µ?",
            confirm_delete_question: "–û—Å—ã —Å“±—Ä–∞“õ—Ç—ã –∂–æ–π“ì—ã“£—ã–∑ –∫–µ–ª–µ—Ç—ñ–Ω—ñ–Ω–µ —Å–µ–Ω—ñ–º–¥—ñ—Å—ñ–∑ –±–µ? –ë“±–ª ”ô—Ä–µ–∫–µ—Ç—Ç—ñ “õ–∞–π—Ç–∞—Ä—É –º“Ø–º–∫—ñ–Ω –µ–º–µ—Å.",
            confirm_kick_user: "–û—Å—ã –º“Ø—à–µ–Ω—ñ –∞—Ä–Ω–∞–¥–∞–Ω –∞–ª“ì—ã“£—ã–∑ –∫–µ–ª–µ—Ç—ñ–Ω—ñ–Ω–µ —Å–µ–Ω—ñ–º–¥—ñ—Å—ñ–∑ –±–µ?",
            confirm_delete_channel: "–û—Å—ã –∞—Ä–Ω–∞–Ω—ã –∂–æ–π“ì—ã“£—ã–∑ –∫–µ–ª–µ—Ç—ñ–Ω—ñ–Ω–µ —Å–µ–Ω—ñ–º–¥—ñ—Å—ñ–∑ –±–µ? –û–Ω–¥–∞“ì—ã –±–∞—Ä–ª—ã“õ —Ö–∞–±–∞—Ä–ª–∞–º–∞–ª–∞—Ä –∂–æ“ì–∞–ª–∞–¥—ã. –ë“±–ª ”ô—Ä–µ–∫–µ—Ç—Ç—ñ “õ–∞–π—Ç–∞—Ä—É –º“Ø–º–∫—ñ–Ω –µ–º–µ—Å.",
            confirm_delete_account: "–ê–∫–∫–∞—É–Ω—Ç—ã“£—ã–∑–¥—ã –∂–æ–π“ì—ã“£—ã–∑ –∫–µ–ª–µ—Ç—ñ–Ω—ñ–Ω–µ —Å–µ–Ω—ñ–º–¥—ñ—Å—ñ–∑ –±–µ? –ë“±–ª ”ô—Ä–µ–∫–µ—Ç—Ç—ñ “ö–ê–ô–¢–ê–†–£ –ú“Æ–ú–ö–Ü–ù –ï–ú–ï–°.",
            confirm_clear_favorites: "–¢–∞“£–¥–∞—É–ª—ã–ª–∞—Ä–¥–∞–Ω –ë–ê–†–õ–´“ö —ç–ª–µ–º–µ–Ω—Ç—Ç–µ—Ä–¥—ñ –∂–æ–π“ì—ã“£—ã–∑ –∫–µ–ª–µ—Ç—ñ–Ω—ñ–Ω–µ —Å–µ–Ω—ñ–º–¥—ñ—Å—ñ–∑ –±–µ? –ë“±–ª ”ô—Ä–µ–∫–µ—Ç—Ç—ñ “õ–∞–π—Ç–∞—Ä—É –º“Ø–º–∫—ñ–Ω –µ–º–µ—Å.",
            profile_updated_success: "–ü—Ä–æ—Ñ–∏–ª—å —Å”ô—Ç—Ç—ñ –∂–∞“£–∞—Ä—Ç—ã–ª–¥—ã!",
            channel_name_empty: "–ê—Ä–Ω–∞ –∞—Ç–∞—É—ã –±–æ—Å –±–æ–ª–º–∞—É—ã –∫–µ—Ä–µ–∫.",
            cant_delete_general: "–ù–µ–≥—ñ–∑–≥—ñ –∞—Ä–Ω–∞–Ω—ã –∂–æ—é –º“Ø–º–∫—ñ–Ω –µ–º–µ—Å.",
            invalid_channel_password: "“ö–∞—Ç–µ “õ“±–ø–∏—è —Å”©–∑.",
            add_to_favorites_success: "–¢–∞“£–¥–∞—É–ª—ã–ª–∞—Ä“ì–∞ “õ–æ—Å—ã–ª–¥—ã!",
            add_to_favorites_auth_required: "–¢–∞“£–¥–∞—É–ª—ã–ª–∞—Ä“ì–∞ “õ–æ—Å—É “Ø—à—ñ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è–¥–∞–Ω ”©—Ç—É “õ–∞–∂–µ—Ç.",
            question_format_unrecognized: "–°“±—Ä–∞“õ –ø—ñ—à—ñ–º—ñ —Ç–∞–Ω—ã–ª–º–∞–¥—ã. –°–∏–Ω—Ç–∞–∫—Å–∏—Å—Ç—ñ —Ç–µ–∫—Å–µ—Ä—ñ“£—ñ–∑.",
            questions_added_from_chat_success: "–ß–∞—Ç—Ç–∞–Ω —Å”ô—Ç—Ç—ñ “õ–æ—Å—ã–ª“ì–∞–Ω —Å“±—Ä–∞“õ—Ç–∞—Ä —Å–∞–Ω—ã:",
            questions_added_success: "–°”ô—Ç—Ç—ñ “õ–æ—Å—ã–ª“ì–∞–Ω —Å“±—Ä–∞“õ—Ç–∞—Ä —Å–∞–Ω—ã:",
            notifications_enabled: "–î—ã–±—ã—Å—Ç—ã“õ —Ö–∞–±–∞—Ä–ª–∞–Ω–¥—ã—Ä—É–ª–∞—Ä “õ–æ—Å—É–ª—ã",
            notifications_disabled: "–î—ã–±—ã—Å—Ç—ã“õ —Ö–∞–±–∞—Ä–ª–∞–Ω–¥—ã—Ä—É–ª–∞—Ä ”©—à—ñ—Ä—É–ª—ñ",
            notifications_title_enabled: "–•–∞–±–∞—Ä–ª–∞–Ω–¥—ã—Ä—É–ª–∞—Ä “õ–æ—Å—É–ª—ã",
            notifications_title_disabled: "–•–∞–±–∞—Ä–ª–∞–Ω–¥—ã—Ä—É–ª–∞—Ä ”©—à—ñ—Ä—É–ª—ñ",
            pinned_mode_on_title: "–ë–∞—Ä–ª—ã“õ —Ö–∞–±–∞—Ä–ª–∞–º–∞–ª–∞—Ä–¥—ã –∫”©—Ä—Å–µ—Ç—É",
            pinned_mode_off_title: "–ë–µ–∫—ñ—Ç—ñ–ª–≥–µ–Ω–¥–µ—Ä–¥—ñ –∫”©—Ä—Å–µ—Ç—É",
            download_no_data: "–±”©–ª—ñ–º—ñ–Ω–¥–µ –∂“Ø–∫—Ç–µ—É–≥–µ –¥–µ—Ä–µ–∫—Ç–µ—Ä –∂–æ“õ",
            favorites_cleared_success: "–¢–∞“£–¥–∞—É–ª—ã–ª–∞—Ä —Å”ô—Ç—Ç—ñ —Ç–∞–∑–∞—Ä—Ç—ã–ª–¥—ã.",
            favorites_already_empty: "–¢–∞“£–¥–∞—É–ª—ã–ª–∞—Ä “õ–∞–∑—ñ—Ä–¥—ñ“£ ”©–∑—ñ–Ω–¥–µ –±–æ—Å.",
            copy_success: "–ú–∞–∑–º“±–Ω –∞–ª–º–∞—Å—É –±—É—Ñ–µ—Ä—ñ–Ω–µ –∫”©—à—ñ—Ä—ñ–ª–¥—ñ!",
            copy_error: "–ö”©—à—ñ—Ä—É –º“Ø–º–∫—ñ–Ω –±–æ–ª–º–∞–¥—ã. –ú”ô—Ç—ñ–Ω–¥—ñ “õ–æ–ª–º–µ–Ω –∫”©—à—ñ—Ä—ñ“£—ñ–∑.",
            file_type_unsupported: "–¢–µ–∫ .qst –∂”ô–Ω–µ .txt —Ñ–∞–π–ª–¥–∞—Ä—ã–Ω –∂“Ø–∫—Ç–µ—É–≥–µ –±–æ–ª–∞–¥—ã",
            reauth_prompt: "–ñ–æ—é–¥—ã —Ä–∞—Å—Ç–∞—É “Ø—à—ñ–Ω –∞“ì—ã–º–¥–∞“ì—ã “õ“±–ø–∏—è —Å”©–∑—ñ“£—ñ–∑–¥—ñ –µ–Ω–≥—ñ–∑—ñ“£—ñ–∑:",
            reauth_cancelled: "–ñ–æ—é –±–æ–ª–¥—ã—Ä—ã–ª–º–∞–¥—ã. “ö“±–ø–∏—è —Å”©–∑ –µ–Ω–≥—ñ–∑—ñ–ª–º–µ–¥—ñ.",
            deleting_account_status: "–ñ–æ–π—ã–ª—É–¥–∞...",
            delete_account_success: "–°—ñ–∑–¥—ñ“£ –∞–∫–∫–∞—É–Ω—Ç—ã“£—ã–∑ —Å”ô—Ç—Ç—ñ –∂–æ–π—ã–ª–¥—ã.",
            question_deleted_message: "–ë“±–ª —Å“±—Ä–∞“õ –∂–æ–π—ã–ª–¥—ã.",
            file_download_error: "–§–∞–π–ª–¥—ã –∂“Ø–∫—Ç–µ—É –º“Ø–º–∫—ñ–Ω –±–æ–ª–º–∞–¥—ã:",
            test_start_error: "–¢–µ—Å—Ç—Ç—ñ –±–∞—Å—Ç–∞—É –º“Ø–º–∫—ñ–Ω –±–æ–ª–º–∞–¥—ã:",
            global_loader_loading_test: "–¢–µ—Å—Ç –∂“Ø–∫—Ç–µ–ª—É–¥–µ",
            password_reauth_required: "–ë“±–ª ”ô—Ä–µ–∫–µ—Ç—Ç—ñ –æ—Ä—ã–Ω–¥–∞—É “Ø—à—ñ–Ω –∂–∞“õ—ã–Ω–¥–∞ –∫—ñ—Ä—É “õ–∞–∂–µ—Ç. –®—ã“ì—ã–ø, “õ–∞–π—Ç–∞ –∫—ñ—Ä—ñ“£—ñ–∑.",
            channel_enter_password_prompt: "'{channelName}' –∞—Ä–Ω–∞—Å—ã “õ–æ—Ä“ì–∞–ª“ì–∞–Ω. “ö“±–ø–∏—è —Å”©–∑–¥—ñ –µ–Ω–≥—ñ–∑—ñ“£—ñ–∑:",
            question_card_question_label: "–°“±—Ä–∞“õ:",
            question_card_author_label: "–ê–≤—Ç–æ—Ä—ã:",
            question_card_date_label: "–ö“Ø–Ω—ñ:",
            question_card_anonymous: "–ê–Ω–æ–Ω–∏–º",
            testing_channel_option: "–¢–µ—Å—Ç—ñ–ª–µ—É –∞—Ä–Ω–∞—Å—ã (–Ω”ô—Ç–∏–∂–µ–ª–µ—Ä–¥—ñ –∂–∞–∑—É–º–µ–Ω)",
            results_button: "–ù”ô—Ç–∏–∂–µ–ª–µ—Ä",
            practice_test_button: "–°—ã–Ω–∞“õ —Ç–µ—Å—Ç—ñ",
            official_test_button: "–¢–µ—Å—Ç—Ç—ñ ”©—Ç—É",
            results_modal_title: "–¢–µ—Å—Ç –Ω”ô—Ç–∏–∂–µ–ª–µ—Ä—ñ",
            results_table_header_num: "#",
            results_table_header_user: "–ü–∞–π–¥–∞–ª–∞–Ω—É—à—ã",
            results_table_header_accuracy: "–î”ô–ª–¥—ñ–∫",
            results_table_header_time: "–£–∞“õ—ã—Ç",
            results_empty_state: "–ë“±–ª —Ç–µ—Å—Ç –±–æ–π—ã–Ω—à–∞ ”ô–∑—ñ—Ä–≥–µ –Ω”ô—Ç–∏–∂–µ –∂–æ“õ.",
            // === –ù–ê–ß–ê–õ–û –ù–û–í–û–ì–û –ö–û–î–ê ===
            channel_password_modal_title: "“ö“±–ø–∏—è —Å”©–∑ “õ–∞–∂–µ—Ç",
            channel_password_modal_text: "¬´{channelName}¬ª –∞—Ä–Ω–∞—Å—ã “õ–æ—Ä“ì–∞–ª“ì–∞–Ω. –ö—ñ—Ä—É “Ø—à—ñ–Ω “õ“±–ø–∏—è —Å”©–∑–¥—ñ –µ–Ω–≥—ñ–∑—ñ“£—ñ–∑.",
            channel_password_placeholder: "–ê—Ä–Ω–∞–Ω—ã“£ “õ“±–ø–∏—è —Å”©–∑—ñ",
            modal_confirm_button: "–ö—ñ—Ä—É",
            // === –ö–û–ù–ï–¶ –ù–û–í–û–ì–û –ö–û–î–ê ===
            file_actions_modal_title: "–§–∞–π–ª:",
            ai_helper_title: "AI-–∫”©–º–µ–∫—à—ñ",
            ai_summarize_from_selection: "–¢–∞“£–¥–∞–ª“ì–∞–Ω —Ö–∞–±–∞—Ä–ª–∞–º–∞–¥–∞–Ω “õ–æ—Ä—ã—Ç—ã–Ω–¥—ã",
            ai_summarize_all: "–ë“Ø–∫—ñ–ª –∞—Ä–Ω–∞–Ω—ã“£ “õ—ã—Å“õ–∞—à–∞ —Ç“Ø–π—ñ–Ω–¥–µ–º–µ—Å—ñ",
            ai_selection_cancel: "–ë–æ–ª–¥—ã—Ä–º–∞—É",
            ai_summary_title_selection: "–¢–∞“£–¥–∞–ª“ì–∞–Ω —Ö–∞–±–∞—Ä–ª–∞–º–∞–¥–∞–Ω –±–∞—Å—Ç–∞–ø —Ç“Ø–π—ñ–Ω–¥–µ–º–µ:",
            ai_selection_banner_text: "“ö–æ—Ä—ã—Ç—ã–Ω–¥—ã–Ω—ã –±–∞—Å—Ç–∞–π—Ç—ã–Ω —Ö–∞–±–∞—Ä–ª–∞–º–∞–Ω—ã —Ç–∞“£–¥–∞“£—ã–∑",
            ai_summary_title_all: "–ê—Ä–Ω–∞ –±–æ–π—ã–Ω—à–∞ –∂–∞–ª–ø—ã —Ç“Ø–π—ñ–Ω–¥–µ–º–µ:",
            password_reset_email_sent: "“ö“±–ø–∏—è —Å”©–∑–¥—ñ “õ–∞–ª–ø—ã–Ω–∞ –∫–µ–ª—Ç—ñ—Ä—É —Ö–∞—Ç—ã –∂—ñ–±–µ—Ä—ñ–ª–¥—ñ! –ü–æ—à—Ç–∞“£—ã–∑–¥—ã —Ç–µ–∫—Å–µ—Ä—ñ“£—ñ–∑ ('–°–ø–∞–º' “õ–∞–ª—Ç–∞—Å—ã–Ω “õ–æ—Å–∞).",
            error_user_not_found_for_reset: "–ë“±–ª email-–º–µ–Ω –ø–∞–π–¥–∞–ª–∞–Ω—É—à—ã —Ç–∞–±—ã–ª–º–∞–¥—ã.",
            ai_analyzing_chat: '–ñ–ò —Ö–∞—Ç –∞–ª–º–∞—Å—É–¥—ã —Ç–∞–ª–¥–∞—É–¥–∞...',
            chat_translate_button_title_on: "–¢“Ø–ø–Ω“±—Å“õ–∞–Ω—ã –∫”©—Ä—Å–µ—Ç—É",
            chat_translate_button_title_off: "–ß–∞—Ç—Ç—ã –∞—É–¥–∞—Ä—É",
            chat_translation_failed: "–ê—É–¥–∞—Ä—É “õ–∞—Ç–µ—Å—ñ",
            ai_error_summary_generic: '–¢“Ø–π—ñ–Ω–¥–µ–º–µ–Ω—ñ –∞–ª—É –º“Ø–º–∫—ñ–Ω –±–æ–ª–º–∞–¥—ã. “ö–∞–π—Ç–∞–ª–∞–ø –∫”©—Ä—ñ“£—ñ–∑.',
            ai_error_summary_server: '–¢“Ø–π—ñ–Ω–¥–µ–º–µ–Ω—ñ –∞–ª—É –º“Ø–º–∫—ñ–Ω –±–æ–ª–º–∞–¥—ã: –°–µ—Ä–≤–µ—Ä–¥–µ —É–∞“õ—ã—Ç—à–∞ “õ–∞—Ç–µ –ø–∞–π–¥–∞ –±–æ–ª–¥—ã. –ö–µ–π—ñ–Ω—ñ—Ä–µ–∫ “õ–∞–π—Ç–∞–ª–∞–ø –∫”©—Ä—ñ“£—ñ–∑.',
            smart_timestamp_yesterday: '–ö–µ—à–µ',
            delete_favorite_button: '–ñ–æ—é',
            error_no_messages_to_select: '–ë“±–ª –∞—Ä–Ω–∞–¥–∞ —Ç–∞“£–¥–∞—É “Ø—à—ñ–Ω —Ö–∞–±–∞—Ä–ª–∞–º–∞–ª–∞—Ä ”ô–ª—ñ –∂–æ“õ.',
            chat_online_list_empty: '–ñ–µ–ª—ñ–¥–µ –µ—à–∫—ñ–º –∂–æ“õ',
            chat_user_actions_for: '{userName} –ø–∞–π–¥–∞–ª–∞–Ω—É—à—ã—Å—ã “Ø—à—ñ–Ω ”ô—Ä–µ–∫–µ—Ç—Ç–µ—Ä',
            chat_kick_user_confirm: '–û—Å—ã –º“Ø—à–µ–Ω—ñ –∞—Ä–Ω–∞–¥–∞–Ω –∞–ª“ì—ã“£—ã–∑ –∫–µ–ª–µ—Ç—ñ–Ω—ñ–Ω–µ —Å–µ–Ω—ñ–º–¥—ñ—Å—ñ–∑ –±–µ?',
            kick_user_button: '–ñ–æ—é',
            chat_kick_user_fail: '–ú“Ø—à–µ–Ω—ñ –∂–æ—é –º“Ø–º–∫—ñ–Ω –±–æ–ª–º–∞–¥—ã.',
            chat_cannot_delete_general_alert: '–ù–µ–≥—ñ–∑–≥—ñ –∞—Ä–Ω–∞–Ω—ã –∂–æ—é –º“Ø–º–∫—ñ–Ω –µ–º–µ—Å.',
            chat_delete_channel_fail_alert: '–ê—Ä–Ω–∞–Ω—ã –∂–æ—é –º“Ø–º–∫—ñ–Ω –±–æ–ª–º–∞–¥—ã.',
            chat_channel_name_empty_alert: '–ê—Ä–Ω–∞ –∞—Ç–∞—É—ã –±–æ—Å –±–æ–ª–º–∞—É—ã –∫–µ—Ä–µ–∫.',
            chat_create_channel_fail_alert: '–ê—Ä–Ω–∞–Ω—ã “õ“±—Ä—É –º“Ø–º–∫—ñ–Ω –±–æ–ª–º–∞–¥—ã.',
            chat_favorites_empty_to_clear: '–¢–∞“£–¥–∞—É–ª—ã–ª–∞—Ä “õ–∞–∑—ñ—Ä–¥—ñ“£ ”©–∑—ñ–Ω–¥–µ –±–æ—Å.',
            chat_profile_update_password_error: '“ö“±–ø–∏—è —Å”©–∑ –∫–µ–º—ñ–Ω–¥–µ 6 —Ç–∞“£–±–∞–¥–∞–Ω —Ç“±—Ä—É—ã –∫–µ—Ä–µ–∫.',
            chat_profile_update_success: '–ü—Ä–æ—Ñ–∏–ª—å —Å”ô—Ç—Ç—ñ –∂–∞“£–∞—Ä—Ç—ã–ª–¥—ã!',
            chat_profile_update_fail_prefix: '–ü—Ä–æ—Ñ–∏–ª—å–¥—ñ –∂–∞“£–∞—Ä—Ç—É “õ–∞—Ç–µ—Å—ñ:',
            error_upload_file_type: "–¢–µ–∫ .qst –∂”ô–Ω–µ .txt —Ñ–∞–π–ª–¥–∞—Ä—ã–Ω –∂“Ø–∫—Ç–µ—É–≥–µ –±–æ–ª–∞–¥—ã",
            error_fetch_file_id_failed: '–ñ“Ø–∫—Ç–µ—É–¥–µ–Ω –∫–µ–π—ñ–Ω —Ñ–∞–π–ª ID-—ñ–Ω –∞–ª—É –º“Ø–º–∫—ñ–Ω –±–æ–ª–º–∞–¥—ã.',
            error_upload_failed: '–§–∞–π–ª–¥—ã –∂“Ø–∫—Ç–µ—É —Å”ô—Ç—Å—ñ–∑ –∞—è“õ—Ç–∞–ª–¥—ã.',
            error_file_process_failed: '–§–∞–π–ª–¥—ã ”©“£–¥–µ—É –∫–µ–∑—ñ–Ω–¥–µ “õ–∞—Ç–µ –ø–∞–π–¥–∞ –±–æ–ª–¥—ã.',
            chat_file_download_failed: '–ß–∞—Ç—Ç–∞–Ω —Ñ–∞–π–ª–¥—ã –∂“Ø–∫—Ç–µ—É –º“Ø–º–∫—ñ–Ω –±–æ–ª–º–∞–¥—ã: {error}',
            error_start_test_failed: '–¢–µ—Å—Ç—Ç—ñ –±–∞—Å—Ç–∞—É –º“Ø–º–∫—ñ–Ω –±–æ–ª–º–∞–¥—ã: {error}',
            chat_analyze_no_messages: '–¢–∞–ª–¥–∞—É “Ø—à—ñ–Ω —Ö–∞–±–∞—Ä–ª–∞–º–∞–ª–∞—Ä –∂–æ“õ.',
            chat_analyze_no_valid_messages: '–¢–∞–ª–¥–∞—É“ì–∞ –∂–∞—Ä–∞–º–¥—ã —Ö–∞–±–∞—Ä–ª–∞–º–∞–ª–∞—Ä –∂–æ“õ.',
            chat_test_results_empty: '–ë“±–ª —Ç–µ—Å—Ç –±–æ–π—ã–Ω—à–∞ ”ô–∑—ñ—Ä–≥–µ –Ω”ô—Ç–∏–∂–µ –∂–æ“õ.',
            chat_test_results_loading_error: '–¢–µ—Å—Ç –Ω”ô—Ç–∏–∂–µ–ª–µ—Ä—ñ–Ω –∂“Ø–∫—Ç–µ—É “õ–∞—Ç–µ—Å—ñ:',
            chat_check_question_status_failed: '–°“±—Ä–∞“õ—Ç—ã“£ –∫“Ø–π—ñ–Ω —Ç–µ–∫—Å–µ—Ä—É –º“Ø–º–∫—ñ–Ω –±–æ–ª–º–∞–¥—ã.',
            chat_question_deleted_alert: '–ë“±–ª —Å“±—Ä–∞“õ –∂–æ–π—ã–ª–¥—ã.',
            chat_show_all_messages: '–ë–∞—Ä–ª—ã“õ —Ö–∞–±–∞—Ä–ª–∞–º–∞–ª–∞—Ä–¥—ã –∫”©—Ä—Å–µ—Ç—É',
            chat_show_pinned_messages: '–ë–µ–∫—ñ—Ç—ñ–ª–≥–µ–Ω–¥–µ—Ä–¥—ñ –∫”©—Ä—Å–µ—Ç—É',

            tooltip_reply: '–ñ–∞—É–∞–ø –±–µ—Ä—É',
            tooltip_add_reaction: '–†–µ–∞–∫—Ü–∏—è “õ–æ—Å—É',
            tooltip_pin: '–ë–µ–∫—ñ—Ç—É',
            tooltip_unpin: '–ë–µ–∫—ñ—Ç—É–¥–µ–Ω –∞–ª—É',
            tooltip_edit_message: '–•–∞–±–∞—Ä–ª–∞–º–∞–Ω—ã ”©“£–¥–µ—É',
            tooltip_delete_message: '–•–∞–±–∞—Ä–ª–∞–º–∞–Ω—ã –∂–æ—é',

            download_file_question_label: "–°“±—Ä–∞“õ",
            download_file_answer_label: "–ñ–∞—É–∞–ø",
            download_file_message_label: "–•–∞–±–∞—Ä–ª–∞–º–∞",

            error_save_message_failed: '”®–∑–≥–µ—Ä—ñ—Å—Ç–µ—Ä–¥—ñ —Å–∞“õ—Ç–∞—É –º“Ø–º–∫—ñ–Ω –±–æ–ª–º–∞–¥—ã.',
            error_delete_question_failed: '–°“±—Ä–∞“õ—Ç—ã –∂–æ—é –º“Ø–º–∫—ñ–Ω –±–æ–ª–º–∞–¥—ã.',
            error_question_parse_failed_detailed: '–°“±—Ä–∞“õ—Ç–∞—Ä–¥—ã —Ç–∞–Ω—É –º“Ø–º–∫—ñ–Ω –±–æ–ª–º–∞–¥—ã. –ü—ñ—à—ñ–º–¥—ñ —Ç–µ–∫—Å–µ—Ä—ñ“£—ñ–∑: ”ô—Ä —Å“±—Ä–∞“õ "?"-—Ç–µ–Ω, –∞–ª –Ω“±—Å“õ–∞–ª–∞—Ä "+" –Ω–µ–º–µ—Å–µ "-"-—Ç–µ–Ω –±–∞—Å—Ç–∞–ª—É—ã –∫–µ—Ä–µ–∫.',
            error_vote_failed: '–î–∞—É—ã—Å –±–µ—Ä—É –º“Ø–º–∫—ñ–Ω –±–æ–ª–º–∞–¥—ã.',
            error_add_favorite_failed: '–¢–∞“£–¥–∞—É–ª—ã–ª–∞—Ä“ì–∞ “õ–æ—Å—É –º“Ø–º–∫—ñ–Ω –±–æ–ª–º–∞–¥—ã',
            error_remove_favorite_failed: '–¢–∞“£–¥–∞—É–ª—ã–ª–∞—Ä–¥–∞–Ω –∂–æ—é –º“Ø–º–∫—ñ–Ω –±–æ–ª–º–∞–¥—ã',
            error_start_private_chat_failed: '–ñ–µ–∫–µ —á–∞—Ç—Ç—ã –±–∞—Å—Ç–∞—É –º“Ø–º–∫—ñ–Ω –±–æ–ª–º–∞–¥—ã.',
            error_send_message_failed: '–•–∞–±–∞—Ä–ª–∞–º–∞–Ω—ã –∂—ñ–±–µ—Ä—É –º“Ø–º–∫—ñ–Ω –±–æ–ª–º–∞–¥—ã',

            share_title_favorites: "–¢–∞“£–¥–∞—É–ª—ã–ª–∞—Ä",
            share_title_questions: "–°“±—Ä–∞“õ—Ç–∞—Ä",
            share_title_generic_file: "–§–∞–π–ª",

            tooltip_choose_reaction: '–ë–∞—Å“õ–∞ —Ä–µ–∞–∫—Ü–∏—è–Ω—ã —Ç–∞“£–¥–∞—É',

            default_channel_name: "–ñ–∞–ª–ø—ã",
            default_channel_desc: "–ù–µ–≥—ñ–∑–≥—ñ —Å”©–π–ª–µ—Å—É –∞—Ä–Ω–∞—Å—ã",

            error_pin_message_failed: "–•–∞–±–∞—Ä–ª–∞–º–∞–Ω—ã –±–µ–∫—ñ—Ç—É –∫“Ø–π—ñ–Ω ”©–∑–≥–µ—Ä—Ç—É –º“Ø–º–∫—ñ–Ω –±–æ–ª–º–∞–¥—ã.",
            error_create_question_failed: "–°“±—Ä–∞“õ(—Ç–∞—Ä)–¥—ã “õ“±—Ä—É –º“Ø–º–∫—ñ–Ω –±–æ–ª–º–∞–¥—ã.",
            error_clear_favorites_failed: "–¢–∞“£–¥–∞—É–ª—ã–ª–∞—Ä–¥—ã —Ç–∞–∑–∞—Ä—Ç—É –º“Ø–º–∫—ñ–Ω –±–æ–ª–º–∞–¥—ã.",
            error_copy_question_failed: "–°“±—Ä–∞“õ—Ç—ã –∫”©—à—ñ—Ä—É –º“Ø–º–∫—ñ–Ω –±–æ–ª–º–∞–¥—ã.",
            error_download_system_unavailable: "–ñ“Ø–∫—Ç–µ—É –∂“Ø–π–µ—Å—ñ “õ–æ–ª–∂–µ—Ç—ñ–º—Å—ñ–∑. –ë–µ—Ç—Ç—ñ “õ–∞–π—Ç–∞ –∂“Ø–∫—Ç–µ–ø, ”ô—Ä–µ–∫–µ—Ç—Ç—ñ “õ–∞–π—Ç–∞–ª–∞“£—ã–∑.",

            error_vote_favorite_failed: "–¢–∞“£–¥–∞—É–ª—ã–ª–∞—Ä–¥–∞ –¥–∞—É—ã—Å –±–µ—Ä—É –º“Ø–º–∫—ñ–Ω –±–æ–ª–º–∞–¥—ã.",
            error_save_channel_failed: "”®–∑–≥–µ—Ä—ñ—Å—Ç–µ—Ä–¥—ñ —Å–∞“õ—Ç–∞—É –º“Ø–º–∫—ñ–Ω –±–æ–ª–º–∞–¥—ã.",
            error_remove_from_favorites_failed: "–¢–∞“£–¥–∞—É–ª—ã–ª–∞—Ä–¥–∞–Ω –∂–æ—é –º“Ø–º–∫—ñ–Ω –±–æ–ª–º–∞–¥—ã.",
            error_add_to_favorites_failed: "–¢–∞“£–¥–∞—É–ª—ã–ª–∞—Ä“ì–∞ “õ–æ—Å—É –º“Ø–º–∫—ñ–Ω –±–æ–ª–º–∞–¥—ã.",
            error_delete_message_failed: '–•–∞–±–∞—Ä–ª–∞–º–∞–Ω—ã –∂–æ—é –º“Ø–º–∫—ñ–Ω –±–æ–ª–º–∞–¥—ã.',
            error_download_auth_required: '–ñ“Ø–∫—Ç–µ–ø –∞–ª—É “Ø—à—ñ–Ω —á–∞—Ç“õ–∞ –∫—ñ—Ä—É—ñ“£—ñ–∑ “õ–∞–∂–µ—Ç.',
            sidebar_search_placeholder: '–ê—Ä–Ω–∞–ª–∞—Ä–¥—ã —ñ–∑–¥–µ—É...',
            auth_required_to_view: '–ö”©—Ä—É “Ø—à—ñ–Ω –∫—ñ—Ä—ñ“£—ñ–∑',
            ai_summary_modal_title: '–ñ–ò —Ç“Ø–π—ñ–Ω–¥–µ–º–µ—Å—ñ',

            reauth_wrong_password: "“ö–∞—Ç–µ “õ“±–ø–∏—è —Å”©–∑. “ö–∞–π—Ç–∞–ª–∞–ø –∫”©—Ä—ñ“£—ñ–∑.",
            results_modal_title: "–¢–µ—Å—Ç –Ω”ô—Ç–∏–∂–µ–ª–µ—Ä—ñ",
            results_table_header_num: "#",
            results_table_header_user: "–ü–∞–π–¥–∞–ª–∞–Ω—É—à—ã",
            results_table_header_accuracy: "–î”ô–ª–¥—ñ–∫",
            results_table_header_time: "–£–∞“õ—ã—Ç",
            results_empty_state: "–ë“±–ª —Ç–µ—Å—Ç –±–æ–π—ã–Ω—à–∞ ”ô–∑—ñ—Ä–≥–µ –Ω”ô—Ç–∏–∂–µ –∂–æ“õ."
        },
        en: {
            active_quiz_title: 'A test is already running',
            active_quiz_text: 'What do you want to do with the current test?',
            active_quiz_save_and_open: 'Pause and open new',
            active_quiz_finish: 'Finish the test',

            // TABS
            tab_messages: "Messages",
            tab_questions: "Questions",
            tab_favorites: "Favorites",
            tab_users: "Users",
            // Auth
            auth_title: "Authorization",
            auth_login_tab: "Login",
            auth_register_tab: "Register",
            auth_login_placeholder: "Username or Email",
            auth_password_placeholder: "Password",
            auth_login_button: "Log In",
            auth_register_username_placeholder: "Username",
            auth_register_email_placeholder: "Email",
            auth_register_password_placeholder: "Password (min. 6 characters)",
            auth_register_confirm_placeholder: "Confirm password",
            auth_register_button: "Register",
            auth_close_button: "Close",
            auth_or_divider: "or",
            auth_google_signin: "Sign in with Google",
            auth_forgot_password: "Forgot password?",
            forgot_password_modal_title: "Reset Password",
            forgot_password_modal_text: "Enter your email. We'll send you a link to reset your password.",
            forgot_password_email_placeholder: "Your Email",
            forgot_password_send_button: "Send",
            // Main Chat
            chat_header_title: "Chat",
            guest_user: "Guest",
            generic_user: "User",
            edit_profile_link: "Edit Profile",
            logout_link: "Logout",
            notifications_title: "Notifications",
            sidebar_sections: "Sections",
            sidebar_channels: "Channels",
            sidebar_create_channel: "+ Create Channel",
            sidebar_private_messages: "Private Messages",
            sidebar_online: "Online",
            channel_general: "# General",
            search_placeholder: "Search...",
            pinned_toggle_title: "Pinned",
            reply_panel_title: "Replying to:",
            emoji_button_title: "Emoji",
            create_question_button_title: "Create Question",
            attach_file_button_title: "Attach File",
            chat_input_placeholder: "Enter a message...",
            download_qst_button: "Download .qst",
            download_txt_button: "Download .txt",
            add_to_favorites_button: "Add to Favorites",
            copy_question_button: "Copy",
            delete_question_button: "Delete Question",
            clear_favorites_button: "–¢–∞–∑–∞—Ä—Ç—É",
            question_label: "Question:",
            author_label: "Author:",
            date_label: "Date:",
            anonymous_user: "Anonymous",
            expand_message: "Read more", 
            collapse_message: "Show less", 
            edited_indicator: "(edited)",
            // Modals
            user_actions_title: "Actions",
            user_actions_text: "Choose what you want to do.",
            user_actions_chat_button: "Send a message",
            user_actions_email_button: "Send an Email",
            modal_cancel_button: "Cancel",
            channel_settings_title: "Channel Settings",
            channel_edit_name_placeholder: "New channel name",
            channel_edit_password_placeholder: "New password (empty = no password)",
            channel_edit_desc_placeholder: "New channel description",
            channel_members_title: "Channel Members",
            channel_members_loading: "Loading...",
            modal_save_button: "Save",
            delete_channel_button: "Delete Channel",
            create_channel_title: "Create New Channel",
            channel_create_name_placeholder: "Channel name",
            channel_create_password_placeholder: "Password (leave empty for public)",
            channel_create_desc_placeholder: "Channel description",
            modal_create_button: "Create",
            create_question_title: "Create Question",
            create_question_placeholder: `Enter your question in .qst format\n\n?Capital of Kazakhstan\n+Astana\n-Nur-Sultan\n-Utera\n\n*You can enter multiple questions at once`,
            create_question_modal_button: "Create Question",
            edit_message_title: "Edit Message",
            edit_profile_title: "Edit Profile",
            edit_profile_name_placeholder: "Your name",
            edit_profile_new_password_placeholder: "New password (leave empty if not changing)",
            delete_account_button: "Delete Account",
            file_actions_title: "File Actions",
            file_actions_download: "Download",
            file_actions_test: "Take Test",
            // JS Messages & Alerts
            auth_system_unavailable: "Authentication system is not available",
            fill_all_fields: "Please fill in all fields",
            password_min_length: "Password must be at least 6 characters long",
            passwords_do_not_match: "Passwords do not match!",
            error_user_not_found: "User not found",
            error_wrong_password: "Incorrect password",
            error_email_in_use: "Email is already in use",
            error_weak_password: "Password is too weak",
            error_invalid_email: "Invalid email format",
            error_too_many_requests: "Too many requests. Please try again later",
            error_generic: "An error occurred. Please try again",
            loading_messages: "Loading messages...",
            loading_error: "Loading error.",
            pinned_messages_empty: "No pinned messages yet",
            messages_empty: "No messages yet. Be the first to write!",
            file_share_question_1: "question",
            file_share_question_2_4: "questions",
            file_share_question_5_more: "questions",
            new_question_notification: "A new question has been created",
            notification_new_message: "New message!",
            questions_empty: "No questions yet",
            favorites_empty: "Nothing in favorites yet",
            favorites_loading_error: "Error loading favorites",
            users_not_found: "Users not found.",
            confirm_delete_message: "Are you sure you want to delete this message?",
            confirm_delete_question: "Are you sure you want to delete this question? This action is irreversible.",
            confirm_kick_user: "Are you sure you want to remove this member from the channel?",
            confirm_delete_channel: "Are you sure you want to delete this channel? All messages within it will be lost. This action is irreversible.",
            confirm_delete_account: "Are you sure you want to delete your account? This action is IRREVERSIBLE.",
            confirm_clear_favorites: "Are you sure you want to delete ALL items from your favorites? This action is irreversible.",
            profile_updated_success: "Profile updated successfully!",
            channel_name_empty: "Channel name cannot be empty.",
            cant_delete_general: "The main channel cannot be deleted.",
            invalid_channel_password: "Incorrect password.",
            add_to_favorites_success: "Added to favorites!",
            add_to_favorites_auth_required: "You must be logged in to add to favorites.",
            question_format_unrecognized: "Question format not recognized. Please check the syntax.",
            questions_added_from_chat_success: "Successfully added questions from chat:",
            questions_added_success: "Successfully added questions:",
            notifications_enabled: "Sound notifications are enabled",
            notifications_disabled: "Sound notifications are disabled",
            notifications_title_enabled: "Notifications on",
            notifications_title_disabled: "Notifications off",
            pinned_mode_on_title: "Show all messages",
            pinned_mode_off_title: "Show pinned messages",
            download_no_data: "No data to download in section",
            favorites_cleared_success: "Favorites cleared successfully.",
            favorites_already_empty: "Favorites is already empty.",
            copy_success: "Content copied to clipboard!",
            copy_error: "Could not copy. Please copy the text manually.",
            file_type_unsupported: "Only .qst and .txt files can be uploaded",
            reauth_prompt: "To confirm deletion, please enter your current password:",
            reauth_cancelled: "Deletion cancelled. Password was not entered.",
            deleting_account_status: "Deleting...",
            delete_account_success: "Your account has been successfully deleted.",
            question_deleted_message: "This question has been deleted.",
            file_download_error: "Failed to download file:",
            test_start_error: "Failed to start test:",
            global_loader_loading_test: "Loading test",
            password_reauth_required: "This action requires a recent login. Please log out and log in again.",
            channel_enter_password_prompt: "Channel '{channelName}' is protected. Please enter the password:",
            question_card_question_label: "Question:",
            question_card_author_label: "Author:",
            question_card_date_label: "Date:",
            question_card_anonymous: "Anonymous",
            testing_channel_option: "Testing channel (with result tracking)",
            results_button: "Results",
            practice_test_button: "Practice Test",
            official_test_button: "Take Test",
            results_modal_title: "Test Results",
            results_table_header_num: "#",
            results_table_header_user: "User",
            results_table_header_accuracy: "Accuracy",
            results_table_header_time: "Time",
            results_empty_state: "There are no results for this test yet.",
            // === –ù–ê–ß–ê–õ–û –ù–û–í–û–ì–û –ö–û–î–ê ===
            channel_password_modal_title: "Password Required",
            channel_password_modal_text: "The channel '{channelName}' is protected. Please enter the password to access it.",
            channel_password_placeholder: "Channel password",
            modal_confirm_button: "Enter",
            // === –ö–û–ù–ï–¶ –ù–û–í–û–ì–û –ö–û–î–ê ===
            file_actions_modal_title: "File:",
            ai_helper_title: "AI Assistant",
            ai_summarize_from_selection: "Summarize from selection",
            ai_summarize_all: "Summarize entire channel",
            ai_selection_banner_text: "Select a message to start the summary from",
            ai_selection_cancel: "Cancel",
            ai_summary_title_selection: "Summary from selected message:",
            ai_summary_title_all: "General channel summary:",
            password_reset_email_sent: "Password reset email sent! Please check your inbox (including the spam folder).",
            error_user_not_found_for_reset: "User with this email not found.",
            ai_analyzing_chat: 'AI is analyzing the chat...',
            chat_translate_button_title_on: "Show Original",
            chat_translate_button_title_off: "Translate Chat",
            chat_translation_failed: "Translation failed",
            ai_error_summary_generic: 'Failed to get summary. Please try again.',
            ai_error_summary_server: 'Failed to get summary: A temporary server error occurred. Please try again later.',
            smart_timestamp_yesterday: 'Yesterday',
            delete_favorite_button: '–£–¥–∞–ª–∏—Ç—å',
            error_no_messages_to_select: 'There are no messages in this channel to select yet.',
            chat_online_list_empty: 'No one is online',
            chat_user_actions_for: 'Actions for user {userName}',
            chat_kick_user_confirm: 'Are you sure you want to remove this member from the channel?',
            kick_user_button: 'Remove',
            chat_kick_user_fail: 'Failed to remove member.',
            chat_cannot_delete_general_alert: 'The main channel cannot be deleted.',
            chat_delete_channel_fail_alert: 'Failed to delete channel.',
            chat_channel_name_empty_alert: 'Channel name cannot be empty.',
            chat_create_channel_fail_alert: 'Failed to create channel.',
            chat_favorites_empty_to_clear: 'Favorites is already empty.',
            chat_profile_update_password_error: 'Password must be at least 6 characters.',
            chat_profile_update_success: 'Profile updated successfully!',
            chat_profile_update_fail_prefix: 'Profile update failed:',
            error_upload_file_type: "Only .qst and .txt files can be uploaded",
            error_fetch_file_id_failed: 'Failed to get file ID after upload.',
            error_upload_failed: 'File upload failed.',
            error_file_process_failed: 'Error processing file.',
            chat_file_download_failed: 'Failed to download file from chat: {error}',
            error_start_test_failed: 'Failed to start test: {error}',
            chat_analyze_no_messages: 'No messages to analyze.',
            chat_analyze_no_valid_messages: 'No suitable messages to analyze.',
            chat_test_results_empty: 'There are no results for this test yet.',
            chat_test_results_loading_error: 'Error loading test results:',
            chat_check_question_status_failed: 'Could not check question status.',
            chat_question_deleted_alert: 'This question has been deleted.',
            chat_show_all_messages: 'Show all messages',
            chat_show_pinned_messages: 'Show pinned messages',

            tooltip_reply: 'Reply',
            tooltip_add_reaction: 'Add reaction',
            tooltip_pin: 'Pin',
            tooltip_unpin: 'Unpin',
            tooltip_edit_message: 'Edit message',
            tooltip_delete_message: 'Delete message',

            download_file_question_label: "Question",
            download_file_answer_label: "Answer",
            download_file_message_label: "Message",

            error_save_message_failed: 'Failed to save changes.',
            error_delete_question_failed: 'Failed to delete question.',
            error_question_parse_failed_detailed: 'Could not recognize questions. Check the format: each question must start with "?", and options with "+" or "-".',
            error_vote_failed: 'Failed to vote.',
            error_add_favorite_failed: 'Failed to add to favorites',
            error_remove_favorite_failed: 'Failed to remove from favorites',
            error_start_private_chat_failed: 'Failed to start private chat.',
            error_send_message_failed: 'Failed to send message',

            share_title_favorites: "Favorites",
            share_title_questions: "Questions",
            share_title_generic_file: "File",

            tooltip_choose_reaction: 'Choose another reaction',

            default_channel_name: "General",
            default_channel_desc: "The main channel for communication",

            error_pin_message_failed: "Failed to change message pin status.",
            error_create_question_failed: "Failed to create question(s).",
            error_clear_favorites_failed: "Failed to clear favorites.",
            error_copy_question_failed: "Failed to copy the question.",
            error_download_system_unavailable: "The download system is unavailable. Please reload the page and try again.",

            error_vote_favorite_failed: "Failed to vote in favorites.",
            error_save_channel_failed: "Failed to save changes.",
            error_remove_from_favorites_failed: "Failed to remove from favorites.",
            error_add_to_favorites_failed: "Failed to add to favorites.",

            error_delete_message_failed: 'Failed to delete message.',
            error_download_auth_required: 'You must be logged in to download from the chat.',
            sidebar_search_placeholder: 'Search channels...',
            auth_required_to_view: 'Login to view',
            ai_summary_modal_title: 'AI Summary',

            reauth_wrong_password: "Incorrect password. Please try again.",
            results_modal_title: "Test Results",
            results_table_header_num: "#",
            results_table_header_user: "User",
            results_table_header_accuracy: "Accuracy",
            results_table_header_time: "Time",
            results_empty_state: "There are no results for this test yet."
        }
    };




    let currentChatLang = localStorage.getItem('chatLanguage') || 'ru';

    function _chat(key) {
        return LANG_PACK_CHAT[currentChatLang]?.[key] || key;
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å—Ç—Ä–æ–∫—É –ø–µ—Ä–µ–≤–æ–¥–∞, –∑–∞–º–µ–Ω—è—è –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã —Ç–∏–ø–∞ {key} –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏—è.
     * @param {string} key - –ö–ª—é—á —Å—Ç—Ä–æ–∫–∏ –≤ —è–∑—ã–∫–æ–≤–æ–º –ø–∞–∫–µ—Ç–µ.
     * @param {object} replacements - –û–±—ä–µ–∫—Ç —Å –∑–∞–º–µ–Ω–∞–º–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä { channelName: 'VIP' }.
     * @returns {string} - –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞.
     */
    function _chatFormat(key, replacements) {
        let str = _chat(key);
        for (const placeholder in replacements) {
            str = str.replace(`{${placeholder}}`, replacements[placeholder]);
        }
        return str;
    }
    
    // Core variables
    let db = null;
    let auth = null;
    let currentUser = null;
    let allMessages = [];
    let openChatAfterAuth = false;
    let currentChannel = 'general';
    let currentChannelType = 'public'; // 'public' –∏–ª–∏ 'private'
    let currentTab = 'messages';
    let channels = [];
    let privateChats = []; // –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –ª–∏—á–Ω—ã—Ö —á–∞—Ç–æ–≤
    let allUsers = new Map(); // –•—Ä–∞–Ω–∏—Ç –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    let onlineUsers = new Map(); // –ò—Å–ø–æ–ª—å–∑—É–µ–º Map –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    let profileListeners = new Map();
    let isInitialized = false;
    let unreadCounts = new Map();
    let replyContext = null;
    let presenceListener = null;
    let heartbeatInterval = null; // –î–ª—è "–ø—É–ª—å—Å–∞"
    let notificationsEnabled = true;
    let originalTitle = document.title;
    let unreadMessageCount = 0; 
    let isPinnedMode = false;
    let isAiSelectionMode = false;
    let isChatTranslateModeEnabled = false; // –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–∂–∏–º–∞ –ø–µ—Ä–µ–≤–æ–¥–∞
    let chatTranslations = new Map(); // –ö—ç—à –¥–ª—è —É–∂–µ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π

    let messagesListener = null; // C–ª—É—à–∞—Ç–µ–ª—å –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π
    let pmUnreadListener = null; // –°–ª—É—à–∞—Ç–µ–ª—å –¥–ª—è –õ–ò–ß–ù–´–• –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö
    let publicUnreadListener = null; // –°–ª—É—à–∞—Ç–µ–ª—å –¥–ª—è –ü–£–ë–õ–ò–ß–ù–´–• –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö
    let listenerInitializationTime = null; // –í–†–ï–ú–Ø –ó–ê–ü–£–°–ö–ê –°–õ–£–®–ê–¢–ï–õ–Ø
    let questionsListener = null; // –°–õ–£–®–ê–¢–ï–õ–¨ –î–õ–Ø –í–û–ü–†–û–°–û–í

    let questionToHighlight = null;
    let favoritesListener = null;
    let unlockedChannels = new Set();
    const QUICK_REACTIONS_KEY = 'userQuickReactions';
    const DEFAULT_QUICK_REACTIONS = ['üëç', '‚ù§Ô∏è', 'üòÇ', 'üòÆ', 'üò¢', 'üî•'];
    
    // DOM elements
    let chatOverlay = null;
    let chatModal = null;
    let currentUserEl = null;
    let chatInput = null;
    let messageArea = null;
    let channelsList = null;
    let privateChatsList = null; // –î–ª—è —Å–ø–∏—Å–∫–∞ –õ–°
    let onlineUsersList = null;
    let searchInput = null;
    let authOverlay = null;
    let tabButtons = {};
    let tabCounters = {};
    let chatSearchToggleBtn = null;
    let lastMessageObserver = null; 

    // Tabs configuration
    const TABS = {
        messages: { langKey: 'tab_messages', icon: 'üí¨', collection: 'messages' },
        questions: { langKey: 'tab_questions', icon: '‚ùì', collection: 'questions' },
        favorites: { langKey: 'tab_favorites', icon: '‚≠ê', collection: 'favorites' },
        users: { langKey: 'tab_users', icon: 'üë•' }
    };

    /**
     * –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø-–ü–û–ú–û–©–ù–ò–ö (–í–ù–£–¢–†–ò CHATMODULE)
     * –°–æ–∑–¥–∞–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è –∫—ç—à–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —á–∞—Ç–∞, –∫–æ–º–±–∏–Ω–∏—Ä—É—è ID –∏ —è–∑—ã–∫.
     * @param {string} messageId - ID —Å–æ–æ–±—â–µ–Ω–∏—è.
     * @param {string} lang - –ö–æ–¥ —è–∑—ã–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'ru', 'en').
     * @returns {string} - –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–ª—é—á (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'xyz-123_en').
     */
    function getChatCacheKey(messageId, lang) {
        return `${messageId}_${lang}`;
    }

    // --- –ù–ê–ß–ê–õ–û –ù–û–í–û–ì–û –ö–û–î–ê: –í—Å—Ç–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ —Å—é–¥–∞ ---
    function debounce(func, wait) {
        let timeout;
        return function executedFunction(...args) {
            const later = () => {
                clearTimeout(timeout);
                func(...args);
            };
            clearTimeout(timeout);
            timeout = setTimeout(later, wait);
        };
    };

    function handleSearch(event) {
        const query = event.target.value.toLowerCase().trim();
        if (!query) {
            loadTabData(currentTab);
            return;
        }
        const items = messageArea.querySelectorAll('.message, .question-bubble, .favorite-item, .user-list-item');
        items.forEach(item => {
            const text = item.textContent.toLowerCase();
            if (text.includes(query)) {
                item.style.display = '';
            } else {
                item.style.display = 'none';
            }
        });
    }


  

    function init(firebaseDb, firebaseAuth) {
        try {
            db = firebaseDb;
            auth = firebaseAuth;
            
            // 1. –°–æ–∑–¥–∞–µ–º HTML
            createHybridChatHTML();
            
            // 2. –ù–∞—Ö–æ–¥–∏–º —ç–ª–µ–º–µ–Ω—Ç—ã
            initDOMElements();
            
            // 3. –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
            setupEventListeners();
            
            // 4. –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω–æ–µ
            setupAuthStateListener();
            setupVisibilityListener();
            
            isInitialized = true;
            console.log('‚úÖ –ì–∏–±—Ä–∏–¥–Ω—ã–π —á–∞—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —á–∞—Ç–∞:', error);
            isInitialized = false;
        }
    }


    function createHybridChatHTML() {

        // –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –≤–µ—Ä—Å–∏–∏ —á–∞—Ç–∞, –µ—Å–ª–∏ –æ–Ω–∏ –≤–¥—Ä—É–≥ –æ—Å—Ç–∞–ª–∏—Å—å –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        const oldChats = document.querySelectorAll('#chatOverlay, #advancedChatOverlay');
        oldChats.forEach(chat => chat.remove());
        
        // –í—Å—è HTML-—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –≤ –æ–¥–Ω–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
        const chatHTML = `
        <!-- –°–ò–°–¢–ï–ú–ê –ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–ò -->
        <div id="authOverlay" class="auth-overlay hidden">
            <div class="auth-modal">
                <h2 style="margin-bottom: 20px; color: var(--primary); display: flex; align-items: center; justify-content: center; gap: 10px;"><i data-lucide="lock"></i>${_chat('auth_title')}</h2>
                <div class="auth-tabs">
                    <button class="auth-tab active" data-tab="login">${_chat('auth_login_tab')}</button>
                    <button class="auth-tab" data-tab="register">${_chat('auth_register_tab')}</button>
                </div>           
                <form class="auth-form active" id="loginForm">
                    <input type="text" class="auth-input" id="loginUsername" placeholder="${_chat('auth_login_placeholder')}" required>
                    <div class="password-wrapper">
                        <input type="password" class="auth-input" id="loginPassword" placeholder="${_chat('auth_password_placeholder')}" required>
                        <span class="toggle-password"><i data-lucide="eye"></i></span>
                    </div>
                    <a href="#" id="forgotPasswordLink" class="forgot-password-link">${_chat('auth_forgot_password')}</a>
                    <button type="submit" class="auth-btn">${_chat('auth_login_button')}</button>
                </form>
                <form class="auth-form" id="registerForm">
                    <input type="text" class="auth-input" id="registerUsername" placeholder="${_chat('auth_register_username_placeholder')}" required>
                    <input type="email" class="auth-input" id="registerEmail" placeholder="${_chat('auth_register_email_placeholder')}" required>
                    <div class="password-wrapper">
                        <input type="password" class="auth-input" id="registerPassword" placeholder="${_chat('auth_register_password_placeholder')}" required>
                        <span class="toggle-password"><i data-lucide="eye"></i></span>
                    </div>
                    <div class="password-wrapper">
                        <input type="password" class="auth-input" id="registerPasswordConfirm" placeholder="${_chat('auth_register_confirm_placeholder')}" required>
                        <span class="toggle-password"><i data-lucide="eye"></i></span>
                    </div>
                    <button type="submit" class="auth-btn">${_chat('auth_register_button')}</button>
                </form>

                <div style="text-align: center; margin: 20px 0; color: var(--secondary-text-color);">${_chat('auth_or_divider')}</div>
                
                <button id="googleSignInBtn" class="google-signin-btn">
                    <img src="https://www.gstatic.com/firebasejs/ui/2.0.0/images/auth/google.svg" alt="Google icon">
                    ${_chat('auth_google_signin')}
                </button>
                
                <button id="authCloseButton" onclick="ChatModule.closeAuthModal()" style="margin-top: 15px; background: none; border: none; color: var(--secondary-text-color); cursor: pointer;">
                    ${_chat('auth_close_button')}
                </button>
            </div>
        </div>

        <!-- –ì–ò–ë–†–ò–î–ù–´–ô –ß–ê–¢ (–ø–æ–ª–Ω—ã–π –∫–æ–¥, –∫–∞–∫ –∏ —Ä–∞–Ω–µ–µ) -->
        <div id="chatOverlay" class="advanced-chat-overlay hidden">
            <div class="advanced-chat-modal">
                <!-- Header -->
                <div class="advanced-chat-header">
                    <div class="chat-title">
                        <h3 id="chatHeaderTitle">${_chat('chat_header_title')}</h3>
                        <span id="unreadBadge" class="unread-badge hidden">0</span>
                    </div>
                    <button id="sidebarToggleBtn" class="sidebar-toggle-btn"><i data-lucide="menu"></i></button>
                    <div class="header-controls">
                        <div class="user-menu-container">
                            <span id="currentUser">${_chat('guest_user')}</span>
                            <div id="userDropdown" class="user-dropdown hidden">
                                <a href="#" onclick="ChatModule.showProfileModal()"><i data-lucide="pencil"></i>${_chat('edit_profile_link')}</a>
                                <a href="#" onclick="ChatModule.logout()"><i data-lucide="log-out"></i>${_chat('logout_link')}</a>
                            </div>
                        </div>
                        <button id="notificationToggle" class="notification-toggle" title="${_chat('notifications_title')}"><i data-lucide="bell"></i></button>
                        <button onclick="ChatModule.closeChatModal()" class="close-btn"><i data-lucide="x"></i></button>
                    </div>
                </div>
                
                <!-- Main layout -->
                <div class="advanced-chat-body">
                    <div id="sidebarContainer" class="sidebar-container">
                        <!-- Sidebar -->
                        <div class="chat-sidebar">
                            <div class="sidebar-section">
                                <h4>${_chat('sidebar_sections')}</h4>
                                <div id="chatTabsList" class="tabs-list">
                                    <div class="tab-item active" data-tab="messages"><span class="tab-icon"><i data-lucide="message-square"></i></span><span class="tab-name">${_chat('tab_messages')}</span><span class="tab-counter" id="messagesCount">0</span></div>
                                    <div class="tab-item" data-tab="questions"><span class="tab-icon"><i data-lucide="help-circle"></i></span><span class="tab-name">${_chat('tab_questions')}</span><span class="tab-counter" id="questionsCount">0</span></div>
                                    <div class="tab-item" data-tab="favorites"><span class="tab-icon"><i data-lucide="star"></i></span><span class="tab-name">${_chat('tab_favorites')}</span><span class="tab-counter" id="favoritesCount">0</span></div>
                                    <div class="tab-item" data-tab="users"><span class="tab-icon"><i data-lucide="users"></i></span><span class="tab-name">${_chat('tab_users')}</span><span class="tab-counter" id="usersCount">0</span></div>
                                </div>
                            </div>
                            <div class="sidebar-section">
                                <h4><i data-lucide="hash"></i>${_chat('sidebar_channels')}</h4>
                                <div class="sidebar-search-container"><input type="text" id="channelSearchInput" class="sidebar-search-input" placeholder="${_chat('sidebar_search_placeholder')}"></div>
                                <div id="channelsList" class="channels-list"></div>
                                <button id="createChannelBtn" class="create-btn">${_chat('sidebar_create_channel')}</button>
                            </div>
                            <div class="sidebar-section" id="privateChatsSection">
                                <h4><i data-lucide="send"></i>${_chat('sidebar_private_messages')}</h4>
                                <div id="privateChatsList" class="channels-list"></div>
                            </div>                            
                            <div class="sidebar-section">
                                <h4><span class="online-label"><i data-lucide="user-check"></i>${_chat('sidebar_online')}</span> (<span id="onlineCount">0</span>)</h4>
                                <div id="onlineUsersList" class="online-users-list"></div>
                            </div>
                        </div>
                    </div>
                    
                    <!-- Main chat area -->
                    <div class="chat-main-content">
                        <div class="chat-top-bar">
                            <h4 id="currentChannelName" style="margin: 0; flex-grow: 1; text-align: left; color: var(--heading-color);">${_chat('channel_general')}</h4>
                            <button id="chatSearchToggleBtn" class="chat-search-toggle"><i data-lucide="search"></i></button>
                            <input type="text" id="chatSearchInput" placeholder="${_chat('search_placeholder')}" />
                        </div>
                        <div id="aiSelectionBanner" class="ai-selection-banner hidden">
                            <span>${_chat('ai_selection_banner_text')}</span>
                            <button id="cancelAiSelectionBtn" class="btn-secondary-small">${_chat('ai_selection_cancel')}</button>
                        </div>
                        <div id="tabActionsContainer" class="tab-actions-container hidden"></div>
                        <div id="messageArea" class="message-area"><div class="empty-state">${_chat('loading_messages')}</div></div>
                        <div class="chat-input-area">
                            <div id="replyingToPanel" class="replying-to-panel hidden">
                                <div class="reply-info"><span>${_chat('reply_panel_title')}</span><p id="replyingToText"></p></div>
                                <button onclick="ChatModule.cancelReply()" class="cancel-reply-btn"><i data-lucide="x"></i></button>
                            </div>


                            <div class="input-actions-top">
                                <button id="emojiBtn" class="input-action-btn" title="${_chat('emoji_button_title')}"><i data-lucide="smile"></i></button>
                                <button id="questionBtn" class="input-action-btn" title="${_chat('create_question_button_title')}"><i data-lucide="help-circle"></i></button>
                                <button id="uploadFileBtn" class="input-action-btn" title="${_chat('attach_file_button_title')}"><i data-lucide="paperclip"></i></button>
                                <button id="togglePinnedBtn" class="input-action-btn" title="${_chat('pinned_toggle_title')}"><i data-lucide="pin"></i></button>
                                <button id="chatTranslateBtn" class="input-action-btn" title="–ü–µ—Ä–µ–≤–µ—Å—Ç–∏ —á–∞—Ç"><i data-lucide="languages"></i></button>
                                <div class="ai-helper-container">
                                    <button id="aiChatHelperBtn" class="input-action-btn" title="${_chat('ai_helper_title')}"><i data-lucide="brain-circuit"></i></button>
                                    <div id="aiChatHelperMenu" class="ai-helper-menu hidden">
                                        <a href="#" data-action="summarize-from-selection">${_chat('ai_summarize_from_selection')}</a>
                                        <a href="#" data-action="summarize-all">${_chat('ai_summarize_all')}</a>
                                    </div>
                                </div>
                            </div>
                            <input type="file" id="chatFileInput" class="hidden" accept=".qst,.txt,.pdf">
                            <div class="input-wrapper">
                                <textarea id="chatInput" placeholder="${_chat('chat_input_placeholder')}"></textarea>
                                <button id="sendBtn" class="advanced-send-btn"><i data-lucide="send"></i></button>
                            </div>
                        </div>    
                    </div>
                </div>
            </div>
        </div>

        <!-- MODALS -->
        <div id="userActionsModal" class="modal-overlay hidden"><div class="modal-content"><h3 id="userActionsModalTitle">${_chat('user_actions_title')}</h3><p id="userActionsModalText" style="margin-bottom: 25px;">${_chat('user_actions_text')}</p><div class="modal-buttons vertical"><button id="userActionsChatBtn"><i data-lucide="message-circle"></i>${_chat('user_actions_chat_button')}</button><button id="userActionsEmailBtn"><i data-lucide="mail"></i>${_chat('user_actions_email_button')}</button><button onclick="ChatModule.closeModal('userActionsModal')" style="background-color: var(--button-secondary-bg); color: var(--button-secondary-text);">${_chat('modal_cancel_button')}</button></div></div></div>
        <div id="channelEditModal" class="modal-overlay hidden"><div class="modal-content"><h3>${_chat('channel_settings_title')}</h3><input type="hidden" id="editChannelId"><input type="text" id="editChannelNameInput" placeholder="${_chat('channel_edit_name_placeholder')}" required /><input type="password" id="editChannelPasswordInput" placeholder="${_chat('channel_edit_password_placeholder')}" /><textarea id="editChannelDescInput" placeholder="${_chat('channel_edit_desc_placeholder')}"></textarea><div id="channelMembersSection" class="channel-members-section hidden"><h4>${_chat('channel_members_title')}</h4><ul id="channelMembersList" class="channel-members-list"><li>${_chat('channel_members_loading')}</li></ul></div><div class="modal-buttons"><button onclick="ChatModule.saveChannelEdit()">${_chat('modal_save_button')}</button><button onclick="ChatModule.closeModal('channelEditModal')">${_chat('modal_cancel_button')}</button></div><button id="deleteChannelBtn" class="delete-btn" onclick="ChatModule.deleteChannel()" style="margin-top: 15px;"><i data-lucide="trash-2"></i>${_chat('delete_channel_button')}</button></div></div>
        <div id="channelCreateModal" class="modal-overlay hidden"><div class="modal-content"><h3>${_chat('create_channel_title')}</h3><input type="text" id="channelNameInput" placeholder="${_chat('channel_create_name_placeholder')}" required /><input type="password" id="channelPasswordInput" placeholder="${_chat('channel_create_password_placeholder')}" /><textarea id="channelDescInput" placeholder="${_chat('channel_create_desc_placeholder')}"></textarea><div class="settings-group" style="text-align: left; margin-top: 15px;"><input type="checkbox" id="channelIsForTesting"><label for="channelIsForTesting" data-lang-key="testing_channel_option">${_chat('testing_channel_option')}</label></div><div class="modal-buttons"><button onclick="ChatModule.createChannel()">${_chat('modal_create_button')}</button><button onclick="ChatModule.closeModal('channelCreateModal')">${_chat('modal_cancel_button')}</button></div></div></div>
        <div id="questionCreateModal" class="modal-overlay hidden"><div class="modal-content"><h3>${_chat('create_question_title')}</h3><textarea id="questionTextInput" placeholder="${_chat('create_question_placeholder')}" rows="4"></textarea><div class="modal-buttons"><button onclick="ChatModule.createQuestion()">${_chat('create_question_modal_button')}</button><button onclick="ChatModule.closeModal('questionCreateModal')">${_chat('modal_cancel_button')}</button></div></div></div>
        <div id="editMessageModal" class="modal-overlay hidden"><div class="modal-content"><h3>${_chat('edit_message_title')}</h3><textarea id="editMessageInput" rows="4"></textarea><input type="hidden" id="editMessageIdInput"><div class="modal-buttons"><button onclick="ChatModule.saveMessageEdit()">${_chat('modal_save_button')}</button><button onclick="ChatModule.closeModal('editMessageModal')">${_chat('modal_cancel_button')}</button></div></div></div>
        <div id="profileEditModal" class="modal-overlay hidden"><div class="modal-content"><h3>${_chat('edit_profile_title')}</h3><input type="text" id="profileDisplayName" placeholder="${_chat('edit_profile_name_placeholder')}" /><input type="email" id="profileEmail" placeholder="Email" readonly /><input type="password" id="profileNewPassword" placeholder="${_chat('edit_profile_new_password_placeholder')}" /><div class="modal-buttons"><button onclick="ChatModule.saveProfile()">${_chat('modal_save_button')}</button><button onclick="ChatModule.closeModal('profileEditModal')">${_chat('modal_cancel_button')}</button></div><button id="deleteAccountBtn" class="delete-btn" onclick="ChatModule.deleteAccount()" style="margin-top: 15px;"><i data-lucide="trash-2"></i>${_chat('delete_account_button')}</button></div></div>
        <div id="fileActionsModal" class="modal-overlay hidden"><div class="modal-content"><h3 id="fileActionsModalTitle">${_chat('file_actions_title')}</h3><p id="fileActionsModalText" style="margin-bottom: 25px;">${_chat('user_actions_text')}</p><div class="modal-buttons vertical"><button id="fileActionDownloadBtn"><i data-lucide="download"></i>${_chat('file_actions_download')}</button><button id="fileActionTestBtn"><i data-lucide="play-circle"></i>${_chat('file_actions_test')}</button><button onclick="ChatModule.closeModal('fileActionsModal')" style="background-color: var(--button-secondary-bg); color: var(--button-secondary-text);">${_chat('modal_cancel_button')}</button></div></div></div>
        <div id="activeQuizModal" class="modal-overlay hidden">
          <div class="modal">
            <h3 data-lang-key="active_quiz_title">–£ –≤–∞—Å —É–∂–µ –∑–∞–ø—É—â–µ–Ω —Ç–µ—Å—Ç</h3>
            <p data-lang-key="active_quiz_text" class="modal-text">
              –ß—Ç–æ —Å–¥–µ–ª–∞—Ç—å —Å —Ç–µ–∫—É—â–∏–º —Ç–µ—Å—Ç–æ–º?
            </p>
            <div class="modal-actions column">
              <button id="activeQuizSaveAndOpenBtn" class="btn">
                –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–∑–∂–µ
              </button>
              <button id="activeQuizFinishBtn" class="btn btn-danger">
                –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ç–µ—Å—Ç
              </button>
              <button class="btn btn-secondary" onclick="closeModal('activeQuizModal')">
                –û—Ç–º–µ–Ω–∞
              </button>
            </div>
          </div>
        </div>

        <div id="aiSummaryModal" class="modal-overlay hidden">
            <div class="modal-content" style="max-width: 600px; text-align: left;">
                <h3 id="aiSummaryModalTitle" style="display: flex; align-items: center; gap: 8px;"><i data-lucide="lightbulb"></i>${_chat('ai_summary_modal_title')}</h3>
                <div id="aiSummaryOutput" style="max-height: 60vh; overflow-y: auto; line-height: 1.6;">
                    <!-- –°—é–¥–∞ –±—É–¥–µ—Ç –≤—Å—Ç–∞–≤–ª—è—Ç—å—Å—è —Å–≤–æ–¥–∫–∞ –∏–ª–∏ —Å–ø–∏–Ω–Ω–µ—Ä -->
                </div>
                <div class="modal-buttons" style="margin-top: 20px;">
                    <button onclick="ChatModule.closeModal('aiSummaryModal')" data-lang-key="auth_close_button">–ó–∞–∫—Ä—ã—Ç—å</button>
                </div>
            </div>
        </div>

        <div id="forgotPasswordModal" class="modal-overlay hidden">
            <div class="modal-content">
                <h3 data-lang-key="forgot_password_modal_title">${_chat('forgot_password_modal_title')}</h3>
                <p style="margin-bottom: 20px;" data-lang-key="forgot_password_modal_text">${_chat('forgot_password_modal_text')}</p>
                <input type="email" id="resetEmailInput" class="auth-input" placeholder="${_chat('forgot_password_email_placeholder')}" required />
                <div class="modal-buttons">
                    <button onclick="ChatModule.handlePasswordReset()" data-lang-key="forgot_password_send_button">${_chat('forgot_password_send_button')}</button>
                    <button onclick="ChatModule.closeModal('forgotPasswordModal')" data-lang-key="modal_cancel_button">${_chat('modal_cancel_button')}</button>
                </div>
            </div>
        </div>
        `;

        document.body.insertAdjacentHTML('beforeend', chatHTML);
        if (window.lucide) {
            lucide.createIcons();
        }
    }

 
    async function signInWithGoogle() {
        if (!auth) {
            showError('–°–∏—Å—Ç–µ–º–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞');
            return;
        }

        const provider = new firebase.auth.GoogleAuthProvider();

        try {
            const result = await auth.signInWithPopup(provider);
            const user = result.user;

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–æ–≤—ã–π –ª–∏ —ç—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            if (result.additionalUserInfo.isNewUser) {
                console.log('–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å Google, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Firestore:', user.displayName);
                // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–æ–≤—ã–π, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ –¥–∞–Ω–Ω—ã–µ –≤ –Ω–∞—à–µ–π –±–∞–∑–µ
                await db.collection('users').doc(user.uid).set({
                    username: user.displayName,
                    email: user.email,
                    uid: user.uid,
                    privateChatPartners: [],
                    createdAt: firebase.firestore.FieldValue.serverTimestamp()
                });
            }

            // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∏ –æ—Ç–∫—Ä—ã–≤–∞–µ–º —á–∞—Ç, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            ChatModule.closeAuthModal();
            if (openChatAfterAuth) {
                openChatAfterAuth = false;
                ChatModule.openChatModal();
            }

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ —á–µ—Ä–µ–∑ Google:', error);
            showError(getErrorMessage(error.code));
        }
    }



    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —á–∞—Ç–∞ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º —è–∑—ã–∫–æ–º.
     * –ù–µ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–µ—Ç DOM, –∞ —Ç–æ–ª—å–∫–æ –º–µ–Ω—è–µ—Ç —Ç–µ–∫—Å—Ç.
     */
    function updateChatUIText() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ DOM —á–∞—Ç–∞, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–æ–∫
        if (!document.getElementById('authOverlay')) return;

        // --- –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ ---
        document.querySelector('#authOverlay h2').textContent = _chat('auth_title');
        document.querySelector('.auth-tab[data-tab="login"]').textContent = _chat('auth_login_tab');
        document.querySelector('.auth-tab[data-tab="register"]').textContent = _chat('auth_register_tab');
        document.getElementById('loginUsername').placeholder = _chat('auth_login_placeholder');
        document.getElementById('loginPassword').placeholder = _chat('auth_password_placeholder');
        document.querySelector('#loginForm button').textContent = _chat('auth_login_button');
        document.getElementById('registerUsername').placeholder = _chat('auth_register_username_placeholder');
        document.getElementById('registerEmail').placeholder = _chat('auth_register_email_placeholder');
        document.getElementById('registerPassword').placeholder = _chat('auth_register_password_placeholder');
        document.getElementById('registerPasswordConfirm').placeholder = _chat('auth_register_confirm_placeholder');
        document.querySelector('#registerForm button').textContent = _chat('auth_register_button');
        const forgotLink = getEl('forgotPasswordLink');
        if (forgotLink) forgotLink.textContent = _chat('auth_forgot_password');
        
        const forgotModal = getEl('forgotPasswordModal');
        if (forgotModal) {
            forgotModal.querySelector('[data-lang-key="forgot_password_modal_title"]').textContent = _chat('forgot_password_modal_title');
            forgotModal.querySelector('[data-lang-key="forgot_password_modal_text"]').textContent = _chat('forgot_password_modal_text');
            forgotModal.querySelector('#resetEmailInput').placeholder = _chat('forgot_password_email_placeholder');
            forgotModal.querySelector('[data-lang-key="forgot_password_send_button"]').textContent = _chat('forgot_password_send_button');
            forgotModal.querySelector('[data-lang-key="modal_cancel_button"]').textContent = _chat('modal_cancel_button');
        }


        const googleBtn = document.getElementById('googleSignInBtn');
        if (googleBtn) {
            googleBtn.innerHTML = `
                <img src="https://www.gstatic.com/firebasejs/ui/2.0.0/images/auth/google.svg" alt="Google icon">
                ${_chat('auth_google_signin')}
            `;
        }
        const activeQuiz = getEl('activeQuizModal');
        if (activeQuiz) {
          activeQuiz.querySelector('h3').textContent = _chat('active_quiz_title');
          activeQuiz.querySelector('[data-lang-key="active_quiz_text"]').textContent = _chat('active_quiz_text');
          const saveBtn = getEl('activeQuizSaveAndOpenBtn');
          const finBtn  = getEl('activeQuizFinishBtn');
          if (saveBtn) saveBtn.textContent = _chat('active_quiz_save_and_open');
          if (finBtn)  finBtn.textContent  = _chat('active_quiz_finish');
          activeQuiz.querySelector('button[onclick*="closeModal"]').textContent = _chat('modal_cancel_button');
        }

        document.getElementById('authCloseButton').textContent = _chat('auth_close_button');

        // --- –û—Å–Ω–æ–≤–Ω–æ–µ –æ–∫–Ω–æ —á–∞—Ç–∞ ---
        // –®–∞–ø–∫–∞
        document.getElementById('chatHeaderTitle').textContent = _chat(TABS[currentTab].langKey);
        document.querySelector('#userDropdown a[onclick*="showProfileModal"]').textContent = _chat('edit_profile_link');
        document.querySelector('#userDropdown a[onclick*="logout"]').textContent = _chat('logout_link');
        document.getElementById('notificationToggle').title = _chat('notifications_title');
        
        // –°–∞–π–¥–±–∞—Ä
        document.querySelector('.sidebar-section:nth-of-type(1) h4').textContent = _chat('sidebar_sections');
        document.querySelector('.tab-item[data-tab="messages"] .tab-name').textContent = _chat('tab_messages');
        document.querySelector('.tab-item[data-tab="questions"] .tab-name').textContent = _chat('tab_questions');
        document.querySelector('.tab-item[data-tab="favorites"] .tab-name').textContent = _chat('tab_favorites');
        document.querySelector('.tab-item[data-tab="users"] .tab-name').textContent = _chat('tab_users');
        document.querySelector('.sidebar-section:nth-of-type(2) h4').textContent = _chat('sidebar_channels');
        document.getElementById('createChannelBtn').textContent = _chat('sidebar_create_channel');
        document.getElementById('privateChatsSection').querySelector('h4').textContent = _chat('sidebar_private_messages');
        document.querySelector('.online-label').textContent = _chat('sidebar_online');
        
        // –û—Å–Ω–æ–≤–Ω–∞—è –æ–±–ª–∞—Å—Ç—å
        document.getElementById('chatSearchInput').placeholder = _chat('search_placeholder');
        document.getElementById('togglePinnedBtn').title = isPinnedMode ? _chat('pinned_mode_on_title') : _chat('pinned_mode_off_title');
        document.querySelector('#replyingToPanel span').textContent = _chat('reply_panel_title');
        document.getElementById('emojiBtn').title = _chat('emoji_button_title');
        document.getElementById('questionBtn').title = _chat('create_question_button_title');
        document.getElementById('uploadFileBtn').title = _chat('attach_file_button_title');
        document.getElementById('chatInput').placeholder = _chat('chat_input_placeholder');

        // --- –î—Ä—É–≥–∏–µ –º–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞ ---
        document.querySelector('#userActionsModal h3').textContent = _chat('user_actions_title');
        document.querySelector('#userActionsModal p').textContent = _chat('user_actions_text');
        document.querySelector('#userActionsChatBtn').textContent = _chat('user_actions_chat_button');
        document.querySelector('#userActionsEmailBtn').textContent = _chat('user_actions_email_button');
        document.querySelector('#userActionsModal button[onclick*="closeModal"]').textContent = _chat('modal_cancel_button');

        document.querySelector('#channelEditModal h3').textContent = _chat('channel_settings_title');
        document.getElementById('editChannelNameInput').placeholder = _chat('channel_edit_name_placeholder');
        document.getElementById('editChannelPasswordInput').placeholder = _chat('channel_edit_password_placeholder');
        document.getElementById('editChannelDescInput').placeholder = _chat('channel_edit_desc_placeholder');
        document.querySelector('#channelMembersSection h4').textContent = _chat('channel_members_title');
        document.querySelector('#channelEditModal button[onclick*="saveChannelEdit"]').textContent = _chat('modal_save_button');
        document.querySelector('#channelEditModal button[onclick*="closeModal"]').textContent = _chat('modal_cancel_button');
        document.getElementById('deleteChannelBtn').textContent = _chat('delete_channel_button');
        
        document.querySelector('#channelCreateModal h3').textContent = _chat('create_channel_title');
        document.getElementById('channelNameInput').placeholder = _chat('channel_create_name_placeholder');
        document.getElementById('channelPasswordInput').placeholder = _chat('channel_create_password_placeholder');
        document.getElementById('channelDescInput').placeholder = _chat('channel_create_desc_placeholder');
        document.querySelector('#channelCreateModal button[onclick*="createChannel"]').textContent = _chat('modal_create_button');
        document.querySelector('#channelCreateModal button[onclick*="closeModal"]').textContent = _chat('modal_cancel_button');

        document.querySelector('#questionCreateModal h3').textContent = _chat('create_question_title');
        document.getElementById('questionTextInput').placeholder = _chat('create_question_placeholder');
        document.querySelector('#questionCreateModal button[onclick*="createQuestion"]').textContent = _chat('create_question_modal_button');
        document.querySelector('#questionCreateModal button[onclick*="closeModal"]').textContent = _chat('modal_cancel_button');

        document.querySelector('#editMessageModal h3').textContent = _chat('edit_message_title');
        document.querySelector('#editMessageModal button[onclick*="saveMessageEdit"]').textContent = _chat('modal_save_button');
        document.querySelector('#editMessageModal button[onclick*="closeModal"]').textContent = _chat('modal_cancel_button');

        document.querySelector('#profileEditModal h3').textContent = _chat('edit_profile_title');
        document.getElementById('profileDisplayName').placeholder = _chat('edit_profile_name_placeholder');
        document.getElementById('profileNewPassword').placeholder = _chat('edit_profile_new_password_placeholder');
        document.querySelector('#profileEditModal button[onclick*="saveProfile"]').textContent = _chat('modal_save_button');
        document.querySelector('#profileEditModal button[onclick*="closeModal"]').textContent = _chat('modal_cancel_button');
        document.getElementById('deleteAccountBtn').textContent = _chat('delete_account_button');

        document.querySelector('#fileActionsModal h3').textContent = _chat('file_actions_title');
        document.querySelector('#fileActionsModal p').textContent = _chat('user_actions_text');
        document.getElementById('fileActionDownloadBtn').textContent = _chat('file_actions_download');
        document.getElementById('fileActionTestBtn').textContent = _chat('file_actions_test');
        document.querySelector('#fileActionsModal button[onclick*="closeModal"]').textContent = _chat('modal_cancel_button');

        // –ü–µ—Ä–µ–≤–æ–¥ –æ–ø—Ü–∏–∏ –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞–Ω–∞–ª–∞
        const testingChannelLabel = document.querySelector('label[for="channelIsForTesting"]');
        if (testingChannelLabel) {
            testingChannelLabel.textContent = _chat('testing_channel_option');
        }

        // –ü–µ—Ä–µ–≤–æ–¥ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        const resultsModal = document.getElementById('testResultsModal');
        if (resultsModal) {
            const title = resultsModal.querySelector('#testResultsModalTitle');
            const closeButton = resultsModal.querySelector('button[onclick*="closeModal"]');
            
            if (title) title.textContent = _chat('results_modal_title');
            if (closeButton) closeButton.textContent = _chat('auth_close_button');
        }

        const aiModal = document.getElementById('aiExplanationModal');
        if (aiModal) {
            // –ù–∞—Ö–æ–¥–∏–º –∫–Ω–æ–ø–∫—É "–ó–∞–∫—Ä—ã—Ç—å" –≤–Ω—É—Ç—Ä–∏ —ç—Ç–æ–≥–æ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞.
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä, —á—Ç–æ–±—ã –Ω–µ –∑–∞—Ç—Ä–æ–Ω—É—Ç—å –¥—Ä—É–≥–∏–µ –∫–Ω–æ–ø–∫–∏.
            const closeButton = aiModal.querySelector('button[data-lang-key="auth_close_button"]');
            if (closeButton) {
                closeButton.textContent = _chat('auth_close_button');
            }
        }


        // –ü–µ—Ä–µ–≤–æ–¥ AI-–ø–æ–º–æ—â–Ω–∏–∫–∞ –∏ –µ–≥–æ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ ===
        const aiHelperBtn = getEl('aiChatHelperBtn');
        if (aiHelperBtn) {
            aiHelperBtn.title = _chat('ai_helper_title');
        }

        const aiHelperMenu = getEl('aiChatHelperMenu');
        if (aiHelperMenu) {
            const summarizeSelectionLink = aiHelperMenu.querySelector('[data-action="summarize-from-selection"]');
            if (summarizeSelectionLink) summarizeSelectionLink.textContent = _chat('ai_summarize_from_selection');

            const summarizeAllLink = aiHelperMenu.querySelector('[data-action="summarize-all"]');
            if (summarizeAllLink) summarizeAllLink.textContent = _chat('ai_summarize_all');
        }
        
        const aiSelectionBanner = getEl('aiSelectionBanner');
        if (aiSelectionBanner) {
            const bannerText = aiSelectionBanner.querySelector('span');
            if (bannerText) bannerText.textContent = _chat('ai_selection_banner_text');
            
            const cancelBtn = aiSelectionBanner.querySelector('#cancelAiSelectionBtn');
            if (cancelBtn) cancelBtn.textContent = _chat('ai_selection_cancel');
        }

        
        
        const aiSummaryModal = getEl('aiSummaryModal');
        if (aiSummaryModal) {
            const closeBtn = aiSummaryModal.querySelector('button[onclick*="closeModal"]');
            if (closeBtn) closeBtn.textContent = _chat('auth_close_button');
        }
        
        // =======================
        // –ù–û–í–´–ô –ö–û–î (–î–û–ë–ê–í–ò–¢–¨)
        // =======================
        // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞ "# –û–±—â–∏–π"
        const currentChannelNameEl = getEl('currentChannelName');
        if (currentChannelNameEl && currentChannel === 'general') {
            // –ï—Å–ª–∏ —Ç–µ–∫—É—â–∏–π –∫–∞–Ω–∞–ª - "general", –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫
            // –∏–∑ —è–∑—ã–∫–æ–≤–æ–≥–æ –ø–∞–∫–µ—Ç–∞. –î–ª—è –¥—Ä—É–≥–∏—Ö –∫–∞–Ω–∞–ª–æ–≤ –º—ã —ç—Ç–æ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º,
            // —Ç–∞–∫ –∫–∞–∫ –∏—Ö –Ω–∞–∑–≤–∞–Ω–∏—è —Å–æ–∑–¥–∞–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –∏ –Ω–µ –¥–æ–ª–∂–Ω—ã –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å—Å—è.
            currentChannelNameEl.textContent = _chat('channel_general');
        }
        // =======================
        // –ö–û–ù–ï–¶ –ù–û–í–û–ì–û –ö–û–î–ê
        // =======================

    }




    function initDOMElements() {
        chatOverlay = document.getElementById('chatOverlay');
        authOverlay = document.getElementById('authOverlay');
        currentUserEl = document.getElementById('currentUser');
        chatInput = document.getElementById('chatInput');
        messageArea = document.getElementById('messageArea');
        channelsList = document.getElementById('channelsList');
        privateChatsList = document.getElementById('privateChatsList');
        onlineUsersList = document.getElementById('onlineUsersList');
        searchInput = document.getElementById('chatSearchInput');
        Object.keys(TABS).forEach(tabId => {
            tabButtons[tabId] = document.querySelector(`[data-tab="${tabId}"]`);
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ –≤–∫–ª–∞–¥–∫–∞ "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", –¥–ª—è –∫–æ—Ç–æ—Ä–æ–π —Å–≤–æ–π —Å—á–µ—Ç—á–∏–∫
            if(tabId !== 'users') {
                 tabCounters[tabId] = document.getElementById(`${tabId}Count`);
            }
        });
        // –ü–†–ê–í–ò–õ–¨–ù–û –ø—Ä–∏–≤—è–∑—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        tabCounters['users'] = document.getElementById('usersCount'); // –°—á–µ—Ç—á–∏–∫ –¥–ª—è –≤–∫–ª–∞–¥–∫–∏
        tabCounters['online'] = document.getElementById('onlineCount'); // –°—á–µ—Ç—á–∏–∫ –¥–ª—è —Å–µ–∫—Ü–∏–∏ "–û–Ω–ª–∞–π–Ω"
        chatSearchToggleBtn = document.getElementById('chatSearchToggleBtn');
        console.log('DOM —ç–ª–µ–º–µ–Ω—Ç—ã –≥–∏–±—Ä–∏–¥–Ω–æ–≥–æ —á–∞—Ç–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
    }


    /**
     * –ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –±—ã—Å—Ç—Ä—ã—Ö —Ä–µ–∞–∫—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ localStorage.
     * –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –Ω–∞–±–æ—Ä.
     * @returns {string[]} –ú–∞—Å—Å–∏–≤ —ç–º–æ–¥–∑–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–π —Ä–µ–∞–∫—Ü–∏–∏.
     */
    function getQuickReactions() {
        try {
            const storedReactions = localStorage.getItem(QUICK_REACTIONS_KEY);
            if (storedReactions) {
                const parsed = JSON.parse(storedReactions);
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –º–∞—Å—Å–∏–≤ —Å—Ç—Ä–æ–∫
                if (Array.isArray(parsed) && parsed.every(item => typeof item === 'string')) {
                    return parsed;
                }
            }
        } catch (e) {
            console.error("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –±—ã—Å—Ç—Ä—ã—Ö —Ä–µ–∞–∫—Ü–∏–π –∏–∑ localStorage:", e);
        }
        // –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞–±–æ—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        return [...DEFAULT_QUICK_REACTIONS];
    }


    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –±—ã—Å—Ç—Ä—ã—Ö —Ä–µ–∞–∫—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
     * –ù–æ–≤—ã–π —ç–º–æ–¥–∑–∏ –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –≤ –Ω–∞—á–∞–ª–æ, —Å—Ç–∞—Ä—ã–π (–µ—Å–ª–∏ –±—ã–ª) —É–¥–∞–ª—è–µ—Ç—Å—è, 
     * –∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç –∏–∑ —Å–ø–∏—Å–∫–∞ —É–¥–∞–ª—è–µ—Ç—Å—è, —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–ª–∏–Ω—É.
     * @param {string} newEmoji - –ù–æ–≤—ã–π —ç–º–æ–¥–∑–∏, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å.
     */
    function updateQuickReactions(newEmoji) {
        let currentReactions = getQuickReactions();
        
        // 1. –£–±–∏—Ä–∞–µ–º —ç—Ç–æ—Ç —ç–º–æ–¥–∑–∏ –∏–∑ —Å–ø–∏—Å–∫–∞, –µ—Å–ª–∏ –æ–Ω —Ç–∞–º —É–∂–µ –±—ã–ª, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–µ–π
        let updatedReactions = currentReactions.filter(e => e !== newEmoji);

        // 2. –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —ç–º–æ–¥–∑–∏ –≤ —Å–∞–º–æ–µ –Ω–∞—á–∞–ª–æ
        updatedReactions.unshift(newEmoji);

        // 3. –û–±—Ä–µ–∑–∞–µ–º –º–∞—Å—Å–∏–≤ –¥–æ 6 —ç–ª–µ–º–µ–Ω—Ç–æ–≤, —É–¥–∞–ª—è—è –ø–æ—Å–ª–µ–¥–Ω–∏–π
        const finalReactions = updatedReactions.slice(0, 6);

        // 4. –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ localStorage
        localStorage.setItem(QUICK_REACTIONS_KEY, JSON.stringify(finalReactions));
    }


 
    function setupEventListeners() {


        // Tab switching
        document.querySelectorAll('.tab-item').forEach(tab => {
            tab.addEventListener('click', (e) => {
                const tabId = e.currentTarget.dataset.tab;
                if (tabId && TABS[tabId]) switchTab(tabId);
            });
        });

        document.getElementById('togglePinnedBtn')?.addEventListener('click', togglePinnedModeView);
        
        // Auth tabs
        document.querySelectorAll('.auth-tab').forEach(tab => {
            tab.addEventListener('click', (e) => switchAuthTab(e.target.dataset.tab));
        });
        
        document.getElementById('loginForm')?.addEventListener('submit', handleLogin);
        document.getElementById('registerForm')?.addEventListener('submit', handleRegister);
        document.getElementById('googleSignInBtn')?.addEventListener('click', signInWithGoogle);
        document.getElementById('forgotPasswordLink')?.addEventListener('click', (e) => {
            e.preventDefault(); // –û—Ç–º–µ–Ω—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏
            showModal('forgotPasswordModal');
        });


        if (chatInput) {
            chatInput.addEventListener('keydown', (e) => {
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ Ctrl+Enter
                if (e.key === 'Enter' && e.ctrlKey) {
                    // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏, –∫–æ—Ç–æ—Ä–æ–µ –º–æ–∂–µ—Ç –ø—Ä–æ–∏–∑–æ–π—Ç–∏
                    e.preventDefault(); 
                    // –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ—Ç–ø—Ä–∞–≤–∫–∏
                    sendMessage();
                }
                // –ï—Å–ª–∏ –Ω–∞–∂–∞—Ç –ø—Ä–æ—Å—Ç–æ Enter (–±–µ–∑ Ctrl), —Ç–æ –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º,
                // –ø–æ–∑–≤–æ–ª—è—è –±—Ä–∞—É–∑–µ—Ä—É –≤—ã–ø–æ–ª–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é - —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É.
            });
            chatInput.addEventListener('input', () => {
                chatInput.style.height = 'auto'; 
                chatInput.style.height = `${Math.min(chatInput.scrollHeight, 150)}px`; 
            });
        }
        
        document.getElementById('sendBtn')?.addEventListener('click', sendMessage);
        document.getElementById('notificationToggle')?.addEventListener('click', toggleNotifications);
        document.getElementById('emojiBtn')?.addEventListener('click', function() { showEmojiPicker(this) });
        document.getElementById('questionBtn')?.addEventListener('click', () => showModal('questionCreateModal'));
        document.getElementById('createChannelBtn')?.addEventListener('click', () => showModal('channelCreateModal'));
        // –í–Ω—É—Ç—Ä–∏ —Ñ—É–Ω–∫—Ü–∏–∏ setupEventListeners() –≤ ChatModule
        document.getElementById('uploadFileBtn')?.addEventListener('click', handleChatFileUploadTrigger);
        document.getElementById('chatFileInput')?.addEventListener('change', handleChatFileSelected);


        // –î–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª–∏–∫–∞ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –≤–∏–¥–∏–º–æ—Å—Ç–∏ –ø–∞—Ä–æ–ª—è
        document.body.addEventListener('click', function(event) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ –∫–ª–∏–∫ –∏–º–µ–Ω–Ω–æ –ø–æ –Ω–∞—à–µ–π –∏–∫–æ–Ω–∫–µ
            const iconContainer = event.target.closest('.toggle-password');
            if (iconContainer) {
                // –ù–∞—Ö–æ–¥–∏–º —Å–æ—Å–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç - –Ω–∞—à–µ –ø–æ–ª–µ –≤–≤–æ–¥–∞
                const passwordInput = iconContainer.previousElementSibling;

                if (passwordInput && passwordInput.type === 'password') {
                    // –ï—Å–ª–∏ –ø–æ–ª–µ —Å–∫—Ä—ã—Ç–æ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º
                    passwordInput.type = 'text';
                    iconContainer.innerHTML = '<i data-lucide="eye-off"></i>';
                } else if (passwordInput && passwordInput.type === 'text') {
                    // –ï—Å–ª–∏ –ø–æ–ª–µ –≤–∏–¥–Ω–æ - —Å–∫—Ä—ã–≤–∞–µ–º
                    passwordInput.type = 'password';
                    iconContainer.innerHTML = '<i data-lucide="eye"></i>';
                }
                // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –Ω–æ–≤—É—é –∏–∫–æ–Ω–∫—É
                if (window.lucide) {
                    lucide.createIcons();
                }
            }
        });


        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–û—Ç–º–µ–Ω–∞" –Ω–∞ –ø–ª–∞—à–∫–µ
        getEl('cancelAiSelectionBtn')?.addEventListener('click', cancelAiSummarySelection);

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –∫–ª–∏–∫–∞ –ø–æ —Å–æ–æ–±—â–µ–Ω–∏—é –≤ —Ä–µ–∂–∏–º–µ –≤—ã–±–æ—Ä–∞
        messageArea.addEventListener('click', handleAiMessageSelection);
        getEl('chatTranslateBtn')?.addEventListener('click', toggleChatTranslation);

        const aiHelperBtn = getEl('aiChatHelperBtn');
        const aiHelperMenu = getEl('aiChatHelperMenu');

        if (aiHelperBtn && aiHelperMenu) {
            aiHelperBtn.addEventListener('click', (e) => {
                e.stopPropagation();
                aiHelperMenu.classList.toggle('hidden');
            });

            aiHelperMenu.addEventListener('click', (e) => {
                e.preventDefault();
                const target = e.target.closest('a');
                if (target && target.dataset.action) {
                    const action = target.dataset.action;
                    aiHelperMenu.classList.add('hidden');
                    
                    if (action === 'summarize-from-selection') {
                        startAiSummarySelection(); // –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–µ–∂–∏–º –≤—ã–±–æ—Ä–∞
                    } else if (action === 'summarize-all') {
                        getAIChatSummary(action);  // –í—ã–∑—ã–≤–∞–µ–º —Å–≤–æ–¥–∫—É –ø–æ –≤—Å–µ–º
                    }
                }
            });

            // –°–∫—Ä—ã–≤–∞–µ–º –º–µ–Ω—é –ø—Ä–∏ –∫–ª–∏–∫–µ –≤ –ª—é–±–æ–º –¥—Ä—É–≥–æ–º –º–µ—Å—Ç–µ
            window.addEventListener('click', () => {
                if (!aiHelperMenu.classList.contains('hidden')) {
                    aiHelperMenu.classList.add('hidden');
                }
            });


        // –ù–û–í–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö –î–õ–Ø –í–°–ï–• –î–ï–ô–°–¢–í–ò–ô –í–ù–£–¢–†–ò –°–û–û–ë–©–ï–ù–ò–ô
        messageArea.addEventListener('click', (event) => {
            const target = event.target;
            const actionTarget = target.closest('[data-action]');
            if (!actionTarget) return;

            const action = actionTarget.dataset.action;
            const messageEl = actionTarget.closest('.message');
            if (!messageEl && !action.includes('question')) return; // –î–ª—è —Å—Å—ã–ª–æ–∫ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã messageEl –º–æ–∂–µ—Ç –Ω–µ –±—ã—Ç—å

            const messageId = messageEl?.id.replace('message-', '');
            const messageText = messageEl?.dataset.rawText || '';
            const authorName = messageEl?.querySelector('.author')?.textContent || _chat('anonymous_user');

            switch (action) {
                case 'reply':
                    startReply(messageId, authorName, messageText);
                    break;
                case 'show-reaction-picker':
                    showReactionPicker(messageId, actionTarget);
                    break;
                case 'toggle-pin':
                    togglePinMessage(messageId);
                    break;
                case 'edit':
                    startEditMessage(messageId, messageText);
                    break;
                case 'delete':
                    deleteMessage(messageId);
                    break;
                case 'toggle-reaction':
                    toggleReaction(messageId, actionTarget.dataset.emoji);
                    break;
                case 'scroll-to':
                    scrollToMessage(actionTarget.dataset.messageId);
                    break;
                case 'navigate-to-question':
                    navigateToQuestion(actionTarget.dataset.questionId, actionTarget.dataset.messageId);
                    break;
                case 'show-file-actions':
                    const isTesting = actionTarget.dataset.isTesting === 'true';
                    showFileActionsModal(actionTarget.dataset.fileId, actionTarget.dataset.fileName, isTesting);
                    break;
                case 'show-results':
                    showTestResults(actionTarget.dataset.fileId, actionTarget.dataset.channelId);
                    break;
            }
        });




        }




        const debouncedSearch = debounce(handleSearch, 300);
        if (searchInput) searchInput.addEventListener('input', debouncedSearch);

        

        const currentUserBtn = document.getElementById('currentUser');
        const userDropdown = document.getElementById('userDropdown');

        if (currentUserBtn && userDropdown) {
            currentUserBtn.addEventListener('click', (event) => {
                event.stopPropagation();
                userDropdown.classList.toggle('hidden');
            });
            window.addEventListener('click', () => {
                if (!userDropdown.classList.contains('hidden')) userDropdown.classList.add('hidden');
            });
            userDropdown.addEventListener('click', (event) => event.stopPropagation());
        }

        const sidebarToggleBtn = document.getElementById('sidebarToggleBtn');
        const sidebarContainer = document.getElementById('sidebarContainer');
        if (sidebarToggleBtn && sidebarContainer) {
            sidebarToggleBtn.addEventListener('click', () => sidebarContainer.classList.toggle('open'));
            sidebarContainer.addEventListener('click', (e) => {
                if (e.target === sidebarContainer) {
                    sidebarContainer.classList.remove('open');
                }
            });
            document.querySelector('.chat-sidebar').addEventListener('click', (e) => {
                 if (e.target.closest('.tab-item') || e.target.closest('.channel-item')) {
                    sidebarContainer.classList.remove('open');
                }
            });
        }
       
        // === –ù–ê–ß–ê–õ–û –ü–ï–†–ï–ú–ï–©–ï–ù–ù–û–ì–û –ö–û–î–ê: –õ–û–ì–ò–ö–ê –ú–û–ë–ò–õ–¨–ù–û–ì–û –ü–û–ò–°–ö–ê ===
        // –ö–ª–∏–∫ –ø–æ –∏–∫–æ–Ω–∫–µ "–ª—É–ø—ã" –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö
        if (chatSearchToggleBtn) {
            chatSearchToggleBtn.addEventListener('click', () => {
                const topBar = chatSearchToggleBtn.closest('.chat-top-bar');
                if (topBar) {
                    topBar.classList.add('search-active');
                    // –°—Ä–∞–∑—É —Å—Ç–∞–≤–∏–º —Ñ–æ–∫—É—Å –Ω–∞ –ø–æ–ª–µ –≤–≤–æ–¥–∞ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
                    searchInput.focus();
                }
            });
        }

        // –ö–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–±–∏—Ä–∞–µ—Ç —Ñ–æ–∫—É—Å —Å –ø–æ–ª—è –≤–≤–æ–¥–∞ (–∫–ª–∏–∫–∞–µ—Ç –≤ –¥—Ä—É–≥–æ–µ –º–µ—Å—Ç–æ)
        if (searchInput) {
            searchInput.addEventListener('blur', () => {
                const topBar = searchInput.closest('.chat-top-bar');
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–µ–∫—Å—Ç –≤ –ø–æ–ª–µ. –ï—Å–ª–∏ –µ—Å—Ç—å, –Ω–µ —Å–∫—Ä—ã–≤–∞–µ–º.
                if (topBar && searchInput.value.trim() === '') {
                    topBar.classList.remove('search-active');
                }
            });
        }
        // === –ö–û–ù–ï–¶ –ü–ï–†–ï–ú–ï–©–ï–ù–ù–û–ì–û –ö–û–î–ê ===

        const channelSearchInput = document.getElementById('channelSearchInput');
        if (channelSearchInput) {
            
            // –°–æ–∑–¥–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫
            const handleChannelSearch = (event) => {
                const query = event.target.value.toLowerCase().trim();
                const channels = document.querySelectorAll('#channelsList .channel-item');
                
                channels.forEach(channel => {
                    const channelName = channel.textContent.toLowerCase();
                    if (channelName.includes(query)) {
                        channel.style.display = 'flex'; // –ò—Å–ø–æ–ª—å–∑—É–µ–º flex, —Ç.–∫. —É .channel-item —Ç–∞–∫–æ–π display
                    } else {
                        channel.style.display = 'none';
                    }
                });
            };

            // –ü—Ä–∏–º–µ–Ω—è–µ–º debounce, —á—Ç–æ–±—ã –ø–æ–∏—Å–∫ –Ω–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–ª –Ω–∞ –∫–∞–∂–¥—É—é –±—É–∫–≤—É
            const debouncedChannelSearch = debounce(handleChannelSearch, 250);
            channelSearchInput.addEventListener('input', debouncedChannelSearch);

        }
        
        console.log('Event listeners –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
    } 

    
    function setupAuthStateListener() {
        if (!auth) return;
        
        auth.onAuthStateChanged(user => {
            currentUser = user;
            updateUserUI();

            if (user) {
                console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω:', user.displayName || user.email);
                
                // --- –ù–ê–ß–ê–õ–û –ò–ó–ú–ï–ù–ï–ù–ò–ô ---
                setupPrivateLegendsListener(user); // –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–π —Å–ª—É—à–∞—Ç–µ–ª—å –¥–ª—è –ª–µ–≥–µ–Ω–¥
                // --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–ô ---

                mainApp.migrateLocalChatsToFirebase().then(() => {
                    const savedUnlocked = localStorage.getItem(`unlockedChannels_${user.uid}`);
                    if (savedUnlocked) {
                        unlockedChannels = new Set(JSON.parse(savedUnlocked));
                    }

                    initializeUnreadListeners(); 
                    setupPresenceSystem();
                    fetchAllUsers();
                    loadChannels();
                    loadPrivateChats();
                    loadTabData(currentTab);
                    initializeDataListeners();
                    if (window.mainApp) {
                        window.mainApp.loadPublicAudiences();
                    }
                    mainApp.loadAIChatsFromStorage(); 
                });

            } else {
                console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
                clearChatData();
                cleanupPresenceSystem();
                // --- –ù–ê–ß–ê–õ–û –ò–ó–ú–ï–ù–ï–ù–ò–ô ---
                cleanupPrivateLegendsListener(); // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–ª—É—à–∞—Ç–µ–ª—å –ª–µ–≥–µ–Ω–¥ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ
                // --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–ô ---
            }
        });
    }
    /**
     * –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç real-time —Å–ª—É—à–∞—Ç–µ–ª—å –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ª–µ–≥–µ–Ω–¥ –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö —á–∞—Ç–æ–≤. –¢–∞–∫–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—É—é –º–∏–≥—Ä–∞—Ü–∏—é
     * –∏–∑ localStorage –≤ Firestore.
     * @param {object} user - –û–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Firebase.
     */
    function setupPrivateLegendsListener(user) {
        if (!db || !user) return;
        
        // –û—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è –æ—Ç —Å—Ç–∞—Ä–æ–≥–æ —Å–ª—É—à–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω –±—ã–ª
        if (privateLegendsListener) privateLegendsListener();

        const userDocRef = db.collection('users').doc(user.uid);
        let isFirstLoad = true; // –§–ª–∞–≥ –¥–ª—è –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏

        privateLegendsListener = userDocRef.onSnapshot(async (doc) => {
            if (doc.exists) {
                const userData = doc.data();
                currentPrivateLegends = userData.aiChatLegends || {};
                
                // –û–¥–Ω–æ—Ä–∞–∑–æ–≤–∞—è –º–∏–≥—Ä–∞—Ü–∏—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö
                if (isFirstLoad) {
                    isFirstLoad = false;
                    const localLegends = JSON.parse(localStorage.getItem(AI_LEGENDS_STORAGE_KEY)) || {};
                    
                    // –ú–∏–≥—Ä–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤ localStorage —á—Ç–æ-—Ç–æ –µ—Å—Ç—å
                    if (Object.keys(localLegends).length > 0) {
                        console.log("–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ª–æ–∫–∞–ª—å–Ω—ã–µ –ª–µ–≥–µ–Ω–¥—ã. –ù–∞—á–∏–Ω–∞—é –º–∏–≥—Ä–∞—Ü–∏—é –≤ Firestore...");
                        // –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ, –æ–±–ª–∞—á–Ω—ã–µ –∏–º–µ—é—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
                        const mergedLegends = { ...localLegends, ...currentPrivateLegends };
                        
                        try {
                            await userDocRef.update({ aiChatLegends: mergedLegends });
                            // –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏ –æ—á–∏—â–∞–µ–º localStorage
                            localStorage.removeItem(AI_LEGENDS_STORAGE_KEY);
                            currentPrivateLegends = mergedLegends; // –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
                            console.log("–ú–∏–≥—Ä–∞—Ü–∏—è –ª–µ–≥–µ–Ω–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, localStorage –æ—á–∏—â–µ–Ω.");
                        } catch (error) {
                            console.error("–û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ –ª–µ–≥–µ–Ω–¥:", error);
                        }
                    }
                }
                
                // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –ª–µ–≥–µ–Ω–¥—É, –µ—Å–ª–∏ —á–∞—Ç –æ—Ç–∫—Ä—ã—Ç
                if (aiChatModal && !aiChatModal.classList.contains('hidden')) {
                    renderColorLegends();
                }
            }
        }, error => {
            console.error("–û—à–∏–±–∫–∞ —Å–ª—É—à–∞—Ç–µ–ª—è –ª–µ–≥–µ–Ω–¥:", error);
        });
    }

    /**
     * –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –û—Ç–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –æ—Ç —Å–ª—É—à–∞—Ç–µ–ª—è –ª–µ–≥–µ–Ω–¥ –∏ –æ—á–∏—â–∞–µ—Ç –∫—ç—à.
     */
    function cleanupPrivateLegendsListener() {
        if (privateLegendsListener) {
            privateLegendsListener();
            privateLegendsListener = null;
        }
        currentPrivateLegends = {};
        console.log("–°–ª—É—à–∞—Ç–µ–ª—å –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö –ª–µ–≥–µ–Ω–¥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.");
    }

    let globalMessagesListener = null; // –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –Ω–∞—à–µ–≥–æ –Ω–æ–≤–æ–≥–æ —Å–ª—É—à–∞—Ç–µ–ª—è
    let allMessagesByChannel = new Map(); // –ö—ç—à –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π, —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ –∫–∞–Ω–∞–ª–∞–º


    function processUnreadMessage(change) {
        if (change.type === 'added') {
            const messageData = change.doc.data();
            const messageTimestamp = messageData.createdAt?.toDate();

            if (!messageTimestamp || messageTimestamp < listenerInitializationTime) {
                return; // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
            }

            const isUnread = messageData.authorId !== currentUser.uid && (currentChannel !== messageData.channelId || currentTab !== 'messages' || document.hidden);
            
            if (isUnread) {
                const isPrivateMessage = !messageData.memberIds.includes('public');
                const isUnlockedPublicChannel = messageData.memberIds.includes('public') && (messageData.channelId === 'general' || unlockedChannels.has(messageData.channelId));

                if (isPrivateMessage || isUnlockedPublicChannel) {
                    updateUnreadCount(messageData.channelId, 1);

                    // --- –í–û–¢ –û–ù–û, –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï! ---
                    // –ï—Å–ª–∏ –ø—Ä–∏—à–ª–æ –ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –ª–∏—á–Ω—ã—Ö —á–∞—Ç–æ–≤.
                    // –≠—Ç–æ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ —á–∞—Ç –ø–æ—è–≤–∏—Ç—Å—è –≤ —Å–ø–∏—Å–∫–µ, –∏ —Å—á–µ—Ç—á–∏–∫ –Ω–∞ –Ω–µ–º –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—Å—è.
                    if (isPrivateMessage) loadPrivateChats(); 
                }
            }
        }
    }


    function initializeUnreadListeners() {
        if (pmUnreadListener) pmUnreadListener();
        if (publicUnreadListener) publicUnreadListener();
        if (!currentUser) return;

        listenerInitializationTime = new Date();
        console.log("–ó–∞–ø—É—Å–∫ –¥–≤–æ–π–Ω–æ–≥–æ —Å–ª—É—à–∞—Ç–µ–ª—è –¥–ª—è —Å—á–µ—Ç—á–∏–∫–æ–≤ –≤:", listenerInitializationTime);

        // –°–õ–£–®–ê–¢–ï–õ–¨ 1: –¢–æ–ª—å–∫–æ –¥–ª—è –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        pmUnreadListener = db.collection('messages')
            .where('memberIds', 'array-contains', currentUser.uid)
            .orderBy('createdAt', 'desc')
            .limit(10)
            .onSnapshot(snapshot => {
                snapshot.docChanges().forEach(change => processUnreadMessage(change));
            }, error => console.error("–û—à–∏–±–∫–∞ —Å–ª—É—à–∞—Ç–µ–ª—è –õ–°:", error));

        // –°–õ–£–®–ê–¢–ï–õ–¨ 2: –¢–æ–ª—å–∫–æ –¥–ª—è –ø—É–±–ª–∏—á–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤
        publicUnreadListener = db.collection('messages')
            .where('memberIds', 'array-contains', 'public')
            .orderBy('createdAt', 'desc')
            .limit(10)
            .onSnapshot(snapshot => {
                snapshot.docChanges().forEach(change => processUnreadMessage(change));
            }, error => console.error("–û—à–∏–±–∫–∞ —Å–ª—É—à–∞—Ç–µ–ª—è –∫–∞–Ω–∞–ª–æ–≤:", error));
    }




    function updateUserUI() {
        if (currentUserEl) {
            const displayName = currentUser ? (currentUser.displayName || currentUser.email || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å') : '–ì–æ—Å—Ç—å';
            currentUserEl.textContent = displayName;
            console.log('UI –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–æ:', displayName);
        }
    }

// script.js (–≤—Å—Ç–∞–≤–∏—Ç—å –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é –≤ ChatModule)

    /**
     * –ù–∞—Ö–æ–¥–∏—Ç –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–µ–∫—É—â–µ–º DOM –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –µ–≥–æ –∏–º—è.
     * @param {string} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—å–µ –∏–º—è –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å.
     * @param {string} newName - –ù–æ–≤–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
     */
    function updateAuthorNameInView(userId, newName) {
        if (!messageArea || !userId || !newName) return;
        
        // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –º—ã –ø–æ–º–µ—Ç–∏–ª–∏ –Ω–∞—à–∏–º data-–∞—Ç—Ä–∏–±—É—Ç–æ–º
        const userMessages = messageArea.querySelectorAll(`.message[data-author-id="${userId}"]`);
        
        userMessages.forEach(msgElement => {
            // –í –∫–∞–∂–¥–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –Ω–∞—Ö–æ–¥–∏–º —ç–ª–µ–º–µ–Ω—Ç —Å –∏–º–µ–Ω–µ–º –∞–≤—Ç–æ—Ä–∞
            const authorEl = msgElement.querySelector('.author');
            if (authorEl) {
                // –ò –ø—Ä–æ—Å—Ç–æ –º–µ–Ω—è–µ–º –µ–≥–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
                authorEl.textContent = newName;
            }
        });
        console.log(`–û–±–Ω–æ–≤–ª–µ–Ω–æ –∏–º—è –¥–ª—è ${userMessages.length} —Å–æ–æ–±—â–µ–Ω–∏–π –≤ DOM.`);
    }

    
    // ========== AUTHENTICATION ==========
    function switchAuthTab(tabType) {
        document.querySelectorAll('.auth-tab').forEach(tab => tab.classList.remove('active'));
        document.querySelector(`[data-tab="${tabType}"]`).classList.add('active');
        document.querySelectorAll('.auth-form').forEach(form => form.classList.remove('active'));
        document.getElementById(`${tabType}Form`).classList.add('active');
    }

    async function handleLogin(e) {
        e.preventDefault();
        if (!auth) { showError('–°–∏—Å—Ç–µ–º–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞'); return; }
        const loginIdentifier = document.getElementById('loginUsername').value.trim();
        const password = document.getElementById('loginPassword').value;
        if (!loginIdentifier || !password) { showError('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è'); return; }
        
        try {
            let email;
            if (loginIdentifier.includes('@')) {
                email = loginIdentifier;
            } else {
                const querySnapshot = await db.collection('users').where('username', '==', loginIdentifier).limit(1).get();
                if (querySnapshot.empty) throw { code: 'auth/user-not-found' }; 
                email = querySnapshot.docs[0].data().email;
            }
            await auth.signInWithEmailAndPassword(email, password);
            ChatModule.closeAuthModal();
            if (openChatAfterAuth) {
                openChatAfterAuth = false; // –û–ø—É—Å–∫–∞–µ–º —Ñ–ª–∞–∂–æ–∫
                ChatModule.openChatModal(); // –û—Ç–∫—Ä—ã–≤–∞–µ–º —á–∞—Ç
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞:', error);
            showError(getErrorMessage(error.code));
        }
    }
    


    async function handleRegister(e) {
        e.preventDefault();
        if (!auth) { showError('–°–∏—Å—Ç–µ–º–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞'); return; }
        const username = document.getElementById('registerUsername').value.trim();
        const email = document.getElementById('registerEmail').value.trim();
        const password = document.getElementById('registerPassword').value;
        const passwordConfirm = document.getElementById('registerPasswordConfirm').value; // <-- –ù–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞

        if (!username || !email || !password || !passwordConfirm) { // <-- –ò–∑–º–µ–Ω–µ–Ω–æ
            showError(_chat('fill_all_fields')); 
            return; 
        }
        if (password.length < 6) { 
            showError('–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤'); 
            return; 
        }
        if (password !== passwordConfirm) { // <-- –ù–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
            showError('–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç!');
            return;
        }

        try {
            const userCredential = await auth.createUserWithEmailAndPassword(email, password);
            const user = userCredential.user;
            await user.updateProfile({ displayName: username });
            await db.collection('users').doc(user.uid).set({
                username: username,
                email: email,
                uid: user.uid,
                privateChatPartners: [], // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ –¥–ª—è –õ–°
                createdAt: firebase.firestore.FieldValue.serverTimestamp()
            });
            ChatModule.closeAuthModal();

            if (openChatAfterAuth) {
                openChatAfterAuth = false; // –û–ø—É—Å–∫–∞–µ–º —Ñ–ª–∞–∂–æ–∫
                ChatModule.openChatModal(); // –û—Ç–∫—Ä—ã–≤–∞–µ–º —á–∞—Ç
            }

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error);
            showError(getErrorMessage(error.code));
        }
    }



    function getErrorMessage(errorCode) {
        const errorKeys = {
            'auth/user-not-found': 'error_user_not_found',
            'auth/wrong-password': 'error_wrong_password',
            'auth/email-already-in-use': 'error_email_in_use',
            'auth/weak-password': 'error_weak_password',
            'auth/invalid-email': 'error_invalid_email',
            'auth/too-many-requests': 'error_too_many_requests'
        };
        const key = errorKeys[errorCode] || 'error_generic';
        return _chat(key); // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏—Å—Ç–µ–º—É –ø–µ—Ä–µ–≤–æ–¥–æ–≤
    }
    function showError(message) { alert(message); }
    
    // ========== TAB SWITCHING ==========
    function switchTab(tabId) {
        if (!TABS[tabId] || tabId === currentTab) return; // –ù–µ –¥–µ–ª–∞–µ–º –Ω–∏—á–µ–≥–æ, –µ—Å–ª–∏ –∫–ª–∏–∫–Ω—É–ª–∏ –Ω–∞ –∞–∫—Ç–∏–≤–Ω—É—é –≤–∫–ª–∞–¥–∫—É

        // --- –ù–û–í–´–ô –ë–õ–û–ö –û–ß–ò–°–¢–ö–ò ---
        // –ü–µ—Ä–µ–¥ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ–º, –æ—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è –æ—Ç —Å–ª—É—à–∞—Ç–µ–ª—è –°–¢–ê–†–û–ô –≤–∫–ª–∞–¥–∫–∏
        if (currentTab === 'questions' && questionsListener) {
            questionsListener(); // –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Ç–ø–∏—Å–∫–∏
            questionsListener = null; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
        }
        if (currentTab === 'favorites' && favoritesListener) {
            favoritesListener(); // –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Ç–ø–∏—Å–∫–∏
            favoritesListener = null; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
        }
        // --- –ö–û–ù–ï–¶ –ù–û–í–û–ì–û –ë–õ–û–ö–ê ---

        currentTab = tabId;

        // –ï—Å–ª–∏ –º—ã –ø–µ—Ä–µ–∫–ª—é—á–∏–ª–∏—Å—å –Ω–∞ –≤–∫–ª–∞–¥–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –¥–ª—è –¢–ï–ö–£–©–ï–ì–û –∫–∞–Ω–∞–ª–∞
        if (tabId === 'messages') {

        }

        document.querySelectorAll('.tab-item').forEach(tab => tab.classList.remove('active'));
        document.querySelector(`[data-tab="${tabId}"]`).classList.add('active');
        document.getElementById('chatHeaderTitle').textContent = _chat(TABS[tabId].langKey);
        loadTabData(tabId);
    }
    
    // === –ò–ó–ú–ï–ù–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –ó–ê–ì–†–£–ó–ö–ò –í–ö–õ–ê–î–û–ö ===
    function loadTabData(tabId) {
        if (!currentUser || !db) return;
        
        const tabActionsContainer = document.getElementById('tabActionsContainer');
        tabActionsContainer.innerHTML = ''; 
        tabActionsContainer.classList.add('hidden');
    
        messageArea.classList.remove('user-list-mode');
        document.querySelector('.chat-input-area').style.display = 'flex';
    
        switch (tabId) {
            case 'messages':
                loadMessages();
                break;
            case 'questions':
                setupTabActions('questions'); // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏
                loadQuestions();
                break;
            case 'favorites':
                setupTabActions('favorites'); // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏
                loadFavorites();
                break;
            case 'users':
                loadUsers();
                break;
        }
    }
    
    // ========== DATA LOADING & DISPLAY ==========

    async function fetchAllUsers() {
        try {
            const snapshot = await db.collection('users').get();
            snapshot.forEach(doc => {
                allUsers.set(doc.id, doc.data());
            });
            updateTabCounter('users', allUsers.size); // <--- –î–û–ë–ê–í–¨–¢–ï –≠–¢–£ –°–¢–†–û–ö–£
            console.log(`–ó–∞–≥—Ä—É–∂–µ–Ω–æ ${allUsers.size} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.`);
        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:", error);
        }
    }

    
    function loadUsers() {
        if (!messageArea) return;
        messageArea.innerHTML = '';
        messageArea.classList.add('user-list-mode');
        document.querySelector('.chat-input-area').style.display = 'none';

        if (allUsers.size === 0) {
            messageArea.innerHTML = '<div class="empty-state">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.</div>';
            return;
        }

        const userListEl = document.createElement('div');
        userListEl.className = 'user-list-container';
        
        allUsers.forEach(user => {
            if (user.uid === currentUser.uid) return; // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å–µ–±—è –≤ —Å–ø–∏—Å–∫–µ
            const isOnline = onlineUsers.has(user.uid);
            
            const userEl = document.createElement('div');
            userEl.className = 'user-list-item';
            // –û–°–ù–û–í–ù–û–ô –ö–õ–ò–ö –ü–û –ö–ê–†–¢–û–ß–ö–ï –ø–æ-–ø—Ä–µ–∂–Ω–µ–º—É –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
            userEl.onclick = () => showUserActions(user.uid, user.username, user.email);
            
            // --- –ò–ó–ú–ï–ù–ï–ù–ò–Ø –ó–î–ï–°–¨ ---
            // –¢–µ–ø–µ—Ä—å —É –∫–Ω–æ–ø–æ–∫ –µ—Å—Ç—å —Å–≤–æ–∏ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ onclick, –∫–æ—Ç–æ—Ä—ã–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é—Ç "–≤—Å–ø–ª—ã—Ç–∏–µ" —Å–æ–±—ã—Ç–∏—è
            userEl.innerHTML = `
                <div class="user-list-avatar">
                    <span class="status-indicator ${isOnline ? 'online' : ''}"></span>
                    ${escapeHTML(user.username.charAt(0).toUpperCase())}
                </div>
                <div class="user-list-info">
                    <div class="username">${escapeHTML(user.username)}</div>
                    <div class="email">${escapeHTML(user.email)}</div>
                </div>
                <div class="user-list-actions">
                    <button class="action-btn chat" title="–ù–∞–ø–∏—Å–∞—Ç—å –≤ —á–∞—Ç–µ" onclick="event.stopPropagation(); ChatModule.startPrivateChat('${user.uid}', '${escapeHTML(user.username)}')">üí¨</button>
                    <button class="action-btn mail" title="–ù–∞–ø–∏—Å–∞—Ç—å –Ω–∞ Email" onclick="event.stopPropagation(); window.location.href='mailto:${user.email}'">‚úâÔ∏è</button>
                </div>
            `;
            userListEl.appendChild(userEl);
        });

        messageArea.appendChild(userListEl);
        updateTabCounter('users', allUsers.size);
    }

    /**
     * –£–ø—Ä–∞–≤–ª—è–µ—Ç —Å—á–µ—Ç—á–∏–∫–∞–º–∏ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.
     * @param {string} channelId - ID –∫–∞–Ω–∞–ª–∞, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –º–µ–Ω—è–µ—Ç—Å—è —Å—á–µ—Ç—á–∏–∫.
     * @param {number} change - –ò–∑–º–µ–Ω–µ–Ω–∏–µ (+1, 0 –¥–ª—è —Å–±—Ä–æ—Å–∞).
     */
    function updateUnreadCount(channelId, change) {
        const currentCount = unreadCounts.get(channelId) || 0;
        // –ï—Å–ª–∏ change = 0, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫. –ò–Ω–∞—á–µ - —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º.
        const newCount = change === 0 ? 0 : currentCount + change;
        unreadCounts.set(channelId, newCount);

        // –û–±–Ω–æ–≤–ª—è–µ–º UI –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞
        const channelCounter = document.querySelector(`.channel-item[data-channel-id="${channelId}"] .unread-channel-badge`);
        if (channelCounter) {
            if (newCount > 0) {
                channelCounter.textContent = newCount;
                channelCounter.classList.remove('hidden');
            } else {
                channelCounter.classList.add('hidden');
            }
        }

        // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–∏–π —Å—á–µ—Ç—á–∏–∫ –Ω–∞ –≤–∫–ª–∞–¥–∫–µ "–°–æ–æ–±—â–µ–Ω–∏—è"
        let totalUnread = 0;
        unreadCounts.forEach(count => totalUnread += count);
        updateTabCounter('messages', totalUnread);
    }


    function loadMessages() {
        if (!db || !currentUser) return;

        // –û—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è –æ—Ç —Å—Ç–∞—Ä–æ–≥–æ —Å–ª—É—à–∞—Ç–µ–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π, –µ—Å–ª–∏ –æ–Ω –±—ã–ª
        if (messagesListener) {
            messagesListener();
        }

        messageArea.innerHTML = `<div class="empty-state">${_chat('loading_messages')}</div>`;

        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Å–ª—É—à–∞—Ç–µ–ª—å –¢–û–õ–¨–ö–û –î–õ–Ø –¢–ï–ö–£–©–ï–ì–û –ö–ê–ù–ê–õ–ê
        messagesListener = db.collection('messages')
            .where('channelId', '==', currentChannel)
            .orderBy('createdAt', 'asc')
            .onSnapshot(snapshot => {
                // –≠—Ç–æ—Ç –∫–æ–¥ –±—É–¥–µ—Ç –ø–æ–ª—É—á–∞—Ç—å –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è (–Ω–æ–≤—ã–µ, –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–µ, —É–¥–∞–ª–µ–Ω–Ω—ã–µ)
                // –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —á–∞—Ç–∞ –∏ –º–≥–Ω–æ–≤–µ–Ω–Ω–æ –∏—Ö –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å.
                
                allMessages = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
                displayMessages(); // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º —á–∞—Ç —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏

            }, error => {
                console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π:', error);
                messageArea.innerHTML = `<div class="empty-state">${_chat('loading_error')}</div>`;
            });
    }




 
    function updateUnreadCount(channelId, change, isReset = false) {
        const currentCount = unreadCounts.get(channelId) || 0;
        // –ï—Å–ª–∏ isReset = true, –æ–±–Ω—É–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫. –ò–Ω–∞—á–µ - —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º.
        const newCount = isReset ? 0 : currentCount + change;
        unreadCounts.set(channelId, newCount);

        // –û–±–Ω–æ–≤–ª—è–µ–º UI –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞
        const channelCounter = document.querySelector(`.channel-item[data-channel-id="${channelId}"] .unread-channel-badge`);
        if (channelCounter) {
            if (newCount > 0) {
                channelCounter.textContent = newCount;
                channelCounter.classList.remove('hidden');
            } else {
                channelCounter.classList.add('hidden');
            }
        }

        // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–∏–π —Å—á–µ—Ç—á–∏–∫ –Ω–∞ –≤–∫–ª–∞–¥–∫–µ "–°–æ–æ–±—â–µ–Ω–∏—è"
        let totalUnread = 0;
        unreadCounts.forEach(count => totalUnread += count);
        updateTabCounter('messages', totalUnread);
    }




    function displayMessages() {
        if (!messageArea) return;
        messageArea.innerHTML = '';
        const messagesToDisplay = isPinnedMode ? allMessages.filter(msg => msg.isPinned) : allMessages;

        if (messagesToDisplay.length === 0) {
            const emptyStateKey = isPinnedMode ? 'pinned_messages_empty' : 'messages_empty';
            messageArea.innerHTML = `<div class="empty-state">${_chat(emptyStateKey)}</div>`;
            return;
        }
        
        messagesToDisplay.forEach(message => messageArea.appendChild(createMessageElement(message)));
        
        messageArea.style.scrollBehavior = 'auto';
        scrollToBottom();
        if (window.lucide) lucide.createIcons();
        setTimeout(() => { messageArea.style.scrollBehavior = 'smooth'; }, 100);

        // --- –ù–ê–ß–ê–õ–û –ù–û–í–û–ô "–£–ú–ù–û–ô" –õ–û–ì–ò–ö–ò ---
        if (lastMessageObserver) {
            lastMessageObserver.disconnect();
        }
        const lastMessageElement = messageArea.lastElementChild;
        const unreadCountForChannel = unreadCounts.get(currentChannel) || 0;
        if (lastMessageElement && unreadCountForChannel > 0) {
            lastMessageObserver = new IntersectionObserver((entries, observer) => {
                entries.forEach(entry => {
                    if (entry.isIntersecting) {
                        updateUnreadCount(currentChannel, 0, true);
                        console.log(`–°—á–µ—Ç—á–∏–∫ –¥–ª—è –∫–∞–Ω–∞–ª–∞ ${currentChannel} –æ–±–Ω—É–ª–µ–Ω, —Ç.–∫. –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–≤–∏–¥–µ–ª –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.`);
                        observer.disconnect();
                    }
                });
            }, { threshold: 0.8 });
            lastMessageObserver.observe(lastMessageElement);
        }
    }

    
    function loadQuestions() {
        if (!db || !currentUser) return;
        
        // –û—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è –æ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–ª—É—à–∞—Ç–µ–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤, –µ—Å–ª–∏ –æ–Ω –±—ã–ª
        if (questionsListener) {
            questionsListener();
        }

        try {
            // –ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –Ω–æ–≤–æ–≥–æ —Å–ª—É—à–∞—Ç–µ–ª—è –Ω–∞—à–µ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
            questionsListener = db.collection('questions')
                .where('channelId', '==', currentChannel)
                .orderBy('createdAt', 'desc')
                .limit(20)
                .onSnapshot(snapshot => {
                    const questions = [];
                    snapshot.forEach(doc => {
                        questions.push({ id: doc.id, ...doc.data() });
                    });
                    
                    displayQuestions(questions);

                    // –ü–†–û–í–ï–†–Ø–ï–ú, –ù–£–ñ–ù–û –õ–ò –ü–û–î–°–í–ï–¢–ò–¢–¨ –í–û–ü–†–û–°
                    if (questionToHighlight) {
                        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É, —á—Ç–æ–±—ã DOM —É—Å–ø–µ–ª –æ–±–Ω–æ–≤–∏—Ç—å—Å—è
                        setTimeout(() => {
                            highlightAndScrollToQuestion(questionToHighlight);
                            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é, —á—Ç–æ–±—ã –Ω–µ –ø–æ–¥—Å–≤–µ—á–∏–≤–∞—Ç—å —Å–Ω–æ–≤–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —á–∞—Ç–∞
                            questionToHighlight = null; 
                        }, 100);
                    }

                }, error => {
                    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–æ–ø—Ä–æ—Å–æ–≤:', error);
                });
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –∫–æ–ª–ª–µ–∫—Ü–∏–µ–π –≤–æ–ø—Ä–æ—Å–æ–≤:', error);
        }
    }


    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –µ–µ –¥–∞–≤–Ω–æ—Å—Ç–∏.
     * @param {firebase.firestore.Timestamp} fbTimestamp - –í—Ä–µ–º–µ–Ω–Ω–∞—è –º–µ—Ç–∫–∞ –∏–∑ Firebase.
     * @returns {string} - –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ (–Ω–∞–ø—Ä., "14:30", "–í—á–µ—Ä–∞, 14:30").
     */
    function formatSmartTimestamp(fbTimestamp) {
        if (!fbTimestamp || typeof fbTimestamp.toDate !== 'function') {
            return ''; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ—Ç—É, –µ—Å–ª–∏ –º–µ—Ç–∫–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞
        }
        
        const now = new Date();
        const msgDate = fbTimestamp.toDate();

        const timeString = msgDate.toLocaleTimeString(currentChatLang, {
            hour: '2-digit',
            minute: '2-digit'
        });

        // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–æ –¥–∞—Ç–µ, –±–µ–∑ –≤—Ä–µ–º–µ–Ω–∏
        const isToday = now.toDateString() === msgDate.toDateString();
        
        const yesterday = new Date();
        yesterday.setDate(now.getDate() - 1);
        const isYesterday = yesterday.toDateString() === msgDate.toDateString();

        const isThisYear = now.getFullYear() === msgDate.getFullYear();

        if (isToday) {
            return timeString;
        } else if (isYesterday) {
            return `${_chat('smart_timestamp_yesterday')}, ${timeString}`;
        } else if (isThisYear) {
            const datePart = msgDate.toLocaleDateString(currentChatLang, {
                month: 'long',
                day: 'numeric'
            });
            return `${datePart}, ${timeString}`;
        } else {
            const fullDatePart = msgDate.toLocaleDateString(currentChatLang, {
                year: 'numeric',
                month: 'long',
                day: 'numeric'
            });
            return `${fullDatePart}, ${timeString}`;
        }
    }




    /**
     * –°–æ–∑–¥–∞–µ—Ç DOM-—ç–ª–µ–º–µ–Ω—Ç –¥–ª—è –æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑—É—è <template> –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.
     * –í–ï–†–°–ò–Ø 4.0: –ü–æ–ª–Ω—ã–π —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ —Å —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ–º –ª–æ–≥–∏–∫–∏.
     * @param {object} message - –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö Firebase.
     * @returns {HTMLElement} - –ì–æ—Ç–æ–≤—ã–π –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –≤ DOM —ç–ª–µ–º–µ–Ω—Ç —Å–æ–æ–±—â–µ–Ω–∏—è.
     */
    function createMessageElement(message) {
        // 1. –ö–ª–æ–Ω–∏—Ä—É–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∏–∑ —à–∞–±–ª–æ–Ω–∞
        const template = getEl('messageTemplate');
        const messageClone = template.content.cloneNode(true);
        const messageEl = messageClone.querySelector('.message');

        // 2. –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–æ—Ä–Ω–µ–≤–æ–π —ç–ª–µ–º–µ–Ω—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        messageEl.id = `message-${message.id}`;
        messageEl.className = `message ${message.authorId === currentUser?.uid ? 'mine' : 'other'}`;
        if (message.authorId) messageEl.dataset.authorId = message.authorId;
        if (message.isPinned) messageEl.classList.add('pinned');
        messageEl.dataset.rawText = message.text || ''; // –°–æ—Ö—Ä–∞–Ω—è–µ–º "—Å—ã—Ä–æ–π" —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

        // 3. –ó–∞–ø–æ–ª–Ω—è–µ–º —à–∞–ø–∫—É: –∞–≤—Ç–æ—Ä –∏ –≤—Ä–µ–º—è
        const timestamp = message.createdAt;
        const fullTimeTitle = timestamp?.toDate?.().toLocaleString(currentChatLang, {year: 'numeric', month: 'long', day: 'numeric', hour: '2-digit', minute: '2-digit'}) || '';
        
        messageEl.querySelector('.author').textContent = message.authorName || _chat('anonymous_user');
        const timestampEl = messageEl.querySelector('.timestamp');
        timestampEl.textContent = formatSmartTimestamp(timestamp);
        timestampEl.title = fullTimeTitle;

        // 4. –î–æ–±–∞–≤–ª—è–µ–º –±–ª–æ–∫ "–æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ", –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        if (message.replyTo) {
            const replyContainer = messageEl.querySelector('.reply-context-container');
            const replyEl = document.createElement('div');
            replyEl.className = 'reply-context';
            replyEl.dataset.action = 'scroll-to';
            replyEl.dataset.messageId = message.replyTo.messageId;
            replyEl.innerHTML = `
                <div class="reply-author">${escapeHTML(message.replyTo.authorName || '')}</div>
                <div class="reply-text">${escapeHTML(message.replyTo.textSnippet || '')}</div>
            `;
            replyContainer.appendChild(replyEl);
        }      
        // 5. –ó–∞–ø–æ–ª–Ω—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        const contentContainer = messageEl.querySelector('.message-main-content');
        switch (message.type) {
            case 'file_share': {
                messageEl.classList.add('file-share-bubble');
                const fileInfo = message.fileInfo;
                const isPdf = fileInfo.type === 'pdf' || fileInfo.name.toLowerCase().endsWith('.pdf');
                
                let fileDetailsHTML = '';
                if (isPdf) {
                    fileDetailsHTML = `<div class="file-share-info">PDF –¥–æ–∫—É–º–µ–Ω—Ç</div>`;
                } else {
                    const qCount = fileInfo.questions;
                    const qText = qCount === 1 ? _chat('file_share_question_1') : (qCount >= 2 && qCount <= 4 ? _chat('file_share_question_2_4') : _chat('file_share_question_5_more'));
                    fileDetailsHTML = `<div class="file-share-info">${qCount} ${qText}</div>`;
                }

                const currentChannelData = channels.find(c => c.id === currentChannel);
                const isTestingChannel = currentChannelData && currentChannelData.isForTesting;

                contentContainer.innerHTML = `
                    <div class="file-share-content" data-action="show-file-actions" data-file-id="${fileInfo.id}" data-file-name="${escape(fileInfo.name)}" data-is-testing="${isTestingChannel}">
                        <div class="file-share-icon">${isPdf ? '<i data-lucide="file-text"></i>' : '<i data-lucide="file-question"></i>'}</div>
                        <div class="file-share-details">
                            <div class="file-share-name">${escapeHTML(fileInfo.name)}</div>
                            ${fileDetailsHTML}
                        </div>
                        <div class="file-share-arrow"><i data-lucide="arrow-right"></i></div>
                    </div>
                    ${isTestingChannel && !isPdf ? `<div class="test-results-action"><button class="results-btn" data-action="show-results" data-file-id="${fileInfo.id}" data-channel-id="${message.channelId}">${_chat('results_button')}</button></div>` : ''}
                `;
                break;
            }
            case 'question_link':
                messageEl.classList.add('question-link-bubble');
                contentContainer.innerHTML = `
                    <div class="question-link-content" data-action="navigate-to-question" data-question-id="${message.questionId}" data-message-id="${message.id}">
                        <span class="question-link-icon"><i data-lucide="help-circle"></i></span>
                        <div class="question-link-text"><strong>${_chat('new_question_notification')}</strong><p>${escapeHTML(message.text.substring(0, 80))}...</p></div>
                        <span class="question-link-arrow"><i data-lucide="arrow-right"></i></span>
                    </div>
                `;
                break;

            default: // –û–±—ã—á–Ω–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                const contentDiv = document.createElement('div');
                contentDiv.className = 'message-content';

                let messageText = message.text || '';
                if (isChatTranslateModeEnabled && message.text) {
                    const lang = localStorage.getItem('appLanguage') || 'ru';
                    const cacheKey = getChatCacheKey(message.id, lang);
                    if (chatTranslations.has(cacheKey)) {
                        messageText = chatTranslations.get(cacheKey);
                    } else {
                        fetchAndCacheTranslation(message);
                        contentDiv.classList.add('translating');
                    }
                }
                
                const editedIndicator = message.editedAt ? `<span class="edited-indicator">${_chat('edited_indicator')}</span>` : '';
                const pinnedIcon = message.isPinned ? `<span class="pinned-icon" title="–ó–∞–∫—Ä–µ–ø–ª–µ–Ω–æ"><i data-lucide="pin" style="width:12px; height:12px;"></i></span>` : '';
                contentDiv.innerHTML = `${pinnedIcon} ${escapeHTML(messageText.trim())} ${editedIndicator}`;
                contentContainer.appendChild(contentDiv);
                break;
        }

        // 6. –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∞–∫—Ü–∏–∏
        const reactionsContainer = messageEl.querySelector('.reactions-container');
        if (message.reactions) {
            Object.entries(message.reactions).forEach(([emoji, userIds]) => {
                if (userIds && userIds.length > 0) {
                    const reactionBtn = document.createElement('button');
                    reactionBtn.className = `reaction-badge ${userIds.includes(currentUser.uid) ? 'mine' : ''}`;
                    reactionBtn.dataset.action = 'toggle-reaction';
                    reactionBtn.dataset.emoji = emoji;
                    reactionBtn.textContent = `${emoji} ${userIds.length}`;
                    reactionsContainer.appendChild(reactionBtn);
                }
            });
        }

        // 7. –§–æ—Ä–º–∏—Ä—É–µ–º –∏ –≤—Å—Ç–∞–≤–ª—è–µ–º –ø–∞–Ω–µ–ª—å –¥–µ–π—Å—Ç–≤–∏–π (–ò–ó–ú–ï–ù–ï–ù–û)
        const actionsToolbar = messageEl.querySelector('.message-actions-toolbar');
        let actionsHTML = `
            <button title="${_chat('tooltip_reply')}" data-action="reply"><i data-lucide="reply"></i></button>
            <button title="${_chat('tooltip_add_reaction')}" data-action="show-reaction-picker"><i data-lucide="smile-plus"></i></button>
            <button title="${message.isPinned ? _chat('tooltip_unpin') : _chat('tooltip_pin')}" data-action="toggle-pin"><i data-lucide="pin"></i></button>
        `;
        const isAdmin = currentUser?.email === 'iverrum@gmail.com';
        
        const isAuthorOrAdmin = message.authorId === currentUser?.uid || isAdmin;

        // –£—Å–ª–æ–≤–∏–µ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å": —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–≤—Ç–æ—Ä–∞ –∏ —Ç–æ–ª—å–∫–æ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.
        if (isAuthorOrAdmin && message.type !== 'question_link' && message.type !== 'file_share') {
            actionsHTML += `<button title="${_chat('tooltip_edit_message')}" data-action="edit"><i data-lucide="pencil"></i></button>`;
        }
        
        // –£—Å–ª–æ–≤–∏–µ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–£–¥–∞–ª–∏—Ç—å": –¥–ª—è –∞–≤—Ç–æ—Ä–∞ –õ–Æ–ë–û–ì–û —Ç–∏–ø–∞ —Å–æ–æ–±—â–µ–Ω–∏—è.
        if (isAuthorOrAdmin) {
            actionsHTML += `<button title="${_chat('tooltip_delete_message')}" data-action="delete"><i data-lucide="trash-2"></i></button>`;
        }
        actionsToolbar.innerHTML = actionsHTML;

        // 8. –õ–æ–≥–∏–∫–∞ –¥–ª—è —Å–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è –¥–ª–∏–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        const contentEl = contentContainer.querySelector('.message-content');
        if (contentEl) {
            setTimeout(() => {
                const MAX_HEIGHT = 250;
                if (contentEl.scrollHeight > MAX_HEIGHT) {
                    contentEl.classList.add('collapsible');
                    const expandBtn = document.createElement('button');
                    expandBtn.className = 'expand-message-btn';
                    expandBtn.textContent = _chat('expand_message');
                    expandBtn.onclick = function() {
                        const isExpanded = contentEl.classList.toggle('expanded');
                        this.textContent = isExpanded ? _chat('collapse_message') : _chat('expand_message');
                    };
                    messageEl.appendChild(expandBtn); // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø–æ—Å–ª–µ –≤—Å–µ—Ö –æ—Å–Ω–æ–≤–Ω—ã—Ö –±–ª–æ–∫–æ–≤
                }
            }, 0);
        }
        
        // 9. –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–æ–±—Ä–∞–Ω–Ω—ã–π DOM-—ç–ª–µ–º–µ–Ω—Ç
        return messageEl;
    }





    // --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª–µ–º ---
    function showProfileModal() {
        if (!currentUser) return;
        document.getElementById('profileDisplayName').value = currentUser.displayName || '';
        document.getElementById('profileEmail').value = currentUser.email || '';
        document.getElementById('profileNewPassword').value = ''; // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –ø–∞—Ä–æ–ª—è
        showModal('profileEditModal');
    }



    async function saveProfile() {
        if (!currentUser) return;

        const newName = document.getElementById('profileDisplayName').value.trim();
        const newPassword = document.getElementById('profileNewPassword').value;

        try {
            const updatePromises = [];

            if (newName && newName !== currentUser.displayName) {
                updatePromises.push(currentUser.updateProfile({ displayName: newName }));
            }

            if (newPassword) {
                if (newPassword.length < 6) {
                    showError(_chat('chat_profile_update_password_error'));
                    return;
                }
                updatePromises.push(currentUser.updatePassword(newPassword));
            }

            await Promise.all(updatePromises);

            // --- –ò–ó–ú–ï–ù–ï–ù–ò–ï –ó–î–ï–°–¨ ---
            window.mainApp.showToast(_chat('chat_profile_update_success'), 'success');

            updateUserUI();

            if (newName && newName !== currentUser.displayName) {
                updateAuthorNameInView(currentUser.uid, newName);
            }
            
            closeModal('profileEditModal');

        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è:", error);
            showError(`${_chat('chat_profile_update_fail_prefix')} ${getErrorMessage(error.code)}`);
        }
    }



    async function logout() {
        try {
            await auth.signOut();
            ChatModule.closeChatModal(); 
        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞:", error);
        }
    }



    /**
     * –ü–ª–∞–≤–Ω–æ –ø—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ—Ç –∫ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –≤–æ–ø—Ä–æ—Å—É –∏ –ø–æ–¥—Å–≤–µ—á–∏–≤–∞–µ—Ç –µ–≥–æ.
     * @param {string} questionId ID –≤–æ–ø—Ä–æ—Å–∞ –¥–ª—è –ø–æ–¥—Å–≤–µ—Ç–∫–∏.
     */
    function highlightAndScrollToQuestion(questionId) {
        const element = document.getElementById(`question-${questionId}`);
        if (element) {
            // –ü–ª–∞–≤–Ω–æ –ø—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ —ç–ª–µ–º–µ–Ω—Ç—É, —á—Ç–æ–±—ã –æ–Ω –æ–∫–∞–∑–∞–ª—Å—è –ø–æ —Ü–µ–Ω—Ç—Ä—É —ç–∫—Ä–∞–Ω–∞
            element.scrollIntoView({ behavior: 'smooth', block: blockAlignment });

            // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ –ø–æ–¥—Å–≤–µ—Ç–∫–∏
            element.classList.add('highlighted');

            // –£–±–∏—Ä–∞–µ–º –ø–æ–¥—Å–≤–µ—Ç–∫—É —á–µ—Ä–µ–∑ 2.5 —Å–µ–∫—É–Ω–¥—ã
            setTimeout(() => {
                element.classList.remove('highlighted');
            }, 2500);
        }
    }


    function scrollToMessage(messageId) {
        const element = document.getElementById(`message-${messageId}`);
        if (element) {
            // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ —ç–ª–µ–º–µ–Ω—Ç—É
            element.scrollIntoView({ behavior: 'smooth', block: blockAlignment });

            // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å –¥–ª—è –ø–æ–¥—Å–≤–µ—Ç–∫–∏
            element.classList.add('highlighted');

            // –£–±–∏—Ä–∞–µ–º –ø–æ–¥—Å–≤–µ—Ç–∫—É —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
            setTimeout(() => {
                element.classList.remove('highlighted');
            }, 2000);
        } else {
            console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∏:', messageId);
        }
    }

    // –ù–û–í–ê–Ø, –ù–ê–î–ï–ñ–ù–ê–Ø –í–ï–†–°–ò–Ø
    function escape(str) {
        if (!str) return '';
        return str
            .replace(/\\/g, '\\\\')  // 1. –°–Ω–∞—á–∞–ª–∞ —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–∞–º–∏ —Å–ª–µ—à–∏
            .replace(/'/g, "\\'")   // 2. –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –æ–¥–∏–Ω–∞—Ä–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏
            .replace(/"/g, '\\"')   // 3. –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –¥–≤–æ–π–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏ (–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π)
            .replace(/\n/g, '\\n')  // 4. –ó–∞–º–µ–Ω—è–µ–º –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫ –Ω–∞ –∏—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã–π —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç
            .replace(/\r/g, '\\r'); // 5. –¢–æ –∂–µ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫–∞—Ä–µ—Ç–∫–∏
    }





    async function navigateToQuestion(questionId, linkMessageId = null) {
        if (!db) return;

        try {
            const questionRef = db.collection('questions').doc(questionId);
            const doc = await questionRef.get();

            if (doc.exists) {
                // 1. –ó–ê–ü–û–ú–ò–ù–ê–ï–ú, –ö–ê–ö–û–ô –í–û–ü–†–û–° –ù–£–ñ–ù–û –í–´–î–ï–õ–ò–¢–¨
                questionToHighlight = questionId;

                // 2. –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –≤–∫–ª–∞–¥–∫—É "–í–æ–ø—Ä–æ—Å—ã"
                switchTab('questions');

                // –°–∞–º–∞ –ª–æ–≥–∏–∫–∞ –ø–æ–¥—Å–≤–µ—Ç–∫–∏ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–æ–ø—Ä–æ—Å–æ–≤
                console.log(`–ü–µ—Ä–µ—Ö–æ–¥ –∫ –≤–æ–ø—Ä–æ—Å—É: ${questionId}`);

            } else {
                // –≠—Ç–æ—Ç –±–ª–æ–∫ –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
                alert(_chat('chat_question_deleted_alert'));
                if (linkMessageId) {
                    await db.collection('messages').doc(linkMessageId).delete();
                }
            }
        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –∫ –≤–æ–ø—Ä–æ—Å—É:", error);
            showError(_chat('chat_check_question_status_failed'));
        }
    }
    


    function displayQuestions(questions) {
        if (!messageArea) return;
        
        messageArea.innerHTML = '';
        
        if (questions.length === 0) {
            messageArea.innerHTML = `<div class="empty-state">${_chat('questions_empty')}</div>`;
            return;
        }
        
        questions.forEach(question => {
            const questionEl = createQuestionElement(question);

            const favButton = questionEl.querySelector('.add-to-favorites-btn');
            if (favButton) {
                const itemToSave = {
                    text: question.text,
                    options: question.options
                };
                favButton.onclick = () => ChatModule.addToFavorites(itemToSave, 'question');
            }

            const copyBtn = questionEl.querySelector('.copy-question-btn');
            if (copyBtn) {
                copyBtn.onclick = () => ChatModule.copyQuestionAsQst(question);
            }

            messageArea.appendChild(questionEl);
            if (window.lucide) lucide.createIcons();
        });
    }


    function createQuestionElement(question, context = 'default') { // <-- 1. –î–æ–±–∞–≤–ª–µ–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä 'context'
        const questionEl = document.createElement('div');
        questionEl.className = 'question-bubble';
        questionEl.id = `question-${question.id}`; 

        const timestamp = question.createdAt?.toDate?.() || new Date();
        const currentLocale = LOCALE_MAP[currentChatLang] || 'ru-RU';
        const timeStr = timestamp.toLocaleString(currentLocale);

        if (question.options && Array.isArray(question.options)) {
            
            const hasCorrectAnswer = question.options.some(opt => opt.isCorrect);

            const optionsHTML = question.options.map((option, index) => {
                const votes = Array.isArray(option.votedBy) ? option.votedBy.length : 0;
                let buttonClass = 'option-vote-btn';

                if (hasCorrectAnswer && option.isCorrect) {
                    buttonClass += ' correct';
                }
                if (currentUser && Array.isArray(option.votedBy) && option.votedBy.includes(currentUser.uid)) {
                    buttonClass += ' voted-by-user';
                }

                return `
                    <button class="${buttonClass}" onclick="ChatModule.voteForOption('${question.id}', ${index})">
                        <span class="option-text">${escapeHTML(option.text)}</span>
                        <span class="option-votes-badge">${votes}</span>
                    </button>
                `;
            }).join('');

            const totalVotes = question.options.reduce((sum, opt) => sum + (Array.isArray(opt.votedBy) ? opt.votedBy.length : 0), 0);
            
            let actionsHTML = `
                <button class="add-to-favorites-btn" title="${_chat('add_to_favorites_button')}"><i data-lucide="star"></i></button>
                <button class="copy-question-btn" title="${_chat('copy_question_button')}"><i data-lucide="copy"></i></button> 
            `;

            const isAdmin = currentUser?.email === 'iverrum@gmail.com';
            // === –ò–ó–ú–ï–ù–ï–ù–ò–ï –ó–î–ï–°–¨ ===
            // 2. –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ context –ù–ï 'favorites'
            if (context !== 'favorites' && currentUser && (question.authorId === currentUser.uid || isAdmin)) {
                actionsHTML += `<button class="delete-question-btn" title="${_chat('delete_question_button')}" onclick="ChatModule.deleteQuestion('${question.id}')"><i data-lucide="trash-2"></i></button>`;
            }
            // === –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–Ø ===

            questionEl.innerHTML = `
                <div style="display: flex; align-items: flex-start; gap: 15px;">
                    <div class="question-square ${totalVotes > 0 ? 'has-votes' : ''}">
                        ${totalVotes > 0 ? `<span class="vote-indicator">${totalVotes}</span>` : ''}Q</div>
                    <div class="question-content">
                        <p><strong>${_chat('question_card_question_label')}</strong> ${escapeHTML(question.text || '')}</p>
                        <p><strong>${_chat('question_card_author_label')}</strong> ${escapeHTML(question.authorName || _chat('question_card_anonymous'))}</p>
                        <p><strong>${_chat('question_card_date_label')}</strong> ${timeStr}</p>
                        <div class="question-options-container">${optionsHTML}</div>
                        <div class="question-actions">${actionsHTML}</div>
                    </div>
                </div>`;

        } else if (question.text) {
            // ... (—Å—Ç–∞—Ä—ã–π –∫–æ–¥ –¥–ª—è —Å—Ç–∞—Ä–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ –≤–æ–ø—Ä–æ—Å–æ–≤) ...
        } else {
            return document.createDocumentFragment();
        }
        return questionEl;
    }


    function loadFavorites() {
        if (!currentUser || !db) return;

        if (favoritesListener) {
            favoritesListener();
        }

        messageArea.innerHTML = `<div class="empty-state">${_chat('loading_messages')}</div>`;

        favoritesListener = db.collection('favorites')
            .where('userId', '==', currentUser.uid)
            .orderBy('createdAt', 'desc')
            .onSnapshot(snapshot => {
                const favoriteItems = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
                
                if (favoriteItems.length === 0) {
                    messageArea.innerHTML = `<div class="empty-state">${_chat('favorites_empty')}</div>`;
                    return;
                }

                messageArea.innerHTML = '';
                
                favoriteItems.forEach(favoriteInfo => {
                    if (favoriteInfo.content) {
                        let renderedElement;
                        const contentData = { id: favoriteInfo.id, ...favoriteInfo.content };

                        if (favoriteInfo.type === 'question') {
                            renderedElement = createQuestionElement(contentData, 'favorites');
                            
                            const voteButtons = renderedElement.querySelectorAll('.option-vote-btn');
                            voteButtons.forEach((btn, index) => {
                                btn.setAttribute('onclick', `ChatModule.voteForFavoriteOption('${favoriteInfo.id}', ${index})`);
                            });
                            
                            const addToFavBtn = renderedElement.querySelector('.add-to-favorites-btn');
                            if (addToFavBtn) addToFavBtn.remove();

                            const copyBtn = renderedElement.querySelector('.copy-question-btn');
                            if (copyBtn) {
                                copyBtn.onclick = () => ChatModule.copyQuestionAsQst(contentData);
                            }
                        } else {
                            renderedElement = createMessageElement(contentData);
                        }
                        
                        const deleteButton = document.createElement('button');
                        deleteButton.className = 'remove-favorite';
                        // === –ò–ó–ú–ï–ù–ï–ù–ò–ï –ó–î–ï–°–¨ ===
                        deleteButton.innerHTML = `<i data-lucide="x-circle"></i>`; // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–∫–æ–Ω–∫—É "–∫—Ä–µ—Å—Ç–∏–∫ –≤ –∫—Ä—É–≥–µ"
                        deleteButton.title = _chat('delete_favorite_button');
                        deleteButton.onclick = () => ChatModule.removeFromFavorites(favoriteInfo.id);

                        const actionsContainer = renderedElement.querySelector('.question-actions, .message-actions-toolbar');
                        if (actionsContainer) {
                            actionsContainer.appendChild(deleteButton);
                        } else {
                            const newActionsContainer = document.createElement('div');
                            newActionsContainer.className = 'favorite-actions';
                            newActionsContainer.appendChild(deleteButton);
                            renderedElement.appendChild(newActionsContainer);
                        }
                        messageArea.appendChild(renderedElement);
                    }
                });
                // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –≤—Å–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –∏–∫–æ–Ω–∫–∏
                if (window.lucide) {
                    lucide.createIcons();
                }

            }, error => {
                console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ:', error);
                messageArea.innerHTML = `<div class="empty-state">${_chat('favorites_loading_error')}</div>`;
            });
    }

    function updateTabCounter(tabId, count) {
        if (tabCounters[tabId]) {
            tabCounters[tabId].textContent = count;
        }
    }

    function showUserActions(targetId, targetName, targetEmail) {
        if (targetId === currentUser.uid) return;
        
        document.getElementById('userActionsModalTitle').textContent = targetName;
        document.getElementById('userActionsModalText').textContent = _chat('chat_user_actions_for').replace('{userName}', targetName);

        const chatBtn = document.getElementById('userActionsChatBtn');
        const emailBtn = document.getElementById('userActionsEmailBtn');
        
        chatBtn.onclick = () => startPrivateChat(targetId, targetName);
        emailBtn.onclick = () => {
            window.location.href = `mailto:${targetEmail}`;
            closeModal('userActionsModal');
        };
        
        showModal('userActionsModal');
    }

    // === –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –ù–ê–ß–ê–õ–ê –õ–ò–ß–ù–û–ì–û –ß–ê–¢–ê ===
    async function startPrivateChat(targetId, targetName) {
        closeModal('userActionsModal');
        const channelId = `private_${[currentUser.uid, targetId].sort().join('_')}`;
        const userDocRef = db.collection('users').doc(currentUser.uid);
    
        try {
            const userDoc = await userDocRef.get();
            if (!userDoc.exists) throw "–¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.";
     

            const userData = userDoc.data();

            // –ü–†–û–í–ï–†–ö–ê: –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –∏ userData —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –∏ privateChatPartners —è–≤–ª—è–µ—Ç—Å—è –º–∞—Å—Å–∏–≤–æ–º
            if (userData && Array.isArray(userData.privateChatPartners)) {
                // –ï—Å–ª–∏ –≤—Å–µ –≤ –ø–æ—Ä—è–¥–∫–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –ª–æ–≥–∏–∫—É
                if (!userData.privateChatPartners.includes(targetId)) {
                    await userDocRef.update({ privateChatPartners: firebase.firestore.FieldValue.arrayUnion(targetId) });
                }
            } else if (userData) {
                // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—Å—Ç—å, –∞ –ø–æ–ª—è —Å —á–∞—Ç–∞–º–∏ –Ω–µ—Ç - —Å–æ–∑–¥–∞–µ–º –µ–≥–æ
                await userDocRef.update({ privateChatPartners: [targetId] });
            }
            
            // –ú—ã –ù–ï –¢–†–û–ì–ê–ï–ú –¥–æ–∫—É–º–µ–Ω—Ç —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞, —á—Ç–æ–±—ã –Ω–µ –Ω–∞—Ä—É—à–∞—Ç—å –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞.
            // –ï–≥–æ —Å–ø–∏—Å–æ–∫ –æ–±–Ω–æ–≤–∏—Ç—Å—è, –∫–æ–≥–¥–∞ –æ–Ω —Å–∞–º –∑–∞–π–¥–µ—Ç –≤ —á–∞—Ç.
    
        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ª–∏—á–Ω–æ–≥–æ —á–∞—Ç–∞: ", error);
            showError("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∞—Ç—å –ª–∏—á–Ω—ã–π —á–∞—Ç.");
            return;
        }
        
        await loadPrivateChats(); 
        // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —á–∞—Ç
        switchToChannel(channelId, targetName, 'private');
    }
    

    async function sendMessage() {
        if (!chatInput || !currentUser || !db) return;
        const text = chatInput.value.trim();
        if (!text) return;

        const sendBtn = document.getElementById('sendBtn');
        sendBtn.disabled = true;
        sendBtn.classList.add('loading');
        sendBtn.innerHTML = '';

        const isQuestionFormat = text.startsWith('?') && (text.includes('\n+') || text.includes('\n-'));
        
        // --- –ù–ê–ß–ê–õ–û –ò–ó–ú–ï–ù–ï–ù–ò–ô ---
        try {
            if (isQuestionFormat) {
                // –í–æ–ø—Ä–æ—Å—ã –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç –æ—Ñ–ª–∞–π–Ω-–æ—Ç–ø—Ä–∞–≤–∫—É, —Ç–∞–∫ –∫–∞–∫ —Ç—Ä–µ–±—É—é—Ç –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
                await createQuestionFromMessage(text);
                chatInput.value = '';
                return; // –í—ã—Ö–æ–¥–∏–º –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏
            }

            // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, –Ω–æ –ø–æ–∫–∞ –ë–ï–ó —Å–µ—Ä–≤–µ—Ä–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
            const message = {
                text: text,
                authorId: currentUser.uid,
                authorName: currentUser.displayName || currentUser.email || '–ê–Ω–æ–Ω–∏–º',
                channelId: currentChannel,
                // createdAt –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–æ –ª–∏–±–æ —Å–µ—Ä–≤–µ—Ä–æ–º, –ª–∏–±–æ SW
                type: 'message',
                reactions: {},
                memberIds: currentChannelType === 'private' ? currentChannel.replace('private_', '').split('_') : ['public']
            };
            if (replyContext) {
                message.replyTo = replyContext;
            }

            // –û—á–∏—â–∞–µ–º –ø–æ–ª—è –≤–≤–æ–¥–∞ –°–†–ê–ó–£, —Å–æ–∑–¥–∞–≤–∞—è –æ—â—É—â–µ–Ω–∏–µ –±—ã—Å—Ç—Ä–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
            chatInput.value = '';
            chatInput.style.height = 'auto';
            cancelReply();

            // –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ Firestore
            await db.collection('messages').add({
                ...message,
                createdAt: firebase.firestore.FieldValue.serverTimestamp()
            });
            console.log("–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –æ–Ω–ª–∞–π–Ω.");

        } catch (error) {
            // –õ–û–í–ò–ú –û–®–ò–ë–ö–£ –û–¢–°–£–¢–°–¢–í–ò–Ø –°–ï–¢–ò
            if (error.code === 'unavailable') {
                console.warn('–°–µ—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ñ–æ–Ω–æ–≤–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏.');
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ IndexedDB
                await saveMessageForSync(message);
            } else {
                console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
                showError(_('error_send_message_failed'));
            }
        } finally {
            // –≠—Ç–æ—Ç –±–ª–æ–∫ –≤—ã–ø–æ–ª–Ω–∏—Ç—Å—è –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ
            sendBtn.disabled = false;
            sendBtn.classList.remove('loading');
            sendBtn.innerHTML = '‚û§';
        }
        // --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–ô ---
    }


    // --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –û—Ç–≤–µ—Ç–æ–≤ ---
    function startReply(messageId, authorName, text) {
        replyContext = {
            messageId: messageId,
            authorName: authorName,
            textSnippet: text.substring(0, 80) + (text.length > 80 ? '...' : '')
        };
        
        document.getElementById('replyingToText').textContent = replyContext.textSnippet;
        document.getElementById('replyingToPanel').classList.remove('hidden');
        chatInput.focus();
    }

    function cancelReply() {
        replyContext = null;
        document.getElementById('replyingToPanel').classList.add('hidden');
    }

    // --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ---
    function startEditMessage(messageId, currentText) {
        document.getElementById('editMessageIdInput').value = messageId;
        document.getElementById('editMessageInput').value = currentText;
        showModal('editMessageModal');
    }

    // –ù–æ–≤—ã–π (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π) –∫–æ–¥
    async function saveMessageEdit() {
        const messageId = document.getElementById('editMessageIdInput').value;
        const newText = document.getElementById('editMessageInput').value.trim();
        if (!messageId || !newText) return;

        const messageRef = db.collection('messages').doc(messageId);
        try {
            const isAdmin = currentUser.email === 'iverrum@gmail.com';
            const doc = await messageRef.get();
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–æ–º –ò–õ–ò –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
            if (doc.exists && (doc.data().authorId === currentUser.uid || isAdmin)) {
                await messageRef.update({
                    text: newText,
                    editedAt: firebase.firestore.FieldValue.serverTimestamp()
                });
                closeModal('editMessageModal');
            } else {
                throw new Error("Permission denied or message not found.");
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
            showError(_chat('error_save_message_failed'));
        }
    }



    function showReactionPicker(messageId, buttonElement) {
            // –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ —É–¥–∞–ª—è–µ–º –ª—é–±—ã–µ —Å—Ç–∞—Ä—ã–µ –ø–∏–∫–µ—Ä—ã
            document.querySelectorAll('.reaction-picker, .full-reaction-picker').forEach(p => p.remove());

            const picker = document.createElement('div');
            picker.className = 'reaction-picker';
            
            // 1. –°–ù–ê–ß–ê–õ–ê –û–ë–™–Ø–í–õ–Ø–ï–ú –§–£–ù–ö–¶–ò–Æ –ó–ê–ö–†–´–¢–ò–Ø
            // –¢–µ–ø–µ—Ä—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –º—ã —Å–æ–∑–¥–∞–¥–∏–º –Ω–∏–∂–µ, –±—É–¥—É—Ç –æ –Ω–µ–π –∑–Ω–∞—Ç—å.
            const closePickerOnClickOutside = function(event) {
                if (document.body.contains(picker) && !picker.contains(event.target)) {
                    picker.remove();
                    window.removeEventListener('click', closePickerOnClickOutside);
                }
            };
            
            // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ä–µ–∞–∫—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const quickEmojis = getQuickReactions();
            
            // 2. –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —ç–º–æ–¥–∑–∏
            quickEmojis.forEach(emoji => {
                const span = document.createElement('span');
                span.textContent = emoji;
                span.onclick = (e) => {
                    e.stopPropagation();
                    window.removeEventListener('click', closePickerOnClickOutside); // –£–±–∏—Ä–∞–µ–º —Å–ª—É—à–∞—Ç–µ–ª—å
                    picker.remove();
                    toggleReaction(messageId, emoji);
                };
                picker.appendChild(span);
            });

            // 3. –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É "+" –∏ –µ–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫, –∫–æ—Ç–æ—Ä—ã–π —Ç–µ–ø–µ—Ä—å –≤–∏–¥–∏—Ç 'closePickerOnClickOutside'
            const addButton = document.createElement('button');
            addButton.textContent = 'Ôºã';
            addButton.className = 'reaction-picker-add-btn';
            addButton.title = _chat('tooltip_choose_reaction');
            addButton.onclick = (e) => {
                e.stopPropagation();

                // 1. –°–ù–ê–ß–ê–õ–ê –ø–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∫–Ω–æ–ø–∫–∏, –ü–û–ö–ê –æ–Ω–∞ –µ—â–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ.
                const buttonRect = addButton.getBoundingClientRect();

                // 2. –¢–µ–ø–µ—Ä—å —É–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ä—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏ —Å–∞–º—É –ø–∞–Ω–µ–ª—å.
                window.removeEventListener('click', closePickerOnClickOutside);
                picker.remove();

                // 3. –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–æ–∫–∞–∑–∞ –Ω–æ–≤–æ–≥–æ –ø–∏–∫–µ—Ä–∞, –Ω–æ –ø–µ—Ä–µ–¥–∞–µ–º –µ–π —É–∂–µ
                // —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã, –∞ –Ω–µ —Å–∞–º—É –∫–Ω–æ–ø–∫—É, –∫–æ—Ç–æ—Ä–æ–π –±–æ–ª—å—à–µ –Ω–µ—Ç.
                showFullReactionPicker(messageId, buttonRect);
            };
            picker.appendChild(addButton);

            document.body.appendChild(picker);

            // --- –ù–ê–ß–ê–õ–û –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø: –£–º–Ω–æ–µ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ ---
            const btnRect = buttonElement.getBoundingClientRect();
            const pickerRect = picker.getBoundingClientRect();
            const viewportWidth = window.innerWidth;
            const margin = 8; // –ù–µ–±–æ–ª—å—à–æ–π –æ—Ç—Å—Ç—É–ø –æ—Ç –∫—Ä–∞–µ–≤ —ç–∫—Ä–∞–Ω–∞

            // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏ (–≤–≤–µ—Ä—Ö –∏–ª–∏ –≤–Ω–∏–∑ –æ—Ç –∫–Ω–æ–ø–∫–∏)
            let topPos = btnRect.top - pickerRect.height - margin;
            if (topPos < margin) { 
                topPos = btnRect.bottom + margin; 
            }

            // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏
            let leftPos = btnRect.left;

            // –ü–†–û–í–ï–†–ö–ê –ü–†–ê–í–û–ì–û –ö–†–ê–Ø: –µ—Å–ª–∏ –ø–∏–∫–µ—Ä –≤—ã–ª–µ–∑–∞–µ—Ç —Å–ø—Ä–∞–≤–∞...
            if (leftPos + pickerRect.width > viewportWidth - margin) {
                // ...—Ç–æ –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–µ–º –µ–≥–æ –ø—Ä–∞–≤—ã–π –∫—Ä–∞–π –ø–æ –ø—Ä–∞–≤–æ–º—É –∫—Ä–∞—é –∫–Ω–æ–ø–∫–∏.
                leftPos = btnRect.right - pickerRect.width;
            }

            // –ü–†–û–í–ï–†–ö–ê –õ–ï–í–û–ì–û –ö–†–ê–Ø: –µ—Å–ª–∏ –ø–∏–∫–µ—Ä –≤—ã–ª–µ–∑–∞–µ—Ç —Å–ª–µ–≤–∞...
            if (leftPos < margin) {
                // ...—Ç–æ –ø—Ä–∏–∂–∏–º–∞–µ–º –µ–≥–æ –∫ –ª–µ–≤–æ–º—É –∫—Ä–∞—é —ç–∫—Ä–∞–Ω–∞ —Å –æ—Ç—Å—Ç—É–ø–æ–º.
                leftPos = margin;
            }

            // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–µ –∏ —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
            picker.style.top = `${topPos}px`;
            picker.style.left = `${leftPos}px`;
            // --- –ö–û–ù–ï–¶ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø ---


            // 4. –ò —Ç–æ–ª—å–∫–æ —Ç–µ–ø–µ—Ä—å, –∫–æ–≥–¥–∞ –≤—Å–µ –≥–æ—Ç–æ–≤–æ, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–ª—É—à–∞—Ç–µ–ª—å –Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏–µ
            setTimeout(() => window.addEventListener('click', closePickerOnClickOutside), 0);
        }




    /**
     * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–ª–Ω—ã–π –ø–∏–∫–µ—Ä —ç–º–æ–¥–∑–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –Ω–æ–≤–æ–π —Ä–µ–∞–∫—Ü–∏–∏.
     * @param {string} messageId - ID —Å–æ–æ–±—â–µ–Ω–∏—è, –∫ –∫–æ—Ç–æ—Ä–æ–º—É –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è —Ä–µ–∞–∫—Ü–∏—è.
     * @param {DOMRect} positionRect - –û–±—ä–µ–∫—Ç —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏, –≥–¥–µ —Ä–∞–Ω–µ–µ –Ω–∞—Ö–æ–¥–∏–ª–∞—Å—å –∫–Ω–æ–ø–∫–∞ "+".
     */
    function showFullReactionPicker(messageId, positionRect) {
        if (!customElements.get('emoji-picker')) {
            console.warn('Emoji picker –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω');
            return;
        }

        const fullPicker = document.createElement('emoji-picker');
        fullPicker.className = 'full-reaction-picker'; 

        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ç–µ–º—É –ø–∏–∫–µ—Ä–∞
        if (document.body.classList.contains('dark-mode')) {
            fullPicker.classList.add('dark');
        } else {
            fullPicker.classList.add('light');
        }

        fullPicker.addEventListener('emoji-click', event => {
            const selectedEmoji = event.detail.unicode;
            toggleReaction(messageId, selectedEmoji);
            updateQuickReactions(selectedEmoji);
            if (fullPicker.parentNode) {
                 fullPicker.remove();
            }
        });

        // --- –ù–ê–ß–ê–õ–û –ù–û–í–û–ô –õ–û–ì–ò–ö–ò –ü–û–ó–ò–¶–ò–û–ù–ò–†–û–í–ê–ù–ò–Ø ---
        
        // 1. –î–æ–±–∞–≤–ª—è–µ–º –ø–∏–∫–µ—Ä –≤ DOM, –Ω–æ –¥–µ–ª–∞–µ–º –µ–≥–æ –Ω–µ–≤–∏–¥–∏–º—ã–º –∏ –≤—ã–Ω–æ—Å–∏–º –∑–∞ –ø—Ä–µ–¥–µ–ª—ã —ç–∫—Ä–∞–Ω–∞.
        // –≠—Ç–æ –Ω—É–∂–Ω–æ, —á—Ç–æ–±—ã –±—Ä–∞—É–∑–µ—Ä —Ä–∞—Å—Å—á–∏—Ç–∞–ª –µ–≥–æ —Ä–µ–∞–ª—å–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã.
        document.body.appendChild(fullPicker);
        fullPicker.style.position = 'fixed';
        fullPicker.style.visibility = 'hidden';
        fullPicker.style.left = '-9999px';
        fullPicker.style.top = '-9999px';
        
        // 2. –¢–µ–ø–µ—Ä—å, –∫–æ–≥–¥–∞ —Ä–∞–∑–º–µ—Ä—ã –∏–∑–≤–µ—Å—Ç–Ω—ã, –ø–æ–ª—É—á–∞–µ–º –∏—Ö.
        const pickerRect = fullPicker.getBoundingClientRect();
        const viewportWidth = window.innerWidth;
        const viewportHeight = window.innerHeight;
        const margin = 10; // –û—Ç—Å—Ç—É–ø –æ—Ç –∫—Ä–∞–µ–≤

        // 3. –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é, –∫–∞–∫ –º—ã —ç—Ç–æ –¥–µ–ª–∞–ª–∏ –¥–ª—è –º–∞–ª–µ–Ω—å–∫–æ–π –ø–∞–Ω–µ–ª–∏.
        // –ü–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏:
        let leftPos = positionRect.left; // –ù–∞—á–∏–Ω–∞–µ–º —Å –ø–æ–∑–∏—Ü–∏–∏ –∫–Ω–æ–ø–∫–∏ "+"
        if (leftPos + pickerRect.width > viewportWidth - margin) {
            // –ï—Å–ª–∏ –≤—ã–ª–µ–∑–∞–µ—Ç —Å–ø—Ä–∞–≤–∞, –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–µ–º –ø–æ –ø—Ä–∞–≤–æ–º—É –∫—Ä–∞—é —ç–∫—Ä–∞–Ω–∞
            leftPos = viewportWidth - pickerRect.width - margin;
        }
        if (leftPos < margin) {
            // –ï—Å–ª–∏ –≤—ã–ª–µ–∑–∞–µ—Ç —Å–ª–µ–≤–∞, –ø—Ä–∏–∂–∏–º–∞–µ–º –∫ –ª–µ–≤–æ–º—É –∫—Ä–∞—é
            leftPos = margin;
        }

        // –ü–æ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏:
        let topPos = positionRect.bottom + margin; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–æ–¥ –∫–Ω–æ–ø–∫–æ–π "+"
        if (topPos + pickerRect.height > viewportHeight - margin) {
            // –ï—Å–ª–∏ –Ω–µ –ø–æ–º–µ—â–∞–µ—Ç—Å—è —Å–Ω–∏–∑—É, —Å—Ç–∞–≤–∏–º –Ω–∞–¥ –∫–Ω–æ–ø–∫–æ–π
            topPos = positionRect.top - pickerRect.height - margin;
        }
         if (topPos < margin) {
            // –ï—Å–ª–∏ –Ω–µ –ø–æ–º–µ—â–∞–µ—Ç—Å—è –∏ —Å–≤–µ—Ä—Ö—É, –ø—Ä–∏–∂–∏–º–∞–µ–º –∫ –≤–µ—Ä—Ö—É —ç–∫—Ä–∞–Ω–∞
            topPos = margin;
        }

        // 4. –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ, –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã.
        fullPicker.style.left = `${leftPos}px`;
        fullPicker.style.top = `${topPos}px`;
        
        // 5. –ò —Ç–æ–ª—å–∫–æ —Ç–µ–ø–µ—Ä—å –¥–µ–ª–∞–µ–º –ø–∏–∫–µ—Ä –≤–∏–¥–∏–º—ã–º –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        fullPicker.style.visibility = 'visible';

        // --- –ö–û–ù–ï–¶ –ù–û–í–û–ô –õ–û–ì–ò–ö–ò –ü–û–ó–ò–¶–ò–û–ù–ò–†–û–í–ê–ù–ò–Ø ---

        // 6. –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –ø–∏–∫–µ—Ä–∞
        setTimeout(() => {
            window.addEventListener('click', function closeFullPicker(e) {
                if (fullPicker.parentNode && !fullPicker.contains(e.target)) {
                    fullPicker.remove();
                    // –í–∞–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å —Å–∞–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫, —á—Ç–æ–±—ã –æ–Ω –Ω–µ –≤–∏—Å–µ–ª –≤ –ø–∞–º—è—Ç–∏
                    window.removeEventListener('click', closeFullPicker);
                }
            });
        }, 0);
    }






    async function toggleReaction(messageId, emoji) {
        if (!currentUser) return;
        const messageRef = db.collection('messages').doc(messageId);
        const userId = currentUser.uid;

        try {
            await db.runTransaction(async (transaction) => {
                const doc = await transaction.get(messageRef);
                if (!doc.exists) return;

                const reactions = doc.data().reactions || {};
                
                if (reactions[emoji] && reactions[emoji].includes(userId)) {
                    // –ï—Å–ª–∏ —É–∂–µ —Ä–µ–∞–≥–∏—Ä–æ–≤–∞–ª - —É–±–∏—Ä–∞–µ–º —Ä–µ–∞–∫—Ü–∏—é
                    reactions[emoji] = reactions[emoji].filter(id => id !== userId);
                    if (reactions[emoji].length === 0) {
                        delete reactions[emoji]; // –£–¥–∞–ª—è–µ–º —ç–º–æ–¥–∑–∏, –µ—Å–ª–∏ –º–∞—Å—Å–∏–≤ –ø—É—Å—Ç
                    }
                } else {
                    // –ï—Å–ª–∏ –Ω–µ —Ä–µ–∞–≥–∏—Ä–æ–≤–∞–ª - –¥–æ–±–∞–≤–ª—è–µ–º
                    if (!reactions[emoji]) {
                        reactions[emoji] = [];
                    }
                    reactions[emoji].push(userId);
                }
                transaction.update(messageRef, { reactions: reactions });
            });
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Ä–µ–∞–∫—Ü–∏–∏:', error);
        }
    }
        
    async function deleteMessage(messageId) {
        if (!currentUser || !db) return;

        const confirmed = await window.mainApp.showConfirmationModal(
            'confirm_action_title',
            'confirm_delete_message',
            'confirm_button_delete' // <-- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è –∫–Ω–æ–ø–∫–∏
        );

        if (confirmed) {
            const messageRef = db.collection('messages').doc(messageId);
            try {
                const isAdmin = currentUser.email === 'iverrum@gmail.com';
                const doc = await messageRef.get();
                if (doc.exists && (doc.data().authorId === currentUser.uid || isAdmin)) {
                    await messageRef.delete();
                } else {
                    throw new Error("Permission denied or message not found.");
                }
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
                showError(_chat('error_delete_message_failed'));
            }
        }
    }
 
    async function deleteQuestion(questionId) {
        if (!currentUser || !db) return;

        const confirmed = await window.mainApp.showConfirmationModal(
            'confirm_action_title',
            'confirm_delete_question',
            'confirm_button_delete' // <-- –ò–ó–ú–ï–ù–ï–ù–ò–ï –ó–î–ï–°–¨
        );

        if (confirmed) {
            const questionRef = db.collection('questions').doc(questionId);
            try {
                const isAdmin = currentUser.email === 'iverrum@gmail.com';
                const doc = await questionRef.get();
                if (doc.exists && (doc.data().authorId === currentUser.uid || isAdmin)) {
                    await questionRef.delete();
                } else {
                     throw new Error("Permission denied or question not found.");
                }
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞:', error);
                showError(_chat('error_delete_question_failed'));
            }
        }
    }


    // --- –í–°–¢–ê–í–¨–¢–ï –ö–û–î –ü–ê–†–°–ï–†–ê –°–Æ–î–ê ---
    /**
     * –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –ø–∞—Ä—Å–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –±–ª–æ–∫–æ–≤ –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ –æ–¥–Ω–æ–º —Ç–µ–∫—Å—Ç–µ.
     * @param {string} content - –¢–µ–∫—Å—Ç, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –æ–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ .qst.
     * @returns {Array<Object>} - –ú–∞—Å—Å–∏–≤ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ –≤–æ–ø—Ä–æ—Å–æ–≤.
     */
    function parseMultipleQstBlocks(content) {
        let questions = [];
        let currentQuestionData = null;
        const lines = content.split(/\r?\n/);

        for (const line of lines) {
            const trimmedLine = line.trim();
            if (trimmedLine.startsWith('?')) {
                // –ï—Å–ª–∏ –º—ã –Ω–∞—à–ª–∏ –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å, —Å–Ω–∞—á–∞–ª–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π, –µ—Å–ª–∏ –æ–Ω –±—ã–ª
                if (currentQuestionData && currentQuestionData.options.length > 0) {
                    questions.push(currentQuestionData);
                }
                // –ù–∞—á–∏–Ω–∞–µ–º —Å–æ–±–∏—Ä–∞—Ç—å –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å
                currentQuestionData = { 
                    text: trimmedLine.substring(1).trim(), 
                    options: [], 
                    correctAnswerIndex: -1
                };
            } else if ((trimmedLine.startsWith('+') || trimmedLine.startsWith('-')) && currentQuestionData) {
                // –î–æ–±–∞–≤–ª—è–µ–º –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞ –∫ –¢–ï–ö–£–©–ï–ú–£ –≤–æ–ø—Ä–æ—Å—É
                const isCorrect = trimmedLine.startsWith('+');
                const optionText = trimmedLine.substring(1).trim();
                currentQuestionData.options.push({ text: optionText, isCorrect: isCorrect });
                if (isCorrect && currentQuestionData.correctAnswerIndex === -1) {
                    currentQuestionData.correctAnswerIndex = currentQuestionData.options.length - 1;
                }
            } else if (trimmedLine !== '' && currentQuestionData) {
                // –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ –Ω–µ –ø—É—Å—Ç–∞—è –∏ –Ω–µ –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞ - —ç—Ç–æ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –≤–æ–ø—Ä–æ—Å–∞
                currentQuestionData.text += " " + trimmedLine;
            }
        }

        // –ù–µ –∑–∞–±—ã–≤–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–∞–º—ã–π –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–æ–ø—Ä–æ—Å –ø–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ü–∏–∫–ª–∞
        if (currentQuestionData && currentQuestionData.options.length > 0) {
            questions.push(currentQuestionData);
        }

        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–∞—Å—Å–∏–≤ –≤—Å–µ—Ö –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
        return questions;
    }




    async function createQuestionFromMessage(rawText) {
        const questionsToCreate = parseMultipleQstBlocks(rawText);

        if (questionsToCreate.length === 0) {
            showError(_chat('question_format_unrecognized'));
            return;
        }

        try {
            for (const question of questionsToCreate) {
                const questionPayload = {
                    text: question.text,
                    options: question.options,
                    authorId: currentUser.uid,
                    authorName: currentUser.displayName || currentUser.email || '–ê–Ω–æ–Ω–∏–º',
                    channelId: currentChannel,
                    createdAt: firebase.firestore.FieldValue.serverTimestamp()
                };
                const newQuestionRef = await db.collection('questions').add(questionPayload);

                const questionLinkMessage = {
                    authorId: currentUser.uid,
                    authorName: currentUser.displayName || currentUser.email || '–ê–Ω–æ–Ω–∏–º',
                    channelId: currentChannel,
                    createdAt: firebase.firestore.FieldValue.serverTimestamp(),
                    type: 'question_link',
                    questionId: newQuestionRef.id,
                    text: question.text
                };
                await db.collection('messages').add(questionLinkMessage);
            }
            // --- –ò–ó–ú–ï–ù–ï–ù–ò–ï –ó–î–ï–°–¨ ---
            const message = `${_chat('questions_added_from_chat_success')} ${questionsToCreate.length}`;
            window.mainApp.showToast(message, 'success');

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
            showError(_chat('error_create_question_failed'));
        }
    }




    async function createQuestion() {
        const rawText = document.getElementById('questionTextInput').value.trim();
        if (!rawText || !currentUser || !db) return;

        const questionsToCreate = parseMultipleQstBlocks(rawText);

        if (questionsToCreate.length === 0) {
            showError(_chat('error_question_parse_failed_detailed'));
            return;
        }

        try {
            const creationPromises = questionsToCreate.map(q => {
                const questionPayload = {
                    text: q.text,
                    options: q.options,
                    authorId: currentUser.uid,
                    authorName: currentUser.displayName || currentUser.email || '–ê–Ω–æ–Ω–∏–º',
                    channelId: currentChannel,
                    createdAt: firebase.firestore.FieldValue.serverTimestamp()
                };
                return db.collection('questions').add(questionPayload);
            });
            
            await Promise.all(creationPromises);
            
            // --- –ò–ó–ú–ï–ù–ï–ù–ò–ï –ó–î–ï–°–¨ ---
            const message = `${_chat('questions_added_success')} ${questionsToCreate.length}`;
            window.mainApp.showToast(message, 'success');

            document.getElementById('questionTextInput').value = '';
            closeModal('questionCreateModal');

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤:', error);
            showError(_chat('error_create_question_failed'));
        }
    }



    async function voteForOption(questionId, optionIndex) {
        if (!currentUser || !db) return;

        const questionRef = db.collection('questions').doc(questionId);
        const userId = currentUser.uid;

        try {
            await db.runTransaction(async (transaction) => {
                const doc = await transaction.get(questionRef);
                if (!doc.exists) throw "–í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω!";

                const questionData = doc.data();
                if (!Array.isArray(questionData.options)) return;
                
                // –°–æ–∑–¥–∞–µ–º –≥–ª—É–±–æ–∫—É—é –∫–æ–ø–∏—é –º–∞—Å—Å–∏–≤–∞ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è
                const newOptions = JSON.parse(JSON.stringify(questionData.options));
                const option = newOptions[optionIndex];

                // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
                if (!Array.isArray(option.votedBy)) {
                    option.votedBy = [];
                }

                const voteIndex = option.votedBy.indexOf(userId);

                if (voteIndex > -1) {
                    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≥–æ–ª–æ—Å–æ–≤–∞–ª - —É–¥–∞–ª—è–µ–º –µ–≥–æ –≥–æ–ª–æ—Å
                    option.votedBy.splice(voteIndex, 1);
                } else {
                    // –ï—Å–ª–∏ –Ω–µ –≥–æ–ª–æ—Å–æ–≤–∞–ª - –¥–æ–±–∞–≤–ª—è–µ–º
                    option.votedBy.push(userId);
                }

                // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤ –æ–±—Ä–∞—Ç–Ω–æ
                transaction.update(questionRef, { options: newOptions });
            });
        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–∏:", error);
            showError(_chat('error_vote_failed'));
        }
    }

    async function voteForFavoriteOption(favoriteId, optionIndex) {
        if (!currentUser || !db) return;

        const favoriteRef = db.collection('favorites').doc(favoriteId);
        const userId = currentUser.uid;

        try {
            await db.runTransaction(async (transaction) => {
                const doc = await transaction.get(favoriteRef);
                if (!doc.exists) throw "–ò–∑–±—Ä–∞–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!";

                const favoriteData = doc.data();
                const questionContent = favoriteData.content;
                if (!Array.isArray(questionContent.options)) return;
                
                const newOptions = JSON.parse(JSON.stringify(questionContent.options));
                const option = newOptions[optionIndex];

                if (!Array.isArray(option.votedBy)) {
                    option.votedBy = [];
                }

                const voteIndex = option.votedBy.indexOf(userId);

                if (voteIndex > -1) {
                    option.votedBy.splice(voteIndex, 1);
                } else {
                    option.votedBy.push(userId);
                }

                transaction.update(favoriteRef, { 'content.options': newOptions });
            });
        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–∏ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º:", error);
            showError(_chat('error_vote_favorite_failed') + " " + error);
        }
    }
        
    async function addToFavorites(itemObject, type) { 
        if (!currentUser || !db) {
            showError(_chat('add_to_favorites_auth_required'));
            openAuthModal(); 
            return;
        }
        try {
            const favorite = {
                userId: currentUser.uid,
                content: itemObject, 
                type: type,          
                createdAt: firebase.firestore.FieldValue.serverTimestamp()
            };

            await db.collection('favorites').add(favorite);
            window.mainApp.showToast(_chat('add_to_favorites_success'), 'success'); // <-- –ò–ó–ú–ï–ù–ï–ù–ò–ï –ó–î–ï–°–¨

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ:', error);
            showError(_chat('error_add_to_favorites_failed'));
        }
    }

    
    async function removeFromFavorites(favoriteId) {
        if (!currentUser || !db) return;
        
        try {
            await db.collection('favorites').doc(favoriteId).delete();
            // –û–±–Ω–æ–≤–ª—è–µ–º –≤–∏–¥, —á—Ç–æ–±—ã —ç–ª–µ–º–µ–Ω—Ç –∏—Å—á–µ–∑
            loadFavorites();
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ:', error);
            showError(_chat('error_remove_from_favorites_failed'));
        }
    }
    
    // ========== CHANNELS & PRESENCE ==========
    function setupPresenceSystem() {
        if (!currentUser || !db) return;
        const presenceRef = db.collection('presence').doc(currentUser.uid);
        const heartbeat = () => presenceRef.update({ lastSeen: firebase.firestore.FieldValue.serverTimestamp() }).catch(console.error);
        presenceRef.set({ online: true, lastSeen: firebase.firestore.FieldValue.serverTimestamp(), username: currentUser.displayName || currentUser.email, uid: currentUser.uid })
            .then(() => {
                if (heartbeatInterval) clearInterval(heartbeatInterval);
                heartbeatInterval = setInterval(heartbeat, 30000);
            });
        window.addEventListener('beforeunload', () => {
            if (!currentUser) return;
            presenceRef.update({ online: false });
            clearInterval(heartbeatInterval);
        });
        if (presenceListener) presenceListener();
        presenceListener = db.collection('presence').onSnapshot(snapshot => {
            const now = Date.now();
            onlineUsers.clear();
            snapshot.forEach(doc => {
                const data = doc.data();
                const lastSeenDate = data.lastSeen?.toDate();
                if (data.online && lastSeenDate && (now - lastSeenDate.getTime() < 60000)) {
                    onlineUsers.set(doc.id, data);
                }
            });
            updateOnlineUsersList();
            if(currentTab === 'users') loadUsers(); // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –µ—Å–ª–∏ –æ–Ω –æ—Ç–∫—Ä—ã—Ç
        });
    }

    function cleanupPresenceSystem() {
        if (presenceListener) presenceListener();
        if (heartbeatInterval) clearInterval(heartbeatInterval);
        if (pmUnreadListener) pmUnreadListener();
        if (publicUnreadListener) publicUnreadListener();
        cleanupProfileListeners();                // <-- –í–ê–ñ–ù–û: —Å–Ω–∏–º–∞–µ–º onSnapshot –Ω–∞ users/*
        onlineUsers.clear();
        updateOnlineUsersList();
    }



    function updateOnlineUsersList() {
        if (!onlineUsersList) return;
        onlineUsersList.innerHTML = '';
        if (tabCounters['online']) tabCounters['online'].textContent = onlineUsers.size;

        if (onlineUsers.size === 0) {
            onlineUsersList.innerHTML = `<div style="padding: 10px; text-align: center; color: var(--secondary-text-color);">${_chat('chat_online_list_empty')}</div>`;
            return;
        }
        onlineUsers.forEach(userData => {
            const userEl = document.createElement('div');
            userEl.className = 'online-user';
            userEl.innerHTML = `<span class="status-indicator online"></span><span class="username" title="${escapeHTML(userData.username)}">${escapeHTML(userData.username)}</span>`;
            onlineUsersList.appendChild(userEl);
        });
    }



    function initializeDataListeners() {
        if (!currentUser || !db) return;

        console.log("–ó–∞–ø—É—Å–∫ –ø–æ—Å—Ç–æ—è–Ω–Ω—ã—Ö —Å–ª—É—à–∞—Ç–µ–ª–µ–π –¥–∞–Ω–Ω—ã—Ö...");

        // –°–ª—É—à–∞—Ç–µ–ª—å –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤
        db.collection('questions')
          .where('channelId', '==', currentChannel) // –ú–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∫–∞–Ω–∞–ª–∞
          .onSnapshot(snapshot => {
              updateTabCounter('questions', snapshot.size);
          }, err => console.error("–û—à–∏–±–∫–∞ —Å–ª—É—à–∞—Ç–µ–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤:", err));

        // –°–ª—É—à–∞—Ç–µ–ª—å –¥–ª—è –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
        db.collection('favorites')
          .where('userId', '==', currentUser.uid)
          .onSnapshot(snapshot => {
              updateTabCounter('favorites', snapshot.size);
          }, err => console.error("–û—à–∏–±–∫–∞ —Å–ª—É—à–∞—Ç–µ–ª—è –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ:", err));

        // –°–ª—É—à–∞—Ç–µ–ª–∏ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —É–∂–µ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ, –∏—Ö —Ç—Ä–æ–≥–∞—Ç—å –Ω–µ –Ω—É–∂–Ω–æ.
    }

    function renderChannelsList() {
        if(!channelsList) return;
        channelsList.innerHTML = '';
        channels.forEach(channel => {
            const isOwner = channel.createdBy === currentUser.uid;
            const channelEl = document.createElement('div');
            // –î–æ–±–∞–≤–ª—è–µ–º data-–∞—Ç—Ä–∏–±—É—Ç –¥–ª—è –ª–µ–≥–∫–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
            channelEl.dataset.channelId = channel.id;
            channelEl.className = `channel-item ${channel.id === currentChannel && currentChannelType === 'public' ? 'active' : ''}`;

            // === –ì–õ–ê–í–ù–û–ï –ò–ó–ú–ï–ù–ï–ù–ò–ï –ó–î–ï–°–¨ ===
            // –í–º–µ—Å—Ç–æ —Å–º–∞–π–ª–∏–∫–∞ 'üîí ' –≤—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ–≥ –∏–∫–æ–Ω–∫–∏ Lucide
            const lockIcon = channel.hasPassword ? '<i data-lucide="lock"></i>' : '';
            
            const settingsIcon = isOwner ? `<button class="channel-settings-btn" onclick="event.stopPropagation(); ChatModule.showChannelEditModal('${channel.id}')"><i data-lucide="settings"></i></button>` : '';
            const unreadCount = unreadCounts.get(channel.id) || 0;

            // –î–æ–±–∞–≤–ª—è–µ–º HTML –¥–ª—è —Å—á–µ—Ç—á–∏–∫–∞
            channelEl.innerHTML = `
                <span class="channel-name">${lockIcon}# ${escapeHTML(channel.name)}</span>
                <span class="unread-channel-badge ${unreadCount > 0 ? '' : 'hidden'}">${unreadCount}</span>
                ${settingsIcon}
            `;

            channelEl.addEventListener('click', () => handleChannelClick(channel));
            channelsList.appendChild(channelEl);
        });
        // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –Ω–æ–≤—ã–µ –∏–∫–æ–Ω–∫–∏
        if (window.lucide) {
            lucide.createIcons();
        }
    }


    // –ù–û–í–´–ô –ö–û–î
    async function loadPrivateChats() {
        if (!db || !currentUser) return;
        const userDoc = await db.collection('users').doc(currentUser.uid).get();
        if (!userDoc.exists) return;

        const userData = userDoc.data();
        const partnerIds = userData?.privateChatPartners || []; 
        subscribeToUserProfiles(partnerIds);

        const privateChatsPromises = partnerIds.map(async (partnerId) => {
            let partnerData = allUsers.get(partnerId);
            if (!partnerData) {
                const partnerDoc = await db.collection('users').doc(partnerId).get();
                if (partnerDoc.exists) partnerData = partnerDoc.data();
            }
            if (!partnerData) return null;

            const channelId = `private_${[currentUser.uid, partnerId].sort().join('_')}`;
            const messagesQuery = await db.collection('messages')
                .where('channelId', '==', channelId)
                .orderBy('createdAt', 'desc')
                .limit(1)
                .get();

            let lastMessageTimestamp = null;
            if (!messagesQuery.empty) {
                lastMessageTimestamp = messagesQuery.docs[0].data().createdAt;
            }
            return { ...partnerData, lastMessageTimestamp };
        });

        let fetchedChats = await Promise.all(privateChatsPromises);
        fetchedChats = fetchedChats.filter(chat => chat !== null);

        fetchedChats.sort((a, b) => {
            const timeA = a.lastMessageTimestamp ? a.lastMessageTimestamp.toMillis() : 0;
            const timeB = b.lastMessageTimestamp ? b.lastMessageTimestamp.toMillis() : 0;
            return timeB - timeA;
        });

        privateChats = fetchedChats;
        renderPrivateChatsList();
    }


    function subscribeToUserProfiles(userIds) {
        if (!db) return;

        // –û—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è –æ—Ç –ª–∏—à–Ω–∏—Ö
        for (const [id, unsub] of profileListeners.entries()) {
            if (!userIds.includes(id)) {
                try { unsub(); } catch(_) {}
                profileListeners.delete(id);
            }
        }

        // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –Ω—É–∂–Ω—ã—Ö
        userIds.forEach((id) => {
            if (profileListeners.has(id)) return;
            const unsub = db.collection('users').doc(id).onSnapshot(doc => {
                if (!doc.exists) return;
                const data = doc.data();
                allUsers.set(id, data);              // –¥–µ—Ä–∂–∏–º –∫—ç—à —Å–≤–µ–∂–∏–º
                renderPrivateChatsList();            // –ø–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –õ–°

                // –µ—Å–ª–∏ –æ—Ç–∫—Ä—ã—Ç –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–∞–Ω–∞–ª —Å —ç—Ç–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ‚Äî –æ–±–Ω–æ–≤–∏–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
                if (currentChannelType === 'private' && currentChannel && currentChannel.includes(id)) {
                    const el = document.getElementById('currentChannelName');
                    if (el) el.textContent = data.username || el.textContent;
                }
            }, err => console.error('–û—à–∏–±–∫–∞ —Å–ª—É—à–∞—Ç–µ–ª—è –ø—Ä–æ—Ñ–∏–ª—è', id, err));
            profileListeners.set(id, unsub);
        });
    }

    function cleanupProfileListeners() {
        for (const unsub of profileListeners.values()) {
            try { unsub(); } catch(_) {}
        }
        profileListeners.clear();
    }




     function renderPrivateChatsList() {
        if (!privateChatsList) return;
        privateChatsList.innerHTML = '';
        privateChats.forEach(chatPartner => {
            const channelId = `private_${[currentUser.uid, chatPartner.uid].sort().join('_')}`;
            const chatEl = document.createElement('div');           
            chatEl.dataset.channelId = channelId; // <--- –î–û–ë–ê–í–õ–ï–ù–û: –ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º ID –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å—á–µ—Ç—á–∏–∫–∞
            chatEl.className = `channel-item ${channelId === currentChannel && currentChannelType === 'private' ? 'active' : ''}`;
            const isOnline = onlineUsers.has(chatPartner.uid);
            const unreadCount = unreadCounts.get(channelId) || 0;

            // –ë–µ—Ä—ë–º –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ –∏–º—è: —Å–Ω–∞—á–∞–ª–∞ –∏–∑ presence, –ø–æ—Ç–æ–º –∏–∑ users, –≤ –∫–æ–Ω—Ü–µ ‚Äî –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç
            const liveName =
                (onlineUsers.get(chatPartner.uid)?.username)
             || (allUsers.get(chatPartner.uid)?.username)
             || chatPartner.username;

            chatEl.innerHTML = `
                <span class="status-indicator ${isOnline ? 'online' : ''}" style="margin-right: 8px;"></span>
                <span class="channel-name">${escapeHTML(liveName)}</span>
                <span class="unread-channel-badge ${unreadCount > 0 ? '' : 'hidden'}">${unreadCount}</span>
            `;

            chatEl.addEventListener('click', () => switchToChannel(channelId, liveName, 'private'));
            privateChatsList.appendChild(chatEl);
        });
    }
   
 
    function switchToChannel(channelId, channelName, type = 'public') {

        if (lastMessageObserver) lastMessageObserver.disconnect();

        // –î–µ–π—Å—Ç–≤–∏–µ ‚Ññ2: –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –∫–∞–Ω–∞–ª–∞
        const channelNameEl = document.getElementById('currentChannelName');
        if (channelNameEl) {
            const prefix = type === 'public' ? '# ' : '@ ';
            channelNameEl.textContent = `${prefix}${channelName}`;
        }

        // –î–µ–π—Å—Ç–≤–∏–µ ‚Ññ3: –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –Ω–∞–º –ø–æ–ª–Ω–æ—Å—Ç—å—é –º–µ–Ω—è—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç
        if (currentChannel !== channelId) {
            // –ï—Å–ª–∏ –º—ã –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –î–†–£–ì–û–ô –∫–∞–Ω–∞–ª:
            currentChannel = channelId;
            currentChannelType = type;
            // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –Ω–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞
            loadMessages();
        }

        // –î–µ–π—Å—Ç–≤–∏–µ ‚Ññ4: –í –ª—é–±–æ–º —Å–ª—É—á–∞–µ, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –≤–∫–ª–∞–¥–∫—É "–°–æ–æ–±—â–µ–Ω–∏—è"
        // –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –≤–∏–∑—É–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏.
        // –§—É–Ω–∫—Ü–∏—è switchTab —Å–∞–º–∞ –ø–æ–∑–∞–±–æ—Ç–∏—Ç—Å—è –æ —Ç–æ–º, —á—Ç–æ–±—ã –Ω–µ –¥–µ–ª–∞—Ç—å –ª–∏—à–Ω–µ–π —Ä–∞–±–æ—Ç—ã.
        switchTab('messages');
        renderChannelsList();
        renderPrivateChatsList();
    }



    
    function loadChannels() {
        if (!db) return;
        db.collection('channels').orderBy('createdAt').onSnapshot(snapshot => {
            channels = [];
            snapshot.forEach(doc => channels.push({ id: doc.id, ...doc.data() }));
            renderChannelsList();
            if (channels.length === 0) createDefaultChannel();
        });
    }

    async function showChannelEditModal(channelId) { 
        const channel = channels.find(c => c.id === channelId);
        if (!channel) return;

        document.getElementById('editChannelId').value = channel.id;
        document.getElementById('editChannelNameInput').value = channel.name;
        document.getElementById('editChannelDescInput').value = channel.description || '';
        document.getElementById('editChannelPasswordInput').value = ''; 

        const membersSection = document.getElementById('channelMembersSection');
        const membersList = document.getElementById('channelMembersList');
        membersList.innerHTML = `<li>${_chat('channel_members_loading')}</li>`; // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏

        if (channel.members && channel.members.length > 0) {
            membersSection.classList.remove('hidden');
            const memberItems = await Promise.all(channel.members.map(async (memberId) => {
                if (memberId === channel.createdBy) return ''; // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É —É–¥–∞–ª–µ–Ω–∏—è –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞

                let memberData = allUsers.get(memberId);
                if (!memberData) {
                    const doc = await db.collection('users').doc(memberId).get();
                    if (doc.exists) memberData = doc.data();
                }

                if (memberData) {
                    return `<li>
                                <span>${escapeHTML(memberData.username)}</span>
                                <button class="kick-btn" onclick="ChatModule.removeUserFromChannel('${channel.id}', '${memberId}')">${_chat('kick_user_button')}</button>
                            </li>`
                }
                return '';
            }));
            membersList.innerHTML = memberItems.join('');
        } else {
            membersSection.classList.add('hidden');
        }
        
        showModal('channelEditModal');
    }


    async function removeUserFromChannel(channelId, userId) {
        if (!confirm(_chat('chat_kick_user_confirm'))) return;
        try {
            const channelRef = db.collection('channels').doc(channelId);
            await channelRef.update({
                members: firebase.firestore.FieldValue.arrayRemove(userId)
            });
            
            await showChannelEditModal(channelId);
        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞:", error);
            showError(_chat('chat_kick_user_fail'));
        }
    }


    async function saveChannelEdit() {
        const channelId = document.getElementById('editChannelId').value;
        const newName = document.getElementById('editChannelNameInput').value.trim();
        const newDesc = document.getElementById('editChannelDescInput').value.trim();
        const newPassword = document.getElementById('editChannelPasswordInput').value;

        if (!channelId || !newName) {
            alert(_chat('channel_name_empty'));
            return;
        }

        const updates = {
            name: newName,
            description: newDesc
        };

        if (newPassword) {
            updates.hasPassword = true;
            updates.passwordHash = await hashPassword(newPassword);
        } else {
            updates.hasPassword = false;
            updates.passwordHash = null;
        }

        try {
            await db.collection('channels').doc(channelId).update(updates);
            closeModal('channelEditModal');
        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞:", error);
            alert(_chat('error_save_channel_failed'));
        }
    }




    async function deleteChannel() {
        const channelId = document.getElementById('editChannelId').value;
        if (!channelId) return;

        if (channelId === 'general') {
            alert(_chat('chat_cannot_delete_general_alert'));
            return;
        }

        if (confirm(_chat('confirm_delete_channel'))) {
            const channelRef = db.collection('channels').doc(channelId);
            try {
                const isAdmin = currentUser.email === 'iverrum@gmail.com';
                const doc = await channelRef.get();
                if (doc.exists && (doc.data().createdBy === currentUser.uid || isAdmin)) {
                    await channelRef.delete();
                    closeModal('channelEditModal');
                    if (currentChannel === channelId) {
                        const generalChannel = channels.find(c => c.id === 'general');
                        if(generalChannel) handleChannelClick(generalChannel);
                    }
                } else {
                    throw new Error("Permission denied or channel not found.");
                }
            } catch (error) {
                console.error("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞:", error);
                alert(_chat('chat_delete_channel_fail_alert'));
            }
        }
    }



    
    function createDefaultChannel() {
        if (!currentUser) return;
        
        db.collection('channels').doc('general').set({
            name: _chat('default_channel_name'),
            description: _chat('default_channel_desc'),
            createdBy: currentUser.uid,
            createdAt: firebase.firestore.FieldValue.serverTimestamp(),
            hasPassword: false // <-- –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º
        });
    }

    // --- –ù–ê–ß–ê–õ–û: –ù–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —Ä–∞–±–æ—Ç—ã —Å –ø–∞—Ä–æ–ª—è–º–∏ ---
    async function hashPassword(password) {
        if (!password) return null;
        const encoder = new TextEncoder();
        const data = encoder.encode(password);
        const hashBuffer = await window.crypto.subtle.digest('SHA-256', data);
        const hashArray = Array.from(new Uint8Array(hashBuffer));
        const hashHex = hashArray.map(b => b.toString(16).padStart(2, '0')).join('');
        return hashHex;
    }


    /**
     * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–∞—Å—Ç–æ–º–Ω–æ–µ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç Promise.
     * @param {string} channelName - –ò–º—è –∑–∞—â–∏—â–µ–Ω–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞.
     * @returns {Promise<string|null>} - Promise, –∫–æ—Ç–æ—Ä—ã–π —Ä–∞–∑—Ä–µ—à–∞–µ—Ç—Å—è –≤–≤–µ–¥–µ–Ω–Ω—ã–º –ø–∞—Ä–æ–ª–µ–º –∏–ª–∏ null, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –æ—Ç–º–µ–Ω—É.
     */
    function promptForPassword(channelName) {
        return new Promise(resolve => {
            const modal = getEl('channelPasswordModal');
            const titleEl = getEl('channelPasswordModalTitle');
            const textEl = getEl('channelPasswordModalText');
            const inputEl = getEl('channelPasswordInputModal');
            const confirmBtn = getEl('channelPasswordConfirmBtn');
            const cancelBtn = getEl('channelPasswordCancelBtn');

            // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ç–µ–∫—Å—Ç—ã –∏–∑ —Å–ª–æ–≤–∞—Ä—è
            titleEl.textContent = _chat('channel_password_modal_title');
            textEl.textContent = _chatFormat('channel_password_modal_text', { channelName });
            inputEl.placeholder = _chat('channel_password_placeholder');
            confirmBtn.textContent = _chat('modal_confirm_button');
            cancelBtn.textContent = _chat('modal_cancel_button');
            
            inputEl.value = ''; // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ

            // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞ –∏ –æ—á–∏—Å—Ç–∫–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
            const cleanup = (result) => {
                modal.classList.add('hidden');
                confirmBtn.onclick = null;
                cancelBtn.onclick = null;
                // –°–Ω–∏–º–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å Enter
                inputEl.onkeydown = null;
                resolve(result);
            };

            const onConfirm = () => {
                cleanup(inputEl.value);
            };

            const onCancel = () => {
                cleanup(null);
            };

            // –ù–∞–∑–Ω–∞—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
            confirmBtn.onclick = onConfirm;
            cancelBtn.onclick = onCancel;
            
            // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –Ω–∞–∂–∞—Ç–∏—è Enter –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞
            inputEl.onkeydown = (e) => {
                if (e.key === 'Enter') {
                    e.preventDefault();
                    onConfirm();
                }
            };

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–∫–Ω–æ –∏ —Å—Ç–∞–≤–∏–º —Ñ–æ–∫—É—Å –Ω–∞ –ø–æ–ª–µ –≤–≤–æ–¥–∞
            modal.classList.remove('hidden');
            if (window.lucide) lucide.createIcons(); // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –∏–∫–æ–Ω–∫—É –≥–ª–∞–∑–∞
            inputEl.focus();
        });
    }
    // === –ö–û–ù–ï–¶ –ù–û–í–û–ì–û –ö–û–î–ê ===


    async function handleChannelClick(channel) {
        // –§—É–Ω–∫—Ü–∏—è-–ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –∫–∞–Ω–∞–ª –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —É—á–∞—Å—Ç–Ω–∏–∫–∏
        const enterChannel = async () => {
            if (channel.id !== 'general' && (!channel.members || !channel.members.includes(currentUser.uid))) {
                try {
                    const channelRef = db.collection('channels').doc(channel.id);
                    await channelRef.update({
                        members: firebase.firestore.FieldValue.arrayUnion(currentUser.uid)
                    });
                    console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${currentUser.displayName} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –∫–∞–Ω–∞–ª–∞ "${channel.name}"`);
                } catch (error) {
                    console.error("–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —É—á–∞—Å—Ç–Ω–∏–∫–∏:", error);
                }
            }
            switchToChannel(channel.id, channel.name, 'public');
        };

        // –ï—Å–ª–∏ –∫–∞–Ω–∞–ª –∑–∞—â–∏—â–µ–Ω –ø–∞—Ä–æ–ª–µ–º
        if (channel.hasPassword) {
            const isMember = channel.members && channel.members.includes(currentUser.uid);

            if (!isMember) {
                if (unlockedChannels.has(channel.id)) {
                    unlockedChannels.delete(channel.id);
                    localStorage.setItem(`unlockedChannels_${currentUser.uid}`, JSON.stringify(Array.from(unlockedChannels)));
                    console.log(`–õ–æ–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è –∫–∞–Ω–∞–ª–∞ "${channel.name}" –∞–Ω–Ω—É–ª–∏—Ä–æ–≤–∞–Ω, —Ç–∞–∫ –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª —É–¥–∞–ª–µ–Ω.`);
                }
            }
            
            // === –ì–õ–ê–í–ù–û–ï –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ó–∞–º–µ–Ω—è–µ–º prompt –Ω–∞ –Ω–∞—à–µ –Ω–æ–≤–æ–µ –æ–∫–Ω–æ ===
            if (!unlockedChannels.has(channel.id)) {
                // –ñ–¥–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
                const password = await promptForPassword(channel.name);

                // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª "–û—Ç–º–µ–Ω–∞", password –±—É–¥–µ—Ç null
                if (password === null) return;

                const enteredPasswordHash = await hashPassword(password);
                if (enteredPasswordHash === channel.passwordHash) {
                    unlockedChannels.add(channel.id);
                    localStorage.setItem(`unlockedChannels_${currentUser.uid}`, JSON.stringify(Array.from(unlockedChannels)));
                    await enterChannel();
                } else {
                    // === –í–û–¢ –û–ù–û, –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï! ===
                    window.mainApp.showToast(_chat('invalid_channel_password'), 'error');
                }
            } else {
                await enterChannel();
            }
        } else {
            // –ï—Å–ª–∏ –∫–∞–Ω–∞–ª –ø—É–±–ª–∏—á–Ω—ã–π (–±–µ–∑ –ø–∞—Ä–æ–ª—è), –ø—Ä–æ—Å—Ç–æ –≤—Ö–æ–¥–∏–º
            await enterChannel();
        }
    }
    

    async function createChannel() {
        const name = document.getElementById('channelNameInput').value.trim();
        const description = document.getElementById('channelDescInput').value.trim();
        const password = document.getElementById('channelPasswordInput').value;
        const isForTesting = document.getElementById('channelIsForTesting').checked;
        
        if (!name) {
            alert(_chat('chat_channel_name_empty_alert'));
            return;
        }

        const passwordHash = await hashPassword(password);
        
        try {
            await db.collection('channels').add({
                name: name,
                description: description,
                createdBy: currentUser.uid,
                createdAt: firebase.firestore.FieldValue.serverTimestamp(),
                hasPassword: !!password,
                passwordHash: passwordHash,
                isForTesting: isForTesting
            });
            
            closeModal('channelCreateModal');
            document.getElementById('channelNameInput').value = '';
            document.getElementById('channelDescInput').value = '';
            document.getElementById('channelPasswordInput').value = '';
            document.getElementById('channelIsForTesting').checked = false;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞–Ω–∞–ª–∞:', error);
            showError(_chat('chat_create_channel_fail_alert'));
        }
    }



    // ========== UI HELPERS ==========
    function showModal(modalId) {
        document.getElementById(modalId)?.classList.remove('hidden');
    }
    
    function closeModal(modalId) {
        const modal = document.getElementById(modalId);
        if (modal) {
            modal.classList.add('hidden');
        }

        // --- –ù–ê–ß–ê–õ–û –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø ---
        // –ï—Å–ª–∏ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç—Å—è –∏–º–µ–Ω–Ω–æ –æ–∫–Ω–æ —Å –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ–º –ò–ò,
        // —É–±–∏—Ä–∞–µ–º –∫–ª–∞—Å—Å, –±–ª–æ–∫–∏—Ä—É—é—â–∏–π –ø—Ä–æ–∫—Ä—É—Ç–∫—É.
        if (modalId === 'aiExplanationModal') {
            document.body.classList.remove('chat-open');
        }
        // --- –ö–û–ù–ï–¶ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø ---
    }
    
    function waitFor(predicate, interval = 120, maxTries = 60) {
      return new Promise(resolve => {
        let tries = 0;
        const t = setInterval(() => {
          if (predicate() || ++tries >= maxTries) {
            clearInterval(t);
            resolve();
          }
        }, interval);
      });
    }

    /** –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç 'save' | 'finish' | 'cancel' */
    function askWhatToDoWithActiveQuiz() {
      return new Promise(resolve => {
        const modalId = 'activeQuizModal';
        const saveBtn   = document.getElementById('activeQuizSaveAndOpenBtn');
        const finishBtn = document.getElementById('activeQuizFinishBtn');
        const cancelBtn = document.querySelector(`#${modalId} button[onclick*="closeModal"]`);

        const cleanup = () => {
          saveBtn?.removeEventListener('click', onSave);
          finishBtn?.removeEventListener('click', onFinish);
          cancelBtn?.removeEventListener('click', onCancel);
          closeModal(modalId);
        };
        const onSave   = () => { cleanup(); resolve('save'); };
        const onFinish = () => { cleanup(); resolve('finish'); };
        const onCancel = () => { cleanup(); resolve('cancel'); };

        saveBtn?.addEventListener('click', onSave);
        finishBtn?.addEventListener('click', onFinish);
        cancelBtn?.addEventListener('click', onCancel);

        showModal(modalId);
      });
    }



    // –ó–ê–ú–ï–ù–ò–¢–ï –í–°–Æ –°–¢–ê–†–£–Æ –§–£–ù–ö–¶–ò–Æ –ù–ê –≠–¢–û–¢ –ö–û–î
    function showEmojiPicker() {
        const emojiBtn = document.getElementById('emojiBtn');
        if (!emojiBtn) return;

        if (!customElements.get('emoji-picker')) {
            console.warn('Emoji picker –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω');
            return;
        }

        // --- –ù–ê–ß–ê–õ–û –ù–û–í–û–ô, –ù–ê–î–ï–ñ–ù–û–ô –õ–û–ì–ò–ö–ò ---

        const existingPicker = document.querySelector('emoji-picker.main-input-picker');
        // 1. –ï—Å–ª–∏ –ø–∏–∫–µ—Ä —É–∂–µ –æ—Ç–∫—Ä—ã—Ç, –º—ã –µ–≥–æ –ø—Ä–æ—Å—Ç–æ —É–¥–∞–ª—è–µ–º –∏ –≤—ã—Ö–æ–¥–∏–º.
        // –≠—Ç–æ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –ø–æ–≤–µ–¥–µ–Ω–∏–µ "–≤–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å".
        if (existingPicker) {
            existingPicker.remove();
            return;
        }

        // 2. –°–æ–∑–¥–∞–µ–º –ù–û–í–´–ô —ç–ª–µ–º–µ–Ω—Ç –ø–∏–∫–µ—Ä–∞ –ö–ê–ñ–î–´–ô —Ä–∞–∑ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏.
        const picker = document.createElement('emoji-picker');
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å, —á—Ç–æ–±—ã –ª–µ–≥–∫–æ –µ–≥–æ –Ω–∞—Ö–æ–¥–∏—Ç—å
        picker.classList.add('main-input-picker'); 

        picker.addEventListener('emoji-click', event => {
            insertEmoji(event.detail.unicode);
            // –ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —Å–º–∞–π–ª–∏–∫–∞ –ø–∏–∫–µ—Ä –º–æ–∂–Ω–æ —Å—Ä–∞–∑—É –∑–∞–∫—Ä—ã—Ç—å
            if (picker.parentNode) {
                picker.remove();
            }
        });

        // 3. –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–∞—à—É –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—É—é –ª–æ–≥–∏–∫—É –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        document.body.appendChild(picker);
        picker.style.visibility = 'hidden';
        picker.style.position = 'fixed';
        picker.style.left = '-9999px';
        picker.style.top = '-9999px';

        const pickerRect = picker.getBoundingClientRect();
        const btnRect = emojiBtn.getBoundingClientRect();
        const viewportWidth = window.innerWidth;
        const margin = 10;

        let leftPos = btnRect.left + (btnRect.width / 2) - (pickerRect.width / 2);
        if (leftPos < margin) leftPos = margin;
        if (leftPos + pickerRect.width > viewportWidth - margin) {
            leftPos = viewportWidth - pickerRect.width - margin;
        }

        let topPos = btnRect.top - pickerRect.height - margin;
        if (topPos < margin) {
            topPos = btnRect.bottom + margin;
        }

        picker.style.top = `${topPos}px`;
        picker.style.left = `${leftPos}px`;
        
        if (document.body.classList.contains('dark-mode')) {
            picker.classList.add('dark');
        } else {
            picker.classList.add('light');
        }

        picker.style.visibility = 'visible';
        picker.classList.add('visible');

        // 4. –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—à–∞—Ç–µ–ª—å, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –£–î–ê–õ–Ø–¢–¨ –ø–∏–∫–µ—Ä –ø—Ä–∏ –∫–ª–∏–∫–µ —Å–Ω–∞—Ä—É–∂–∏.
        const closeOnClickOutside = (e) => {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–∏–∫–µ—Ä –≤—Å–µ –µ—â–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –∫–ª–∏–∫ –±—ã–ª –Ω–µ –ø–æ –Ω–µ–º—É –∏ –Ω–µ –ø–æ –∫–Ω–æ–ø–∫–µ
            if (document.body.contains(picker) && !picker.contains(e.target) && !emojiBtn.contains(e.target)) {
                picker.remove(); // <-- –°–ê–ú–û–ï –ì–õ–ê–í–ù–û–ï: –ü–û–õ–ù–û–ï –£–î–ê–õ–ï–ù–ò–ï
                // –ü–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É–±–∏—Ä–∞–µ–º —Å–∞–º —Å–ª—É—à–∞—Ç–µ–ª—å, —á—Ç–æ–±—ã –æ–Ω –Ω–µ "–≤–∏—Å–µ–ª" –≤ –ø–∞–º—è—Ç–∏
                window.removeEventListener('click', closeOnClickOutside);
            }
        };
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–ª—É—à–∞—Ç–µ–ª—å
        setTimeout(() => {
            window.addEventListener('click', closeOnClickOutside);
        }, 0);
    }
    



    function insertEmoji(emoji) {
        if (!chatInput) return;
        
        const start = chatInput.selectionStart;
        const end = chatInput.selectionEnd;
        chatInput.value = chatInput.value.substring(0, start) + emoji + chatInput.value.substring(end);
        chatInput.selectionStart = chatInput.selectionEnd = start + emoji.length;
        
        chatInput.focus();
    }
    


    
    
    function clearChatData() {
        // –û–ß–ò–©–ê–ï–ú –•–†–ê–ù–ò–õ–ò–©–ï –ü–†–ò –í–´–•–û–î–ï
        if (currentUser) {
            localStorage.removeItem(`unlockedChannels_${currentUser.uid}`);
        }

        allMessages = [];
        channels = [];
        privateChats = [];
        unlockedChannels.clear(); // <-- –î–û–ë–ê–í–õ–ï–ù–û: –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã
        if (messageArea) messageArea.innerHTML = `<div class="empty-state">${_chat('auth_required_to_view')}</div>`;
        Object.keys(TABS).forEach(tabId => {
            if(tabCounters[tabId]) updateTabCounter(tabId, 0);
        });
    }


    
    function scrollToBottom() { if (messageArea) messageArea.scrollTop = messageArea.scrollHeight; }
    
    function escapeHTML(str) { 
        const div = document.createElement('div'); 
        div.textContent = str; return div.innerHTML; 
    }

    async function deleteAccount() {
        if (!currentUser) return;

        if (!confirm(_chat('confirm_delete_account'))) {
            return;
        }

        const password = prompt(_chat('reauth_prompt'));
        if (password === null || password === "") {
            alert(_chat('reauth_cancelled'));
            return;
        }

        console.log(`–ù–∞—á–∞–ª–æ —É–¥–∞–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${currentUser.uid}`);
        const deleteButton = document.getElementById('deleteAccountBtn');
        if (deleteButton) {
            deleteButton.disabled = true;
            deleteButton.textContent = _chat('deleting_account_status');
        }
        
        try {
            const userId = currentUser.uid;
            
            const credential = firebase.auth.EmailAuthProvider.credential(currentUser.email, password);
            await currentUser.reauthenticateWithCredential(credential);
            console.log("–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ.");

            await db.collection('users').doc(userId).delete();
            console.log(`–î–æ–∫—É–º–µ–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} —É–¥–∞–ª–µ–Ω –∏–∑ Firestore.`);

            await currentUser.delete();
            console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} —É–¥–∞–ª–µ–Ω –∏–∑ Firebase Auth.`);

            alert(_chat('delete_account_success'));
            
            ChatModule.closeModal('profileEditModal');
            ChatModule.closeChatModal();

        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞:", error);
            let errorMessage = _chat('error_generic');
            
            if (error.code === 'auth/wrong-password') {
                errorMessage = _chat('reauth_wrong_password');
            } else if (error.code === 'auth/requires-recent-login') {
                errorMessage += ' –î–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–µ–¥–∞–≤–Ω–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–π–¥–∏—Ç–µ –∏ –≤–æ–π–¥–∏—Ç–µ —Å–Ω–æ–≤–∞.';
            }
            
            alert(errorMessage);
        } finally {
            if (deleteButton) {
                deleteButton.disabled = false;
                deleteButton.textContent = 'üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç';
            }
        }
    }



    // --- –ù–ê–ß–ê–õ–û –ù–û–í–û–ì–û –ö–û–î–ê: –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª —Ñ–∞–π–ª–æ–≤ –≤ —á–∞—Ç–µ ---

    function handleChatFileUploadTrigger() {
        document.getElementById('chatFileInput')?.click();
    }


    // =================================================================
    // ====      –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø v2 –î–õ–Ø –ó–ê–ì–†–£–ó–ö–ò –§–ê–ô–õ–û–í         ====
    // =================================================================

    function handleChatFileUpload_v2(data, startTime) {
      const lock = LockService.getScriptLock();
      lock.waitLock(30000);

      try {
        const { fileName, fileType, content } = data;
        console.log(`v2: –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ –∏–∑ —á–∞—Ç–∞: ${fileName}, —Ç–∏–ø: ${fileType}`);

        if (!fileName || !content || !fileType) {
          throw new Error('–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: fileName, fileType –∏–ª–∏ content');
        }

        const chatFolder = DriveApp.getFolderById(CONFIG.CHAT_FILES_FOLDER_ID);
        const sanitizedFileName = Utils.sanitizeFileName(fileName);
        
        let file;
        
        // –ì–õ–ê–í–ù–ê–Ø –õ–û–ì–ò–ö–ê: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –µ–≥–æ —Ç–∏–ø–∞
        if (fileType === 'pdf') {
          // 1. –î–µ–∫–æ–¥–∏—Ä—É–µ–º Base64 —Å—Ç—Ä–æ–∫—É –≤ –±–∏–Ω–∞—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
          // –ú—ã –æ—Ç—Å–µ–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ "data:application/pdf;base64," –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
          const decodedContent = Utilities.base64Decode(content.split(',')[1] || content);
          // 2. –°–æ–∑–¥–∞–µ–º Blob —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º MIME-—Ç–∏–ø–æ–º
          const blob = Utilities.newBlob(decodedContent, MimeType.PDF, sanitizedFileName);
          // 3. –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª –≤ Drive –∫–∞–∫ –Ω–∞—Å—Ç–æ—è—â–∏–π PDF
          file = chatFolder.createFile(blob);
        } else {
          // –î–ª—è txt –∏ qst —Ä–∞–±–æ—Ç–∞–µ–º –∫–∞–∫ —Ä–∞–Ω—å—à–µ, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç
          file = chatFolder.createFile(sanitizedFileName, content, MimeType.PLAIN_TEXT);
        }
        
        const fileId = file.getId();
        console.log(`–§–∞–π–ª —á–∞—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${sanitizedFileName}, ID: ${fileId}`);
        
        // –ï—Å–ª–∏ —ç—Ç–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ –ø–æ–∏—Å–∫–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å
        if (fileType !== 'pdf') {
            const cleanFilesMap = Utils.buildMapFromFolder(DriveApp.getFolderById(CONFIG.CLEAN_ARCHIVE_FOLDER_ID));
            const wasNewFileAdded = processSingleFile(file, cleanFilesMap);
            if (wasNewFileAdded) {
                console.log("–û–±–Ω–∞—Ä—É–∂–µ–Ω –Ω–æ–≤—ã–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª, –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –ø–µ—Ä–µ—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞.");
                ScriptApp.newTrigger('rebuildSearchIndex').timeBased().after(1000).create();
            }
        }
        
        return Utils.createJsonResponse({
          success: true,
          fileId: fileId,
          fileName: sanitizedFileName,
          processingTime: Date.now() - startTime
        });

      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≤ v2 –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞ –∏–∑ —á–∞—Ç–∞:', error.stack);
        return Utils.createJsonResponse({
          success: false,
          error: '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª —á–∞—Ç–∞ (v2): ' + error.message,
          processingTime: Date.now() - startTime
        });
      } finally {
        lock.releaseLock();
      }
    }


    // –ù–û–í–´–ô –£–ß–ê–°–¢–û–ö –ö–û–î–ê
    function handleChatFileSelected(event) {
        const file = event.target.files[0];
        if (!file) return;

        const allowedExtensions = ['.qst', '.txt', '.pdf'];
        const fileExtension = '.' + file.name.split('.').pop().toLowerCase();
        if (!allowedExtensions.includes(fileExtension)) {
            alert(_chat('error_upload_file_type'));
            return;
        }

        const reader = new FileReader();
        reader.onload = async (e) => {
            const fileContent = e.target.result;
            
            const sendBtn = document.getElementById('sendBtn');
            sendBtn.disabled = true;
            sendBtn.classList.add('loading');
            sendBtn.innerHTML = ''; 

            try {
                let questionCount = 0;
                let fileType = 'text';

                if (fileExtension === '.pdf') {
                    fileType = 'pdf';
                    // –î–ª—è PDF –º—ã –Ω–µ –º–æ–∂–µ–º –ø–æ—Å—á–∏—Ç–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ, —Å–µ—Ä–≤–µ—Ä —Å–¥–µ–ª–∞–µ—Ç —ç—Ç–æ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
                    questionCount = 0; 
                } else {
                    // –î–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤ —Å—á–∏—Ç–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã –∫–∞–∫ –∏ —Ä–∞–Ω—å—à–µ
                    const questions = window.mainApp.parseQstContent(fileContent);
                    questionCount = questions.length;
                }

                const response = await fetch(googleAppScriptUrl, {
                    method: 'POST',
                    headers: { 'Content-Type': 'text/plain' },
                    body: JSON.stringify({
                        action: 'chatFileUpload_v2', // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—à—É –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é V2
                        fileName: file.name,
                        fileType: fileType,
                        content: fileContent // –≠—Ç–æ –±—É–¥–µ—Ç –ª–∏–±–æ —Ç–µ–∫—Å—Ç, –ª–∏–±–æ Base64 DataURL
                    })
                });

                if (!response.ok) throw new Error(`–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ${response.statusText}`);
                const result = await response.json();
                
                if (result.success && result.fileId) {
                    await sendFileMessage(file.name, result.fileId, questionCount, fileType);
                } else {
                    throw new Error(result.error || _chat('error_fetch_file_id_failed'));
                }

            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ —á–∞—Ç–∞:', error);
                showError(_chat('error_file_process_failed') + ': ' + error.message);
            } finally {
                sendBtn.disabled = false;
                sendBtn.classList.remove('loading');
                sendBtn.innerHTML = '‚û§';
            }
        };

        // –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞, —á–∏—Ç–∞–µ–º –µ–≥–æ –ø–æ-—Ä–∞–∑–Ω–æ–º—É
        if (file.name.toLowerCase().endsWith('.pdf')) {
            reader.readAsDataURL(file); // –ß–∏—Ç–∞–µ–º PDF –∫–∞–∫ Base64
        } else {
            reader.readAsText(file, 'UTF-8'); // –¢–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã —á–∏—Ç–∞–µ–º –∫–∞–∫ —Ç–µ–∫—Å—Ç
        }
        
        event.target.value = '';
    }



    // –ù–û–í–´–ô –£–ß–ê–°–¢–û–ö –ö–û–î–ê
    async function sendFileMessage(fileName, fileId, questionCount, fileType = 'text') {
        if (!currentUser || !db) return;

        const message = {
            authorId: currentUser.uid,
            authorName: currentUser.displayName || currentUser.email || '–ê–Ω–æ–Ω–∏–º',
            channelId: currentChannel,
            createdAt: firebase.firestore.FieldValue.serverTimestamp(),
            type: 'file_share',
            fileInfo: {
                id: fileId,
                name: fileName,
                questions: questionCount,
                type: fileType // –î–æ–±–∞–≤–ª—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
            }
        };

        await db.collection('messages').add(message);
    }



    // –ù–û–í–´–ô –£–ß–ê–°–¢–û–ö –ö–û–î–ê (–ü–û–õ–ù–ê–Ø –ó–ê–ú–ï–ù–ê)
    function showFileActionsModal(fileId, fileName, isTestingChannel = false) {
        const decodedFileName = decodeURIComponent(fileName);
        document.getElementById('fileActionsModalTitle').textContent = `${_chat('file_actions_modal_title')} ${decodedFileName}`;

        const downloadBtn = document.getElementById('fileActionDownloadBtn');
        const testBtn = document.getElementById('fileActionTestBtn');

        // ¬´–°–∫–∞—á–∞—Ç—å¬ª ‚Äî –≤—Å–µ–≥–¥–∞
        downloadBtn.onclick = () => downloadSharedFile(fileId, fileName);
        downloadBtn.style.display = '';
        downloadBtn.textContent = _chat('file_actions_download');

        // ¬´–ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç¬ª ‚Äî –í–°–ï–ì–î–ê –≤–∏–¥–Ω–∞ (–≤–∫–ª—é—á–∞—è PDF)
        testBtn.style.display = '';

        const modalButtonsContainer = testBtn.parentElement;
        const closeBtn = modalButtonsContainer.querySelector('button[onclick*="closeModal"]');

        // –°–Ω–æ—Å–∏–º —Å—Ç–∞—Ä—É—é –ø—Ä–∞–∫—Ç–∏–∫—É, –µ—Å–ª–∏ –≤–∏—Å–∏—Ç
        const oldPracticeBtn = document.getElementById('fileActionPracticeTestBtn');
        if (oldPracticeBtn) oldPracticeBtn.remove();

        if (isTestingChannel) {
            const practiceTestBtn = document.createElement('button');
            practiceTestBtn.id = 'fileActionPracticeTestBtn';
            practiceTestBtn.textContent = _chat('practice_test_button');
            practiceTestBtn.onclick = () => startTestFromShare(fileId, fileName, { isPractice: true });

            testBtn.textContent = _chat('official_test_button');
            testBtn.onclick = () => startTestFromShare(fileId, fileName, { isPractice: false });

            modalButtonsContainer.insertBefore(testBtn, closeBtn);
            modalButtonsContainer.insertBefore(practiceTestBtn, closeBtn);
            modalButtonsContainer.insertBefore(downloadBtn, closeBtn);
        } else {
            testBtn.textContent = _chat('file_actions_test');
            testBtn.onclick = () => startTestFromShare(fileId, fileName, { isPractice: true });

            modalButtonsContainer.insertBefore(downloadBtn, closeBtn);
            modalButtonsContainer.insertBefore(testBtn, closeBtn);
        }

        showModal('fileActionsModal');
    }



    function createDownloadStatusBubble(fileName){
      if(!messageArea) return null;
      const id = 'dl-' + Date.now() + '-' + Math.random().toString(36).slice(2,7);

      const msg = document.createElement('div');
      msg.className = 'message mine chat-download';
      msg.id = id;

      const content = document.createElement('div');
      content.className = 'message-content';

      const title = document.createElement('div');
      title.className = 'chat-download-title';
      title.textContent = '–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ñ–∞–π–ª–∞ –∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏—é‚Ä¶';

      const name = document.createElement('div');
      name.className = 'chat-download-name';
      name.textContent = fileName;

      const barWrap = document.createElement('div');
      barWrap.className = 'download-progress';
      const bar = document.createElement('div');
      bar.className = 'download-progress-bar';
      bar.style.width = '0%';
      barWrap.appendChild(bar);

      const pct = document.createElement('div');
      pct.className = 'download-progress-text';
      pct.style.fontSize = '.85em';
      pct.style.opacity = '.85';
      pct.style.marginTop = '6px';
      pct.textContent = '0%';

      content.appendChild(title);
      content.appendChild(name);
      content.appendChild(barWrap);
      content.appendChild(pct);
      msg.appendChild(content);

      messageArea.appendChild(msg);
      messageArea.scrollTop = messageArea.scrollHeight;
      return id;
    }


    function setDownloadProgressBubble(id, percent, label){
      const el = document.getElementById(id);
      if(!el) return;
      const bar = el.querySelector('.download-progress-bar');
      const txt = el.querySelector('.download-progress-text');
      if(bar){
        const p = Math.max(0, Math.min(100, Math.round(percent || 0)));
        bar.style.width = p + '%';
        if (txt) txt.textContent = (label || (p + '%'));
      }
    }


    function updateDownloadStatusBubble(id, state, message){
      const el = document.getElementById(id);
      if(!el) return;
      const title = el.querySelector('.chat-download-title');
      const progress = el.querySelector('.download-progress');
      const txt = el.querySelector('.download-progress-text');

      if(state === 'success'){
        if(title) title.textContent = '–ì–æ—Ç–æ–≤–æ! –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –Ω–∞—á–∞–ª–æ—Å—å.';
        if(progress) progress.remove();
        if(txt) txt.remove();
        el.classList.add('success');
        setTimeout(()=> el.remove(), 12000);
      } else if(state === 'error'){
        if(title) title.textContent = '–û—à–∏–±–∫–∞: ' + (message || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è');
        if(progress) progress.remove();
        if(txt) txt.remove();
        el.classList.add('error');
      }
    }





    async function downloadSharedFile(fileId, fileName) {
      const decodedFileName = decodeURIComponent(fileName || '');
      const isPdf = /\.pdf$/i.test(decodedFileName);

      // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª–∫—É –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å-–±–∞–±–ª
      if (typeof closeModal === 'function') closeModal('fileActionsModal');
      const statusId = typeof createDownloadStatusBubble === 'function'
        ? createDownloadStatusBubble(decodedFileName)
        : null;

      try {
        if (isPdf) {
          // 1) –°—Ç–∞—Ä—Ç—É–µ–º –ø–æ–¥–≥–æ—Ç–æ–≤–∫—É –Ω–∞ GAS
          const prepRes = await fetch(`${googleAppScriptUrl}?action=prepareDownload&fileId=${encodeURIComponent(fileId)}`);
          const prep = await prepRes.json();
          if (!prep.success) throw new Error(prep.error || '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ–¥–≥–æ—Ç–æ–≤–∫—É –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ');

          // –ú–≥–Ω–æ–≤–µ–Ω–Ω–∞—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å (–∫—ç—à): —Å–∫–∞—á–∏–≤–∞–µ–º –±–µ–∑ –ø—É–ª–ª–∏–Ω–≥–∞
          if (prep.ready && prep.downloadUrl) {
            if (statusId && typeof setDownloadProgressBubble === 'function') {
              setDownloadProgressBubble(statusId, 100, '–ì–æ—Ç–æ–≤–æ');
            }
            const a = document.createElement('a');
            a.href = prep.downloadUrl;
            a.download = decodedFileName;
            document.body.appendChild(a);
            a.click();
            document.body.removeChild(a);
            if (statusId && typeof updateDownloadStatusBubble === 'function') {
              updateDownloadStatusBubble(statusId, 'success');
            }
            return;
          }

          // 2) –ü—É–ª–ª–∏–º –ø—Ä–æ–≥—Ä–µ—Å—Å
          const pollOnce = async () => {
            const r = await fetch(`${googleAppScriptUrl}?action=getDownloadProgress&jobId=${encodeURIComponent(prep.jobId)}`);
            const d = await r.json();
            if (!d.success) throw new Error(d.error || '–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø—Ä–µ—Ä–≤–∞–ª–∞—Å—å');
            const pct = typeof d.progress === 'number' ? Math.max(0, Math.min(100, d.progress)) : 0;
            const label = (d.message && d.message.trim()) ? `${pct}% ‚Äî ${d.message}` : `${pct}%`;
            if (statusId && typeof setDownloadProgressBubble === 'function') {
              setDownloadProgressBubble(statusId, pct, label);
            }
            return d;
          };

          let state, tries = 0;
          while (true) {
            state = await pollOnce();
            if (state.status === 'ready') break;
            if (state.status === 'error') throw new Error(state.message || '–û—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏');
            if (tries++ > 600) throw new Error('–¢–∞–π–º–∞—É—Ç –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ —Ñ–∞–π–ª–∞');
            await new Promise(res => setTimeout(res, 800));
          }

          // 3) –°–∫–∞—á–∏–≤–∞–µ–º –ø–æ –≥–æ—Ç–æ–≤–æ–π —Å—Å—ã–ª–∫–µ
          if (state.downloadUrl) {
            const a = document.createElement('a');
            a.href = state.downloadUrl;
            a.download = decodedFileName;
            document.body.appendChild(a);
            a.click();
            document.body.removeChild(a);
          } else {
            // –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π —Ñ–æ–ª–±—ç–∫ (–Ω–µ –¥–æ–ª–∂–µ–Ω —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –¥–ª—è PDF)
            window.open(`${googleAppScriptUrl}?action=getChatFileContent&fileId=${encodeURIComponent(fileId)}&asBase64=true`, '_blank');
          }

          if (statusId && typeof updateDownloadStatusBubble === 'function') {
            updateDownloadStatusBubble(statusId, 'success');
          }

        } else {
          // –¢–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã: –±–µ–∑ –æ—á–µ—Ä–µ–¥–∏ ‚Äî —Å—Ä–∞–∑—É –≤—ã—Ç–∞—Å–∫–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –∏ —Å–∫–∞—á–∏–≤–∞–µ–º
          const url = `${googleAppScriptUrl}?action=getChatFileContent&fileId=${encodeURIComponent(fileId)}`;
          const response = await fetch(url);
          const data = await response.json();
          if (!data.success) throw new Error(data.error || '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª');

          await window.mainApp.downloadOrShareFile(
            decodedFileName,
            data.content,
            'text/plain;charset=utf-8',
            _chat('share_title_generic_file')
          );

          if (statusId && typeof setDownloadProgressBubble === 'function') {
            setDownloadProgressBubble(statusId, 100, '–ì–æ—Ç–æ–≤–æ');
          }
          if (statusId && typeof updateDownloadStatusBubble === 'function') {
            updateDownloadStatusBubble(statusId, 'success');
          }
        }
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞ –∏–∑ —á–∞—Ç–∞:', error);
        if (statusId && typeof updateDownloadStatusBubble === 'function') {
          updateDownloadStatusBubble(statusId, 'error', error.message);
        }
        try {
          alert(_chat('chat_file_download_failed').replace('{error}', error.message));
        } catch {
          alert('–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å: ' + error.message);
        }
      }
    }




    // –ù–û–í–´–ô –£–ß–ê–°–¢–û–ö –ö–û–î–ê (–ü–û–õ–ù–ê–Ø –ó–ê–ú–ï–ù–ê)
    async function startTestFromShare(fileId, fileName, options = { isPractice: true }) {
        const decodedFileName = decodeURIComponent(fileName);
        const isPdf = decodedFileName.toLowerCase().endsWith('.pdf');
        const logTag = `[TEST][fromChat] ${decodedFileName}`;

        console.groupCollapsed(`${logTag} ‚Äî startTestFromShare`);
        try {
            closeModal('fileActionsModal');
            ChatModule.closeChatModal();
            // –ï—Å–ª–∏ —É–∂–µ –∏–¥—ë—Ç —Ç–µ—Å—Ç ‚Äî —Å–ø—Ä–æ—Å–∏–º, —á—Ç–æ –¥–µ–ª–∞—Ç—å
            const quizArea = document.getElementById('quizArea');
            const quizSetupArea = document.getElementById('quizSetupArea');
            const testIsVisible = quizArea && !quizArea.classList.contains('hidden');

            if (testIsVisible || document.body.classList.contains('quiz-active')) {
              const decision = await askWhatToDoWithActiveQuiz();

              if (decision === 'cancel') {
                // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ–¥—É–º–∞–ª ‚Äî –Ω–∏—á–µ–≥–æ –Ω–µ –æ—Ç–∫—Ä—ã–≤–∞–µ–º
                closeModal('fileActionsModal');
                return;
              }

              if (decision === 'save') {
                // –ñ–º—ë–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–∑–∂–µ" ‚Äî –æ–Ω–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–µ—Å—Å–∏—é –∏ —Å–∫—Ä—ã–≤–∞–µ—Ç —Ç–µ—Å—Ç
                document.getElementById('continueLaterButton')?.click();
                // –î–æ–∂–¥—ë–º—Å—è, –ø–æ–∫–∞ —Ç–µ—Å—Ç —Ä–µ–∞–ª—å–Ω–æ —Å–ø—Ä—è—á–µ—Ç—Å—è, —á—Ç–æ–±—ã –Ω–µ –Ω–∞—Å–ª–∞–∏–≤–∞–ª–∏—Å—å –ø–∞–Ω–µ–ª–∏
                await waitFor(() => quizArea?.classList.contains('hidden'));
              }

              if (decision === 'finish') {
                // –ü–æ–ª–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º —à—Ç–∞—Ç–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
                document.getElementById('finishTestButton')?.click();
                // –í —ç—Ç–æ–º —Å—Ü–µ–Ω–∞—Ä–∏–∏ –ù–ï –∑–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–π —Ç–µ—Å—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ ‚Äî –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—à—ë–ª —Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                closeModal('fileActionsModal');
                return;
              }
            }
            // –¥–∞–ª—å—à–µ –∏–¥—ë—Ç —Ç–≤–æ–π —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥:


            window.mainApp.showGlobalLoader(`${_chat('global_loader_loading_test')} "${decodedFileName}"...`);

            // 1) –¢—è–Ω–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
            let url = `${googleAppScriptUrl}?action=getChatFileContent&fileId=${fileId}`;
            if (isPdf) url += '&asBase64=true'; // —Å–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—ë—Ç Base64/DataURL
            console.time(`${logTag} fetch`);
            const response = await fetch(url);
            const data = await response.json();
            console.timeEnd(`${logTag} fetch`);

            if (!data.success) throw new Error(data.error || 'Server responded with success=false');

            // 2) –í–µ—Ç–≤–ª–µ–Ω–∏–µ –ø–æ —Ç–∏–ø—É —Ñ–∞–π–ª–∞
            if (!isPdf) {
                console.log(`${logTag} ‚Üí —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª: –ø–µ—Ä–µ–¥–∞—ë–º –≤ processFile`);
                const quizContext = {
                    fileId,
                    channelId: currentChannel,
                    isPractice: options?.isPractice === false ? false : true
                };
                window.mainApp.processFile(decodedFileName, data.content, quizContext);
                console.groupEnd();
                return;
            }

            // 3) PDF: Base64/DataURL ‚Üí Blob ‚Üí File ‚Üí processPdfWithImages
            console.log(`${logTag} ‚Üí PDF: –Ω–∞—á–∏–Ω–∞—é –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é Base64 ‚Üí Blob ‚Üí File`);
            const content = data.content;

            console.time(`${logTag} toBlob`);
            let pdfBlob;
            if (typeof content === 'string' && content.startsWith('data:')) {
                // DataURL ‚Äî —Å–∞–º—ã–π –±—ã—Å—Ç—Ä—ã–π –ø—É—Ç—å —á–µ—Ä–µ–∑ fetch(dataURL)
                const fetched = await fetch(content);
                pdfBlob = await fetched.blob();
            } else if (typeof content === 'string') {
                // ¬´–ß–∏—Å—Ç–∞—è¬ª Base64
                const base64 = content.replace(/^data:.*;base64,/, '');
                const byteChars = atob(base64);
                const byteNumbers = new Array(byteChars.length);
                for (let i = 0; i < byteChars.length; i++) byteNumbers[i] = byteChars.charCodeAt(i);
                const byteArray = new Uint8Array(byteNumbers);
                pdfBlob = new Blob([byteArray], { type: 'application/pdf' });
            } else {
                throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç data.content –¥–ª—è PDF');
            }
            console.timeEnd(`${logTag} toBlob`);
            console.log(`${logTag} Blob size:`, pdfBlob.size, 'bytes');

            const pdfFileObject = new File([pdfBlob], decodedFileName, { type: 'application/pdf' });

            // 4) –ì–æ—Ç–æ–≤–æ ‚Äî –≤—ã–∑—ã–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
            const pdfProcessor = window.mainApp && window.mainApp.processPdfWithImages;
            if (typeof pdfProcessor !== 'function') {
                console.error(`${logTag} processPdfWithImages –Ω–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –∏–∑ mainApp`);
                alert('–û–±—Ä–∞–±–æ—Ç—á–∏–∫ PDF –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å —ç–∫—Å–ø–æ—Ä—Ç processPdfWithImages –≤ mainApp.');
                throw new Error('processPdfWithImages is not a function');
            }

            console.time(`${logTag} processPdfWithImages`);
            await pdfProcessor(pdfFileObject);
            console.timeEnd(`${logTag} processPdfWithImages`);
            console.log(`${logTag} ‚úî –æ–±—Ä–∞–±–æ—Ç–∫–∞ PDF –∑–∞–≤–µ—Ä—à–µ–Ω–∞`);

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–∞ –∏–∑ —á–∞—Ç–∞:', error);
            alert(_chat('error_start_test_failed').replace('{error}', error.message));
        } finally {
            // –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π —Å–∫—Ä—ã–≤–∞–µ–º –ª–æ–∞–¥–µ—Ä (processFile —Ç–æ–∂–µ –ø—Ä—è—á–µ—Ç –µ–≥–æ —Å–∞–º, –Ω–æ –ª–∏—à–Ω–∏–º –Ω–µ –±—É–¥–µ—Ç)
            window.mainApp.hideGlobalLoader?.();
            console.groupEnd();
        }


    }




    // –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ö–û–î
    async function uploadFileToServer(fileName, fileContent, url) {
        if (!fileName || !fileContent) {
            console.warn("–ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—É—Å—Ç–æ–π —Ñ–∞–π–ª. –û—Ç–º–µ–Ω–µ–Ω–æ.");
            return;
        }
        if (!url) {
            console.error("URL –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω. –ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.");
            return;
        }

        console.log(`–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ñ–∞–π–ª–∞ "${fileName}" `);

        try {
            const payload = {
                action: 'saveToArchive', // <-- –î–û–ë–ê–í–¨–¢–ï –≠–¢–£ –°–¢–†–û–ö–£
                fileName: fileName,
                content: fileContent,
                isQstValid: true
            };

            const response = await fetch(url, {
                method: 'POST',
                mode: 'no-cors',
                cache: 'no-cache',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(payload)
            });

            console.log("–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω");

        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞:", error);
        }
    }



    function toggleNotifications() {
        notificationsEnabled = !notificationsEnabled;

        const notificationBtn = document.getElementById('notificationToggle');
        if (notificationBtn) {
            notificationBtn.classList.toggle('active', notificationsEnabled);
            notificationBtn.title = notificationsEnabled ? _chat('notifications_title_enabled') : _chat('notifications_title_disabled');
        }

        // --- –ò–ó–ú–ï–ù–ï–ù–ò–ï –ó–î–ï–°–¨ ---
        const message = notificationsEnabled ? _chat('notifications_enabled') : _chat('notifications_disabled');
        window.mainApp.showToast(message, 'info'); // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–∏–ø 'info' –¥–ª—è –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π

        console.log(`–°—Ç–∞—Ç—É—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: ${notificationsEnabled}`);
    }


    function showNotification(playSound) {
        if (!notificationsEnabled) return;

        if (document.hidden) {
            try {
                if (playSound) {
                    const sound = document.getElementById('notificationSound');
                    if (sound) {
                        sound.currentTime = 0;
                        sound.play().catch(e => console.warn("–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –∑–≤—É–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è."));
                    }
                }

                unreadMessageCount++;
                document.title = `(${unreadMessageCount}) ${_chat('notification_new_message')}`;
            } catch(e) {
                console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:", e);
            }
        }
    }

    function setupVisibilityListener() {
        document.addEventListener('visibilitychange', () => {
            if (!document.hidden) {
                if (unreadMessageCount > 0) {
                    unreadMessageCount = 0;
                    setTimeout(() => {
                        document.title = originalTitle;
                    }, 2000);
                }
            }
        });
    }

    async function togglePinMessage(messageId) {
        if (!db || !currentUser) return;

        const messageRef = db.collection('messages').doc(messageId);
        try {
            const doc = await messageRef.get();
            if (!doc.exists) return;

            const isCurrentlyPinned = doc.data().isPinned || false;
            await messageRef.update({
                isPinned: !isCurrentlyPinned
            });
            console.log(`–°–æ–æ–±—â–µ–Ω–∏–µ ${messageId} ${!isCurrentlyPinned ? '–∑–∞–∫—Ä–µ–ø–ª–µ–Ω–æ' : '–æ—Ç–∫—Ä–µ–ø–ª–µ–Ω–æ'}`);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
            showError(_chat('error_pin_message_failed'));
        }
    }

    function togglePinnedModeView() {
        isPinnedMode = !isPinnedMode;
        
        const toggleBtn = document.getElementById('togglePinnedBtn');
        if (toggleBtn) {
            toggleBtn.classList.toggle('active', isPinnedMode);
            toggleBtn.title = isPinnedMode ? _chat('chat_show_all_messages') : _chat('chat_show_pinned_messages');
        }

        displayMessages();
    }




    /**
     * –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø
     * –ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —Ä–µ–∂–∏–º –ø–µ—Ä–µ–≤–æ–¥–∞ —á–∞—Ç–∞ –∏ –ø–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è.
     */
    function toggleChatTranslation() {
        isChatTranslateModeEnabled = !isChatTranslateModeEnabled;
        const toggleBtn = getEl('chatTranslateBtn');
        if (toggleBtn) {
            toggleBtn.classList.toggle('active', isChatTranslateModeEnabled);
            toggleBtn.title = isChatTranslateModeEnabled 
                ? _chat('chat_translate_button_title_on') 
                : _chat('chat_translate_button_title_off');
        }
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –≤—Å–µ –≤–∏–¥–∏–º—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        displayMessages();
    }


    async function fetchAndCacheTranslation(message) {
        if (!message.text || !message.text.trim()) return;

        const lang = localStorage.getItem('appLanguage') || 'ru';
        
        // –ò–°–ü–û–õ–¨–ó–£–ï–ú –ù–û–í–£–Æ –í–ù–£–¢–†–ï–ù–ù–Æ–Æ –§–£–ù–ö–¶–ò–Æ
        const cacheKey = getChatCacheKey(message.id, lang);
        
        try {
            const response = await fetch(googleAppScriptUrl, {
                method: 'POST',
                body: JSON.stringify({
                    action: 'translateText',
                    text: message.text,
                    targetLang: lang
                })
            });
            const result = await response.json();
            if (result.success) {
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –∫–ª—é—á–æ–º
                chatTranslations.set(cacheKey, result.translatedText);
                
                const messageEl = getEl(`message-${message.id}`);
                const contentEl = messageEl?.querySelector('.message-content');
                if (contentEl) {
                    // 1. –°–Ω–∞—á–∞–ª–∞ —É–±–∏—Ä–∞–µ–º –∫–ª–∞—Å—Å "–º–æ—Ä–≥–∞–Ω–∏—è".
                    // –≠—Ç–æ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç –∞–Ω–∏–º–∞—Ü–∏—é "–Ø —Ä–∞–±–æ—Ç–∞—é..."
                    contentEl.classList.remove('translating');

                    // 2. –í—ã–∑—ã–≤–∞–µ–º "—É–º–Ω—É—é" –∞–Ω–∏–º–∞—Ü–∏—é —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞ –∏–∑ mainApp.
                    //    –≠—Ç–æ –∑–∞–ø—É—Å—Ç–∏—Ç –∞–Ω–∏–º–∞—Ü–∏—é "–í–æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç!".
                    //    message.text - —ç—Ç–æ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç.
                    //    result.translatedText - —ç—Ç–æ —Ç–µ–∫—Å—Ç, –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞.
                    await window.mainApp.animateTextTransformation(contentEl, message.text, result.translatedText);
                }
            } else {
                throw new Error(result.error);
            }

        } catch (error) {
            console.error(`–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è ${message.id}:`, error);
            chatTranslations.set(cacheKey, _chat('chat_translation_failed'));
            const messageEl = getEl(`message-${message.id}`);
            const contentEl = messageEl?.querySelector('.message-content');
            if (contentEl) {
                contentEl.textContent = _chat('chat_translation_failed');
                contentEl.classList.add('translation-error');
                contentEl.classList.remove('translating');
            }
        }
    }


    
    function setupTabActions(tabId) {
        const container = document.getElementById('tabActionsContainer');
        if (!container) return;
        
        container.innerHTML = ''; 
        container.classList.remove('hidden');

        if (tabId === 'questions' || tabId === 'favorites') {
            const downloadQstBtn = document.createElement('button');
            downloadQstBtn.textContent = _chat('download_qst_button'); // –ò–ó–ú–ï–ù–ï–ù–û
            downloadQstBtn.onclick = () => handleDownload(tabId, 'qst');
            container.appendChild(downloadQstBtn);

            const downloadTxtBtn = document.createElement('button');
            downloadTxtBtn.textContent = _chat('download_txt_button'); // –ò–ó–ú–ï–ù–ï–ù–û
            downloadTxtBtn.onclick = () => handleDownload(tabId, 'txt');
            container.appendChild(downloadTxtBtn);
        }

        if (tabId === 'favorites') {
            const clearBtn = document.createElement('button');
            // === –ò–ó–ú–ï–ù–ï–ù–ò–ï –ó–î–ï–°–¨ ===
            clearBtn.innerHTML = `<i data-lucide="trash-2"></i>`; 
            clearBtn.title = _chat('clear_favorites_button'); // –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–ø–ª—ã–≤–∞—é—â—É—é –ø–æ–¥—Å–∫–∞–∑–∫—É
            clearBtn.classList.add('btn-danger'); 
            clearBtn.onclick = () => clearAllFavorites();
            container.appendChild(clearBtn);
        }
        // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –Ω–æ–≤—ã–µ –∏–∫–æ–Ω–∫–∏
        if (window.lucide) {
            lucide.createIcons();
        }
    }





    async function handleDownload(dataType, format) {
        if (!currentUser) {
            alert(_chat('error_download_auth_required'));
            return;
        }
        
        let itemsToProcess = [];
        const fileName = `${dataType}_${new Date().toISOString().slice(0, 10)}`;

        try {
            if (dataType === 'favorites') {
                const snapshot = await db.collection('favorites').where('userId', '==', currentUser.uid).get();
                itemsToProcess = snapshot.docs.map(doc => {
                    const data = doc.data();
                    return { ...data.content, type: data.type };
                });

            } else if (dataType === 'questions') {
                const snapshot = await db.collection('questions').where('channelId', '==', currentChannel).get();
                itemsToProcess = snapshot.docs.map(doc => ({ id: doc.id, type: 'question', ...doc.data() }));
            }

            if (itemsToProcess.length === 0) {
                alert(`–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≤ —Ä–∞–∑–¥–µ–ª–µ "${dataType}".`);
                return;
            }

            let fileContent = '';
            if (format === 'qst') {
                fileContent = itemsToProcess.map(item => {
                    let qstBlock = `? ${item.text || ''}\n`;
                    if (item.type === 'question' && item.options) {
                        item.options.forEach(opt => {
                            qstBlock += `${opt.isCorrect ? '+' : '-'} ${opt.text}\n`;
                        });
                    } else { 
                        qstBlock += `+ ${item.text || ''}\n`;
                    }
                    return qstBlock;
                }).join('\n');
            } else { // txt format
                fileContent = itemsToProcess.map(item => {
                    if (item.type === 'question' && item.options) {
                        const correctAnswer = item.options.find(opt => opt.isCorrect)?.text || 'N/A';
                        return `${_chat('download_file_question_label')}: ${item.text}\n${_chat('download_file_answer_label')}: ${correctAnswer}\n`;
                    } else {
                        return `${_chat('download_file_message_label')}: ${item.text}\n`;
                    }
                }).join('----------------------------------\n');
            }



            const fullFileName = `${fileName}.${format}`;
            const shareTitle = dataType === 'favorites' ? _chat('share_title_favorites') : _chat('share_title_questions');
            
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
            if (window.mainApp && typeof window.mainApp.downloadOrShareFile === 'function') {
                console.log('–ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∏–∑ —á–∞—Ç–∞');
                await window.mainApp.downloadOrShareFile(fullFileName, fileContent, 'text/plain;charset=utf-8', shareTitle);
            } else {
                console.warn('–ù–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback');
                // Fallback –Ω–∞ —Å—Ç–∞—Ä—É—é —Å–∏—Å—Ç–µ–º—É
                if (window.mainApp && typeof window.mainApp.downloadFile === 'function') {
                    window.mainApp.downloadFile(fullFileName, fileContent, 'text/plain;charset=utf-8');
                } else {
                    alert(_chat('error_download_system_unavailable'));
                }
            }

        } catch (error) {
            console.error(`–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –¥–ª—è ${dataType}:`, error);
            alert(_chat('error_download_failed'));
        }
    }
    


    async function clearAllFavorites() {
        if (!currentUser || !db) return;

        const confirmed = await window.mainApp.showConfirmationModal(
            'confirm_action_title',
            'confirm_clear_favorites',
            'confirm_button_delete' // <-- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ—Ç –∂–µ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∫–ª—é—á
        );

        if (!confirmed) {
            return;
        }

        try {
            const querySnapshot = await db.collection('favorites')
                .where('userId', '==', currentUser.uid)
                .get();

            if (querySnapshot.empty) {
                window.mainApp.showToast(_chat('chat_favorites_empty_to_clear'), 'info');
                return;
            }

            const batch = db.batch();
            querySnapshot.docs.forEach(doc => {
                batch.delete(doc.ref);
            });
            await batch.commit();

            window.mainApp.showToast("–ò–∑–±—Ä–∞–Ω–Ω–æ–µ —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω–æ.", 'success');
            loadFavorites(); 

        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ:", error);
            showError(_chat('error_clear_favorites_failed'));
        }
    }




    async function copyQuestionAsQst(questionObject) {
        if (!questionObject || !questionObject.text || !Array.isArray(questionObject.options)) {
            console.error("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞.");
            return;
        }

        // 1. –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ .qst —Ñ–æ—Ä–º–∞—Ç
        let qstContent = `? ${questionObject.text}\n`;
        questionObject.options.forEach(opt => {
            qstContent += `${opt.isCorrect ? '+' : '-'} ${opt.text}\n`;
        });

        // 2. –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑ mainApp
        try {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–∞—à—É –≥–ª–æ–±–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
            await window.mainApp.copyToClipboardMain(qstContent);
            // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –≤—Å—Ç—Ä–æ–µ–Ω–æ –≤ copyToClipboardMain
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞:', error);
            alert(_chat('error_copy_question_failed'));
        }
    }


    function showAISummaryModal(title, content) {
        getEl('aiSummaryModalTitle').textContent = title;
        const outputEl = getEl('aiSummaryOutput');

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫—É marked –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        if (window.marked) {
            outputEl.innerHTML = marked.parse(content);
        } else {
            outputEl.textContent = content;
        }
        
        showModal('aiSummaryModal');
    }



    async function showTestResults(fileId, channelId) {
        const modalTitle = document.getElementById('testResultsModalTitle');
        const tableContainer = document.getElementById('testResultsTableContainer');
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–ª—é—á –ø–µ—Ä–µ–≤–æ–¥–∞ –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞
        modalTitle.textContent = _chat('results_modal_title');
        
        // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï ‚Ññ1: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è "–ó–∞–≥—Ä—É–∑–∫–∏"
        tableContainer.innerHTML = `<div class="loading-placeholder">${_chat('loading_messages')}</div>`;
        showModal('testResultsModal');

        try {
            const querySnapshot = await db.collection('testResults')
                .where('fileId', '==', fileId)
                .where('channelId', '==', channelId)
                .orderBy('accuracy', 'desc')
                .get();
                
            if (querySnapshot.empty) {
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–ª—é—á –ø–µ—Ä–µ–≤–æ–¥–∞ –¥–ª—è –ø—É—Å—Ç–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
                tableContainer.innerHTML = `<div class="results-empty-state">${_chat('chat_test_results_empty')}</div>`;
                return;
            }
            
            // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï ‚Ññ2: –°–æ–±–∏—Ä–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∫–ª—é—á–∞–º–∏ –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
            let tableHTML = `
                <table>
                    <thead>
                        <tr>                      
                            <th>${_chat('results_table_header_num')}</th>
                            <th>${_chat('results_table_header_user')}</th>
                            <th>${_chat('results_table_header_accuracy')}</th>
                            <th>${_chat('results_table_header_time')}</th>
                        </tr>
                    </thead>
                    <tbody>
            `;

            querySnapshot.docs.forEach((doc, index) => {
                const result = doc.data();
                const time = result.timeSpentSeconds;
                const minutes = Math.floor(time / 60);
                const seconds = time % 60;
                const timeFormatted = `${String(minutes).padStart(2, '0')}:${String(seconds).padStart(2, '0')}`;
                
                tableHTML += `
                    <tr>
                        <td>${index + 1}</td>
                        <td>${escapeHTML(result.userName || _chat('anonymous_user'))}</td>
                        <td>${result.accuracy.toFixed(1)}%</td>
                        <td>${timeFormatted}</td>
                    </tr>
                `;
            });
            
            tableHTML += `</tbody></table>`;
            tableContainer.innerHTML = tableHTML;

        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∞:", error);
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–ª—é—á –ø–µ—Ä–µ–≤–æ–¥–∞ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
            tableContainer.innerHTML = `<div class="results-empty-state">${_chat('chat_test_results_loading_error')} ${error.message}</div>`;
        }
    }


    function formatMessagesForAI(messages) {
        // –ü—Ä–µ–≤—Ä–∞—â–∞–µ–º –º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –ø—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç
        return messages.map(msg => {
            const author = msg.authorName || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
            const text = msg.text || '';
            // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã
            if (msg.type === 'question_link' || msg.type === 'file_share') return '';
            return `${author}: ${text}`;
        }).filter(Boolean).join('\n'); // –£–±–∏—Ä–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –∏ —Å–æ–µ–¥–∏–Ω—è–µ–º
    }

    async function getAIChatSummary(summaryType, providedMessages = null) {
        let messagesToProcess = [];

        // –°—Ü–µ–Ω–∞—Ä–∏–π 1: –ù–∞–º –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Å—Ä–µ–∑ —Å–æ–æ–±—â–µ–Ω–∏–π (–∏–∑ —Ä–µ–∂–∏–º–∞ –≤—ã–±–æ—Ä–∞)
        if (providedMessages) {
            messagesToProcess = providedMessages;
        } 
        // –°—Ü–µ–Ω–∞—Ä–∏–π 2: –ù–∞–º –Ω—É–∂–Ω–æ –≤–∑—è—Ç—å –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ –∫–∞–Ω–∞–ª–∞
        else { 
            if (allMessages.length === 0) {
                // –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏—Å—Ç–µ–º—É –ø–µ—Ä–µ–≤–æ–¥–æ–≤
                alert(_chat('chat_analyze_no_messages'));
                return;
            }
            messagesToProcess = allMessages;
        }

        // –ü—Ä–µ–≤—Ä–∞—â–∞–µ–º –º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤ –≤ –µ–¥–∏–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ò–ò
        const messagesText = formatMessagesForAI(messagesToProcess);
        if (!messagesText) {
            // –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏—Å—Ç–µ–º—É –ø–µ—Ä–µ–≤–æ–¥–æ–≤
            alert(_chat('chat_analyze_no_valid_messages'));
            return;
        }
        
        // –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏—Å—Ç–µ–º—É –ø–µ—Ä–µ–≤–æ–¥–æ–≤
        mainApp.showGlobalLoader(_chat('ai_analyzing_chat'));

        try {
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –Ω–∞—à —Å–µ—Ä–≤–µ—Ä–Ω—ã–π —Å–∫—Ä–∏–ø—Ç
            const response = await fetch(googleAppScriptUrl, {
                method: 'POST',
                headers: { 'Content-Type': 'text/plain' },
                body: JSON.stringify({
                    action: 'getChatSummary',
                    messagesText: messagesText,
                    summaryType: summaryType.replace('summarize-', ''),
                    targetLanguage: currentChatLang
                })
            });

            const result = await response.json();

            if (result.success && result.summary) {
                // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
                let titleKey;
                if (summaryType === 'summarize-all') {
                    titleKey = 'ai_summary_title_all';
                } else { // –î–ª—è 'summarize-from-selection'
                    titleKey = 'ai_summary_title_selection';
                }
                
                showAISummaryModal(_chat(titleKey), result.summary);
            } else {
                // –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏—Å—Ç–µ–º—É –ø–µ—Ä–µ–≤–æ–¥–æ–≤
                throw new Error(result.error || _chat('ai_error_summary_generic'));
            }

        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–≤–æ–¥–∫–∏ –æ—Ç –ò–ò:", error);
            
            let userFriendlyError;
            if (error.message.includes("INTERNAL") || error.message.includes("HTTP 500")) {
                userFriendlyError = _chat('ai_error_summary_server');
            } else {
                userFriendlyError = _chat('ai_error_summary_generic');
            }
            alert(userFriendlyError);
        } finally {
            mainApp.hideGlobalLoader();
        }
    }


    function startAiSummarySelection() {
        if (allMessages.length === 0) {
            alert("–í —ç—Ç–æ–º –∫–∞–Ω–∞–ª–µ –µ—â–µ –Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –≤—ã–±–æ—Ä–∞.");
            return;
        }
        isAiSelectionMode = true;
        getEl('aiSelectionBanner').classList.remove('hidden');
        getEl('messageArea').classList.add('selection-mode');
        
        // --- –ù–ê–ß–ê–õ–û –ù–û–í–û–ì–û –ö–û–î–ê: "–£–º–Ω–∞—è" –æ—Ç–º–æ—Ç–∫–∞ –Ω–∞–∑–∞–¥ ---
        // –í—ã—á–∏—Å–ª—è–µ–º, –Ω–∞ —Å–∫–æ–ª—å–∫–æ –Ω—É–∂–Ω–æ –ø—Ä–æ–∫—Ä—É—Ç–∏—Ç—å –≤–≤–µ—Ä—Ö (–Ω–∞ 80% –≤—ã—Å–æ—Ç—ã –≤–∏–¥–∏–º–æ–≥–æ –æ–∫–Ω–∞)
        const scrollUpAmount = messageArea.clientHeight * 0.8;
        
        // –í—ã—á–∏—Å–ª—è–µ–º –Ω–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é —Å–∫—Ä–æ–ª–ª–∞
        let targetScrollTop = messageArea.scrollTop - scrollUpAmount;
        
        // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –º—ã –Ω–µ —É—à–ª–∏ –≤ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        if (targetScrollTop < 0) {
            targetScrollTop = 0;
        }

        // –ü–ª–∞–≤–Ω–æ –ø—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ –Ω–æ–≤–æ–π –ø–æ–∑–∏—Ü–∏–∏
        messageArea.scrollTo({
            top: targetScrollTop,
            behavior: 'smooth'
        });
        // --- –ö–û–ù–ï–¶ –ù–û–í–û–ì–û –ö–û–î–ê ---
    }

    function cancelAiSummarySelection() {
        isAiSelectionMode = false;
        getEl('aiSelectionBanner').classList.add('hidden');
        getEl('messageArea').classList.remove('selection-mode');
    }



    function handleAiMessageSelection(event) {
        // –§—É–Ω–∫—Ü–∏—è —Å—Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –º—ã –≤ —Ä–µ–∂–∏–º–µ –≤—ã–±–æ—Ä–∞
        if (!isAiSelectionMode) return;

        const messageElement = event.target.closest('.message');
        if (!messageElement) return;

        const messageId = messageElement.id.replace('message-', '');
        
        // –ù–∞—Ö–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –Ω–∞—à–µ–º –º–∞—Å—Å–∏–≤–µ
        const startIndex = allMessages.findIndex(msg => msg.id === messageId);

        if (startIndex > -1) {
            // "–û—Ç—Ä–µ–∑–∞–µ–º" –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –Ω–∞—á–∏–Ω–∞—è —Å –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ
            const messagesToProcess = allMessages.slice(startIndex);
            // –í—ã–∑—ã–≤–∞–µ–º –Ω–∞—à—É –æ—Å–Ω–æ–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é, –Ω–æ —É–∂–µ —Å –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–º —Å—Ä–µ–∑–æ–º
            getAIChatSummary('selection', messagesToProcess);
        } else {
            alert("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.");
        }

        // –í–Ω–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞, –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ä–µ–∂–∏–º–∞ –≤—ã–±–æ—Ä–∞
        cancelAiSummarySelection();
    }



    async function handlePasswordReset() {
        if (!auth) {
            showError(_chat('auth_system_unavailable'));
            return;
        }

        const emailInput = getEl('resetEmailInput');
        const email = emailInput.value.trim();

        if (!email) {
            showError(_chat('fill_all_fields'));
            return;
        }

        try {
            await auth.sendPasswordResetEmail(email);
            closeModal('forgotPasswordModal');
            emailInput.value = ''; // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
            // --- –ò–ó–ú–ï–ù–ï–ù–ò–ï –ó–î–ï–°–¨ ---
            window.mainApp.showToast(_chat('password_reset_email_sent'), 'success');
        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è:", error);
            if (error.code === 'auth/user-not-found') {
                showError(_chat('error_user_not_found_for_reset'));
            } else {
                showError(getErrorMessage(error.code));
            }
        }
    }


    async function saveMessageForSync(message) {
        try {
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ IndexedDB —á–µ—Ä–µ–∑ –Ω–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä
            await DBManager.save(message, 'offlineMessages'); // DBManager —Å–∞–º —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–ª—é—á

            // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
            if ('serviceWorker' in navigator && 'SyncManager' in window) {
                const swRegistration = await navigator.serviceWorker.ready;
                await swRegistration.sync.register('sync-chat-messages');
                console.log('–°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –¥–ª—è –æ—Ñ–ª–∞–π–Ω-–æ—Ç–ø—Ä–∞–≤–∫–∏ –∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω sync event.');
            } else {
                console.warn('–§–æ–Ω–æ–≤–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —ç—Ç–∏–º –±—Ä–∞—É–∑–µ—Ä–æ–º.');
            }
        } catch (error) {
            console.error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:', error);
        }
    }



    // ========== PUBLIC METHODS ==========
    return {
        init,
        setCurrentUser: (user) => {
            currentUser = user;
            updateUserUI();
        },

        openChatModal: () => {
            if (!chatOverlay) return;
            
            // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–∫–Ω–æ –≤—Ö–æ–¥–∞
            if (!currentUser) {
                openChatAfterAuth = true;
                ChatModule.openAuthModal();
                return;
            }

            document.body.classList.add('chat-open');
            
            // –ü—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —á–∞—Ç. –¢–µ–∫—Å—Ç –≤ –Ω–µ–º —É–∂–µ –±—É–¥–µ—Ç –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —è–∑—ã–∫–µ.
            chatOverlay.classList.remove('hidden');

            // –ö–ª—é—á–µ–≤–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ–∫—É—â–µ–π –≤–∫–ª–∞–¥–∫–∏ –ö–ê–ñ–î–´–ô –†–ê–ó –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏.
            // –≠—Ç–æ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–æ–±—Ä–∞–∑—è—Ç—Å—è, –¥–∞–∂–µ –µ—Å–ª–∏ –æ–Ω–∏ –∑–∞–≥—Ä—É–∑–∏–ª–∏—Å—å –≤ —Ñ–æ–Ω–µ.
            loadTabData(currentTab); 
            if (window.mainApp) window.mainApp.manageBackButtonInterceptor();

        },

        showTestResults,

        closeChatModal: () => {
            if (chatOverlay) {
                document.body.classList.remove('chat-open');
                chatOverlay.classList.add('hidden');
            }
            if (window.mainApp) window.mainApp.manageBackButtonInterceptor();
        },
        openAuthModal: () => {
            if (authOverlay) {
                authOverlay.classList.remove('hidden');
            }
        },
        closeAuthModal: () => {
            if (authOverlay) {
                authOverlay.classList.add('hidden');
            }
        },
        

        /**
         * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —è–∑—ã–∫ –¥–ª—è –º–æ–¥—É–ª—è —á–∞—Ç–∞ –∏ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ—Ç –µ–≥–æ UI,
         * –¥–∞–∂–µ –µ—Å–ª–∏ –æ–Ω —Å–∫—Ä—ã—Ç.
         * @param {string} lang - –ö–æ–¥ —è–∑—ã–∫–∞ ('ru' –∏–ª–∏ 'en').
         */
        setLanguage: (lang) => {
            if (LANG_PACK_CHAT[lang]) {
                currentChatLang = lang;
                localStorage.setItem('chatLanguage', lang);
                updateChatUIText();

                // === –ù–ê–ß–ê–õ–û –ù–û–í–û–ì–û –ö–û–î–ê: –ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥ ===
                // –ï—Å–ª–∏ –æ—Ç–∫—Ä—ã—Ç —á–∞—Ç –∏ –∞–∫—Ç–∏–≤–Ω–∞ –≤–∫–ª–∞–¥–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π,
                // –ø–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –∏—Ö, —á—Ç–æ–±—ã –ø—Ä–∏–º–µ–Ω–∏–ª—Å—è –Ω–æ–≤—ã–π —è–∑—ã–∫.
                if (chatOverlay && !chatOverlay.classList.contains('hidden') && currentTab === 'messages') {
                    displayMessages();
                }
                // 
            }
        },





        // Action methods
        sendChatMessage: sendMessage,
        createChannel,
        createQuestion,
        voteForOption,
        navigateToQuestion,
        startReply, 
        cancelReply, 
        startEditMessage, 
        saveMessageEdit, 
        showReactionPicker, 
        toggleReaction, 
        scrollToMessage,
        deleteMessage,   
        deleteQuestion,
        showProfileModal, 
        saveProfile,     
        logout,           
        addToFavorites,
        removeFromFavorites,
        toggleNotifications,
        closeModal,
        deleteAccount,
        insertEmoji,
        togglePinMessage,
        showChannelEditModal,
        saveChannelEdit,
        deleteChannel,
        showUserActions,
        startPrivateChat,
        uploadFileToServer,
        removeUserFromChannel,
        copyQuestionAsQst,
        voteForFavoriteOption,
        showFileActionsModal, 
        showModal: showModal, 
        handlePasswordReset,
        closeModal: closeModal,
        _chatFormat: _chatFormat, // <--- –í–û–¢ –î–û–ë–ê–í–õ–ï–ù–ù–ê–Ø –°–¢–†–û–ö–ê
        
        // Getters
        isInitialized: () => isInitialized,
        getCurrentUser: () => currentUser,
        getCurrentTab: () => currentTab
    };
})();



// –û–±–Ω–æ–≤–ª—è–µ–º —Å—Å—ã–ª–∫–∏ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
window.ChatModule = ChatModule;



// <<< –ó–ê–ú–ï–ù–ò–¢–¨ –ù–ê –≠–¢–û–¢ –ü–û–õ–ù–´–ô –ò –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ú–û–î–£–õ–¨
const DBManager = (function() {
    'use strict';

    const DB_NAME = 'QSTiUM_AppDB';
    const DB_VERSION = 3; 
    let db = null;

    async function init() {
        return new Promise((resolve, reject) => {
            if (db) return resolve(db);

            const request = indexedDB.open(DB_NAME, DB_VERSION);

            request.onerror = (event) => {
                console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ IndexedDB:", event.target.error);
                reject("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.");
            };

            request.onsuccess = (event) => {
                db = event.target.result;
                console.log("‚úÖ IndexedDB —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞.");
                resolve(db);
            };

            request.onupgradeneeded = (event) => {
                const dbInstance = event.target.result;
                console.log(`–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ IndexedDB –¥–æ –≤–µ—Ä—Å–∏–∏ ${DB_VERSION}...`);

                if (!dbInstance.objectStoreNames.contains('AppSettings')) {
                    dbInstance.createObjectStore('AppSettings', { keyPath: 'key' });
                    console.log(`–•—Ä–∞–Ω–∏–ª–∏—â–µ "AppSettings" —Å–æ–∑–¥–∞–Ω–æ.`);
                }
                if (!dbInstance.objectStoreNames.contains('SavedSessions')) {
                    dbInstance.createObjectStore('SavedSessions', { keyPath: 'originalFileNameForReview' });
                     console.log(`–•—Ä–∞–Ω–∏–ª–∏—â–µ "SavedSessions" —Å–æ–∑–¥–∞–Ω–æ.`);
                }
                if (!dbInstance.objectStoreNames.contains('offlineMessages')) {
                    dbInstance.createObjectStore('offlineMessages', { autoIncrement: true });
                    console.log(`–•—Ä–∞–Ω–∏–ª–∏—â–µ "offlineMessages" —Å–æ–∑–¥–∞–Ω–æ.`);
                }
                if (!dbInstance.objectStoreNames.contains('AIChats')) {
                    dbInstance.createObjectStore('AIChats', { keyPath: 'chatId' });
                    console.log(`–•—Ä–∞–Ω–∏–ª–∏—â–µ "AIChats" —Å–æ–∑–¥–∞–Ω–æ.`);
                }
            };
        });
    }

    async function performTransaction(storeName, mode, operation) {
        await init();
        return new Promise((resolve, reject) => {
            const transaction = db.transaction(storeName, mode);
            const store = transaction.objectStore(storeName);
            const request = operation(store);
            request.onsuccess = () => resolve(request.result);
            request.onerror = () => reject(request.error);
        });
    }

    async function save(data, storeName) {
        return performTransaction(storeName, 'readwrite', store => store.put(data));
    }

    async function get(key, storeName) {
        return performTransaction(storeName, 'readonly', store => store.get(key));
    }

    async function getAll(storeName) {
        return performTransaction(storeName, 'readonly', store => store.getAll());
    }
    
    async function deleteByKey(key, storeName) {
        return performTransaction(storeName, 'readwrite', store => store.delete(key));
    }

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É–±–ª–∏—á–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –º–æ–¥—É–ª—è
    return {
        init: init,
        save: save,
        get: get,
        getAll: getAll,
        delete: deleteByKey
    };
})(); 





const googleAppScriptUrl = 'https://script.google.com/macros/s/AKfycbyBtPbM0J91gDiuj4Ha-gTLesCMI8gSqMC3D0GYbGZ0YHIsP2mvu5ePmiftA03GLso/exec';






// ============================================
// –û–°–ù–û–í–ù–û–ô –°–ö–†–ò–ü–¢ –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø
// ============================================    

const mainApp = (function() {
    'use strict';


    const THEMES = {
        'glass-dark': { name: '–°—Ç–µ–∫–ª–æ (—Ç—ë–º–Ω–∞—è)', icon: 'üîÆ' },
        'synthwave-mode':  { name: '–ù–µ–æ–Ω', icon: 'üî≠' },
        'dark-mode':       { name: '–¢—ë–º–Ω–∞—è', icon: 'üåô' },
        'claude-mode':     { name: 'Claude', icon: 'üå§Ô∏è' },
        'light':      { name: '–°–≤–µ—Ç–ª–∞—è', icon: '‚òÄÔ∏è' }
    };

    let backButtonPressedOnce = false;

    // --- –ù–ê–ß–ê–õ–û –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô ---

    // 1. –°–æ–∑–¥–∞—ë–º –µ–¥–∏–Ω—ã–π –æ–±—ä–µ–∫—Ç –¥–ª—è —è–∑—ã–∫–æ–≤, –¥–æ—Å—Ç—É–ø–Ω—ã–π –¥–ª—è –≤—Å–µ–≥–æ –º–æ–¥—É–ª—è.
    const SUPPORTED_LANGS = {
        ru: '–†—É',
        en: 'En',
        kk: '“ö–∞–∑'
    };
    // –°–æ–∑–¥–∞—ë–º –µ–¥–∏–Ω—ã–π –º–∞—Å—Å–∏–≤ –¥–ª—è –ø–æ—Ä—è–¥–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è.
    const LANG_CYCLE = ['ru', 'en', 'kk'];


// --- –°–õ–û–í–ê–†–¨ –ü–ï–†–ï–í–û–î–û–í ---
    const LANG_PACK = {
        ru: {
            // –ì–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω
            exit_toast_text: '–ù–∞–∂–º–∏—Ç–µ –µ—â–µ —Ä–∞–∑ –¥–ª—è –≤—ã—Ö–æ–¥–∞',
            continue_later_button: '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–∑–∂–µ',
            continue_sessions: '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å:',
            answered_of: '–û—Ç–≤–µ—á–µ–Ω–æ',
            from: '–∏–∑',
            time_left: '–û—Å—Ç–∞–ª–æ—Å—å –≤—Ä–µ–º–µ–Ω–∏',
            continue_quiz_button: '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å',
            delete_session_button: '–£–¥–∞–ª–∏—Ç—å',
            search_in_db: '–ü–æ–∏—Å–∫ –≤–æ–ø—Ä–æ—Å–∞ –≤ –±–∞–∑–µ:',
            search_placeholder: '–í–≤–µ–¥–∏—Ç–µ —á–∞—Å—Ç—å —Ç–µ–∫—Å—Ç–∞ –≤–æ–ø—Ä–æ—Å–∞...',
            find_button: '–ù–∞–π—Ç–∏',
            searching_in_db: '–ò–¥–µ—Ç –ø–æ–∏—Å–∫ –ø–æ –±–∞–∑–µ...',
            or_divider: '-- –∏–ª–∏ --',
            choose_file: '–í—ã–±–µ—Ä–∏—Ç–µ .qst|.txt|.pdf —Ñ–∞–π–ª —Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:',
            gradus_button_main: 'GRADUS',
            gradus_subtitle: '(General Repository for Academic Data, Utility & Structure)',
            parser_button_main: '–ü–µ—Ä–µ–≤–µ—Å—Ç–∏',
            parser_subtitle: '—Ç–µ–∫—Å—Ç –≤ —Ñ–æ—Ä–º–∞—Ç .qst',
            recent_files: '–ù–µ–¥–∞–≤–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ:',
            // –ù–∞–≤–∏–≥–∞—Ü–∏—è –∏ –∑–∞–≥–æ–ª–æ–≤–∫–∏
            nav_gradus: '–ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ GRADUS',
            back_to_main: '–ù–∞–∑–∞–¥ –∫ –≥–ª–∞–≤–Ω–æ–º—É —ç–∫—Ä–∞–Ω—É',
            search_results_title: '–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞',
            back_to_search: '–ù–æ–≤—ã–π –ø–æ–∏—Å–∫',
            quiz_settings_title: '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–µ—Å—Ç–∞',
            cheat_sheet_title: '–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —à–ø–æ—Ä–∞:',
            quiz_finished_title: '–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!',
            parser_description: '–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –∏–ª–∏ –≤—Å—Ç–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç —Ç–µ—Å—Ç–∞.',
            // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–µ—Å—Ç–∞
            time_limit: '–õ–∏–º–∏—Ç –≤—Ä–µ–º–µ–Ω–∏ (–º–∏–Ω—É—Ç—ã, 0 - –±–µ–∑ –ª–∏–º–∏—Ç–∞):',
            time_limit_minutes: '–º–∏–Ω',
            question_range: '–î–∏–∞–ø–∞–∑–æ–Ω –≤–æ–ø—Ä–æ—Å–æ–≤:',
            range_from: '–û—Ç',
            range_to: '–î–æ',
            total_questions_label: '–≤—Å–µ–≥–æ',
            questions_label_for_range: '–≤–æ–ø—Ä–æ—Å–æ–≤',
            shuffle_questions: '–ü–µ—Ä–µ–º–µ—à–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã',
            shuffle_answers: '–ü–µ—Ä–µ–º–µ—à–∞—Ç—å –æ—Ç–≤–µ—Ç—ã',
            feedback_mode: '–†–µ–∂–∏–º –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ (–ò–ò –∞–Ω–∞–ª–∏–∑ + –ø—Ä–æ–π—Ç–∏ –Ω–µ–≤–µ—Ä–Ω—ã–µ)',
            reading_mode: '–†–µ–∂–∏–º —á—Ç–µ–Ω–∏—è (–ø–µ—Ä–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –≤–µ—Ä–Ω—ã–π)',
            start_quiz_button: '–ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç',
            generate_cheat_sheet_button: '–°–æ–∑–¥–∞—Ç—å —à–ø–æ—Ä—É',
            choose_another_file_button: '–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π —Ñ–∞–π–ª',
            // –®–ø–∞—Ä–≥–∞–ª–∫–∞
            download_cheat_sheet_button: '–°–∫–∞—á–∞—Ç—å —à–ø–æ—Ä—É (.txt)',
            back_to_settings_button: '–ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º',
            // –≠–∫—Ä–∞–Ω —Ç–µ—Å—Ç–∞
            timer_label: '–í—Ä–µ–º—è:',
            prev_question_button: '–ü—Ä–µ–¥—ã–¥—É—â–∏–π',
            next_question_button: '–°–ª–µ–¥—É—é—â–∏–π',
            finish_button: '–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ç–µ—Å—Ç',
            question_label: '–í–æ–ø—Ä–æ—Å:',
            correct_label: '–ü—Ä–∞–≤–∏–ª—å–Ω–æ:',
            quick_nav_title: '–ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –≤–æ–ø—Ä–æ—Å–∞–º:',
            finish_early_button: '–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ç–µ—Å—Ç',
            // –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
            your_result: '–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç:',
            of_label: '–∏–∑',
            accuracy_label: '–¢–æ—á–Ω–æ—Å—Ç—å:',
            download_errors_button: '–°–∫–∞—á–∞—Ç—å –Ω–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã–µ/–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã',
            review_errors_button: '–†–∞–±–æ—Ç–∞ –Ω–∞–¥ –æ—à–∏–±–∫–∞–º–∏',
            download_triggered_quiz_button: '–°–∫–∞—á–∞—Ç—å —Ç–µ—Å—Ç —Å —Ç—Ä–∏–≥–≥–µ—Ä–∞–º–∏',
            restart_button: '–ü—Ä–æ–π—Ç–∏ –¥—Ä—É–≥–æ–π —Ç–µ—Å—Ç',
            // –ü–∞—Ä—Å–µ—Ä
            parser_upload_or_paste: '–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª (.txt) –∏–ª–∏ –≤—Å—Ç–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –Ω–∏–∂–µ:',
            clear_parser_input: '–û—á–∏—Å—Ç–∏—Ç—å –ø–æ–ª–µ',
            parser_input_placeholder: '–ò–ª–∏ –≤—Å—Ç–∞–≤—å—Ç–µ —Å—é–¥–∞ —Ç–µ–∫—Å—Ç –∏–∑ –≤–∞—à–µ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞...',
            parser_select_format: '–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç (–∏–ª–∏ –æ—Å—Ç–∞–≤—å—Ç–µ –¥–ª—è –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è):',
            parser_auto_detect: '-- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ --',
            parser_run_button: '–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å',
            parser_errors_found: '‚ö†Ô∏è –û—à–∏–±–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è',
            parser_result_title: '–†–µ–∑—É–ª—å—Ç–∞—Ç:',
            download_parsed_button: '–°–∫–∞—á–∞—Ç—å .qst —Ñ–∞–π–ª',
            back_button: '–ù–∞–∑–∞–¥',
            // === –ù–ê–ß–ê–õ–û –ò–ó–ú–ï–ù–ï–ù–ò–ô: –î–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –∫–ª—é—á–∏ –¥–ª—è –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω ===
            modal_cancel_button: '–û—Ç–º–µ–Ω–∞',
            confirm_delete_message: '–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ?',
            confirm_delete_question: '–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ.',
            confirm_delete_channel: '–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –∫–∞–Ω–∞–ª? –í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –Ω–µ–º –±—É–¥—É—Ç –ø–æ—Ç–µ—Ä—è–Ω—ã. –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ.',
            confirm_delete_account: '–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –ù–ï–û–ë–†–ê–¢–ò–ú–û.',
            confirm_clear_favorites: '–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –í–°–ï —ç–ª–µ–º–µ–Ω—Ç—ã –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ.',
            confirm_kick_user: '–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∏–∑ –∫–∞–Ω–∞–ª–∞?',
            // === –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–ô ===
            // –ö–Ω–æ–ø–∫–∏ –≤ —à–∞–ø–∫–µ (–î–û–ë–ê–í–õ–ï–ù–û –¥–ª—è –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–∏—è)
            copy_question_title: '–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å',
            search_web_title: '–ù–∞–π—Ç–∏ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ',
            chat_button_title: '–ß–∞—Ç',
            confirm_action_title: '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è',
            quick_mode_title: '–ë—ã—Å—Ç—Ä—ã–π —Ä–µ–∂–∏–º (–ê–≤—Ç–æ–ø–µ—Ä–µ—Ö–æ–¥)',
            trigger_words_title: '–¢—Ä–∏–≥–≥–µ—Ä-—Å–ª–æ–≤–∞',
            theme_button_title: '–°–º–µ–Ω–∏—Ç—å —Ç–µ–º—É',
            language_toggle_title: '–°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫',
            favorite_button_title: '–î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ',
            translate_question_title: '–ü–µ—Ä–µ–≤–µ—Å—Ç–∏ —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å',
            // –°–æ–æ–±—â–µ–Ω–∏—è (–î–û–ë–ê–í–õ–ï–ù–û)
            search_query_too_short: '–ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞.',
            file_empty_or_invalid_part1: '–§–∞–π–ª "',
            file_empty_or_invalid_part2: '" –ø—É—Å—Ç –∏–ª–∏ –∏–º–µ–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.',
            no_questions_for_settings: '–ù–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∞ —Å —Ç–µ–∫—É—â–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏.',
            confirm_finish_early: '–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ç–µ—Å—Ç –¥–æ—Å—Ä–æ—á–Ω–æ?',
            copy_button: "–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å",
            search_provider_db: "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö",
            relevance_tag: "–†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å:",
            copy_question_tooltip: "–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å",
            favorite_question_tooltip: "–î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ",
            ai_explanation_title: '–û–±—ä—è—Å–Ω–µ–Ω–∏–µ –æ—Ç –ò–ò',
            ai_explanation_style_label: '–°—Ç–∏–ª—å –æ–±—ä—è—Å–Ω–µ–Ω–∏—è:',
            ai_explain_button: ' –û–±—ä—è—Å–Ω–∏—Ç—å',
            ai_explanation_loading: '–ò–ò –≥–æ—Ç–æ–≤–∏—Ç –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ...',
            ai_error_text_empty: '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—Å—Ç–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.',
            ai_error_generation: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–∞.',
            ai_question_count_label: '–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –ò–ò:',
            ai_auto_mode_label: '–ê–≤—Ç–æ',
            ai_style_simple: "–ü—Ä–æ—Å—Ç–æ",
            ai_style_scientific: "–ù–∞—É—á–Ω–æ",
            ai_style_associative: "–ê–Ω–∞–ª–æ–≥–∏—è",
            ai_style_stepbystep: "–ü–æ—à–∞–≥–æ–≤–æ",
            ai_style_practical: "–ü—Ä–∞–∫—Ç–∏—á–Ω–æ",
            ai_style_visual: "–ù–∞–≥–ª—è–¥–Ω–æ",
            ai_answer_count_label: '–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞:',
            ai_auto_category_label: '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–≤–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏',
            exit_modal_title: '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ',
            exit_modal_text: '–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏ –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è?',
            exit_modal_confirm: '–í—ã–π—Ç–∏',
            exit_modal_cancel: '–û—Å—Ç–∞—Ç—å—Å—è',
            confirm_button_delete: '–£–¥–∞–ª–∏—Ç—å',
            update_available_text: '–î–æ—Å—Ç—É–ø–Ω–∞ –Ω–æ–≤–∞—è –≤–µ—Ä—Å–∏—è!',
            update_button_text: '–û–±–Ω–æ–≤–∏—Ç—å',
            ai_explain_button_title: '–û–±—ä—è—Å–Ω–∏—Ç—å —Å –ø–æ–º–æ—â—å—é –ò–ò',
            download_translated_txt_button: '–°–∫–∞—á–∞—Ç—å –ø–µ—Ä–µ–≤–æ–¥ ({lang})(txt)',
            download_translated_qst_button: '–°–∫–∞—á–∞—Ç—å –ø–µ—Ä–µ–≤–æ–¥ ({lang})(qst)',
            no_translations_to_download: '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è.',
            error_creating_translation_file: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª –ø–µ—Ä–µ–≤–æ–¥–∞.',
            ai_show_original_button: '–ü–æ–∫–∞–∑–∞—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª',
            ai_show_translation_button: '–ü–æ–∫–∞–∑–∞—Ç—å –ø–µ—Ä–µ–≤–æ–¥',
            flashcards_mode: '–†–µ–∂–∏–º –∫–∞—Ä—Ç–æ—á–µ–∫ (–≤–æ–ø—Ä–æ—Å/–æ—Ç–≤–µ—Ç)',
            start_flashcards_button: '–ù–∞—á–∞—Ç—å –∏–∑—É—á–µ–Ω–∏–µ',
            flashcard_category_label: '–°–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑–¥–µ–ª:',
            results_flashcards_viewed: '–ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–æ –∫–∞—Ä—Ç–æ—á–µ–∫',
            session_cards_viewed: '–ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–æ',
            ai_error_generic: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –µ—â–µ —Ä–∞–∑.',
            ai_error_server: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ: –ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤—Ä–µ–º–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ.',
            parser_overwrite_warning: '–ü–æ–ª–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç. –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å –µ–≥–æ?',
            ai_error_server_generation: '–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–∞: –ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤—Ä–µ–º–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ.',
            ai_char_limit_exceeded: '–õ–∏–º–∏—Ç —Å–∏–º–≤–æ–ª–æ–≤ –ø—Ä–µ–≤—ã—à–µ–Ω ({current}/{max})',
            tab_converter: "–ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä –∏–∑ —Ç–µ–∫—Å—Ç–∞",
            tab_ai_from_text: "–ò–ò-–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∏–∑ —Ç–µ–∫—Å—Ç–∞",
            tab_ai_generator: "–ò–ò-–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø–æ —Ç–µ–º–µ",
            ai_from_text_title: "ü§ñ –°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç –∏–∑ –≤–∞—à–µ–≥–æ —Ç–µ–∫—Å—Ç–∞ (–ò–ò)",
            ai_generate_from_text_button: "–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ—Å—Ç –∏–∑ —Ç–µ–∫—Å—Ç–∞",
            ai_topic_description: "–ò–ò —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ —Å–æ–∑–¥–∞—Å—Ç —Ç–µ—Å—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ —É–∫–∞–∑–∞–Ω–Ω–æ–π —Ç–µ–º—ã, –∏—Å–ø–æ–ª—å–∑—É—è —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è.",
            ai_topic_label: "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–º—É –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–∞:",
            ai_topic_placeholder: "–ü—Ä–∏–º–µ—Ä: –ò—Å—Ç–æ—Ä–∏—è –î—Ä–µ–≤–Ω–µ–≥–æ –†–∏–º–∞ –≤ –ø–µ—Ä–∏–æ–¥ –†–µ—Å–ø—É–±–ª–∏–∫–∏, 15 –≤–æ–ø—Ä–æ—Å–æ–≤, 4 –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞, —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ –ø–æ –≤–æ–π–Ω–∞–º...",
            ai_topic_question_count_label: "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤ (–µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ –≤ —Ç–µ–º–µ):",
            ai_topic_answer_count_label: "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞ (–µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ –≤ —Ç–µ–º–µ):",
            ai_generate_from_topic_button: "ü§ñ –°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç –ø–æ —Ç–µ–º–µ (–ò–ò)",
            ai_thinking_topic: "–ò–ò-–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Ä–∞–∑–º—ã—à–ª—è–µ—Ç –Ω–∞–¥ –≤–∞—à–µ–π —Ç–µ–º–æ–π...",
            ai_topic_auto_category_label: "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–≤–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏",
            filter_variants_button: '‚öôÔ∏è –§–∏–ª—å—Ç—Ä –ø–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º',
            filter_variants_header: '–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª-–≤–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:',
            filter_apply_button: '–ü—Ä–∏–º–µ–Ω–∏—Ç—å',
            filter_reset_button: '–°–±—Ä–æ—Å',
            loading_default_text: '–ó–∞–≥—Ä—É–∑–∫–∞...',
            search_no_results: '–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.',
            search_error_prefix: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:',
            gradus_loading: '–ó–∞–≥—Ä—É–∑–∫–∞...',
            gradus_folder_empty: '–ü–∞–ø–∫–∞ –ø—É—Å—Ç–∞',
            gradus_loading_error_prefix: '–û—à–∏–±–∫–∞:',
            gradus_loading_quiz_prefix: '–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ—Å—Ç–∞',
            error_no_questions_for_cheatsheet: '–ù–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —à–ø–æ—Ä—ã.',
            parser_input_empty_alert: '–ü–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ –ø—É—Å—Ç–æ–µ!',
            parser_pattern_not_found_alert: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –í—ã–±—Ä–∞–Ω–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.',
            parser_no_questions_recognized_alert: '–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π.',
            parser_no_questions_with_errors_alert: '–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞. –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –æ—à–∏–±–æ–∫: {count}.',
            parser_conversion_success_alert: '–£—Å–ø–µ—à–Ω–æ —Å–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {count} –≤–æ–ø—Ä–æ—Å–æ–≤!',
            parser_conversion_summary_alert: '–û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n\n–†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {parsed}\n–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –æ—à–∏–±–æ–∫ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {errors}',
            ai_topic_empty_alert: '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–º—É –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–∞.',
            ai_explanation_prepare_error: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –æ–∫–Ω–æ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è.',
            ai_analyzing_errors_button: '–ò–ò –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç... üß†',
            ai_error_analysis_button: 'ü§ñ –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –æ—à–∏–±–æ–∫ –æ—Ç –ò–ò',
            search_engine_google: 'Google',
            search_engine_yandex: '–Ø–Ω–¥–µ–∫—Å',
            search_engine_perplexity: 'Perplexity',
            footer_copyright: 'prod by @iverrum',
            error_no_question_to_copy: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è.',
            error_no_question_to_favorite: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ.',
            error_favorites_require_auth: '–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç.',
            error_cannot_process_question: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–æ–ø—Ä–æ—Å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.',
            app_title: 'QSTiUM',
            confirm_delete_session: '–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç "{fileName}"? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ.',
            error_session_not_found: '–û—à–∏–±–∫–∞: —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è –¥–ª—è —ç—Ç–æ–≥–æ —Ñ–∞–π–ª–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.',
            error_session_file_not_found: '–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–µ—Å—Å–∏—é. –ò—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ "–ù–µ–¥–∞–≤–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö".',
            error_cheat_sheet_first: '–°–Ω–∞—á–∞–ª–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ —à–ø–æ—Ä—É.',
            error_download_parsed_first: '–°–Ω–∞—á–∞–ª–∞ —Å–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–π—Ç–µ —Ñ–∞–π–ª.',
            error_filter_no_variant_selected: '–ù–µ –≤—ã–±—Ä–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏.',
            error_filter_found_mismatch: '–ù–∞–π–¥–µ–Ω–æ {count} –≤–æ–ø—Ä–æ—Å–æ–≤, –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö —Ñ–∏–ª—å—Ç—Ä—É.',
            error_filter_all_match: '–í—Å–µ –≤–æ–ø—Ä–æ—Å—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –∑–∞–¥–∞–Ω–Ω–æ–º—É —Ñ–∏–ª—å—Ç—Ä—É!',
            error_download_failed_generic: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –¥–∞–Ω–Ω—ã–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.',
            error_generic_for_alert: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞', // –î–ª—è –æ–±—â–∏—Ö –∞–ª–µ—Ä—Ç–æ–≤
            copy_error: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Ç–µ–∫—Å—Ç –≤—Ä—É—á–Ω—É—é.',
            copy_success: '–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!',
            ai_explanation_question: '–í–æ–ø—Ä–æ—Å',
            ai_explanation_correct_answer: '–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç',
            feedback_correct: '–ü—Ä–∞–≤–∏–ª—å–Ω–æ!',
            feedback_incorrect: '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ!',
            mobile_download_ready_title: '‚úÖ –§–∞–π–ª –≥–æ—Ç–æ–≤ –∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏—é!',
            mobile_download_button: 'üì• –°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª',
            mobile_download_link_info: 'üí° –°—Å—ã–ª–∫–∞ –±—É–¥–µ—Ç –∞–∫—Ç–∏–≤–Ω–∞ 1 –º–∏–Ω—É—Ç—É',
            mobile_download_fallback_title: '‚ö†Ô∏è –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–±',
            mobile_download_fallback_p1: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—Å—ã–ª–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è.',
            mobile_download_fallback_p2: '–°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞',
            mobile_download_copy_button: 'üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å',
            session_saved_success: '–¢–µ—Å—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω! –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –µ–≥–æ –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç —Å –≥–ª–∞–≤–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∞.',
            download_txt_question_label: '–í–æ–ø—Ä–æ—Å',
            download_txt_answer_label: '–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç',
            quick_mode_title_on: "–ë—ã—Å—Ç—Ä—ã–π —Ä–µ–∂–∏–º –í–ö–õ (–ê–≤—Ç–æ–ø–µ—Ä–µ—Ö–æ–¥)",
            quick_mode_title_off: "–ë—ã—Å—Ç—Ä—ã–π —Ä–µ–∂–∏–º –í–´–ö–õ (–†—É—á–Ω–æ–π –ø–µ—Ä–µ—Ö–æ–¥)",
            trigger_mode_title_on: "–¢—Ä–∏–≥–≥–µ—Ä-—Å–ª–æ–≤–∞ –í–ö–õ (–ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ —Å–ª–æ–≤–æ –≤ –≤–æ–ø—Ä–æ—Å–µ)",
            trigger_mode_title_off: "–¢—Ä–∏–≥–≥–µ—Ä-—Å–ª–æ–≤–∞ –í–´–ö–õ",
            share_title_cheatsheet: "–®–ø–æ—Ä–∞",
            share_title_errors: "–û—à–∏–±–∫–∏",
            share_title_triggered_quiz: "–¢–µ—Å—Ç —Å —Ç—Ä–∏–≥–≥–µ—Ä–∞–º–∏",
            share_title_converted_test: "–°–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ—Å—Ç",
            error_review_questions_not_found: "–ù–µ —É–¥–∞–ª–æ—Å—å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã –Ω–∞–¥ –æ—à–∏–±–∫–∞–º–∏.",
            error_flashcard_translation_failed: "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –∫–∞—Ä—Ç–æ—á–∫—É. –ë—É–¥–µ—Ç –ø–æ–∫–∞–∑–∞–Ω –æ—Ä–∏–≥–∏–Ω–∞–ª.",
            error_load_file_first: "–°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏.",
            manual_copy_title: "üìã –†—É—á–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ",
            manual_copy_p1: "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–¥–µ–ª–∏—Ç–µ –∏ —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ —Ç–µ–∫—Å—Ç –Ω–∏–∂–µ:",
            manual_copy_close_button: "–ó–∞–∫—Ä—ã—Ç—å",
            error_no_current_question: "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å.",
            error_session_save_failed: "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–µ—Å—Å–∏—é. –í–æ–∑–º–æ–∂–Ω–æ, –≤ –±—Ä–∞—É–∑–µ—Ä–µ –∑–∞–∫–æ–Ω—á–∏–ª–æ—Å—å –º–µ—Å—Ç–æ.",
            error_analysis_no_data: "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ–± –æ—à–∏–±–∫–∞—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.",
            error_no_question_for_explanation: "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É –≤–æ–ø—Ä–æ—Å–∞ –¥–ª—è –æ–±—ä—è—Å–Ω–µ–Ω–∏—è.",
            error_cannot_fully_process_question: "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–æ–ø—Ä–æ—Å –¥–ª—è –æ–±—ä—è—Å–Ω–µ–Ω–∏—è.",
            error_download_generic_with_filename: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª "{fileName}". –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.',
            mobile_download_preparing: '–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ñ–∞–π–ª–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è...',
            tooltip_open_folder: '–û—Ç–∫—Ä—ã—Ç—å –ø–∞–ø–∫—É "{name}"',
            tooltip_start_test: '–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç "{name}"',
            tooltip_load_file: '–ó–∞–≥—Ä—É–∑–∏—Ç—å {name}',
            share_title_translated_test_txt: "–ü–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç",
            share_title_translated_test_qst: "–ü–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç (QST)",
            error_translation_failed: "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥.",
            ai_option_default: "(—Å—Ç–∞–Ω–¥–∞—Ä—Ç)",
            error_firebase_init: "–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å Firebase. –ß–∞—Ç –±—É–¥–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –û—à–∏–±–∫–∞:",
            copy_success_short: '‚úì –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ!',
            ai_analyzing_text: "–ò–ò –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–∞—à —Ç–µ–∫—Å—Ç...",
            parser_pattern_structured: "–°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ—Å—Ç (1. –í–æ–ø—Ä–æ—Å, –ê) –û—Ç–≤–µ—Ç+)",
            parser_pattern_plus_at_end: "–û—Ç–≤–µ—Ç —Å '+' –≤ –∫–æ–Ω—Ü–µ —Å—Ç—Ä–æ–∫–∏",
            parser_pattern_no_markers: "–ë–µ–∑ –º–∞—Ä–∫–µ—Ä–æ–≤ (–ø–µ—Ä–≤—ã–π –æ—Ç–≤–µ—Ç - –≤–µ—Ä–Ω—ã–π)",
            parser_pattern_numbered_plus: "–ù—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ (1.) —Å –æ—Ç–≤–µ—Ç–æ–º '+' –≤ –Ω–∞—á–∞–ª–µ",
            parser_pattern_plus_at_start: "–û—Ç–≤–µ—Ç —Å '+' –≤ –Ω–∞—á–∞–ª–µ —Å—Ç—Ä–æ–∫–∏",
            parser_pattern_tags_cyrillic: "–¢–µ–≥–∏ <–í–æ–ø—Ä–æ—Å> –∏ <–≤–∞—Ä–∏–∞–Ω—Ç>",
            parser_pattern_tags_latin: "–¢–µ–≥–∏ <question> –∏ <variant>",
            shuffle_n_questions: "–°–ª—É—á–∞–π–Ω—ã–π –Ω–∞–±–æ—Ä –∏–∑",
            translate_engine_google: "Google –ü–µ—Ä–µ–≤–æ–¥—á–∏–∫",
            translate_engine_ai: "AI –ü–µ—Ä–µ–≤–æ–¥—á–∏–∫",
            ai_generating_button: "ü§ñ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è...",
            activation_label: "–ê–∫—Ç–∏–≤–∞—Ü–∏—è:",
            activation_placeholder: "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π –∫–ª—é—á...",
            activation_button: "–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å",
            enter_activation_key_alert: "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–ª—é—á –∞–∫—Ç–∏–≤–∞—Ü–∏–∏.",
            checking_button: "–ü—Ä–æ–≤–µ—Ä–∫–∞...",
            search_activated_alert: "–ü–æ–∏—Å–∫ –ø–æ –±–∞–∑–µ —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –Ω–∞ —ç—Ç–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ!",
            server_connection_error_alert: "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≤—è–∑–∞—Ç—å—Å—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–ª—é—á–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ.",
            ai_from_text_description: "–í—Å—Ç–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –≤ –ø–æ–ª–µ –Ω–∏–∂–µ, –∏ –ò–ò —Å–æ–∑–¥–∞—Å—Ç –ø–æ –Ω–µ–º—É —Ç–µ—Å—Ç —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏ –∏ –æ—Ç–≤–µ—Ç–∞–º–∏.",
            ai_parser_input_placeholder: "–í—Å—Ç–∞–≤—å—Ç–µ —Å—é–¥–∞ —Ç–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ò–ò...",
            parser_pattern_trilingual: "–ë–ª–æ–∫ \"–í–æ–ø—Ä–æ—Å No\" (–º–Ω–æ–≥–æ—è–∑—ã—á–Ω—ã–π)",
            language_filter_label: '–Ø–∑—ã–∫ –≤–æ–ø—Ä–æ—Å–æ–≤:',
            checking_access: "–ü—Ä–æ–≤–µ—Ä–∫–∞...",
            category_filter_label: "–§–∏–ª—å—Ç—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:",
            select_all_btn: "–í—Å–µ",
            deselect_all_btn: "–°–Ω—è—Ç—å",
            category_filter_note: "–ï—Å–ª–∏ –Ω–∏ –æ–¥–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –≤—ã–±—Ä–∞–Ω–∞, –≤ —Ç–µ—Å—Ç –≤–æ–π–¥—É—Ç –≤–æ–ø—Ä–æ—Å—ã –∏–∑ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π.",
            session_conflict_title: "–°–µ—Å—Å–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç",
            session_conflict_text: '–î–ª—è —Ñ–∞–π–ª–∞ "{fileName}" —É–∂–µ –µ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å. –ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?',
            session_overwrite_button: "–ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å",
            // === –ù–ê–ß–ê–õ–û –ù–û–í–û–ì–û –ö–û–î–ê ===
            topic_create_modal_title: "–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –¢–µ–º—ã",
            topic_create_modal_text: "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –≤–∞—à–µ–π –Ω–æ–≤–æ–π –¢–µ–º—ã (—á–∞—Ç–∞) –≤ —ç—Ç–æ–π –ê—É–¥–∏—Ç–æ—Ä–∏–∏.",
            topic_create_placeholder: "–ù–∞–∑–≤–∞–Ω–∏–µ –¢–µ–º—ã...",
            // === –ö–û–ù–ï–¶ –ù–û–í–û–ì–û –ö–û–î–ê ===
            // === –ù–ê–ß–ê–õ–û –ù–û–í–û–ì–û –ö–û–î–ê ===
            confirm_exit_quiz_title: "–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Ç–µ—Å—Ç?",
            confirm_exit_quiz_text: "–í–∞—à —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å –±—É–¥–µ—Ç –ø–æ—Ç–µ—Ä—è–Ω. –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏?",
            confirm_exit_quiz_confirm_button: "–ó–∞–≤–µ—Ä—à–∏—Ç—å",
            // === –ö–û–ù–ï–¶ –ù–û–í–û–ì–û –ö–û–î–ê ===
            // === –ù–ê–ß–ê–õ–û –ù–û–í–û–ì–û –ö–û–î–ê ===
            audience_create_modal_title: "–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –ê—É–¥–∏—Ç–æ—Ä–∏–∏",
            audience_create_modal_text: "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –≤–∞—à–µ–π –ø—É–±–ª–∏—á–Ω–æ–π –ê—É–¥–∏—Ç–æ—Ä–∏–∏. –û–Ω–æ –±—É–¥–µ—Ç –≤–∏–¥–Ω–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.",
            audience_create_placeholder: "–ù–∞–∑–≤–∞–Ω–∏–µ –ê—É–¥–∏—Ç–æ—Ä–∏–∏...",
            audience_create_button: "–°–æ–∑–¥–∞—Ç—å",
            // === –ö–û–ù–ï–¶ –ù–û–í–û–ì–û –ö–û–î–ê ===
            // === –ù–ê–ß–ê–õ–û –ù–û–í–û–ì–û –ö–û–î–ê ===
            confirm_finish_with_unanswered_title: "–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ç–µ—Å—Ç?",
            confirm_finish_with_unanswered_text: "–£ –≤–∞—Å –æ—Å—Ç–∞–ª–∏—Å—å –Ω–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã. –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ç–µ—Å—Ç —Å–µ–π—á–∞—Å?",
            // === –ö–û–ù–ï–¶ –ù–û–í–û–ì–û –ö–û–î–ê ===
            ai_chat_placeholder: "–°–ø—Ä–æ—Å–∏—Ç–µ —á—Ç–æ-–Ω–∏–±—É–¥—å...",
            ai_copy_response: "–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç",
            ai_share_response: "–ü–æ–¥–µ–ª–∏—Ç—å—Å—è",
            ai_regenerate_response: "–ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç",
            ai_reply_context_prompt: '[–í –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç "{authorName}": "{originalText}"]\n\n{newText}',
            ai_search_disabled_with_file: "–ü–æ–∏—Å–∫ –≤ Google –æ—Ç–∫–ª—é—á–∞–µ—Ç—Å—è –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–æ–≤",
            ai_show_all_user_messages_tooltip: "–ü–æ–∫–∞–∑–∞—Ç—å/—Å–∫—Ä—ã—Ç—å –≤—Å–µ –º–æ–∏ —Å–æ–æ–±—â–µ–Ω–∏—è",
            session_save_new_button: "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–∫ –Ω–æ–≤—É—é"
        },
        kk: {
            exit_toast_text: '–®—ã“ì—É “Ø—à—ñ–Ω —Ç–∞“ì—ã –±—ñ—Ä —Ä–µ—Ç –±–∞—Å—ã“£—ã–∑',
            // Main Screen
            continue_later_button: '–ö–µ–π—ñ–Ω—ñ—Ä–µ–∫ –∂–∞–ª“ì–∞—Å—Ç—ã—Ä—É',
            continue_sessions: '–ñ–∞–ª“ì–∞—Å—Ç—ã—Ä—É:',
            answered_of: '–ñ–∞—É–∞–ø –±–µ—Ä—ñ–ª–¥—ñ:',
            from: ', –∂–∞–ª–ø—ã:',
            time_left: '“ö–∞–ª“ì–∞–Ω —É–∞“õ—ã—Ç',
            continue_quiz_button: '–ñ–∞–ª“ì–∞—Å—Ç—ã—Ä—É',
            delete_session_button: '–ñ–æ—é',
            search_in_db: '–î–µ—Ä–µ–∫“õ–æ—Ä–¥–∞–Ω —Å“±—Ä–∞“õ—Ç—ã —ñ–∑–¥–µ—É:',
            search_placeholder: '–°“±—Ä–∞“õ –º”ô—Ç—ñ–Ω—ñ–Ω—ñ“£ –±”©–ª—ñ–≥—ñ–Ω –µ–Ω–≥—ñ–∑—ñ“£—ñ–∑...',
            find_button: '–Ü–∑–¥–µ—É',
            searching_in_db: '–î–µ—Ä–µ–∫“õ–æ—Ä–¥–∞–Ω —ñ–∑–¥–µ—É –∂“Ø—Ä—ñ–ø –∂–∞—Ç—ã—Ä...',
            or_divider: '-- –Ω–µ–º–µ—Å–µ --',
            choose_file: '“ö“±—Ä—ã–ª“ì—ã–¥–∞–Ω .qst|.txt|.pdf —Ñ–∞–π–ª—ã–Ω —Ç–∞“£–¥–∞“£—ã–∑:',
            gradus_button_main: 'GRADUS',
            gradus_subtitle: '(General Repository for Academic Data, Utility & Structure)',
            parser_button_main: '–ú”ô—Ç—ñ–Ω–¥—ñ',
            parser_subtitle: '.qst –ø—ñ—à—ñ–º—ñ–Ω–µ –∞—É–¥–∞—Ä—É',
            recent_files: '–ñ–∞“õ—ã–Ω–¥–∞ –ø–∞–π–¥–∞–ª–∞–Ω—ã–ª“ì–∞–Ω–¥–∞—Ä:',
            // Navigation & Headers
            nav_gradus: 'GRADUS –±–æ–π—ã–Ω—à–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏—è',
            back_to_main: '–ë–∞—Å—Ç—ã —ç–∫—Ä–∞–Ω“ì–∞ –æ—Ä–∞–ª—É',
            search_results_title: '–Ü–∑–¥–µ—É –Ω”ô—Ç–∏–∂–µ–ª–µ—Ä—ñ',
            back_to_search: '–ñ–∞“£–∞ —ñ–∑–¥–µ—É',
            quiz_settings_title: '–¢–µ—Å—Ç –±–∞–ø—Ç–∞—É–ª–∞—Ä—ã',
            cheat_sheet_title: '–î–∞–π—ã–Ω–¥–∞–ª“ì–∞–Ω —à–ø–∞—Ä–≥–∞–ª–∫–∞:',
            quiz_finished_title: '–¢–µ—Å—Ç –∞—è“õ—Ç–∞–ª–¥—ã!',
            parser_description: '–¢–µ—Å—Ç –ø—ñ—à—ñ–º—ñ–Ω–µ —Ç“Ø—Ä–ª–µ–Ω–¥—ñ—Ä—É “Ø—à—ñ–Ω —Ñ–∞–π–ª–¥—ã –∂“Ø–∫—Ç–µ“£—ñ–∑ –Ω–µ–º–µ—Å–µ –º”ô—Ç—ñ–Ω–¥—ñ “õ–æ–π—ã“£—ã–∑.',
            // Quiz Settings
            time_limit: '–£–∞“õ—ã—Ç —à–µ–∫—Ç–µ—É—ñ (–º–∏–Ω—É—Ç, 0 - —à–µ–∫—Ç–µ—É—Å—ñ–∑):',
            time_limit_minutes: '–º–∏–Ω',
            question_range: '–°“±—Ä–∞“õ—Ç–∞—Ä –∞—É“õ—ã–º—ã:',
            range_from: '–ë–∞—Å—Ç–∞–ø',
            range_to: '–î–µ–π—ñ–Ω',
            total_questions_label: '–±–∞—Ä–ª—ã“ì—ã',
            questions_label_for_range: '—Å“±—Ä–∞“õ',
            shuffle_questions: '–°“±—Ä–∞“õ—Ç–∞—Ä–¥—ã –∞—Ä–∞–ª–∞—Å—Ç—ã—Ä—É',
            shuffle_answers: '–ñ–∞—É–∞–ø—Ç–∞—Ä–¥—ã –∞—Ä–∞–ª–∞—Å—Ç—ã—Ä—É',
            feedback_mode: '–ö–µ—Ä—ñ –±–∞–π–ª–∞–Ω—ã—Å —Ä–µ–∂–∏–º—ñ (–ñ–ò —Ç–∞–ª–¥–∞—É—ã + “õ–∞—Ç–µ–ª–µ—Ä–º–µ–Ω –∂“±–º—ã—Å)',
            reading_mode: '–û“õ—É —Ä–µ–∂–∏–º—ñ (–±—ñ—Ä—ñ–Ω—à—ñ –∂–∞—É–∞–ø –¥“±—Ä—ã—Å)',
            start_quiz_button: '–¢–µ—Å—Ç—Ç—ñ –±–∞—Å—Ç–∞—É',
            generate_cheat_sheet_button: '–®–ø–∞—Ä–≥–∞–ª–∫–∞ –∂–∞—Å–∞—É',
            choose_another_file_button: '–ë–∞—Å“õ–∞ —Ñ–∞–π–ª —Ç–∞“£–¥–∞—É',
            // Cheat Sheet
            download_cheat_sheet_button: '–®–ø–∞—Ä–≥–∞–ª–∫–∞–Ω—ã –∂“Ø–∫—Ç–µ—É (.txt)',
            back_to_settings_button: '–ë–∞–ø—Ç–∞—É–ª–∞—Ä“ì–∞ –æ—Ä–∞–ª—É',
            // Quiz Screen
            timer_label: '–£–∞“õ—ã—Ç:',
            prev_question_button: '–ê–ª–¥—ã“£“ì—ã',
            next_question_button: '–ö–µ–ª–µ—Å—ñ',
            finish_button: '–¢–µ—Å—Ç—Ç—ñ –∞—è“õ—Ç–∞—É',
            question_label: '–°“±—Ä–∞“õ:',
            correct_label: '–î“±—Ä—ã—Å:',
            quick_nav_title: '–°“±—Ä–∞“õ—Ç–∞—Ä –±–æ–π—ã–Ω—à–∞ –∂—ã–ª–¥–∞–º ”©—Ç—É:',
            finish_early_button: '–¢–µ—Å—Ç—Ç—ñ –∞—è“õ—Ç–∞—É',
            // Results
            your_result: '–°—ñ–∑–¥—ñ“£ –Ω”ô—Ç–∏–∂–µ“£—ñ–∑:',
            of_label: '—ñ—à—ñ–Ω–µ–Ω',
            accuracy_label: '–î”ô–ª–¥—ñ–∫:',
            download_errors_button: '–ñ–∞—É–∞–ø –±–µ—Ä—ñ–ª–º–µ–≥–µ–Ω/“õ–∞—Ç–µ —Å“±—Ä–∞“õ—Ç–∞—Ä–¥—ã –∂“Ø–∫—Ç–µ—É',
            review_errors_button: '“ö–∞—Ç–µ–ª–µ—Ä–º–µ–Ω –∂“±–º—ã—Å',
            download_triggered_quiz_button: '–¢—Ä–∏–≥–≥–µ—Ä–ª–µ—Ä—ñ –±–∞—Ä —Ç–µ—Å—Ç—Ç—ñ –∂“Ø–∫—Ç–µ—É',
            restart_button: '–ë–∞—Å“õ–∞ —Ç–µ—Å—Ç ”©—Ç—É',
            // Parser
            parser_upload_or_paste: '–§–∞–π–ª–¥—ã (.txt) –∂“Ø–∫—Ç–µ“£—ñ–∑ –Ω–µ–º–µ—Å–µ –º”ô—Ç—ñ–Ω–¥—ñ —Ç”©–º–µ–Ω–≥–µ “õ–æ–π—ã“£—ã–∑:',
            clear_parser_input: '”®—Ä—ñ—Å—Ç—ñ —Ç–∞–∑–∞—Ä—Ç—É',
            parser_input_placeholder: '–ù–µ–º–µ—Å–µ “õ“±–∂–∞—Ç—Ç–∞“ì—ã –º”ô—Ç—ñ–Ω–¥—ñ –æ—Å—ã–Ω–¥–∞ “õ–æ–π—ã“£—ã–∑...',
            parser_select_format: '–ü—ñ—à—ñ–º–¥—ñ —Ç–∞“£–¥–∞“£—ã–∑ (–Ω–µ–º–µ—Å–µ –∞–≤—Ç–æ–∞–Ω—ã“õ—Ç–∞—É “Ø—à—ñ–Ω “õ–∞–ª–¥—ã—Ä—ã“£—ã–∑):',
            parser_auto_detect: '-- –ê–≤—Ç–æ–º–∞—Ç—Ç—ã —Ç“Ø—Ä–¥–µ –∞–Ω—ã“õ—Ç–∞—É --',
            parser_run_button: '–¢“Ø—Ä–ª–µ–Ω–¥—ñ—Ä—É',
            parser_errors_found: '‚ö†Ô∏è –ü—ñ—à—ñ–º–¥–µ—É “õ–∞—Ç–µ–ª–µ—Ä—ñ',
            parser_result_title: '–ù”ô—Ç–∏–∂–µ:',
            download_parsed_button: '.qst —Ñ–∞–π–ª—ã–Ω –∂“Ø–∫—Ç–µ—É',
            back_button: '–ê—Ä—Ç“õ–∞',
            // === –ù–ê–ß–ê–õ–û –ù–û–í–û–ì–û –ö–û–î–ê –î–õ–Ø kk ===
            modal_cancel_button: '–ë–æ–ª–¥—ã—Ä–º–∞—É',
            confirm_delete_message: '–û—Å—ã —Ö–∞–±–∞—Ä–ª–∞–º–∞–Ω—ã –∂–æ–π“ì—ã“£—ã–∑ –∫–µ–ª–µ—Ç—ñ–Ω—ñ–Ω–µ —Å–µ–Ω—ñ–º–¥—ñ—Å—ñ–∑ –±–µ?',
            confirm_delete_question: '–û—Å—ã —Å“±—Ä–∞“õ—Ç—ã –∂–æ–π“ì—ã“£—ã–∑ –∫–µ–ª–µ—Ç—ñ–Ω—ñ–Ω–µ —Å–µ–Ω—ñ–º–¥—ñ—Å—ñ–∑ –±–µ? –ë“±–ª ”ô—Ä–µ–∫–µ—Ç—Ç—ñ “õ–∞–π—Ç–∞—Ä—É –º“Ø–º–∫—ñ–Ω –µ–º–µ—Å.',
            confirm_delete_channel: '–û—Å—ã –∞—Ä–Ω–∞–Ω—ã –∂–æ–π“ì—ã“£—ã–∑ –∫–µ–ª–µ—Ç—ñ–Ω—ñ–Ω–µ —Å–µ–Ω—ñ–º–¥—ñ—Å—ñ–∑ –±–µ? –û–Ω–¥–∞“ì—ã –±–∞—Ä–ª—ã“õ —Ö–∞–±–∞—Ä–ª–∞–º–∞–ª–∞—Ä –∂–æ“ì–∞–ª–∞–¥—ã. –ë“±–ª ”ô—Ä–µ–∫–µ—Ç—Ç—ñ “õ–∞–π—Ç–∞—Ä—É –º“Ø–º–∫—ñ–Ω –µ–º–µ—Å.',
            confirm_delete_account: '–ê–∫–∫–∞—É–Ω—Ç—ã“£—ã–∑–¥—ã –∂–æ–π“ì—ã“£—ã–∑ –∫–µ–ª–µ—Ç—ñ–Ω—ñ–Ω–µ —Å–µ–Ω—ñ–º–¥—ñ—Å—ñ–∑ –±–µ? –ë“±–ª ”ô—Ä–µ–∫–µ—Ç—Ç—ñ “ö–ê–ô–¢–ê–†–£ –ú“Æ–ú–ö–Ü–ù –ï–ú–ï–°.',
            confirm_clear_favorites: '–¢–∞“£–¥–∞—É–ª—ã–ª–∞—Ä–¥–∞–Ω –ë–ê–†–õ–´“ö —ç–ª–µ–º–µ–Ω—Ç—Ç–µ—Ä–¥—ñ –∂–æ–π“ì—ã“£—ã–∑ –∫–µ–ª–µ—Ç—ñ–Ω—ñ–Ω–µ —Å–µ–Ω—ñ–º–¥—ñ—Å—ñ–∑ –±–µ? –ë“±–ª ”ô—Ä–µ–∫–µ—Ç—Ç—ñ “õ–∞–π—Ç–∞—Ä—É –º“Ø–º–∫—ñ–Ω –µ–º–µ—Å.',
            confirm_kick_user: '–û—Å—ã –º“Ø—à–µ–Ω—ñ –∞—Ä–Ω–∞–¥–∞–Ω –∞–ª“ì—ã“£—ã–∑ –∫–µ–ª–µ—Ç—ñ–Ω—ñ–Ω–µ —Å–µ–Ω—ñ–º–¥—ñ—Å—ñ–∑ –±–µ?',
            // === –ö–û–ù–ï–¶ –ù–û–í–û–ì–û –ö–û–î–ê –î–õ–Ø kk ===
            copy_success_short: '‚úì –ö”©—à—ñ—Ä—ñ–ª–¥—ñ!',

            // === –ù–ê–ß–ê–õ–û –ù–û–í–û–ì–û –ö–û–î–ê ===
            audience_create_modal_title: "–ñ–∞“£–∞ –ê—É–¥–∏—Ç–æ—Ä–∏—è “õ“±—Ä—É",
            audience_create_modal_text: "–ñ–∞—Ä–∏—è –ê—É–¥–∏—Ç–æ—Ä–∏—è“£—ã–∑ “Ø—à—ñ–Ω –∞—Ç–∞—É –µ–Ω–≥—ñ–∑—ñ“£—ñ–∑. –û–ª –±–∞—Ä–ª—ã“õ –ø–∞–π–¥–∞–ª–∞–Ω—É—à—ã–ª–∞—Ä“ì–∞ –∫”©—Ä—ñ–Ω–µ—Ç—ñ–Ω –±–æ–ª–∞–¥—ã.",
            audience_create_placeholder: "–ê—É–¥–∏—Ç–æ—Ä–∏—è –∞—Ç–∞—É—ã...",
            audience_create_button: "“ö“±—Ä—É",
            // === –ö–û–ù–ï–¶ –ù–û–í–û–ì–û –ö–û–î–ê ===


            // Header Buttons
            copy_question_title: '–ê“ì—ã–º–¥–∞“ì—ã —Å“±—Ä–∞“õ—Ç—ã –∫”©—à—ñ—Ä—É',
            search_web_title: '–ò–Ω—Ç–µ—Ä–Ω–µ—Ç—Ç–µ–Ω —ñ–∑–¥–µ—É',
            chat_button_title: '–ß–∞—Ç',
            confirm_action_title: '”ò—Ä–µ–∫–µ—Ç—Ç—ñ —Ä–∞—Å—Ç–∞—É', 
            quick_mode_title: '–ñ—ã–ª–¥–∞–º —Ä–µ–∂–∏–º (–ê–≤—Ç–æ–º–∞—Ç—Ç—ã ”©—Ç—É)',
            trigger_words_title: '–¢—Ä–∏–≥–≥–µ—Ä-—Å”©–∑–¥–µ—Ä',
            theme_button_title: '–¢–µ–º–∞–Ω—ã ”©–∑–≥–µ—Ä—Ç—É',
            language_toggle_title: '–¢—ñ–ª–¥—ñ ”©–∑–≥–µ—Ä—Ç—É',
            favorite_button_title: '–¢–∞“£–¥–∞—É–ª—ã–ª–∞—Ä“ì–∞ “õ–æ—Å—É',
            translate_question_title: '–ê“ì—ã–º–¥–∞“ì—ã —Å“±—Ä–∞“õ—Ç—ã –∞—É–¥–∞—Ä—É',
            // Messages
            search_query_too_short: '–Ü–∑–¥–µ—É —Å“±—Ä–∞–Ω—ã—Å—ã –∫–µ–º—ñ–Ω–¥–µ 3 —Ç–∞“£–±–∞–¥–∞–Ω —Ç“±—Ä—É—ã –∫–µ—Ä–µ–∫.',
            file_empty_or_invalid_part1: '"',
            file_empty_or_invalid_part2: '" —Ñ–∞–π–ª—ã –±–æ—Å –Ω–µ–º–µ—Å–µ –ø—ñ—à—ñ–º—ñ –∂–∞—Ä–∞–º—Å—ã–∑.',
            no_questions_for_settings: '–ê“ì—ã–º–¥–∞“ì—ã –±–∞–ø—Ç–∞—É–ª–∞—Ä “Ø—à—ñ–Ω —Å“±—Ä–∞“õ—Ç–∞—Ä —Ç–∞–±—ã–ª–º–∞–¥—ã.',
            confirm_finish_early: '–¢–µ—Å—Ç—Ç—ñ –º–µ—Ä–∑—ñ–º—ñ–Ω–µ–Ω –±“±—Ä—ã–Ω –∞—è“õ—Ç–∞“ì—ã“£—ã–∑ –∫–µ–ª–µ—Ç—ñ–Ω—ñ–Ω–µ —Å–µ–Ω—ñ–º–¥—ñ—Å—ñ–∑ –±–µ?',
            copy_button: "–ö”©—à—ñ—Ä—É",
            search_provider_db: "–î–µ—Ä–µ–∫“õ–æ—Ä",
            relevance_tag: "–°”ô–π–∫–µ—Å—Ç—ñ–ª—ñ–∫:",
            copy_button: "–ö”©—à—ñ—Ä—É", 
            copy_question_tooltip: "–°“±—Ä–∞“õ—Ç—ã –∫”©—à—ñ—Ä—É",
            favorite_question_tooltip: "–¢–∞“£–¥–∞—É–ª—ã–ª–∞—Ä“ì–∞ “õ–æ—Å—É",

            copy_success: "–ú–∞–∑–º“±–Ω –∞–ª–º–∞—Å—É –±—É—Ñ–µ—Ä—ñ–Ω–µ –∫”©—à—ñ—Ä—ñ–ª–¥—ñ!",
            ai_explanation_title: '–ñ–ò —Ç“Ø—Å—ñ–Ω–¥—ñ—Ä–º–µ—Å—ñ',
            ai_explanation_style_label: '–¢“Ø—Å—ñ–Ω–¥—ñ—Ä—É —Å—Ç–∏–ª—ñ:',
            ai_explain_button: ' –¢“Ø—Å—ñ–Ω–¥—ñ—Ä—É',
            ai_explanation_loading: '–ñ–ò —Ç“Ø—Å—ñ–Ω–¥—ñ—Ä–º–µ –¥–∞–π—ã–Ω–¥–∞—É–¥–∞...',
            ai_generating_button: 'ü§ñ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è...',
            ai_error_text_empty: '–¢–∞–ª–¥–∞—É “Ø—à—ñ–Ω –º”ô—Ç—ñ–Ω–¥—ñ –µ–Ω–≥—ñ–∑—ñ“£—ñ–∑.',
            ai_error_generation: '–¢–µ—Å—Ç –∂–∞—Å–∞—É –∫–µ–∑—ñ–Ω–¥–µ “õ–∞—Ç–µ –ø–∞–π–¥–∞ –±–æ–ª–¥—ã.',
            ai_question_count_label: '–ñ–ò “Ø—à—ñ–Ω —Å“±—Ä–∞“õ—Ç–∞—Ä —Å–∞–Ω—ã–Ω –∫”©—Ä—Å–µ—Ç—ñ“£—ñ–∑:',
            ai_auto_mode_label: '–ê–≤—Ç–æ',
            ai_style_simple: "“ö–∞—Ä–∞–ø–∞–π—ã–º",
            ai_style_scientific: "“í—ã–ª—ã–º–∏",
            ai_style_associative: "–ê–Ω–∞–ª–æ–≥–∏—è",
            ai_style_stepbystep: "“ö–∞–¥–∞–º–º–µ–Ω",
            ai_style_practical: "–ü—Ä–∞–∫—Ç–∏–∫–∞–ª—ã“õ",
            ai_style_visual: "–ö”©—Ä–Ω–µ–∫—ñ",
            ai_answer_count_label: '–ñ–∞—É–∞–ø –Ω“±—Å“õ–∞–ª–∞—Ä—ã–Ω—ã“£ —Å–∞–Ω—ã–Ω –∫”©—Ä—Å–µ—Ç—ñ“£—ñ–∑:',
            ai_auto_category_label: '–°–∞–Ω–∞—Ç—Ç–∞—Ä–¥—ã –∞–≤—Ç–æ–º–∞—Ç—Ç—ã —Ç“Ø—Ä–¥–µ –∂–∞—Å–∞—É',
            exit_modal_title: '–†–∞—Å—Ç–∞—É',
            exit_modal_text: '“ö–æ—Å—ã–º—à–∞–¥–∞–Ω —à—ã“õ“õ—ã“£—ã–∑ –∫–µ–ª–µ—Ç—ñ–Ω—ñ–Ω–µ —Å–µ–Ω—ñ–º–¥—ñ—Å—ñ–∑ –±–µ?',
            exit_modal_confirm: '–®—ã“ì—É',
            exit_modal_cancel: '“ö–∞–ª—É',
            confirm_button_delete: '–ñ–æ—é',
            update_available_text: '–ñ–∞“£–∞ –Ω“±—Å“õ–∞—Å—ã “õ–æ–ª–∂–µ—Ç—ñ–º–¥—ñ!',
            update_button_text: '–ñ–∞“£–∞—Ä—Ç—É',
            ai_explain_button_title: '–ñ–ò –∞—Ä“õ—ã–ª—ã —Ç“Ø—Å—ñ–Ω–¥—ñ—Ä—É',
            download_translated_txt_button: '–ê—É–¥–∞—Ä–º–∞–Ω—ã –∂“Ø–∫—Ç–µ—É ({lang})(txt)',
            download_translated_qst_button: '–ê—É–¥–∞—Ä–º–∞–Ω—ã –∂“Ø–∫—Ç–µ—É ({lang})(qst)',
            no_translations_to_download: '–ñ“Ø–∫—Ç–µ—É “Ø—à—ñ–Ω “õ–æ–ª–∂–µ—Ç—ñ–º–¥—ñ –∞—É–¥–∞—Ä–º–∞–ª–∞—Ä –∂–æ“õ.',
            error_creating_translation_file: '–ê—É–¥–∞—Ä–º–∞ —Ñ–∞–π–ª—ã–Ω “õ“±—Ä—É –º“Ø–º–∫—ñ–Ω –±–æ–ª–º–∞–¥—ã.',
            ai_show_original_button: '–¢“Ø–ø–Ω“±—Å“õ–∞–Ω—ã –∫”©—Ä—Å–µ—Ç—É',
            ai_show_translation_button: '–ê—É–¥–∞—Ä–º–∞–Ω—ã –∫”©—Ä—Å–µ—Ç—É',
            flashcards_mode: '–ö–∞—Ä—Ç–æ—á–∫–∞–ª–∞—Ä —Ä–µ–∂–∏–º—ñ (—Å“±—Ä–∞“õ/–∂–∞—É–∞–ø)',
            start_flashcards_button: '–û“õ—É–¥—ã –±–∞—Å—Ç–∞—É',
            flashcard_category_label: '–ö–µ–ª–µ—Å—ñ –±”©–ª—ñ–º:',
            results_flashcards_viewed: '“ö–∞—Ä–∞–ª“ì–∞–Ω –∫–∞—Ä—Ç–æ—á–∫–∞–ª–∞—Ä',
            session_cards_viewed: '“ö–∞—Ä–∞–ª–¥—ã',
            ai_error_generic: '–¢“Ø—Å—ñ–Ω–¥—ñ—Ä–º–µ–Ω—ñ –∂–∞—Å–∞—É –º“Ø–º–∫—ñ–Ω –±–æ–ª–º–∞–¥—ã. “ö–∞–π—Ç–∞–ª–∞–ø –∫”©—Ä—ñ“£—ñ–∑.',
            ai_error_server: '–¢“Ø—Å—ñ–Ω–¥—ñ—Ä–º–µ–Ω—ñ –∂–∞—Å–∞—É –º“Ø–º–∫—ñ–Ω –±–æ–ª–º–∞–¥—ã: –°–µ—Ä–≤–µ—Ä–¥–µ —É–∞“õ—ã—Ç—à–∞ “õ–∞—Ç–µ –ø–∞–π–¥–∞ –±–æ–ª–¥—ã. –ö–µ–π—ñ–Ω—ñ—Ä–µ–∫ “õ–∞–π—Ç–∞–ª–∞–ø –∫”©—Ä—ñ“£—ñ–∑.',
            parser_overwrite_warning: '–ù”ô—Ç–∏–∂–µ ”©—Ä—ñ—Å—ñ–Ω–¥–µ –º”ô—Ç—ñ–Ω –±–∞—Ä. –û–Ω—ã “õ–∞–π—Ç–∞ –∂–∞–∑“ì—ã“£—ã–∑ –∫–µ–ª–µ—Ç—ñ–Ω—ñ–Ω–µ —Å–µ–Ω—ñ–º–¥—ñ—Å—ñ–∑ –±–µ?',
            ai_error_generation: '–¢–µ—Å—Ç –∂–∞—Å–∞—É –∫–µ–∑—ñ–Ω–¥–µ “õ–∞—Ç–µ –ø–∞–π–¥–∞ –±–æ–ª–¥—ã.',
            ai_error_server_generation: '–¢–µ—Å—Ç –∂–∞—Å–∞—É “õ–∞—Ç–µ—Å—ñ: –°–µ—Ä–≤–µ—Ä–¥–µ —É–∞“õ—ã—Ç—à–∞ “õ–∞—Ç–µ –ø–∞–π–¥–∞ –±–æ–ª–¥—ã. –ö–µ–π—ñ–Ω—ñ—Ä–µ–∫ “õ–∞–π—Ç–∞–ª–∞–ø –∫”©—Ä—ñ“£—ñ–∑.',
            ai_char_limit_exceeded: '–¢–∞“£–±–∞ —à–µ–≥—ñ–Ω–µ–Ω –∞—Å—ã–ø –∫–µ—Ç—Ç—ñ ({current}/{max})',

            tab_converter: "–ú”ô—Ç—ñ–Ω–Ω–µ–Ω —Ç“Ø—Ä–ª–µ–Ω–¥—ñ—Ä–≥—ñ—à",
            tab_ai_from_text: "–ú”ô—Ç—ñ–Ω–Ω–µ–Ω –ñ–ò-–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä",
            tab_ai_generator: "–¢–∞“õ—ã—Ä—ã–ø –±–æ–π—ã–Ω—à–∞ –ñ–ò-–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä",
            ai_from_text_title: "ü§ñ –ú”ô—Ç—ñ–Ω—ñ“£—ñ–∑–¥–µ–Ω —Ç–µ—Å—Ç –∂–∞—Å–∞—É (–ñ–ò)",
            ai_generate_from_text_button: "–ú”ô—Ç—ñ–Ω–Ω–µ–Ω —Ç–µ—Å—Ç –∂–∞—Å–∞—É",
            ai_topic_description: "–ñ–ò ”©–∑ –±—ñ–ª—ñ–º—ñ–Ω –ø–∞–π–¥–∞–ª–∞–Ω–∞ –æ—Ç—ã—Ä—ã–ø, –∫”©—Ä—Å–µ—Ç—ñ–ª–≥–µ–Ω —Ç–∞“õ—ã—Ä—ã–ø –Ω–µ–≥—ñ–∑—ñ–Ω–¥–µ —Ç–µ—Å—Ç—Ç—ñ ”©–∑ –±–µ—Ç—ñ–Ω—à–µ –∂–∞—Å–∞–π–¥—ã.",
            ai_topic_label: "–¢–µ—Å—Ç –∂–∞—Å–∞—É “Ø—à—ñ–Ω —Ç–∞“õ—ã—Ä—ã–ø—Ç—ã –µ–Ω–≥—ñ–∑—ñ“£—ñ–∑:",
            ai_topic_placeholder: "–ú—ã—Å–∞–ª—ã: –†–µ—Å–ø—É–±–ª–∏–∫–∞ –∫–µ–∑–µ“£—ñ–Ω–¥–µ–≥—ñ –ï–∂–µ–ª–≥—ñ –†–∏–º —Ç–∞—Ä–∏—Ö—ã, 15 —Å“±—Ä–∞“õ, 4 –∂–∞—É–∞–ø –Ω“±—Å“õ–∞—Å—ã, —Å–æ“ì—ã—Å—Ç–∞—Ä –±–æ–π—ã–Ω—à–∞ —Å–∞–Ω–∞—Ç—Ç–∞—Ä–º–µ–Ω...",
            ai_topic_question_count_label: "–°“±—Ä–∞“õ—Ç–∞—Ä —Å–∞–Ω—ã (–µ–≥–µ—Ä —Ç–∞“õ—ã—Ä—ã–ø—Ç–∞ –∫”©—Ä—Å–µ—Ç—ñ–ª–º–µ—Å–µ):",
            ai_topic_answer_count_label: "–ñ–∞—É–∞–ø –Ω“±—Å“õ–∞–ª–∞—Ä—ã–Ω—ã“£ —Å–∞–Ω—ã (–µ–≥–µ—Ä —Ç–∞“õ—ã—Ä—ã–ø—Ç–∞ –∫”©—Ä—Å–µ—Ç—ñ–ª–º–µ—Å–µ):",
            ai_generate_from_topic_button: "ü§ñ –¢–∞“õ—ã—Ä—ã–ø –±–æ–π—ã–Ω—à–∞ —Ç–µ—Å—Ç –∂–∞—Å–∞—É (–ñ–ò)",
            ai_thinking_topic: "–ñ–ò-–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å—ñ–∑–¥—ñ“£ —Ç–∞“õ—ã—Ä—ã–±—ã“£—ã–∑–¥—ã –æ–π–ª–∞—Å—Ç—ã—Ä—É–¥–∞...",
            ai_topic_auto_category_label: "–°–∞–Ω–∞—Ç—Ç–∞—Ä–¥—ã –∞–≤—Ç–æ–º–∞—Ç—Ç—ã —Ç“Ø—Ä–¥–µ –∂–∞—Å–∞—É",

            parser_auto_detect: '-- –ê–≤—Ç–æ–º–∞—Ç—Ç—ã —Ç“Ø—Ä–¥–µ –∞–Ω—ã“õ—Ç–∞—É --',
            filter_variants_button: '‚öôÔ∏è –ù“±—Å“õ–∞–ª–∞—Ä —Å“Ø–∑–≥—ñ—Å—ñ',
            filter_variants_header: '–ù“±—Å“õ–∞–ª–∞—Ä —Å–∞–Ω—ã–Ω —Ç–∞“£–¥–∞“£—ã–∑:',
            filter_apply_button: '“ö–æ–ª–¥–∞–Ω—É',
            filter_reset_button: '–¢–∞—Å—Ç–∞—É',
            loading_default_text: '–ñ“Ø–∫—Ç–µ–ª—É–¥–µ...',
            search_no_results: '–°—ñ–∑–¥—ñ“£ —Å“±—Ä–∞–Ω—ã—Å—ã“£—ã–∑ –±–æ–π—ã–Ω—à–∞ –µ—à—Ç–µ“£–µ —Ç–∞–±—ã–ª–º–∞–¥—ã.',
            search_error_prefix: '“ö–∞—Ç–µ –ø–∞–π–¥–∞ –±–æ–ª–¥—ã:',
            gradus_loading: '–ñ“Ø–∫—Ç–µ–ª—É–¥–µ...',
            gradus_folder_empty: '“ö–∞–ª—Ç–∞ –±–æ—Å',
            gradus_loading_error_prefix: '“ö–∞—Ç–µ:',
            gradus_loading_quiz_prefix: '–¢–µ—Å—Ç –∂“Ø–∫—Ç–µ–ª—É–¥–µ',
            error_no_questions_for_cheatsheet: '–®–ø–∞—Ä–≥–∞–ª–∫–∞ –∂–∞—Å–∞—É “Ø—à—ñ–Ω —Å“±—Ä–∞“õ—Ç–∞—Ä –∂–æ“õ.',
            parser_input_empty_alert: '–ú”ô—Ç—ñ–Ω –µ–Ω–≥—ñ–∑—É ”©—Ä—ñ—Å—ñ –±–æ—Å!',
            parser_pattern_not_found_alert: '“ö–∞—Ç–µ –ø–∞–π–¥–∞ –±–æ–ª–¥—ã. –¢–∞“£–¥–∞–ª“ì–∞–Ω “Ø–ª–≥—ñ —Ç–∞–±—ã–ª–º–∞–¥—ã.',
            parser_no_questions_recognized_alert: '–¢–∞“£–¥–∞–ª“ì–∞–Ω –ø—ñ—à—ñ–º –±–æ–π—ã–Ω—à–∞ –±—ñ—Ä–¥–µ-–±—ñ—Ä —Å“±—Ä–∞“õ —Ç–∞–±—ã–ª–º–∞–¥—ã. –ë–∞—Å“õ–∞—Å—ã–Ω –∫”©—Ä—ñ“£—ñ–∑.',
            parser_no_questions_with_errors_alert: '–ë—ñ—Ä–¥–µ-–±—ñ—Ä —Å“±—Ä–∞“õ—Ç—ã —Ç–∞–Ω—É –º“Ø–º–∫—ñ–Ω –±–æ–ª–º–∞–¥—ã. –¢–∞–±—ã–ª“ì–∞–Ω “õ–∞—Ç–µ–ª–µ—Ä: {count}.',
            parser_conversion_success_alert: '{count} —Å“±—Ä–∞“õ —Å”ô—Ç—Ç—ñ —Ç“Ø—Ä–ª–µ–Ω–¥—ñ—Ä—ñ–ª–¥—ñ!',
            parser_conversion_summary_alert: '–û–ø–µ—Ä–∞—Ü–∏—è –∞—è“õ—Ç–∞–ª–¥—ã.\n\n–¢–∞–Ω—ã–ª“ì–∞–Ω —Å“±—Ä–∞“õ—Ç–∞—Ä: {parsed}\n–ü—ñ—à—ñ–º–¥–µ—É “õ–∞—Ç–µ–ª–µ—Ä—ñ —Ç–∞–±—ã–ª–¥—ã: {errors}',
            ai_topic_empty_alert: '–¢–µ—Å—Ç –∂–∞—Å–∞—É “Ø—à—ñ–Ω —Ç–∞“õ—ã—Ä—ã–ø—Ç—ã –µ–Ω–≥—ñ–∑—ñ“£—ñ–∑.',
            ai_explanation_prepare_error: '–¢“Ø—Å—ñ–Ω–¥—ñ—Ä–º–µ —Ç–µ—Ä–µ–∑–µ—Å—ñ–Ω –¥–∞–π—ã–Ω–¥–∞—É –º“Ø–º–∫—ñ–Ω –±–æ–ª–º–∞–¥—ã.',
            ai_analyzing_errors_button: '–ñ–ò —Ç–∞–ª–¥–∞—É–¥–∞... üß†',
            ai_error_analysis_button: 'ü§ñ –ñ–ò “õ–∞—Ç–µ–ª–µ—Ä –∞–Ω–∞–ª–∏—Ç–∏–∫–∞—Å—ã',

            search_engine_google: 'Google',
            search_engine_yandex: '–Ø–Ω–¥–µ–∫—Å',
            search_engine_perplexity: 'Perplexity',
            footer_copyright: 'prod by @iverrum',
            error_no_question_to_copy: '–ö”©—à—ñ—Ä—É “Ø—à—ñ–Ω –∞“ì—ã–º–¥–∞“ì—ã —Å“±—Ä–∞“õ—Ç—ã –∞–Ω—ã“õ—Ç–∞—É –º“Ø–º–∫—ñ–Ω –±–æ–ª–º–∞–¥—ã.',
            error_no_question_to_favorite: '–¢–∞“£–¥–∞—É–ª—ã–ª–∞—Ä“ì–∞ “õ–æ—Å—É “Ø—à—ñ–Ω –∞“ì—ã–º–¥–∞“ì—ã —Å“±—Ä–∞“õ—Ç—ã –∞–Ω—ã“õ—Ç–∞—É –º“Ø–º–∫—ñ–Ω –±–æ–ª–º–∞–¥—ã.',
            error_favorites_require_auth: '–¢–∞“£–¥–∞—É–ª—ã–ª–∞—Ä–¥—ã –ø–∞–π–¥–∞–ª–∞–Ω—É “Ø—à—ñ–Ω –∞–∫–∫–∞—É–Ω—Ç“õ–∞ –∫—ñ—Ä—É “õ–∞–∂–µ—Ç.',
            error_cannot_process_question: '–°–∞“õ—Ç–∞—É “Ø—à—ñ–Ω —Å“±—Ä–∞“õ—Ç—ã ”©“£–¥–µ—É –º“Ø–º–∫—ñ–Ω –±–æ–ª–º–∞–¥—ã.',

            app_title: 'QSTiUM',
            confirm_delete_session: '–°–∞“õ—Ç–∞–ª“ì–∞–Ω "{fileName}" —Ç–µ—Å—Ç—ñ–Ω –∂–æ–π“ì—ã“£—ã–∑ –∫–µ–ª–µ—Ç—ñ–Ω—ñ–Ω–µ —Å–µ–Ω—ñ–º–¥—ñ—Å—ñ–∑ –±–µ? –ë“±–ª ”ô—Ä–µ–∫–µ—Ç—Ç—ñ “õ–∞–π—Ç–∞—Ä—É –º“Ø–º–∫—ñ–Ω –µ–º–µ—Å.',
            error_session_not_found: '“ö–∞—Ç–µ: –±“±–ª —Ñ–∞–π–ª “Ø—à—ñ–Ω —Å–∞“õ—Ç–∞–ª“ì–∞–Ω —Å–µ—Å—Å–∏—è —Ç–∞–±—ã–ª–º–∞–¥—ã.',
            error_session_file_not_found: '–°–µ—Å—Å–∏—è–Ω—ã “õ–∞–ª–ø—ã–Ω–∞ –∫–µ–ª—Ç—ñ—Ä—É –º“Ø–º–∫—ñ–Ω –±–æ–ª–º–∞–¥—ã. –ë–∞—Å—Ç–∞–ø“õ—ã —Ñ–∞–π–ª "–ñ–∞“õ—ã–Ω–¥–∞ –ø–∞–π–¥–∞–ª–∞–Ω—ã–ª“ì–∞–Ω–¥–∞—Ä" —ñ—à—ñ–Ω–¥–µ —Ç–∞–±—ã–ª–º–∞–¥—ã.',
            error_cheat_sheet_first: '–ê–ª–¥—ã–º–µ–Ω —à–ø–∞—Ä–≥–∞–ª–∫–∞–Ω—ã –∂–∞—Å–∞“£—ã–∑.',
            error_download_parsed_first: '–ê–ª–¥—ã–º–µ–Ω —Ñ–∞–π–ª–¥—ã —Ç“Ø—Ä–ª–µ–Ω–¥—ñ—Ä—ñ“£—ñ–∑.',
            error_filter_no_variant_selected: '–°“Ø–∑—É “Ø—à—ñ–Ω –±—ñ—Ä–¥–µ-–±—ñ—Ä –Ω“±—Å“õ–∞ —Å–∞–Ω—ã —Ç–∞“£–¥–∞–ª–º–∞–¥—ã.',
            error_filter_found_mismatch: '–°“Ø–∑–≥—ñ–≥–µ —Å”ô–π–∫–µ—Å –∫–µ–ª–º–µ–π—Ç—ñ–Ω {count} —Å“±—Ä–∞“õ —Ç–∞–±—ã–ª–¥—ã.',
            error_filter_all_match: '–ë–∞—Ä–ª—ã“õ —Å“±—Ä–∞“õ—Ç–∞—Ä –±–µ—Ä—ñ–ª–≥–µ–Ω —Å“Ø–∑–≥—ñ–≥–µ —Å”ô–π–∫–µ—Å –∫–µ–ª–µ–¥—ñ!',
            error_download_failed_generic: '–î–µ—Ä–µ–∫—Ç–µ—Ä–¥—ñ –∂“Ø–∫—Ç–µ—É –º“Ø–º–∫—ñ–Ω –±–æ–ª–º–∞–¥—ã. “ö–∞–π—Ç–∞–ª–∞–ø –∫”©—Ä—ñ“£—ñ–∑.',
            error_generic_for_alert: '“ö–∞—Ç–µ –ø–∞–π–¥–∞ –±–æ–ª–¥—ã',

            copy_question_title: '–ê“ì—ã–º–¥–∞“ì—ã —Å“±—Ä–∞“õ—Ç—ã –∫”©—à—ñ—Ä—É',
            search_web_title: '–ò–Ω—Ç–µ—Ä–Ω–µ—Ç—Ç–µ–Ω —ñ–∑–¥–µ—É',
            quick_mode_title: '–ñ—ã–ª–¥–∞–º —Ä–µ–∂–∏–º (–ê–≤—Ç–æ–º–∞—Ç—Ç—ã ”©—Ç—É)',
            trigger_words_title: '–¢—Ä–∏–≥–≥–µ—Ä-—Å”©–∑–¥–µ—Ä',
            theme_button_title: '–¢–µ–º–∞–Ω—ã ”©–∑–≥–µ—Ä—Ç—É',
            language_toggle_title: '–¢—ñ–ª–¥—ñ ”©–∑–≥–µ—Ä—Ç—É',
            favorite_button_title: '–¢–∞“£–¥–∞—É–ª—ã–ª–∞—Ä“ì–∞ “õ–æ—Å—É',
            translate_question_title: '–ê“ì—ã–º–¥–∞“ì—ã —Å“±—Ä–∞“õ—Ç—ã –∞—É–¥–∞—Ä—É',
            footer_copyright: 'prod by @iverrum',
            exit_toast_text: '–®—ã“ì—É “Ø—à—ñ–Ω —Ç–∞“ì—ã –±—ñ—Ä —Ä–µ—Ç –±–∞—Å—ã“£—ã–∑',
            app_title: 'QSTiUM',
            confirm_delete_session: '–°–∞“õ—Ç–∞–ª“ì–∞–Ω "{fileName}" —Ç–µ—Å—Ç—ñ–Ω –∂–æ–π“ì—ã“£—ã–∑ –∫–µ–ª–µ—Ç—ñ–Ω—ñ–Ω–µ —Å–µ–Ω—ñ–º–¥—ñ—Å—ñ–∑ –±–µ? –ë“±–ª ”ô—Ä–µ–∫–µ—Ç—Ç—ñ “õ–∞–π—Ç–∞—Ä—É –º“Ø–º–∫—ñ–Ω –µ–º–µ—Å.',
            error_session_not_found: '“ö–∞—Ç–µ: –±“±–ª —Ñ–∞–π–ª “Ø—à—ñ–Ω —Å–∞“õ—Ç–∞–ª“ì–∞–Ω —Å–µ—Å—Å–∏—è —Ç–∞–±—ã–ª–º–∞–¥—ã.',
            error_session_file_not_found: '–°–µ—Å—Å–∏—è–Ω—ã “õ–∞–ª–ø—ã–Ω–∞ –∫–µ–ª—Ç—ñ—Ä—É –º“Ø–º–∫—ñ–Ω –±–æ–ª–º–∞–¥—ã. –ë–∞—Å—Ç–∞–ø“õ—ã —Ñ–∞–π–ª "–ñ–∞“õ—ã–Ω–¥–∞ –ø–∞–π–¥–∞–ª–∞–Ω—ã–ª“ì–∞–Ω–¥–∞—Ä" —ñ—à—ñ–Ω–¥–µ —Ç–∞–±—ã–ª–º–∞–¥—ã.',
            error_cheat_sheet_first: '–ê–ª–¥—ã–º–µ–Ω —à–ø–∞—Ä–≥–∞–ª–∫–∞–Ω—ã –∂–∞—Å–∞“£—ã–∑.',
            error_download_parsed_first: '–ê–ª–¥—ã–º–µ–Ω —Ñ–∞–π–ª–¥—ã —Ç“Ø—Ä–ª–µ–Ω–¥—ñ—Ä—ñ“£—ñ–∑.',
            error_filter_no_variant_selected: '–°“Ø–∑—É “Ø—à—ñ–Ω –±—ñ—Ä–¥–µ-–±—ñ—Ä –Ω“±—Å“õ–∞ —Å–∞–Ω—ã —Ç–∞“£–¥–∞–ª–º–∞–¥—ã.',
            error_filter_found_mismatch: '–°“Ø–∑–≥—ñ–≥–µ —Å”ô–π–∫–µ—Å –∫–µ–ª–º–µ–π—Ç—ñ–Ω {count} —Å“±—Ä–∞“õ —Ç–∞–±—ã–ª–¥—ã.',
            error_filter_all_match: '–ë–∞—Ä–ª—ã“õ —Å“±—Ä–∞“õ—Ç–∞—Ä –±–µ—Ä—ñ–ª–≥–µ–Ω —Å“Ø–∑–≥—ñ–≥–µ —Å”ô–π–∫–µ—Å –∫–µ–ª–µ–¥—ñ!',
            error_download_failed_generic: '–î–µ—Ä–µ–∫—Ç–µ—Ä–¥—ñ –∂“Ø–∫—Ç–µ—É –º“Ø–º–∫—ñ–Ω –±–æ–ª–º–∞–¥—ã. “ö–∞–π—Ç–∞–ª–∞–ø –∫”©—Ä—ñ“£—ñ–∑.',
            error_generic_for_alert: '“ö–∞—Ç–µ –ø–∞–π–¥–∞ –±–æ–ª–¥—ã',
            loading_default_text: '–ñ“Ø–∫—Ç–µ–ª—É–¥–µ...',
            search_no_results: '–°—ñ–∑–¥—ñ“£ —Å“±—Ä–∞–Ω—ã—Å—ã“£—ã–∑ –±–æ–π—ã–Ω—à–∞ –µ—à—Ç–µ“£–µ —Ç–∞–±—ã–ª–º–∞–¥—ã.',
            search_error_prefix: '“ö–∞—Ç–µ –ø–∞–π–¥–∞ –±–æ–ª–¥—ã:',
            gradus_loading: '–ñ“Ø–∫—Ç–µ–ª—É–¥–µ...',
            gradus_folder_empty: '“ö–∞–ª—Ç–∞ –±–æ—Å',
            gradus_loading_error_prefix: '“ö–∞—Ç–µ:',
            gradus_loading_quiz_prefix: '–¢–µ—Å—Ç –∂“Ø–∫—Ç–µ–ª—É–¥–µ',
            error_no_questions_for_cheatsheet: '–®–ø–∞—Ä–≥–∞–ª–∫–∞ –∂–∞—Å–∞—É “Ø—à—ñ–Ω —Å“±—Ä–∞“õ—Ç–∞—Ä –∂–æ“õ.',
            parser_input_empty_alert: '–ú”ô—Ç—ñ–Ω –µ–Ω–≥—ñ–∑—É ”©—Ä—ñ—Å—ñ –±–æ—Å!',
            parser_pattern_not_found_alert: '“ö–∞—Ç–µ –ø–∞–π–¥–∞ –±–æ–ª–¥—ã. –¢–∞“£–¥–∞–ª“ì–∞–Ω “Ø–ª–≥—ñ —Ç–∞–±—ã–ª–º–∞–¥—ã.',
            parser_no_questions_recognized_alert: '–¢–∞“£–¥–∞–ª“ì–∞–Ω –ø—ñ—à—ñ–º –±–æ–π—ã–Ω—à–∞ –±—ñ—Ä–¥–µ-–±—ñ—Ä —Å“±—Ä–∞“õ —Ç–∞–±—ã–ª–º–∞–¥—ã. –ë–∞—Å“õ–∞—Å—ã–Ω –∫”©—Ä—ñ“£—ñ–∑.',
            parser_no_questions_with_errors_alert: '–ë—ñ—Ä–¥–µ-–±—ñ—Ä —Å“±—Ä–∞“õ—Ç—ã —Ç–∞–Ω—É –º“Ø–º–∫—ñ–Ω –±–æ–ª–º–∞–¥—ã. –¢–∞–±—ã–ª“ì–∞–Ω “õ–∞—Ç–µ–ª–µ—Ä: {count}.',
            parser_conversion_success_alert: '{count} —Å“±—Ä–∞“õ —Å”ô—Ç—Ç—ñ —Ç“Ø—Ä–ª–µ–Ω–¥—ñ—Ä—ñ–ª–¥—ñ!',
            parser_conversion_summary_alert: '–û–ø–µ—Ä–∞—Ü–∏—è –∞—è“õ—Ç–∞–ª–¥—ã.\n\n–¢–∞–Ω—ã–ª“ì–∞–Ω —Å“±—Ä–∞“õ—Ç–∞—Ä: {parsed}\n–ü—ñ—à—ñ–º–¥–µ—É “õ–∞—Ç–µ–ª–µ—Ä—ñ —Ç–∞–±—ã–ª–¥—ã: {errors}',
            ai_topic_empty_alert: '–¢–µ—Å—Ç –∂–∞—Å–∞—É “Ø—à—ñ–Ω —Ç–∞“õ—ã—Ä—ã–ø—Ç—ã –µ–Ω–≥—ñ–∑—ñ“£—ñ–∑.',
            ai_explanation_prepare_error: '–¢“Ø—Å—ñ–Ω–¥—ñ—Ä–º–µ —Ç–µ—Ä–µ–∑–µ—Å—ñ–Ω –¥–∞–π—ã–Ω–¥–∞—É –º“Ø–º–∫—ñ–Ω –±–æ–ª–º–∞–¥—ã.',
            error_no_question_to_copy: '–ö”©—à—ñ—Ä—É “Ø—à—ñ–Ω –∞“ì—ã–º–¥–∞“ì—ã —Å“±—Ä–∞“õ—Ç—ã –∞–Ω—ã“õ—Ç–∞—É –º“Ø–º–∫—ñ–Ω –±–æ–ª–º–∞–¥—ã.',
            error_no_question_to_favorite: '–¢–∞“£–¥–∞—É–ª—ã–ª–∞—Ä“ì–∞ “õ–æ—Å—É “Ø—à—ñ–Ω –∞“ì—ã–º–¥–∞“ì—ã —Å“±—Ä–∞“õ—Ç—ã –∞–Ω—ã“õ—Ç–∞—É –º“Ø–º–∫—ñ–Ω –±–æ–ª–º–∞–¥—ã.',
            error_favorites_require_auth: '–¢–∞“£–¥–∞—É–ª—ã–ª–∞—Ä–¥—ã –ø–∞–π–¥–∞–ª–∞–Ω—É “Ø—à—ñ–Ω –∞–∫–∫–∞—É–Ω—Ç“õ–∞ –∫—ñ—Ä—É “õ–∞–∂–µ—Ç.',
            error_cannot_process_question: '–°–∞“õ—Ç–∞—É “Ø—à—ñ–Ω —Å“±—Ä–∞“õ—Ç—ã ”©“£–¥–µ—É –º“Ø–º–∫—ñ–Ω –±–æ–ª–º–∞–¥—ã.',

            ai_explanation_question: '–°“±—Ä–∞“õ',
            ai_explanation_correct_answer: '–î“±—Ä—ã—Å –∂–∞—É–∞–ø',

            feedback_correct: '–î“±—Ä—ã—Å!',
            feedback_incorrect: '“ö–∞—Ç–µ!',

            mobile_download_ready_title: '‚úÖ –§–∞–π–ª –∂“Ø–∫—Ç–µ—É–≥–µ –¥–∞–π—ã–Ω!',
            mobile_download_button: 'üì• –§–∞–π–ª–¥—ã –∂“Ø–∫—Ç–µ—É',
            mobile_download_link_info: 'üí° –°—ñ–ª—Ç–µ–º–µ 1 –º–∏–Ω—É—Ç –±–æ–π—ã –±–µ–ª—Å–µ–Ω–¥—ñ –±–æ–ª–∞–¥—ã',
            mobile_download_fallback_title: '‚ö†Ô∏è –ë–∞–ª–∞–º–∞ —Ç”ô—Å—ñ–ª',
            mobile_download_fallback_p1: '–ñ“Ø–∫—Ç–µ—É —Å—ñ–ª—Ç–µ–º–µ—Å—ñ–Ω –∂–∞—Å–∞—É –º“Ø–º–∫—ñ–Ω –±–æ–ª–º–∞–¥—ã.',
            mobile_download_fallback_p2: '–§–∞–π–ª–¥—ã“£ –º–∞–∑–º“±–Ω—ã–Ω –∫”©—à—ñ—Ä—ñ“£—ñ–∑',
            mobile_download_copy_button: 'üìã –ö”©—à—ñ—Ä—É',
            session_saved_success: '–¢–µ—Å—Ç —Å–∞“õ—Ç–∞–ª–¥—ã! –°—ñ–∑ –æ–Ω—ã –∫–µ–∑ –∫–µ–ª–≥–µ–Ω —É–∞“õ—ã—Ç—Ç–∞ –±–∞—Å—Ç—ã —ç–∫—Ä–∞–Ω–Ω–∞–Ω –∂–∞–ª“ì–∞—Å—Ç—ã—Ä–∞ –∞–ª–∞—Å—ã–∑.',

            download_txt_question_label: '–°“±—Ä–∞“õ',
            download_txt_answer_label: '–î“±—Ä—ã—Å –∂–∞—É–∞–ø',

            quick_mode_title_on: "–ñ—ã–ª–¥–∞–º —Ä–µ–∂–∏–º “ö–û–°–£–õ–´ (–ê–≤—Ç–æ–º–∞—Ç—Ç—ã ”©—Ç—É)",
            quick_mode_title_off: "–ñ—ã–ª–¥–∞–º —Ä–µ–∂–∏–º ”®–®–Ü–†–£–õ–Ü (“ö–æ–ª–º–µ–Ω ”©—Ç—É)",
            trigger_mode_title_on: "–¢—Ä–∏–≥–≥–µ—Ä-—Å”©–∑–¥–µ—Ä “ö–û–°–£–õ–´ (–°“±—Ä–∞“õ—Ç–∞“ì—ã —Å”©–∑–≥–µ –±–∞—Å—ã“£—ã–∑)",
            trigger_mode_title_off: "–¢—Ä–∏–≥–≥–µ—Ä-—Å”©–∑–¥–µ—Ä ”®–®–Ü–†–£–õ–Ü",

            share_title_cheatsheet: "–®–ø–∞—Ä–≥–∞–ª–∫–∞",
            share_title_errors: "“ö–∞—Ç–µ–ª–µ—Ä",
            share_title_triggered_quiz: "–¢—Ä–∏–≥–≥–µ—Ä–ª–µ—Ä—ñ –±–∞—Ä —Ç–µ—Å—Ç",
            share_title_converted_test: "–¢“Ø—Ä–ª–µ–Ω–¥—ñ—Ä—ñ–ª–≥–µ–Ω —Ç–µ—Å—Ç",

            error_review_questions_not_found: "“ö–∞—Ç–µ–ª–µ—Ä–º–µ–Ω –∂“±–º—ã—Å —ñ—Å—Ç–µ—É “Ø—à—ñ–Ω —Å“±—Ä–∞“õ—Ç–∞—Ä–¥—ã “õ–∞–ª—ã–ø—Ç–∞—Å—Ç—ã—Ä—É –º“Ø–º–∫—ñ–Ω –±–æ–ª–º–∞–¥—ã.",
            error_flashcard_translation_failed: "–ö–∞—Ä—Ç–æ—á–∫–∞–Ω—ã –∞—É–¥–∞—Ä—É –º“Ø–º–∫—ñ–Ω –±–æ–ª–º–∞–¥—ã. –¢“Ø–ø–Ω“±—Å“õ–∞ –∫”©—Ä—Å–µ—Ç—ñ–ª–µ–¥—ñ.",

            error_load_file_first: "–ê–ª–¥—ã–º–µ–Ω —Å“±—Ä–∞“õ—Ç–∞—Ä—ã –±–∞—Ä —Ñ–∞–π–ª–¥—ã –∂“Ø–∫—Ç–µ“£—ñ–∑.",

            manual_copy_title: "üìã “ö–æ–ª–º–µ–Ω –∫”©—à—ñ—Ä—É",
            manual_copy_p1: "–ê–≤—Ç–æ–º–∞—Ç—Ç—ã –∫”©—à—ñ—Ä—É –æ—Ä—ã–Ω–¥–∞–ª–º–∞–¥—ã. –¢”©–º–µ–Ω–¥–µ–≥—ñ –º”ô—Ç—ñ–Ω–¥—ñ –±–µ–ª–≥—ñ–ª–µ–ø, –∫”©—à—ñ—Ä—ñ–ø –∞–ª—ã“£—ã–∑:",
            manual_copy_close_button: "–ñ–∞–±—É",

            error_no_current_question: "–ê“ì—ã–º–¥–∞“ì—ã —Å“±—Ä–∞“õ—Ç—ã –∞–Ω—ã“õ—Ç–∞—É –º“Ø–º–∫—ñ–Ω –±–æ–ª–º–∞–¥—ã.",
            error_session_save_failed: "–°–µ—Å—Å–∏—è–Ω—ã —Å–∞“õ—Ç–∞—É –º“Ø–º–∫—ñ–Ω –±–æ–ª–º–∞–¥—ã. –ë—Ä–∞—É–∑–µ—Ä–¥–µ –æ—Ä—ã–Ω –∂–µ—Ç–∫—ñ–ª—ñ–∫—Å—ñ–∑ –±–æ–ª—É—ã –º“Ø–º–∫—ñ–Ω.",
            error_analysis_no_data: "–¢–∞–ª–¥–∞—É “Ø—à—ñ–Ω “õ–∞—Ç–µ–ª–µ—Ä —Ç—É—Ä–∞–ª—ã –¥–µ—Ä–µ–∫—Ç–µ—Ä –∂–æ“õ.",
            error_no_question_for_explanation: "–¢“Ø—Å—ñ–Ω–¥—ñ—Ä—É “Ø—à—ñ–Ω —Å“±—Ä–∞“õ—Ç—ã“£ “õ“±—Ä—ã–ª—ã–º—ã–Ω —Ç–∞–Ω—É –º“Ø–º–∫—ñ–Ω –±–æ–ª–º–∞–¥—ã.",
            error_cannot_fully_process_question: "–¢“Ø—Å—ñ–Ω–¥—ñ—Ä—É “Ø—à—ñ–Ω —Å“±—Ä–∞“õ—Ç—ã —Ç–æ–ª—ã“õ ”©“£–¥–µ—É –º“Ø–º–∫—ñ–Ω –±–æ–ª–º–∞–¥—ã.",

            error_download_generic_with_filename: '"{fileName}" —Ñ–∞–π–ª—ã–Ω –∂“Ø–∫—Ç–µ—É –º“Ø–º–∫—ñ–Ω –±–æ–ª–º–∞–¥—ã. “ö–∞–π—Ç–∞–ª–∞–ø –∫”©—Ä—ñ“£—ñ–∑.',
            mobile_download_preparing: '–§–∞–π–ª–¥—ã –∂“Ø–∫—Ç–µ—É–≥–µ –¥–∞–π—ã–Ω–¥–∞—É...',

            tooltip_open_folder: '"{name}" “õ–∞–ª—Ç–∞—Å—ã–Ω –∞—à—É',
            tooltip_start_test: '"{name}" —Ç–µ—Å—Ç—ñ–Ω –±–∞—Å—Ç–∞—É',
            tooltip_load_file: '{name} —Ñ–∞–π–ª—ã–Ω –∂“Ø–∫—Ç–µ—É',

            share_title_translated_test_txt: "–ê—É–¥–∞—Ä—ã–ª“ì–∞–Ω —Ç–µ—Å—Ç",
            share_title_translated_test_qst: "–ê—É–¥–∞—Ä—ã–ª“ì–∞–Ω —Ç–µ—Å—Ç (QST)",

            error_translation_failed: "–ê—É–¥–∞—Ä–º–∞–Ω—ã –∞–ª—É –º“Ø–º–∫—ñ–Ω –±–æ–ª–º–∞–¥—ã.",
            ai_option_default: "(—Å—Ç–∞–Ω–¥–∞—Ä—Ç—Ç—ã)",

            error_firebase_init: "Firebase –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è—Å—ã —Å”ô—Ç—Å—ñ–∑ –∞—è“õ—Ç–∞–ª–¥—ã. –ß–∞—Ç “õ–æ–ª–∂–µ—Ç—ñ–º—Å—ñ–∑ –±–æ–ª–∞–¥—ã. “ö–∞—Ç–µ:",
            ai_analyzing_text: "–ñ–ò —Å—ñ–∑–¥—ñ“£ –º”ô—Ç—ñ–Ω—ñ“£—ñ–∑–¥—ñ —Ç–∞–ª–¥–∞—É–¥–∞...",

            parser_pattern_structured: "“ö“±—Ä—ã–ª—ã–º–¥—ã —Ç–µ—Å—Ç (1. –°“±—Ä–∞“õ, –ê) –ñ–∞—É–∞–ø+)",
            parser_pattern_plus_at_end: "–ñ–æ–ª —Å–æ“£—ã–Ω–¥–∞ '+' –±–µ–ª–≥—ñ—Å—ñ –±–∞—Ä –∂–∞—É–∞–ø",
            parser_pattern_no_markers: "–ë–µ–ª–≥—ñ–ª–µ—Ä—Å—ñ–∑ (–±—ñ—Ä—ñ–Ω—à—ñ –∂–∞—É–∞–ø - –¥“±—Ä—ã—Å)",
            parser_pattern_numbered_plus: "–ù”©–º—ñ—Ä–ª–µ–Ω–≥–µ–Ω —Ç—ñ–∑—ñ–º (1.) –±–∞—Å—ã–Ω–¥–∞ '+' –∂–∞—É–∞–±—ã –±–∞—Ä",
            parser_pattern_plus_at_start: "–ñ–æ–ª –±–∞—Å—ã–Ω–¥–∞ '+' –±–µ–ª–≥—ñ—Å—ñ –±–∞—Ä –∂–∞—É–∞–ø",
            parser_pattern_tags_cyrillic: "<–í–æ–ø—Ä–æ—Å> –∂”ô–Ω–µ <–≤–∞—Ä–∏–∞–Ω—Ç> —Ç–µ–≥—Ç–µ—Ä—ñ",
            parser_pattern_tags_latin: "<question> –∂”ô–Ω–µ <variant> —Ç–µ–≥—Ç–µ—Ä—ñ",

            ai_question_count_label: '–ñ–ò “Ø—à—ñ–Ω —Å“±—Ä–∞“õ—Ç–∞—Ä —Å–∞–Ω—ã–Ω –∫”©—Ä—Å–µ—Ç—ñ“£—ñ–∑:',
            ai_answer_count_label: '–ñ–∞—É–∞–ø –Ω“±—Å“õ–∞–ª–∞—Ä—ã–Ω—ã“£ —Å–∞–Ω—ã–Ω –∫”©—Ä—Å–µ—Ç—ñ“£—ñ–∑:',
            ai_auto_category_label: '–°–∞–Ω–∞—Ç—Ç–∞—Ä–¥—ã –∞–≤—Ç–æ–º–∞—Ç—Ç—ã —Ç“Ø—Ä–¥–µ –∂–∞—Å–∞—É',
            translate_engine_google: "Google –ê—É–¥–∞—Ä–º–∞—à—ã",
            translate_engine_ai: "AI –ê—É–¥–∞—Ä–º–∞—à—ã",
            shuffle_n_questions: "–ê—Ä–∞–ª–∞—Å—Ç—ã—Ä—ã–ª“ì–∞–Ω –∂–∏—ã–Ω—Ç—ã“õ",
            ai_generate_from_text_button: "–ú”ô—Ç—ñ–Ω–Ω–µ–Ω —Ç–µ—Å—Ç –∂–∞—Å–∞—É",
            ai_generating_button: "ü§ñ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è...",
            activation_label: "–ë–µ–ª—Å–µ–Ω–¥—ñ—Ä—É:",
            activation_placeholder: "–ë—ñ—Ä —Ä–µ—Ç—Ç—ñ–∫ –∫—ñ–ª—Ç—ñ“£—ñ–∑–¥—ñ –µ–Ω–≥—ñ–∑—ñ“£—ñ–∑...",
            activation_button: "–ë–µ–ª—Å–µ–Ω–¥—ñ—Ä—É",
            enter_activation_key_alert: "–ë–µ–ª—Å–µ–Ω–¥—ñ—Ä—É –∫—ñ–ª—Ç—ñ–Ω –µ–Ω–≥—ñ–∑—ñ“£—ñ–∑.",
            checking_button: "–¢–µ–∫—Å–µ—Ä—ñ–ª—É–¥–µ...",
            search_activated_alert: "–î–µ—Ä–µ–∫“õ–æ—Ä –±–æ–π—ã–Ω—à–∞ —ñ–∑–¥–µ—É –æ—Å—ã “õ“±—Ä—ã–ª“ì—ã–¥–∞ —Å”ô—Ç—Ç—ñ –±–µ–ª—Å–µ–Ω–¥—ñ—Ä—ñ–ª–¥—ñ.",
            server_connection_error_alert: "–ö—ñ–ª—Ç—ñ —Ç–µ–∫—Å–µ—Ä—É “Ø—à—ñ–Ω —Å–µ—Ä–≤–µ—Ä–º–µ–Ω –±–∞–π–ª–∞–Ω—ã—Å—É –º“Ø–º–∫—ñ–Ω –±–æ–ª–º–∞–¥—ã. –ò–Ω—Ç–µ—Ä–Ω–µ—Ç “õ–æ—Å—ã–ª—ã–º—ã–Ω —Ç–µ–∫—Å–µ—Ä—ñ“£—ñ–∑.",
            checking_access: "–¢–µ–∫—Å–µ—Ä—É...",
            ai_from_text_description: "–¢”©–º–µ–Ω–¥–µ–≥—ñ ”©—Ä—ñ—Å–∫–µ –º”ô—Ç—ñ–Ω–¥—ñ “õ–æ–π—ã“£—ã–∑, —Å–æ–Ω–¥–∞ –ñ–ò —Å–æ–ª –±–æ–π—ã–Ω—à–∞ —Å“±—Ä–∞“õ—Ç–∞—Ä –º–µ–Ω –∂–∞—É–∞–ø—Ç–∞—Ä—ã –±–∞—Ä —Ç–µ—Å—Ç –∂–∞—Å–∞–π–¥—ã.",
            parser_pattern_trilingual: "\"–°“±—Ä–∞“õ No\" –±–ª–æ–≥—ã (–∫”©–ø—Ç—ñ–ª–¥—ñ)",
            language_filter_label: '–°“±—Ä–∞“õ—Ç–∞—Ä–¥—ã“£ —Ç—ñ–ª—ñ:',
            ai_parser_input_placeholder: "–ñ–ò —Ç–∞–ª–¥–∞—É—ã “Ø—à—ñ–Ω –º”ô—Ç—ñ–Ω–¥—ñ –æ—Å—ã–Ω–¥–∞ “õ–æ–π—ã“£—ã–∑...",

            category_filter_label: "–°–∞–Ω–∞—Ç—Ç–∞—Ä –±–æ–π—ã–Ω—à–∞ —Å“Ø–∑–≥—ñ:",
            select_all_btn: "–ë–∞—Ä–ª—ã“ì—ã",
            deselect_all_btn: "–ê–ª—É",
            category_filter_note: "–ï–≥–µ—Ä –±—ñ—Ä–¥–µ-–±—ñ—Ä —Å–∞–Ω–∞—Ç —Ç–∞“£–¥–∞–ª–º–∞—Å–∞, —Ç–µ—Å—Ç–∫–µ –±–∞—Ä–ª—ã“õ —Å–∞–Ω–∞—Ç—Ç–∞“ì—ã —Å“±—Ä–∞“õ—Ç–∞—Ä –∫—ñ—Ä–µ–¥—ñ.",

            session_conflict_title: "–°–µ—Å—Å–∏—è —Å–∞“õ—Ç–∞–ª“ì–∞–Ω",
            session_conflict_text: '"{fileName}" —Ñ–∞–π–ª—ã “Ø—à—ñ–Ω —Å–∞“õ—Ç–∞–ª“ì–∞–Ω “Ø–ª–≥–µ—Ä—ñ–º –±–∞—Ä. –ù–µ —ñ—Å—Ç–µ–≥—ñ“£—ñ–∑ –∫–µ–ª–µ–¥—ñ?',
            session_overwrite_button: "“ö–∞–π—Ç–∞ –∂–∞–∑—É",
            // === –ù–ê–ß–ê–õ–û –ù–û–í–û–ì–û –ö–û–î–ê ===
            topic_create_modal_title: "–ñ–∞“£–∞ –¢–∞“õ—ã—Ä—ã–ø “õ“±—Ä—É",
            topic_create_modal_text: "–û—Å—ã –ê—É–¥–∏—Ç–æ—Ä–∏—è–¥–∞ –∂–∞“£–∞ –¢–∞“õ—ã—Ä—ã–ø (—á–∞—Ç) “Ø—à—ñ–Ω –∞—Ç–∞—É –µ–Ω–≥—ñ–∑—ñ“£—ñ–∑.",
            topic_create_placeholder: "–¢–∞“õ—ã—Ä—ã–ø –∞—Ç–∞—É—ã...",
            // === –ö–û–ù–ï–¶ –ù–û–í–û–ì–û –ö–û–î–ê ===
            // === –ù–ê–ß–ê–õ–û –ù–û–í–û–ì–û –ö–û–î–ê ===
            confirm_exit_quiz_title: "–ê“ì—ã–º–¥–∞“ì—ã —Ç–µ—Å—Ç—Ç—ñ –∞—è“õ—Ç–∞–π—Å—ã–∑ –±–∞?",
            confirm_exit_quiz_text: "–°—ñ–∑–¥—ñ“£ “Ø–ª–≥–µ—Ä—ñ–º—ñ“£—ñ–∑ –∂–æ“ì–∞–ª–∞–¥—ã. –®—ã“õ“õ—ã“£—ã–∑ –∫–µ–ª–µ—Ç—ñ–Ω—ñ–Ω–µ —Å–µ–Ω—ñ–º–¥—ñ—Å—ñ–∑ –±–µ?",
            confirm_exit_quiz_confirm_button: "–ê—è“õ—Ç–∞—É",
            // === –ö–û–ù–ï–¶ –ù–û–í–û–ì–û –ö–û–î–ê ===
            // === –ù–ê–ß–ê–õ–û –ù–û–í–û–ì–û –ö–û–î–ê ===
            confirm_finish_with_unanswered_title: "–¢–µ—Å—Ç—Ç—ñ –∞—è“õ—Ç–∞–π—Å—ã–∑ –±–∞?",
            confirm_finish_with_unanswered_text: "–°—ñ–∑–¥–µ –∂–∞—É–∞–ø –±–µ—Ä—ñ–ª–º–µ–≥–µ–Ω —Å“±—Ä–∞“õ—Ç–∞—Ä “õ–∞–ª–¥—ã. –¢–µ—Å—Ç—Ç—ñ “õ–∞–∑—ñ—Ä –∞—è“õ—Ç–∞“ì—ã“£—ã–∑ –∫–µ–ª–µ—Ç—ñ–Ω—ñ–Ω–µ —Å–µ–Ω—ñ–º–¥—ñ—Å—ñ–∑ –±–µ?",
            // === –ö–û–ù–ï–¶ –ù–û–í–û–ì–û –ö–û–î–ê ===
            ai_chat_placeholder: "–ë—ñ—Ä–¥–µ“£–µ —Å“±—Ä–∞“£—ã–∑...",
            ai_copy_response: "–ñ–∞—É–∞–ø—Ç—ã –∫”©—à—ñ—Ä—É",
            ai_share_response: "–ë”©–ª—ñ—Å—É",
            ai_regenerate_response: "–ñ–∞—É–∞–ø—Ç—ã “õ–∞–π—Ç–∞ “õ“±—Ä—É",
            ai_reply_context_prompt: '["{authorName}"-–Ω—ã“£ –º—ã–Ω–∞ —Ö–∞–±–∞—Ä–ª–∞–º–∞—Å—ã–Ω–∞ –∂–∞—É–∞–ø —Ä–µ—Ç—ñ–Ω–¥–µ: "{originalText}"]\n\n{newText}',
            ai_search_disabled_with_file: "–§–∞–π–ª –∂—ñ–±–µ—Ä–≥–µ–Ω –∫–µ–∑–¥–µ Google –Ü–∑–¥–µ—É ”©—à—ñ—Ä—ñ–ª–µ–¥—ñ",
            ai_show_all_user_messages_tooltip: "–ë–∞—Ä–ª—ã“õ –º–µ–Ω—ñ“£ —Ö–∞–±–∞—Ä–ª–∞–º–∞–ª–∞—Ä—ã–º–¥—ã –∫”©—Ä—Å–µ—Ç—É/–∂–∞—Å—ã—Ä—É",
            session_save_new_button: "–ñ–∞“£–∞ —Ä–µ—Ç—ñ–Ω–¥–µ —Å–∞“õ—Ç–∞—É"

        },
        en: {
            // Main Screen
            exit_toast_text: 'Press back again to exit',
            continue_later_button: 'Continue Later',
            continue_sessions: 'Continue:',
            answered_of: 'Answered',
            from: 'of',
            time_left: 'Time left',
            continue_quiz_button: 'Continue',
            delete_session_button: 'Delete',
            search_in_db: 'Search question in database:',
            search_placeholder: 'Enter part of the question text...',
            find_button: 'Search',
            searching_in_db: 'Searching database...',
            or_divider: '-- or --',
            choose_file: 'Select a .qst|.txt|.pdf file from your device:',
            gradus_button_main: 'GRADUS',
            gradus_subtitle: '(General Repository for Academic Data, Utility & Structure)',
            parser_button_main: 'Convert',
            parser_subtitle: 'text to .qst format',
            recent_files: 'Recently used:',
            // Navigation & Headers
            nav_gradus: 'GRADUS Navigation',
            back_to_main: 'Back to Main Screen',
            search_results_title: 'Search Results',
            back_to_search: 'New Search',
            quiz_settings_title: 'Quiz Settings',
            cheat_sheet_title: 'Generated Cheat Sheet:',
            quiz_finished_title: 'Quiz Finished!',
            parser_description: 'Upload a file or paste text to convert into a quiz format.',
            // Quiz Settings
            time_limit: 'Time limit (minutes, 0 - no limit):',
            time_limit_minutes: 'min',
            question_range: 'Question Range:',
            range_from: 'From',
            range_to: 'To',
            total_questions_label: 'total',
            questions_label_for_range: 'questions',
            shuffle_questions: 'Shuffle questions',
            shuffle_answers: 'Shuffle answers',
            feedback_mode: 'Feedback Mode (AI analysis + review incorrect answers)',
            reading_mode: 'Reading mode (first option is correct)',
            start_quiz_button: 'Start Quiz',
            generate_cheat_sheet_button: 'Generate Cheat Sheet',
            choose_another_file_button: 'Choose Another File',
            // Cheat Sheet
            download_cheat_sheet_button: 'Download Cheat Sheet (.txt)',
            back_to_settings_button: 'Back to Settings',
            // Quiz Screen
            timer_label: 'Time:',
            prev_question_button: 'Previous',
            next_question_button: 'Next',
            finish_button: 'Finish Quiz',
            question_label: 'Question:',
            correct_label: 'Correct:',
            quick_nav_title: 'Quick Navigation:',
            finish_early_button: 'Finish Quiz',
            // Results
            your_result: 'Your result:',
            of_label: 'of',
            accuracy_label: 'Accuracy:',
            download_errors_button: 'Download unanswered/incorrect questions',
            review_errors_button: 'Review Mistakes',
            download_triggered_quiz_button: 'Download Quiz with Triggers',
            restart_button: 'Take Another Quiz',
            // Parser
            parser_upload_or_paste: 'Upload a file (.txt) or paste text below:',
            clear_parser_input: 'Clear input',
            parser_input_placeholder: 'Or paste text from your document here...',
            parser_select_format: 'Select format (or leave for auto-detection):',
            parser_auto_detect: '-- Automatic detection --',
            parser_run_button: 'Convert',
            parser_errors_found: '‚ö†Ô∏è Formatting errors',
            parser_result_title: 'Result:',
            download_parsed_button: 'Download .qst file',
            back_button: 'Back',

            // === –ù–ê–ß–ê–õ–û –ù–û–í–û–ì–û –ö–û–î–ê –î–õ–Ø en ===
            modal_cancel_button: 'Cancel',
            confirm_delete_message: 'Are you sure you want to delete this message?',
            confirm_delete_question: 'Are you sure you want to delete this question? This action is irreversible.',
            confirm_delete_channel: 'Are you sure you want to delete this channel? All messages within it will be lost. This action is irreversible.',
            confirm_delete_account: 'Are you sure you want to delete your account? This action is IRREVERSIBLE.',
            confirm_clear_favorites: 'Are you sure you want to delete ALL items from your favorites? This action is irreversible.',
            confirm_kick_user: 'Are you sure you want to remove this member from the channel?',
            // === –ö–û–ù–ï–¶ –ù–û–í–û–ì–û –ö–û–î–ê –î–õ–Ø en ===
            // === –ù–ê–ß–ê–õ–û –ù–û–í–û–ì–û –ö–û–î–ê ===
            audience_create_modal_title: "Create New Audience",
            audience_create_modal_text: "Enter a name for your public Audience. It will be visible to all users.",
            audience_create_placeholder: "Audience Name...",
            audience_create_button: "Create",
            // === –ö–û–ù–ï–¶ –ù–û–í–û–ì–û –ö–û–î–ê ===
            // Header Buttons (–ü–û–õ–ù–û–°–¢–¨–Æ –ü–ï–†–ï–í–ï–î–ï–ù–û)
            copy_question_title: 'Copy current question',
            search_web_title: 'Search the web',
            quick_mode_title: 'Quick Mode (Auto-advance)',
            trigger_words_title: 'Trigger Words',
            theme_button_title: 'Change Theme',
            language_toggle_title: 'Change Language',
            favorite_button_title: 'Add to Favorites',
            translate_question_title: 'Translate current question',
            // Messages (–ü–û–õ–ù–û–°–¢–¨–Æ –ü–ï–†–ï–í–ï–î–ï–ù–û)
            search_query_too_short: 'Search query must contain at least 3 characters.',
            file_empty_or_invalid_part1: 'File "',
            file_empty_or_invalid_part2: '" is empty or has an invalid format.',
            no_questions_for_settings: 'No questions found for the current settings.',
            confirm_finish_early: 'Are you sure you want to finish the quiz early?',
            copy_button: "Copy",
            search_provider_db: "Database",
            relevance_tag: "Relevance:",
            copy_button: "Copy",
            copy_question_tooltip: "Copy question",
            favorite_question_tooltip: "Add to favorites",
            ai_generating_button: 'ü§ñ Generating...',
            ai_error_text_empty: 'Please paste text to analyze.',
            ai_error_generation: 'An error occurred while generating the test.',

            copy_success: "Content copied to clipboard!",
            ai_explanation_title: 'AI Explanation',
            ai_explanation_style_label: 'Explanation Style:',
            ai_explain_button: ' Explain',
            ai_explanation_loading: 'AI is preparing an explanation...',
            ai_generating_button: 'ü§ñ Generating...',
            ai_error_text_empty: 'Please paste text to analyze.',
            ai_error_generation: 'An error occurred while generating the test.',
            ai_question_count_label: 'Specify the number of questions for the AI:',
            ai_auto_mode_label: 'Auto',
            ai_style_simple: "Simple",
            ai_style_scientific: "Scientific",
            ai_style_associative: "Analogy",
            ai_style_stepbystep: "Step-by-step",
            ai_style_practical: "Practical",
            ai_style_visual: "Visual",
            ai_answer_count_label: 'Specify the number of answer choices:',
            ai_auto_category_label: 'Automatically create categories',

            exit_modal_title: 'Confirmation',
            exit_modal_text: 'Are you sure you want to exit the application?',
            exit_modal_confirm: 'Exit',
            exit_modal_cancel: 'Stay',
            confirm_button_delete: 'Delete',
            update_available_text: 'A new version is available!',
            update_button_text: 'Update',
            ai_explain_button_title: 'Explain with AI',
            download_translated_quiz_button: 'Download translation ({lang})',
            no_translations_to_download: 'No available translations to download.',
            error_creating_translation_file: 'Failed to create translation file.',
            download_translated_txt_button: 'Download translation ({lang})(txt)',
            download_translated_qst_button: 'Download translation ({lang})(qst)',
            no_translations_to_download: 'No available translations to download.',
            error_creating_translation_file: 'Failed to create translation file.',
            ai_show_original_button: 'Show Original',
            ai_show_translation_button: 'Show Translation',
            flashcards_mode: 'Flashcards mode (question/answer)',
            start_flashcards_button: 'Start Learning',
            flashcard_category_label: 'Next Section:',
            results_flashcards_viewed: 'Cards Viewed',
            session_cards_viewed: 'Viewed',
            ai_error_generic: 'Failed to generate explanation. Please try again.',
            ai_error_server: 'Failed to generate explanation: A temporary server error occurred. Please try again later.',
            parser_overwrite_warning: 'The result field already contains text. Are you sure you want to overwrite it?',
            ai_error_generation: 'An error occurred while generating the test.',
            ai_error_server_generation: 'Test generation failed: A temporary server error occurred. Please try again later.',
            ai_char_limit_exceeded: 'Character limit exceeded ({current}/{max})',

            tab_converter: "Converter from Text",
            tab_ai_from_text: "AI Generator from Text",
            tab_ai_generator: "AI Generator by Topic",
            ai_from_text_title: "ü§ñ Create Test from Your Text (AI)",
            ai_generate_from_text_button: "Generate Test from Text",
            ai_topic_description: "The AI will independently create a test based on the specified topic using its knowledge.",
            ai_topic_label: "Enter a topic to generate a test:",
            ai_topic_placeholder: "Example: History of Ancient Rome during the Republic, 15 questions, 4 answer choices, with categories by wars...",
            ai_topic_question_count_label: "Number of questions (if not specified in the topic):",
            ai_topic_answer_count_label: "Number of answer choices (if not specified in the topic):",
            ai_generate_from_topic_button: "ü§ñ Create Test by Topic (AI)",
            ai_thinking_topic: "AI generator is thinking about your topic...",
            ai_topic_auto_category_label: "Automatically create categories",

            parser_auto_detect: '-- Automatic detection --',
            filter_variants_button: '‚öôÔ∏è Filter by variants',
            filter_variants_header: 'Select number of variants:',
            filter_apply_button: 'Apply',
            filter_reset_button: 'Reset',
            loading_default_text: 'Loading...',
            search_no_results: 'Nothing was found for your query.',
            search_error_prefix: 'An error occurred:',
            gradus_loading: 'Loading...',
            gradus_folder_empty: 'Folder is empty',
            gradus_loading_error_prefix: 'Error:',
            gradus_loading_quiz_prefix: 'Loading quiz',
            error_no_questions_for_cheatsheet: 'No questions to generate a cheat sheet.',
            parser_input_empty_alert: 'The text input field is empty!',
            parser_pattern_not_found_alert: 'An error occurred. The selected pattern was not found.',
            parser_no_questions_recognized_alert: 'Could not find any questions for the selected format. Try another one.',
            parser_no_questions_with_errors_alert: 'Failed to recognize any questions. Errors found: {count}.',
            parser_conversion_success_alert: 'Successfully converted {count} questions!',
            parser_conversion_summary_alert: 'Operation completed.\n\nQuestions recognized: {parsed}\nFormatting errors found: {errors}',
            ai_topic_empty_alert: 'Please enter a topic to generate the test.',
            ai_explanation_prepare_error: 'Failed to prepare the explanation window.',
            ai_analyzing_errors_button: 'AI is analyzing... üß†',
            ai_error_analysis_button: 'ü§ñ AI Error Analysis',

            search_engine_google: 'Google',
            search_engine_yandex: 'Yandex',
            search_engine_perplexity: 'Perplexity',
            footer_copyright: 'prod by @iverrum',
            error_no_question_to_copy: 'Could not determine the current question to copy.',
            error_no_question_to_favorite: 'Could not determine the current question to add to favorites.',
            error_favorites_require_auth: 'You must be logged in to use favorites.',
            error_cannot_process_question: 'Could not process the question for saving.',


            app_title: 'QSTiUM',
            confirm_delete_session: 'Are you sure you want to delete the saved quiz "{fileName}"? This action is irreversible.',
            error_session_not_found: 'Error: saved session for this file not found.',
            error_session_file_not_found: 'Could not restore session. The original file was not found in "Recently used".',
            error_cheat_sheet_first: 'First, generate the cheat sheet.',
            error_download_parsed_first: 'First, convert the file.',
            error_filter_no_variant_selected: 'No number of variants selected for filtering.',
            error_filter_found_mismatch: 'Found {count} questions that do not match the filter.',
            error_filter_all_match: 'All questions match the specified filter!',

            error_download_failed_generic: 'Failed to download data. Please try again.',
            error_generic_for_alert: 'An error occurred',

            copy_question_title: 'Copy current question',
            search_web_title: 'Search the web',
            chat_button_title: 'Chat',
            confirm_action_title: 'Confirm Action', 
            quick_mode_title: 'Quick Mode (Auto-advance)',
            trigger_words_title: 'Trigger Words',
            language_toggle_title: 'Change Language',
            favorite_button_title: 'Add to Favorites',
            translate_question_title: 'Translate current question',
            footer_copyright: 'prod by @iverrum',
            exit_toast_text: 'Press back again to exit',
            app_title: 'QSTiUM',
            confirm_delete_session: 'Are you sure you want to delete the saved quiz "{fileName}"? This action is irreversible.',
            error_session_not_found: 'Error: saved session for this file not found.',
            error_session_file_not_found: 'Could not restore session. The original file was not found in "Recently used".',
            error_cheat_sheet_first: 'First, generate the cheat sheet.',
            error_download_parsed_first: 'First, convert the file.',
            error_filter_no_variant_selected: 'No number of variants selected for filtering.',
            error_filter_found_mismatch: 'Found {count} questions that do not match the filter.',
            error_filter_all_match: 'All questions match the specified filter!',
            error_download_failed_generic: 'Failed to download data. Please try again.',
            error_generic_for_alert: 'An error occurred',
            loading_default_text: 'Loading...',
            search_no_results: 'Nothing was found for your query.',
            search_error_prefix: 'An error occurred:',
            gradus_loading: 'Loading...',
            gradus_folder_empty: 'Folder is empty',
            gradus_loading_error_prefix: 'Error:',
            gradus_loading_quiz_prefix: 'Loading quiz',
            error_no_questions_for_cheatsheet: 'No questions to generate a cheat sheet.',
            parser_input_empty_alert: 'The text input field is empty!',
            parser_pattern_not_found_alert: 'An error occurred. The selected pattern was not found.',
            parser_no_questions_recognized_alert: 'Could not find any questions for the selected format. Try another one.',
            parser_no_questions_with_errors_alert: 'Failed to recognize any questions. Errors found: {count}.',
            parser_conversion_success_alert: 'Successfully converted {count} questions!',
            parser_conversion_summary_alert: 'Operation completed.\n\nQuestions recognized: {parsed}\nFormatting errors found: {errors}',
            ai_topic_empty_alert: 'Please enter a topic to generate the test.',
            ai_explanation_prepare_error: 'Failed to prepare the explanation window.',
            error_no_question_to_copy: 'Could not determine the current question to copy.',
            error_no_question_to_favorite: 'Could not determine the current question to add to favorites.',
            error_favorites_require_auth: 'You must be logged in to use favorites.',
            error_cannot_process_question: 'Could not process the question for saving.',

            ai_explanation_question: 'Question',
            ai_explanation_correct_answer: 'Correct Answer',
            feedback_correct: 'Correct!',
            feedback_incorrect: 'Incorrect!',

            mobile_download_ready_title: '‚úÖ File is ready for download!',
            mobile_download_button: 'üì• Download file',
            mobile_download_link_info: 'üí° The link will be active for 1 minute',
            mobile_download_fallback_title: '‚ö†Ô∏è Alternative method',
            mobile_download_fallback_p1: 'Failed to create a download link.',
            mobile_download_fallback_p2: 'Copy the file contents',
            mobile_download_copy_button: 'üìã Copy',
            session_saved_success: 'Quiz saved! You can continue it at any time from the main screen.',

            download_txt_question_label: 'Question',
            download_txt_answer_label: 'Correct Answer',

            quick_mode_title_on: "Quick Mode ON (Auto-advance)",
            quick_mode_title_off: "Quick Mode OFF (Manual advance)",
            trigger_mode_title_on: "Trigger Words ON (Click a word in the question)",
            trigger_mode_title_off: "Trigger Words OFF",

            share_title_cheatsheet: "Cheat Sheet",
            share_title_errors: "Mistakes",
            share_title_triggered_quiz: "Quiz with Triggers",
            share_title_converted_test: "Converted Test",

            error_review_questions_not_found: "Failed to generate questions for mistake review.",
            error_flashcard_translation_failed: "Failed to translate the flashcard. The original will be shown.",

            error_load_file_first: "Please load a file with questions first.",

            manual_copy_title: "üìã Manual Copy",
            manual_copy_p1: "Automatic copy failed. Please select and copy the text below:",
            manual_copy_close_button: "Close",

            error_no_current_question: "Could not determine the current question.",
            error_session_save_failed: "Failed to save the session. The browser may be out of storage space.",
            error_analysis_no_data: "No error data to analyze.",
            error_no_question_for_explanation: "Could not recognize the question structure for an explanation.",
            error_cannot_fully_process_question: "Could not fully process the question for an explanation.",

            error_download_generic_with_filename: 'Failed to download file "{fileName}". Please try again.',
            mobile_download_preparing: 'Preparing file for download...',

            tooltip_open_folder: 'Open folder "{name}"',
            tooltip_start_test: 'Start test "{name}"',
            tooltip_load_file: 'Load {name}',

            share_title_translated_test_txt: "Translated Test",
            share_title_translated_test_qst: "Translated Test (QST)",

            error_translation_failed: "Failed to get translation.",
            ai_option_default: "(standard)",

            error_firebase_init: "Failed to initialize Firebase. Chat will be unavailable. Error:",
            ai_analyzing_text: "AI is analyzing your text...",

            parser_pattern_structured: "Structured Test (1. Question, A) Answer+)",
            parser_pattern_plus_at_end: "Answer with '+' at the end of the line",
            parser_pattern_no_markers: "No markers (first answer is correct)",
            parser_pattern_numbered_plus: "Numbered list (1.) with '+' answer at the start",
            parser_pattern_plus_at_start: "Answer with '+' at the start of the line",
            parser_pattern_tags_cyrillic: "Tags <–í–æ–ø—Ä–æ—Å> and <–≤–∞—Ä–∏–∞–Ω—Ç>",
            parser_pattern_tags_latin: "Tags <question> and <variant>",
            copy_success_short: '‚úì Copied!',


            ai_question_count_label: 'Specify the number of questions for the AI:',
            ai_answer_count_label: 'Specify the number of answer choices:',
            ai_auto_category_label: 'Automatically create categories',
            translate_engine_google: "Google Translate",
            translate_engine_ai: "AI Translator",
            shuffle_n_questions: "Random set of",
            ai_generate_from_text_button: "Generate Test from Text",
            ai_generating_button: "ü§ñ Generating...",
            activation_label: "Activation:",
            activation_placeholder: "Enter your one-time key...",
            activation_button: "Activate",
            enter_activation_key_alert: "Please enter the activation key.",
            checking_button: "Checking...",
            search_activated_alert: "Database search has been successfully activated on this device.",
            server_connection_error_alert: "Could not contact the server to verify the key. Please check your internet connection.",
            checking_access: "Checking...",
            ai_from_text_description: "Paste text into the field below, and the AI will create a test with questions and answers based on it.",
            parser_pattern_trilingual: "\"Question No\" block (multilingual)",
            language_filter_label: 'Question Language:',
            ai_parser_input_placeholder: "Paste text here for AI analysis...",

            category_filter_label: "Filter by Categories:",
            select_all_btn: "All",
            deselect_all_btn: "None",
            category_filter_note: "If no categories are selected, questions from all categories will be included.",

            session_conflict_title: "Session Already Exists",
            session_conflict_text: 'There is already saved progress for the file "{fileName}". What would you like to do?',
            session_overwrite_button: "Overwrite",
            // === –ù–ê–ß–ê–õ–û –ù–û–í–û–ì–û –ö–û–î–ê ===
            topic_create_modal_title: "Create New Topic",
            topic_create_modal_text: "Enter a name for your new Topic (chat) within this Audience.",
            topic_create_placeholder: "Topic Name...",
            // === –ö–û–ù–ï–¶ –ù–û–í–û–ì–û –ö–û–î–ê ===
            // === –ù–ê–ß–ê–õ–û –ù–û–í–û–ì–û –ö–û–î–ê ===
            confirm_exit_quiz_title: "End the current quiz?",
            confirm_exit_quiz_text: "Your current progress will be lost. Are you sure you want to exit?",
            confirm_exit_quiz_confirm_button: "End Quiz",
            // === –ö–û–ù–ï–¶ –ù–û–í–û–ì–û –ö–û–î–ê ===
            // === –ù–ê–ß–ê–õ–û –ù–û–í–û–ì–û –ö–û–î–ê ===
            confirm_finish_with_unanswered_title: "Finish the quiz?",
            confirm_finish_with_unanswered_text: "You have unanswered questions left. Are you sure you want to finish the quiz now?",
            // === –ö–û–ù–ï–¶ –ù–û–í–û–ì–û –ö–û–î–ê ===
            ai_chat_placeholder: "Ask something...",
            ai_copy_response: "Copy response",
            ai_share_response: "Share",
            ai_regenerate_response: "Regenerate response",
            ai_reply_context_prompt: '[In reply to "{authorName}" who said: "{originalText}"]\n\n{newText}',
            ai_search_disabled_with_file: "Google Search is disabled when sending files",
            ai_show_all_user_messages_tooltip: "Show/hide all my messages",
            session_save_new_button: "Save as New"
        }

    };





    function _(key) {
        const currentLang = localStorage.getItem('appLanguage') || 'ru';
        return LANG_PACK[currentLang][key] || key;
    }

    const getEl = (id) => document.getElementById(id);

    /**
     * –°–æ–∑–¥–∞–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è –∫—ç—à–∞, –∫–æ–º–±–∏–Ω–∏—Ä—É—è –∏–Ω–¥–µ–∫—Å –≤–æ–ø—Ä–æ—Å–∞ –∏ –∫–æ–¥ —è–∑—ã–∫–∞.
     * @param {number} originalIndex - –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å –≤–æ–ø—Ä–æ—Å–∞.
     * @param {string} lang - –ö–æ–¥ —è–∑—ã–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'ru', 'en').
     * @returns {string} - –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–ª—é—á (–Ω–∞–ø—Ä–∏–º–µ—Ä, '15_en').
     */
    function getCacheKey(originalIndex, lang) {
        return `${originalIndex}_${lang}`;
    }

    /**
     * –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø-–ü–û–ú–û–©–ù–ò–ö: –ü–æ–ª—É—á–∞–µ—Ç –æ–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –∏–Ω–¥–µ–∫—Å—É,
     * –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è—è, –∏–∑ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ —á–∞—Ç–∞ –∏–ª–∏ –ø—É–±–ª–∏—á–Ω–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏.
     * @param {number} index - –ò–Ω–¥–µ–∫—Å —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ç–µ–∫—É—â–µ–º –∞–∫—Ç–∏–≤–Ω–æ–º —á–∞—Ç–µ.
     * @returns {object|null} - –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ null, –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.
     */
    function getAIChatMessageByIndex(index) {
        if (currentAIChatType === 'public') {
            return currentPublicChatMessages?.[index] || null;
        } else {
            return allAIChats[currentAIChatId]?.[index] || null;
        }
    }

    // --- Firebase & Auth ---
    let db, auth, currentUser = null;
    const FIREBASE_CONFIG = {
        apiKey: "AIzaSyDk4J8N0mdPpFtulT5DMr2Y8tHX93HrU2s",
        authDomain: "qst-chat.firebaseapp.com",
        projectId: "qst-chat",
        storageBucket: "qst-chat.appspot.com",
        messagingSenderId: "24969645733",
        appId: "1:24969645733:web:47bc96a13817544246074c"
    };


    let fileInput, fileUploadArea, quizSetupArea, quizArea, resultsArea,
        questionTextEl, answerOptionsEl, feedbackAreaEl, prevQuestionButton,
        nextButton, restartButton, startQuizButton, currentQuestionNumEl,
        totalQuestionsNumEl, correctAnswersCountEl, finalCorrectEl, finalTotalEl,
        finalPercentageEl, timeLimitInput, timeLimitSlider, timeSliderProgress, 
        timeSliderTicks, timeSliderValueBubble,
        questionRangeStartInput, questionRangeEndInput, maxQuestionsInfoEl,
        shuffleQuestionsCheckbox, shuffleAnswersCheckbox, feedbackModeCheckbox,
        timerDisplayEl, timeLeftEl, quickNavPanel, quickNavButtonsContainer,
        feedbackDownloadArea, downloadErrorsButton, themeToggleButton,
        quickModeToggle, triggerWordToggle, recentFilesArea, recentFilesListEl,
        errorReviewArea, reviewErrorsButton, generateCheatSheetButton,
        cheatSheetResultArea, cheatSheetOutputEl, downloadCheatSheetButton,
        backToSettingsButton, chooseAnotherFileButton, finishTestButton,
        triggeredQuizDownloadArea, downloadTriggeredQuizButton, gradusButton,
        gradusFoldersContainer, gradusFolderList, backToFileUploadButton,
        gradusBreadcrumbs, searchContainer, searchQueryInput, searchButton,
        searchResultsContainer, backToSearchButton, webSearchDropdown,
        searchWebButton, searchDropdownContent, chatToggleBtn, languageToggle,
        copyQuestionBtnQuiz, parserArea, parserButton, backToMainFromParserBtn,
        
        // --- –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ ---
        searchVerificationContainer, searchActivationContainer, accessCodeInput, activateSearchBtn,

        // --- –û–±—â–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–∞—Ä—Å–µ—Ä–∞ ---
        filterVariantsBtn, filterVariantsDropdown, filterVariantCheckboxes,
        applyVariantFilterBtn, resetVariantFilterBtn,

        // --- –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤–∫–ª–∞–¥–æ–∫ ---
        converterTabBtn, aiFromTextTabBtn, aiFromTopicTabBtn, 
        converterContent, aiFromTextContent, aiGeneratorContent, 
        
        // --- –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤–∫–ª–∞–¥–∫–∏ "–ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä" ---
        parserFileInput, parserInput, clearParserInputBtn, parserPatternSelect, runParserBtn,
        converterErrorsArea, converterErrorsHeader, converterErrorCount, converterErrorList, // <<-- –ò–ó–ú–ï–ù–ï–ù–û
        converterOutputArea, converterOutput, downloadConverterBtn, clearConverterOutputBtn,

        // --- –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤–∫–ª–∞–¥–∫–∏ "–ò–ò –∏–∑ —Ç–µ–∫—Å—Ç–∞" ---
        aiParserFileInput, aiParserInput, clearAiParserInputBtn,
        aiFromTextOutputArea, aiFromTextOutput, downloadAiFromTextBtn, clearAiFromTextOutputBtn,
        generateTestFromTextBtn, aiQuestionCount, aiAutoCount, aiAutoCategory,

        // --- –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤–∫–ª–∞–¥–∫–∏ "–ò–ò –ø–æ —Ç–µ–º–µ" ---
        aiTopicInput, generateTestFromTopicBtn, aiTopicQuestionCount, aiTopicAnswerCount,
        aiFromTopicOutputArea, aiFromTopicOutput, downloadAiFromTopicBtn, clearAiFromTopicOutputBtn,
        aiTopicAutoCategory,

        // --- –û—Å—Ç–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ ---
        searchNavigation, prevResultBtn, nextResultBtn, resultCounterEl, readingModeCheckbox, 
        searchResultCardsContainer, continueLaterButton, savedSessionArea, 
        savedSessionList, appTitleHeader, translateEngineToggle, translateEngineDropdown,
        rangeSliderStart, rangeSliderEnd, sliderProgress, questionRangeGroup,
        shuffleNCheckbox, shuffleNCountInput, sliderTicks,
        themeDropdownContainer, themeDropdownButton, themeDropdownContent, themeIcon,
        exitConfirmationModal, confirmExitBtn, cancelExitBtn,
        updateNotification, updateBtn, translateQuestionBtn,
        downloadTranslatedTxtButton, downloadTranslatedQstButton,
        flashcardsModeCheckbox, categoryFilterGroup, categoryCheckboxesContainer,
        selectAllCategoriesBtn, deselectAllCategoriesBtn, sessionConflictModal, 
        sessionConflictText, overwriteSessionBtn,
        saveNewSessionBtn, cancelConflictBtn;



    // --- State Variables ---
    let activeSourceTooltip = null;
    let allParsedQuestions = [];
    let questionsForCurrentQuiz = [];
    let currentQuestionIndex = 0;
    let userAnswers = [];
    let score = 0;
    let quizSettings = { timeLimit: 0, shuffleQuestions: false, shuffleAnswers: false, questionRangeStart: 1, questionRangeEnd: 0, feedbackMode: false };
    let quickModeEnabled = localStorage.getItem('quizQuickModeEnabled') === 'true';
    const QUICK_MODE_DELAY = 1000;
    let triggerWordModeEnabled = false;
    let triggerWordsUsedInQuiz = false;
    let incorrectlyAnsweredQuestionsData = [];
    let currentQuizErrorData = [];
    let timerInterval = null;
    let timeLeftInSeconds = 0;
    const MAX_RECENT_FILES = 20;
    const RECENT_FILES_STORAGE_KEY = 'recentQstFilesData';
    const SAVED_SESSIONS_STORAGE_KEY = 'savedQuizSessions'; 
    let originalFileNameForReview = '';
    let generatedCheatSheetContent = '';
    let breadcrumbs = [];
    let searchResultsData = [];
    let currentResultIndex = 0;
    let currentQuizContext = null;
    let currentPrivateLegends = {};
    let privateLegendsListener = null;
    let currentPublicLegends = {};
    let currentTopicListener = null; 
    let currentTopicLegends = {};  
    let quizStartTime = 0;
    let currentAIQuestion = null; // –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
    let currentAITranslation = null; // –ù–û–í–ê–Ø: –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞ –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ
    let isAIModalShowingTranslation = false; // –ù–û–í–ê–Ø: —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ
    let isExitConfirmed = false;
    let isTranslateModeEnabled = localStorage.getItem('isTranslateModeEnabled') === 'true'; 
    let currentQuizTranslations = new Map(); // –î–ª—è –∫—ç—à–∞ –≤ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏
    let currentAIUserIncorrectAnswer = null;
    let currentFileCacheKey = null; // –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è —Ñ–∞–π–ª–∞ –≤ localStorage
    const AI_INPUT_CHAR_LIMIT = 14000; // –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –ª–∏–º–∏—Ç —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –ò–ò
    let currentTranslateEngine = 'google'; // 'google' –∏–ª–∏ 'ai'
    let isPdfSession = false;
    let prefetchedIndices = new Set(); // –ù–û–í–´–ô –ö–û–î: –•—Ä–∞–Ω–∏—Ç –∏–Ω–¥–µ–∫—Å—ã –≤–æ–ø—Ä–æ—Å–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –≤ –æ—á–µ—Ä–µ–¥–∏ –Ω–∞ –ø–µ—Ä–µ–≤–æ–¥.
    const PREFETCH_WINDOW_SIZE = 5;    // –ù–û–í–´–ô –ö–û–î: –°–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤ "–≤–ø–µ—Ä–µ–¥" –º—ã —Å–º–æ—Ç—Ä–∏–º.


    

    // --- Constants ---

    const GRADUS_ROOT_FOLDER_ID = '1RLrkW1CZUo8PvpJt-C7xZgK0xzHnXmZ7';


    const handleBeforeUnload = (event) => {
        // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Å–ø–æ—Å–æ–± –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –≤ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –±—Ä–∞—É–∑–µ—Ä–∞—Ö
        event.preventDefault();
        // Chrome —Ç—Ä–µ–±—É–µ—Ç, —á—Ç–æ–±—ã returnValue –±—ã–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.
        event.returnValue = '';
    };


  /**
   * –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –û–±–Ω–æ–≤–ª—è–µ—Ç UI –≤—ã–±–æ—Ä–∞ –¥–≤–∏–∂–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ (–≥–∞–ª–æ—á–∫–∞).
   */
  function updateTranslateEngineUI() {
      const engine = localStorage.getItem('translateEngine') || 'google';
      currentTranslateEngine = engine;

      const links = translateEngineDropdown.querySelectorAll('a');
      links.forEach(link => {
          link.classList.toggle('active', link.dataset.engine === engine);
      });
  }


  /**
   * –ù–û–í–ê–Ø –£–õ–£–ß–®–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –¥–≤–∏–∂–æ–∫ –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥.
   */
  function setTranslateEngine(engine) {
      // 1. –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä –∏ –æ–±–Ω–æ–≤–ª—è–µ–º UI (–≥–∞–ª–æ—á–∫—É)
      localStorage.setItem('translateEngine', engine);
      updateTranslateEngineUI();
      translateEngineDropdown.classList.remove('show');

      // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –∑–∞–ø—É—Å–∫–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥
      // (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –º—ã –Ω–∞ —ç–∫—Ä–∞–Ω–µ —Ç–µ—Å—Ç–∞ –∏ —Ä–µ–∂–∏–º –ø–µ—Ä–µ–≤–æ–¥–∞ —É–∂–µ –≤–∫–ª—é—á–µ–Ω)
      if (!quizArea.classList.contains('hidden') && isTranslateModeEnabled && questionsForCurrentQuiz.length > 0) {
          
          console.log(`–ó–∞–ø—Ä–æ—à–µ–Ω –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥ —Å –ø–æ–º–æ—â—å—é: ${engine}`);

          const currentOriginalQuestion = questionsForCurrentQuiz[currentQuestionIndex];
          const lang = localStorage.getItem('appLanguage') || 'ru';
          
          // 3. –£–¥–∞–ª—è–µ–º –∏–∑ –∫—ç—à–∞ –ø–µ—Ä–µ–≤–æ–¥ –¥–ª—è –¢–ï–ö–£–©–ï–ì–û –≤–æ–ø—Ä–æ—Å–∞ –∏ –¢–ï–ö–£–©–ï–ì–û —è–∑—ã–∫–∞.
          // –≠—Ç–æ –∑–∞—Å—Ç–∞–≤–∏—Ç —Å–∏—Å—Ç–µ–º—É –∑–∞–ø—Ä–æ—Å–∏—Ç—å –µ–≥–æ —Å —Å–µ—Ä–≤–µ—Ä–∞ –∑–∞–Ω–æ–≤–æ.
          const cacheKey = getCacheKey(currentOriginalQuestion.originalIndex, lang);
          if (currentQuizTranslations.has(cacheKey)) {
              currentQuizTranslations.delete(cacheKey);
              console.log(`–ö—ç—à –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞ #${currentOriginalQuestion.originalIndex} (${lang}) –æ—á–∏—â–µ–Ω –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞.`);
          }
          
          // 4. –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å. –§—É–Ω–∫—Ü–∏—è —Å–∞–º–∞ –ø–æ–π–º–µ—Ç, —á—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –ø–µ—Ä–µ–≤–æ–¥.
          loadQuestion(currentQuestionIndex);
      }
  }
    
    /**
     * –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –£–ø—Ä–∞–≤–ª—è–µ—Ç –≤–∏–¥–∏–º–æ—Å—Ç—å—é –∫–Ω–æ–ø–æ–∫ –ø–µ—Ä–µ–≤–æ–¥–∞.
     */
    function updateTranslateButtonsVisibility() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∏–¥–µ–Ω –ª–∏ —ç–∫—Ä–∞–Ω —Ç–µ—Å—Ç–∞
        const shouldBeVisible = !quizArea.classList.contains('hidden');
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–ª–∏ —Å–∫—Ä—ã–≤–∞–µ–º –æ–±–µ –∫–Ω–æ–ø–∫–∏ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
        translateQuestionBtn.classList.toggle('hidden', !shouldBeVisible);
        translateEngineToggle.classList.toggle('hidden', !shouldBeVisible);
    }





    function initializeApp() {
        // --- –û–ë–ù–û–í–õ–ï–ù–ù–´–ô –ë–õ–û–ö –ü–†–ò–°–í–û–ï–ù–ò–Ø –ü–ï–†–ï–ú–ï–ù–ù–´–• ---
        
        // –û—Å–Ω–æ–≤–Ω—ã–µ —ç–∫—Ä–∞–Ω—ã –∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
        fileInput = getEl('fileInput');
        fileUploadArea = getEl('fileUploadArea');
        quizSetupArea = getEl('quizSetupArea');
        quizArea = getEl('quizArea');
        resultsArea = getEl('resultsArea');
        appTitleHeader = getEl('appTitleHeader');

        // –≠–ª–µ–º–µ–Ω—Ç—ã –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∏ –ø–æ–∏—Å–∫–∞
        searchVerificationContainer = getEl('searchVerificationContainer');
        searchActivationContainer = getEl('searchActivationContainer');
        accessCodeInput = getEl('accessCodeInput');
        activateSearchBtn = getEl('activateSearchBtn');
        searchContainer = getEl('searchContainer');
        searchQueryInput = getEl('searchQueryInput');
        searchButton = getEl('searchButton');
        searchResultsContainer = getEl('searchResultsContainer');
        backToSearchButton = getEl('backToSearchButton');
        searchResultCardsContainer = getEl('searchResultCards');
        searchNavigation = getEl('searchNavigation');
        prevResultBtn = getEl('prevResultBtn');
        nextResultBtn = getEl('nextResultBtn');
        resultCounterEl = getEl('resultCounter');
        
        // –ö–Ω–æ–ø–∫–∏ –≤ —à–∞–ø–∫–µ (Header)
        webSearchDropdown = getEl('webSearchDropdown');
        searchWebButton = getEl('searchWebButton');
        searchDropdownContent = getEl('searchDropdownContent');
        chatToggleBtn = getEl('chatToggle');
        languageToggle = getEl('languageToggle');
        copyQuestionBtnQuiz = getEl('copyQuestionBtnQuiz');
        quickModeToggle = getEl('quickModeToggle');
        triggerWordToggle = getEl('triggerWordToggle');
        translateQuestionBtn = getEl('translateQuestionBtn');
        translateEngineToggle = getEl('translateEngineToggle');
        translateEngineDropdown = getEl('translateEngineDropdown');
        themeDropdownContainer = getEl('themeDropdownContainer');
        themeDropdownButton = getEl('themeDropdownButton');
        themeDropdownContent = getEl('themeDropdownContent');
        themeIcon = getEl('themeIcon');

        // –≠–ª–µ–º–µ–Ω—Ç—ã —Ñ–∏–ª—å—Ç—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        categoryFilterGroup = getEl('categoryFilterGroup');
        categoryCheckboxesContainer = getEl('categoryCheckboxes');
        selectAllCategoriesBtn = getEl('selectAllCategoriesBtn');
        deselectAllCategoriesBtn = getEl('deselectAllCategoriesBtn');

        // –≠–ª–µ–º–µ–Ω—Ç—ã –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞ —Å–µ—Å—Å–∏–π
        sessionConflictModal = getEl('sessionConflictModal');
        sessionConflictText = getEl('sessionConflictText');
        overwriteSessionBtn = getEl('overwriteSessionBtn');
        saveNewSessionBtn = getEl('saveNewSessionBtn');
        cancelConflictBtn = getEl('cancelConflictBtn');

        // –≠–ª–µ–º–µ–Ω—Ç—ã —ç–∫—Ä–∞–Ω–∞ —Ç–µ—Å—Ç–∞ (Quiz Area)
        questionTextEl = getEl('questionText');
        answerOptionsEl = getEl('answerOptions');
        feedbackAreaEl = getEl('feedbackArea');
        prevQuestionButton = getEl('prevQuestionButton');
        nextButton = getEl('nextButton');
        timerDisplayEl = getEl('timerDisplay');
        timeLeftEl = getEl('timeLeft');
        currentQuestionNumEl = getEl('currentQuestionNum');
        totalQuestionsNumEl = getEl('totalQuestionsNum');
        correctAnswersCountEl = getEl('correctAnswersCount');
        quickNavPanel = getEl('quickNavPanel');
        quickNavButtonsContainer = getEl('quickNavButtons');
        downloadTranslatedTxtButton = getEl('downloadTranslatedTxtButton');
        downloadTranslatedQstButton = getEl('downloadTranslatedQstButton');
        continueLaterButton = getEl('continueLaterButton');
        finishTestButton = getEl('finishTestButton');
        
        // –≠–ª–µ–º–µ–Ω—Ç—ã —ç–∫—Ä–∞–Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (Results Area)
        restartButton = getEl('restartButton');
        finalCorrectEl = getEl('finalCorrect');
        finalTotalEl = getEl('finalTotal');
        finalPercentageEl = getEl('finalPercentage');
        feedbackDownloadArea = getEl('feedbackDownloadArea');
        downloadErrorsButton = getEl('downloadErrorsButton');
        errorReviewArea = getEl('errorReviewArea');
        reviewErrorsButton = getEl('reviewErrorsButton');
        triggeredQuizDownloadArea = getEl('triggeredQuizDownloadArea');
        downloadTriggeredQuizButton = getEl('downloadTriggeredQuizButton');

        // –≠–ª–µ–º–µ–Ω—Ç—ã —ç–∫—Ä–∞–Ω–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ (Setup Area)
        startQuizButton = getEl('startQuizButton');

        timeLimitInput = getEl('timeLimitInput');
        timeLimitSlider = getEl('timeLimitSlider');
        timeSliderProgress = getEl('timeSliderProgress');
        timeSliderTicks = getEl('timeSliderTicks');
        timeSliderValueBubble = getEl('timeSliderValueBubble');

        questionRangeStartInput = getEl('questionRangeStart');
        questionRangeEndInput = getEl('questionRangeEnd');
        maxQuestionsInfoEl = getEl('maxQuestionsInfo');
        shuffleQuestionsCheckbox = getEl('shuffleQuestions');
        shuffleAnswersCheckbox = getEl('shuffleAnswers');
        feedbackModeCheckbox = getEl('feedbackMode');
        readingModeCheckbox = getEl('readingMode');
        flashcardsModeCheckbox = getEl('flashcardsMode');
        generateCheatSheetButton = getEl('generateCheatSheetButton');
        chooseAnotherFileButton = getEl('chooseAnotherFileButton');
        rangeSliderStart = getEl('rangeSliderStart');
        rangeSliderEnd = getEl('rangeSliderEnd');
        sliderProgress = getEl('sliderProgress');
        questionRangeGroup = getEl('questionRangeGroup');
        shuffleNCheckbox = getEl('shuffleNQuestions');
        shuffleNCountInput = getEl('shuffleNQuestionsCount');
        sliderTicks = getEl('sliderTicks');



        
        // –®–ø–∞—Ä–≥–∞–ª–∫–∞ (Cheat Sheet)
        cheatSheetResultArea = getEl('cheatSheetResultArea');
        cheatSheetOutputEl = getEl('cheatSheetOutput');
        downloadCheatSheetButton = getEl('downloadCheatSheetButton');
        backToSettingsButton = getEl('backToSettingsButton');

        // GRADUS
        gradusButton = getEl('gradusButton');
        gradusFoldersContainer = getEl('gradusFoldersContainer');
        gradusFolderList = getEl('gradusFolderList');
        backToFileUploadButton = getEl('backToFileUploadButton');
        gradusBreadcrumbs = getEl('gradusBreadcrumbs');
        
        // –ù–µ–¥–∞–≤–Ω–∏–µ —Ñ–∞–π–ª—ã –∏ —Å–µ—Å—Å–∏–∏
        recentFilesArea = getEl('recentFilesArea');
        recentFilesListEl = getEl('recentFilesList');
        savedSessionArea = getEl('savedSessionArea');
        savedSessionList = getEl('savedSessionList');

        // –ü–∞—Ä—Å–µ—Ä (–æ–±—â–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã)
        parserArea = getEl('parserArea');
        parserButton = getEl('parserButton');
        backToMainFromParserBtn = getEl('backToMainFromParserBtn');
        filterVariantsBtn = getEl('filterVariantsBtn');
        filterVariantsDropdown = getEl('filterVariantsDropdown');
        filterVariantCheckboxes = getEl('filterVariantCheckboxes');
        applyVariantFilterBtn = getEl('applyVariantFilterBtn');
        resetVariantFilterBtn = getEl('resetVariantFilterBtn');

        // –ü–∞—Ä—Å–µ—Ä (–≤–∫–ª–∞–¥–∫–∏)
        converterTabBtn = getEl('converterTabBtn');
        aiFromTextTabBtn = getEl('aiFromTextTabBtn');
        aiFromTopicTabBtn = getEl('aiFromTopicTabBtn');
        converterContent = getEl('converterContent');
        aiFromTextContent = getEl('aiFromTextContent');
        aiGeneratorContent = getEl('aiGeneratorContent');

        // –ü–∞—Ä—Å–µ—Ä (—ç–ª–µ–º–µ–Ω—Ç—ã –≤–∫–ª–∞–¥–∫–∏ "–ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä")
        parserFileInput = getEl('parserFileInput');
        parserInput = getEl('parserInput');
        clearParserInputBtn = getEl('clearParserInputBtn');
        parserPatternSelect = getEl('parserPatternSelect');
        runParserBtn = getEl('runParserBtn');
        converterErrorsArea = getEl('converterErrorsArea');
        converterErrorsHeader = getEl('converterErrorsHeader');
        converterErrorCount = getEl('converterErrorCount');
        converterErrorList = getEl('converterErrorList');
        converterOutputArea = getEl('converterOutputArea');
        converterOutput = getEl('converterOutput');
        downloadConverterBtn = getEl('downloadConverterBtn');
        clearConverterOutputBtn = getEl('clearConverterOutputBtn');

        // –ü–∞—Ä—Å–µ—Ä (—ç–ª–µ–º–µ–Ω—Ç—ã –≤–∫–ª–∞–¥–∫–∏ "–ò–ò –∏–∑ —Ç–µ–∫—Å—Ç–∞")
        aiParserFileInput = getEl('aiParserFileInput');
        aiParserInput = getEl('aiParserInput');
        clearAiParserInputBtn = getEl('clearAiParserInputBtn');
        generateTestFromTextBtn = getEl('generateTestFromTextBtn');
        aiQuestionCount = getEl('aiQuestionCount');
        aiAutoCount = getEl('aiAutoCount');
        aiAutoCategory = getEl('aiAutoCategory');
        aiFromTextOutputArea = getEl('aiFromTextOutputArea');
        aiFromTextOutput = getEl('aiFromTextOutput');
        downloadAiFromTextBtn = getEl('downloadAiFromTextBtn');
        clearAiFromTextOutputBtn = getEl('clearAiFromTextOutputBtn');

        // –ü–∞—Ä—Å–µ—Ä (—ç–ª–µ–º–µ–Ω—Ç—ã –≤–∫–ª–∞–¥–∫–∏ "–ò–ò –ø–æ —Ç–µ–º–µ")
        aiTopicInput = getEl('aiTopicInput');
        generateTestFromTopicBtn = getEl('generateTestFromTopicBtn');
        aiTopicQuestionCount = getEl('aiTopicQuestionCount');
        aiTopicAnswerCount = getEl('aiTopicAnswerCount');
        aiTopicAutoCategory = getEl('aiTopicAutoCategory');
        aiFromTopicOutputArea = getEl('aiFromTopicOutputArea');
        aiFromTopicOutput = getEl('aiFromTopicOutput');
        downloadAiFromTopicBtn = getEl('downloadAiFromTopicBtn');
        clearAiFromTopicOutputBtn = getEl('clearAiFromTopicOutputBtn');

        // –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        exitConfirmationModal = getEl('exitConfirmationModal');
        confirmExitBtn = getEl('confirmExitBtn');
        cancelExitBtn = getEl('cancelExitBtn');
        updateNotification = getEl('updateNotification');
        updateBtn = getEl('updateBtn');
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Service Worker
        initServiceWorkerUpdater();
        // --- –ù–ê–ß–ê–õ–û –ù–û–í–û–ì–û –ö–û–î–ê: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä—Å–µ—Ä–∞ Markdown ---
        if (window.marked) {
            marked.setOptions({
                breaks: true // –í–∫–ª—é—á–∞–µ–º –æ–ø—Ü–∏—é –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è \n –≤ <br>
            });
            console.log("Markdown parser (marked.js) configured to use line breaks.");
        }
        // --- –ö–û–ù–ï–¶ –ù–û–í–û–ì–û –ö–û–î–ê ---

        // –û—Å—Ç–∞–ª—å–Ω–∞—è —á–∞—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏ initializeApp
        try {
            if (typeof firebase === 'undefined') {
                throw new Error('Firebase SDK –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω');
            }
            firebase.initializeApp(FIREBASE_CONFIG);
            db = firebase.firestore();
            auth = firebase.auth();
            console.log('‚úÖ Firebase –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ');
            ChatModule.init(db, auth);
            auth.onAuthStateChanged(user => {
                currentUser = user;
                ChatModule.setCurrentUser(user);
            });
        } catch (e) {
            console.error("‚ùå Firebase initialization failed:", e);
            alert(`${_('error_firebase_init')} ${e.message}`);
            ChatModule.init(null, null);
        }
        
        setupEventListeners();

        DBManager.get('activatedSearchKey', 'AppSettings').then(result => {
            if (result && result.value) {
                revalidateSearchKey(result.value);
            } else {
                searchActivationContainer.classList.remove('hidden');
            }
        });

        loadTheme();
        updateQuickModeToggleVisual();
        updateTriggerWordToggleVisual();
        loadRecentFiles();
        loadSavedSession();
        const savedLang = localStorage.getItem('appLanguage') || 'ru';
        populateParserPatterns();
        populateThemeDropdown();
        setLanguage(savedLang);
        createVariantFilterCheckboxes();
        manageBackButtonInterceptor();
        setupExtensionListener();
        setupAnimationObserver();
        updateTranslateEngineUI();
        // === –ù–û–í–´–ô –í–´–ó–û–í –î–õ–Ø –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–ò AI-–ß–ê–¢–ê ===
        initAIChat();
        // –°–∫—Ä—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –Ω–∞—á–∞–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏, –∫–æ–≥–¥–∞ –≤—Å–µ –≥–æ—Ç–æ–≤–æ
        getEl('initial-loader')?.classList.add('hidden');
    }


    async function copyToClipboardMain(text) {
        try {
            if (navigator.clipboard && navigator.clipboard.writeText) {
                await navigator.clipboard.writeText(text);
                showToast(_('copy_success'), 'success'); 
            } else {
                // Fallback –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤
                const textArea = document.createElement('textarea');
                textArea.value = text;
                document.body.appendChild(textArea);
                textArea.select();
                textArea.setSelectionRange(0, 99999);
                document.execCommand('copy');
                document.body.removeChild(textArea);
                showToast(_('copy_success'), 'success');
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
            showToast(_('copy_error'), 'error'); // <-- –ò–ó–ú–ï–ù–ï–ù–ò–ï –ó–î–ï–°–¨
        }
    }




    function setupEventListeners() {
        getEl('favoriteQuestionBtn')?.addEventListener('click', handleFavoriteClickInQuiz);
        translateQuestionBtn?.addEventListener('click', toggleTranslateMode);
        getEl('copyExplanationBtn')?.addEventListener('click', handleCopyExplanation);
        fileInput.addEventListener('change', handleFileSelect);
        startQuizButton.addEventListener('click', () => applySettingsAndStartQuiz(false, null));
        gradusButton?.addEventListener('click', () => {
            fileUploadArea.classList.add('hidden');
            gradusFoldersContainer.classList.remove('hidden');
            renderGradusView(GRADUS_ROOT_FOLDER_ID, 'GRADUS', true);
            manageBackButtonInterceptor();
        });
        backToFileUploadButton?.addEventListener('click', () => {
            gradusFoldersContainer.classList.add('hidden');
            fileUploadArea.classList.remove('hidden');
            manageBackButtonInterceptor();
        });
        searchButton?.addEventListener('click', performSearch);
        activateSearchBtn?.addEventListener('click', handleActivateSearch);
        backToSearchButton?.addEventListener('click', () => {
            searchResultsContainer.classList.add('hidden');
            fileUploadArea.classList.remove('hidden');
            searchQueryInput.value = '';
            manageBackButtonInterceptor();
        });
        searchWebButton?.addEventListener('click', (event) => {
            event.stopPropagation();
            searchDropdownContent.classList.toggle('show');
        });
        searchDropdownContent?.addEventListener('click', handleWebSearch);
        
        // –í–∫–ª–∞–¥–∫–∏ –ø–∞—Ä—Å–µ—Ä–∞
        converterTabBtn?.addEventListener('click', () => switchParserTab('converter'));
        aiFromTextTabBtn?.addEventListener('click', () => switchParserTab('aiFromText'));
        aiFromTopicTabBtn?.addEventListener('click', () => switchParserTab('aiGenerator'));

        // –ö–Ω–æ–ø–∫–∏ –∏ –∏–Ω–ø—É—Ç—ã –ø–∞—Ä—Å–µ—Ä–∞
        parserButton?.addEventListener('click', () => {
            hideAndResetErrorArea();
            resetVariantFilter();
            fileUploadArea.classList.add('hidden');
            parserArea.classList.remove('hidden');
            manageBackButtonInterceptor();
        });
        backToMainFromParserBtn?.addEventListener('click', () => {
            parserArea.classList.add('hidden');
            fileUploadArea.classList.remove('hidden');
            manageBackButtonInterceptor();
        });
        parserFileInput?.addEventListener('change', handleParserFileInput);
        clearParserInputBtn?.addEventListener('click', clearParserInput);
        runParserBtn?.addEventListener('click', runParser);
        aiParserFileInput?.addEventListener('change', handleAiParserFileInput);
        clearAiParserInputBtn?.addEventListener('click', clearAiParserInput);
        aiParserInput?.addEventListener('input', checkAICharacterLimit);
        generateTestFromTextBtn?.addEventListener('click', handleAIGenerationRequest);
        generateTestFromTopicBtn?.addEventListener('click', handleAIGenerationFromTopicRequest);
        
        // –ö–Ω–æ–ø–∫–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∏ –æ—á–∏—Å—Ç–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        downloadConverterBtn?.addEventListener('click', () => downloadParsedQst('converter'));
        downloadAiFromTextBtn?.addEventListener('click', () => downloadParsedQst('aiFromText'));
        downloadAiFromTopicBtn?.addEventListener('click', () => downloadParsedQst('aiFromTopic'));
        clearConverterOutputBtn?.addEventListener('click', () => clearParserOutput('converter'));
        clearAiFromTextOutputBtn?.addEventListener('click', () => clearParserOutput('aiFromText'));
        clearAiFromTopicOutputBtn?.addEventListener('click', () => clearParserOutput('aiFromTopic'));

        // –§–∏–ª—å—Ç—Ä
        filterVariantsBtn?.addEventListener('click', (event) => {
            event.stopPropagation();
            const header = event.target.closest('.parser-output-header');
            if (header) {
                filterVariantsDropdown.style.top = `${header.offsetTop + header.offsetHeight}px`;
                filterVariantsDropdown.style.right = '0px';
            }
            filterVariantsDropdown.classList.toggle('hidden');
        });

        applyVariantFilterBtn?.addEventListener('click', filterByVariantCount);
        resetVariantFilterBtn?.addEventListener('click', resetVariantFilter);
        
        // –û—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏...
        nextButton.addEventListener('click', handleNextButtonClick);
        prevQuestionButton.addEventListener('click', loadPreviousQuestion);
        restartButton.addEventListener('click', resetQuizForNewFile);
        downloadErrorsButton.addEventListener('click', downloadErrorFile);
        copyQuestionBtnQuiz?.addEventListener('click', handleCopyQuestionInQuiz);
        reviewErrorsButton?.addEventListener('click', startErrorReviewQuiz);
        generateCheatSheetButton?.addEventListener('click', handleGenerateCheatSheet);
        downloadCheatSheetButton?.addEventListener('click', handleDownloadOrShareCheatSheet);
        backToSettingsButton?.addEventListener('click', () => {
            cheatSheetResultArea.classList.add('hidden');
            quizSetupArea.classList.remove('hidden');
        });
        chooseAnotherFileButton?.addEventListener('click', () => resetQuizForNewFile(true));
        continueLaterButton?.addEventListener('click', saveSessionForLater);

        finishTestButton?.addEventListener('click', () => { 
                    // === –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ü—Ä–æ—Å—Ç–æ –≤—ã–∑—ã–≤–∞–µ–º –Ω–∞—à—É –Ω–æ–≤—É—é —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é ===
                    handleFinishQuizAttempt();
                });

        quickModeToggle?.addEventListener('click', toggleQuickMode);
        triggerWordToggle?.addEventListener('click', toggleTriggerWordMode);
        downloadTriggeredQuizButton?.addEventListener('click', downloadTriggeredQuizFile);
        readingModeCheckbox?.addEventListener('change', handleReadingModeChange);

        // <<< –û–ë–†–ê–ë–û–¢–ß–ò–ö –ö–ù–û–ü–ö–ò –°–ú–ï–ù–´ –¢–ï–ú–´ (–°–ê–ú–´–ô –ü–†–û–°–¢–û–ô –í–ê–†–ò–ê–ù–¢) >>>
        themeDropdownButton?.addEventListener('click', (event) => {
            event.stopPropagation();
            themeDropdownContent.classList.toggle('show');
        });

        themeDropdownContent?.addEventListener('click', (event) => {
            event.preventDefault();
            const target = event.target.closest('a');
            if (target && target.dataset.theme) {
                setTheme(target.dataset.theme);
                themeDropdownContent.classList.remove('show');
            }
        });
        
        translateEngineToggle?.addEventListener('click', (e) => {
          e.stopPropagation();
          translateEngineDropdown.classList.toggle('show');
          const container = translateEngineToggle.closest('.translate-engine-container');
          container?.classList.toggle('open', translateEngineDropdown.classList.contains('show'));
        });

        translateEngineDropdown?.addEventListener('click', (e) => {
            e.preventDefault();
            const target = e.target.closest('a[data-engine]');
            if (target && target.dataset.engine) {
              setTranslateEngine(target.dataset.engine);
              translateEngineDropdown.classList.remove('show');
              const container = translateEngineToggle?.closest('.translate-engine-container');
              container?.classList.remove('open');
            }
        });

        // <<< –û–ë–†–ê–ë–û–¢–ß–ò–ö –ö–õ–ò–ö–ê –í–ù–ï –ú–ï–ù–Æ (–û–ë–™–ï–î–ò–ù–ï–ù–ù–´–ô) >>>
        window.addEventListener('click', (event) => {
            if (filterVariantsDropdown && !filterVariantsDropdown.classList.contains('hidden') && !filterVariantsDropdown.contains(event.target) && event.target !== filterVariantsBtn) {
                filterVariantsDropdown.classList.add('hidden');
            }
            if (!event.target.closest('#webSearchDropdown') && searchDropdownContent?.classList.contains('show')) {
                searchDropdownContent.classList.remove('show');
            }
            if (!event.target.closest('#themeDropdownContainer') && themeDropdownContent?.classList.contains('show')) {
                themeDropdownContent.classList.remove('show');
            }
            if (!event.target.closest('.translate-engine-container') && translateEngineDropdown?.classList.contains('show')) {
              translateEngineDropdown.classList.remove('show');
              const container = translateEngineToggle?.closest('.translate-engine-container');
              container?.classList.remove('open');
            }
            const aiStyleDropdown = getEl('aiExplanationStyleDropdown');
            if (aiStyleDropdown && aiStyleDropdown.classList.contains('open') && !aiStyleDropdown.contains(event.target)) {
                aiStyleDropdown.classList.remove('open');
                getEl('aiExplanationStyleContent').classList.add('hidden');
            }
        });

        languageToggle?.addEventListener('click', toggleLanguage);
        chatToggleBtn?.addEventListener('click', () => {
            ChatModule.openChatModal();
        });
        prevResultBtn?.addEventListener('click', () => {
            if (currentResultIndex > 0) {
                currentResultIndex--;
                displaySingleResult(currentResultIndex);
            }
        });
        nextResultBtn?.addEventListener('click', () => {
            if (currentResultIndex < searchResultsData.length - 1) {
                currentResultIndex++;
                displaySingleResult(currentResultIndex);
            }
        });
        cancelExitBtn?.addEventListener('click', () => {
            isExitConfirmed = false;
            hideExitConfirmationModal();
        });
        confirmExitBtn?.addEventListener('click', () => {
            window.location.href = 'about:blank';
        });
        downloadTranslatedTxtButton?.addEventListener('click', handleDownloadTranslatedTxt);
        downloadTranslatedQstButton?.addEventListener('click', handleDownloadTranslatedQst);
        shuffleNCheckbox?.addEventListener('change', handleShuffleNToggle);
        aiAutoCount?.addEventListener('change', () => {
            aiQuestionCount.disabled = aiAutoCount.checked;
        });
        getEl('aiExplanationTranslateBtn')?.addEventListener('click', handleAITranslateToggle);
        flashcardsModeCheckbox?.addEventListener('change', handleFlashcardsModeChange);
        getEl('aiAnalysisBtn')?.addEventListener('click', requestErrorAnalysis);
        getEl('aiExplanationStyleButton')?.addEventListener('click', (e) => {
            e.stopPropagation();
            getEl('aiExplanationStyleDropdown').classList.toggle('open');
            getEl('aiExplanationStyleContent').classList.toggle('hidden');
        });
        getEl('aiExplanationStyleContent')?.addEventListener('click', (e) => {
            e.preventDefault();
            const target = e.target.closest('a');
            if (target && target.dataset.style) {
                const style = target.dataset.style;
                getEl('aiExplanationStyleText').textContent = target.textContent;
                getEl('aiExplanationStyleDropdown').classList.remove('open');
                getEl('aiExplanationStyleContent').classList.add('hidden');
                fetchAndDisplayExplanation(style, currentAIUserIncorrectAnswer);
            }
        });
        selectAllCategoriesBtn?.addEventListener('click', () => toggleAllCategories(true));
        deselectAllCategoriesBtn?.addEventListener('click', () => toggleAllCategories(false));
        categoryCheckboxesContainer?.addEventListener('change', updateQuestionCountForFilters);

        if (timeLimitInput && timeLimitSlider) {
            timeLimitInput.addEventListener('input', (e) => {
                updateTimeControls(e.target.value, timeLimitInput);
            });
            timeLimitInput.addEventListener('wheel', (event) => {
                event.preventDefault();
                const direction = event.deltaY < 0 ? 1 : -1;
                adjustTimeLimit(direction);
            });
            timeLimitSlider.addEventListener('input', (e) => {
                const rawValue = parseInt(e.target.value, 10);
                const snappedValue = snapTimeValue(rawValue);
                if (rawValue !== snappedValue) {
                    timeLimitSlider.value = snappedValue;
                }
                updateTimeControls(timeLimitSlider.value, timeLimitSlider);
            });
        }
    }




    /**
     * –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –í—ã–±–∏—Ä–∞–µ—Ç –∏–ª–∏ —Å–Ω–∏–º–∞–µ—Ç –≤—ã–±–æ—Ä —Å–æ –≤—Å–µ—Ö —á–µ–∫–±–æ–∫—Å–æ–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–π.
     * @param {boolean} select - true, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –≤—Å–µ, false - —á—Ç–æ–±—ã —Å–Ω—è—Ç—å –≤—ã–±–æ—Ä.
     */
      function toggleAllCategories(select) {
          if (categoryCheckboxesContainer) {
              const checkboxes = categoryCheckboxesContainer.querySelectorAll('input[type="checkbox"]');
              checkboxes.forEach(checkbox => checkbox.checked = select);
              // –í—ã–∑—ã–≤–∞–µ–º –ø–µ—Ä–µ—Å—á–µ—Ç –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—Å–µ—Ö —á–µ–∫–±–æ–∫—Å–æ–≤
              updateQuestionCountForFilters();
          }
      }


    /**
     * –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç UI –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –≤–æ–ø—Ä–æ—Å–æ–≤
     * –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤ (–∫–∞—Ç–µ–≥–æ—Ä–∏–∏, —è–∑—ã–∫).
     */
    function updateQuestionCountForFilters() {
        if (!categoryFilterGroup || allParsedQuestions.length === 0) return;

        let baseQuestions = allParsedQuestions;

        // –°–Ω–∞—á–∞–ª–∞ —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —è–∑—ã–∫—É, –µ—Å–ª–∏ —ç—Ç–æ—Ç —Ñ–∏–ª—å—Ç—Ä –∞–∫—Ç–∏–≤–µ–Ω
        const langFilterGroup = getEl('languageFilterGroup');
        const langFilterSelect = getEl('languageFilter');
        if (!langFilterGroup.classList.contains('hidden') && langFilterSelect.value !== 'all') {
            const selectedLang = langFilterSelect.value;
            baseQuestions = baseQuestions.filter(q => detectLanguage(q.text) === selectedLang);
        }
        
        // –ó–∞—Ç–µ–º —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        const selectedCategories = Array.from(categoryCheckboxesContainer.querySelectorAll('input:checked')).map(input => input.value);
        
        let questionsInFilter = [];
        if (selectedCategories.length > 0) {
            let includeCurrentSection = false;
            baseQuestions.forEach(item => {
                if (item.type === 'category') {
                    includeCurrentSection = selectedCategories.includes(item.text);
                } else if (includeCurrentSection) {
                    questionsInFilter.push(item);
                }
            });
        } else {
            // –ï—Å–ª–∏ –Ω–∏ –æ–¥–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –≤—ã–±—Ä–∞–Ω–∞, —Å—á–∏—Ç–∞–µ–º –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã
            questionsInFilter = baseQuestions.filter(item => item.type !== 'category');
        }

        const questionCount = questionsInFilter.length;

        // –û–±–Ω–æ–≤–ª—è–µ–º UI
        maxQuestionsInfoEl.textContent = `(${_('total_questions_label')} ${questionCount > 0 ? questionCount : '0'} ${_('questions_label_for_range')})`;
        initDualSlider(questionCount > 0 ? questionCount : 1); // –ü–µ—Ä–µ–¥–∞–µ–º 1, –µ—Å–ª–∏ 0, —á—Ç–æ–±—ã —Å–ª–∞–π–¥–µ—Ä –Ω–µ —Å–ª–æ–º–∞–ª—Å—è
        shuffleNCountInput.max = questionCount;
        if (parseInt(shuffleNCountInput.value) > questionCount) {
            shuffleNCountInput.value = questionCount;
        }
    }

    function handleBackButton(event) {
        const chatOverlay = document.getElementById('chatOverlay');
        if (chatOverlay && !chatOverlay.classList.contains('hidden')) {
            event.preventDefault();
            ChatModule.closeChatModal();
            return;
        }

        if (!fileUploadArea.classList.contains('hidden')) {
            event.preventDefault();

            if (backButtonPressedOnce) {
                // –≠—Ç–æ –≤—Ç–æ—Ä–æ–µ –Ω–∞–∂–∞—Ç–∏–µ - –∑–∞–∫—Ä—ã–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
                // –î–ª—è PWA —Å–∞–º—ã–π –Ω–∞–¥–µ–∂–Ω—ã–π —Å–ø–æ—Å–æ–± - –ø–æ–ø—ã—Ç–∞—Ç—å—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å navigator.app.exitApp
                if (navigator.app && navigator.app.exitApp) {
                    navigator.app.exitApp();
                } else {
                    // –ï—Å–ª–∏ API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ, –ø—Ä–æ—Å—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ–º –±—Ä–∞—É–∑–µ—Ä—É —Å–¥–µ–ª–∞—Ç—å "–Ω–∞–∑–∞–¥",
                    // —á—Ç–æ –≤ –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–µ —Å–ª—É—á–∞–µ–≤ –∑–∞–∫—Ä–æ–µ—Ç PWA.
                    window.removeEventListener('popstate', handleBackButton);
                    history.back();
                }
                return;
            }

            // –≠—Ç–æ –ø–µ—Ä–≤–æ–µ –Ω–∞–∂–∞—Ç–∏–µ
            backButtonPressedOnce = true;
            showExitToast();

            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
            setTimeout(() => {
                backButtonPressedOnce = false;
            }, 2000);

            // "–û—Ç–º–µ–Ω—è–µ–º" –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "–Ω–∞–∑–∞–¥"
            history.pushState({ page: 'app' }, "QSTiUM", "#app");

        } else {
            resetQuizForNewFile();
        }
    }


    function showGlobalLoader(message = _('loading_default_text')) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ª–æ–∞–¥–µ—Ä, —á—Ç–æ–±—ã –Ω–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –¥—É–±–ª–∏–∫–∞—Ç—ã
        if (document.getElementById('globalLoader')) return;

        const loaderHTML = `
            <div id="globalLoader" class="global-loader-overlay">
                <div class="loader-content">
                    <div class="loader-spinner"></div>
                    <p>${escapeHTML(message)}</p>
                </div>
            </div>
        `;
        document.body.insertAdjacentHTML('beforeend', loaderHTML);
    }


    function hideGlobalLoader() {
        const loader = document.getElementById('globalLoader');
        if (loader) {
            loader.remove();
        }
    }



    // –ù–û–í–´–ô –ö–û–î
    async function performSearch() {
        const query = searchQueryInput.value.trim();
        if (query.length < 3) {
            alert(_('search_query_too_short'));
            return;
        }
        
        // --- –ò–ó–ú–ï–ù–ï–ù–ò–Ø ---
        searchButton.disabled = true; // 1. –ë–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É
        showGlobalLoader(_('searching_in_db')); // 2. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –ª–æ–∞–¥–µ—Ä

        fileUploadArea.classList.add('hidden');
        searchResultsContainer.classList.remove('hidden');
        manageBackButtonInterceptor();
        
        searchResultCardsContainer.innerHTML = ''; // –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä, –ª–æ–∞–¥–µ—Ä —Ç–µ–ø–µ—Ä—å –≥–ª–æ–±–∞–ª—å–Ω—ã–π
        searchNavigation.classList.add('hidden');

        try {
            const url = `${googleAppScriptUrl}?action=searchQuestions&query=${encodeURIComponent(query)}`;
            const response = await fetch(url);
            if (!response.ok) {
                throw new Error(`–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: ${response.statusText}`);
            }
            const data = await response.json();

            if (!data.success) {
                throw new Error(data.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞');
            }

            renderSearchResults(data.success && data.results ? data.results : []);
        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ:", error);
            searchResultCardsContainer.innerHTML = `<div class="search-no-results-message">${_('search_error_prefix')} ${error.message}</div>`;
        } finally {
            // --- –ò–ó–ú–ï–ù–ï–ù–ò–Ø ---
            searchButton.disabled = false; // 3. –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É
            hideGlobalLoader(); // 4. –°–∫—Ä—ã–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –ª–æ–∞–¥–µ—Ä
        }
    }


    function renderSearchResults(results) {
        searchResultsData = results || [];
        currentResultIndex = 0;

        if (searchResultsData.length === 0) {
            searchNavigation.classList.add('hidden');
            searchResultCardsContainer.innerHTML = `<div class="search-no-results-message">${_('search_no_results')}</div>`;
            return;
        }
        
        searchNavigation.classList.remove('hidden');
        displaySingleResult(currentResultIndex);
    }
    


    function displaySingleResult(index) {
        const resultText = searchResultsData[index];
        if (!resultText) return;

        // 1. –ù–∞—Ö–æ–¥–∏–º –∏ –∫–ª–æ–Ω–∏—Ä—É–µ–º –Ω–∞—à —à–∞–±–ª–æ–Ω
        const template = getEl('searchResultCardTemplate');
        const cardClone = template.content.cloneNode(true);

        // 2. –ù–∞—Ö–æ–¥–∏–º –Ω—É–∂–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –í–ù–£–¢–†–ò –∫–ª–æ–Ω–∞
        const cardContentContainer = cardClone.querySelector('.result-card-content');
        const explainBtn = cardClone.querySelector('.explain-search-result-btn');
        const copyBtn = cardClone.querySelector('.copy-search-result-btn');
        const favoriteBtn = cardClone.querySelector('.favorite-search-result-btn');
        const translateBtn = cardClone.querySelector('.translate-search-result-btn');

        // 3. –ó–∞–ø–æ–ª–Ω—è–µ–º –∫–ª–æ–Ω –¥–∞–Ω–Ω—ã–º–∏
        const cardContentHTML = parseAndRenderQuestionBlock(resultText);
        cardContentContainer.innerHTML = cardContentHTML; // –ó–¥–µ—Å—å innerHTML –±–µ–∑–æ–ø–∞—Å–µ–Ω, —Ç.–∫. parseAndRenderQuestionBlock —ç–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ

        explainBtn.addEventListener('click', (e) => window.mainApp.handleExplainClickInSearch(e, resultText));
        copyBtn.addEventListener('click', (e) => window.mainApp.handleCopyClickInSearch(e, resultText));
        favoriteBtn.addEventListener('click', (e) => window.mainApp.handleFavoriteClickInSearch(e, resultText));
        translateBtn.addEventListener('click', (e) => window.mainApp.handleTranslateClickInSearch(e, e.currentTarget, resultText));
        
        // –ü–µ—Ä–µ–≤–æ–¥–∏–º title –∫–Ω–æ–ø–æ–∫
        explainBtn.title = _('ai_explain_button_title');
        copyBtn.title = _('copy_question_tooltip');
        favoriteBtn.title = _('favorite_question_tooltip');
        translateBtn.title = _('translate_question_title');

        // 4. –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∏ –≤—Å—Ç–∞–≤–ª—è–µ–º –≥–æ—Ç–æ–≤—ã–π –∫–ª–æ–Ω
        searchResultCardsContainer.innerHTML = '';
        searchResultCardsContainer.appendChild(cardClone);
        if (window.lucide) lucide.createIcons();

        // –õ–æ–≥–∏–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
        resultCounterEl.textContent = `${index + 1} / ${searchResultsData.length}`;
        prevResultBtn.disabled = (index === 0);
        nextResultBtn.disabled = (index >= searchResultsData.length - 1);
        
        const resultCard = searchResultCardsContainer.querySelector('.result-card');
        if (resultCard) {
            const correctAnswerEl = resultCard.querySelector('.answer-option.correct');
            if (correctAnswerEl) {
                const answerText = correctAnswerEl.textContent.replace(/^‚úì\s*/, '').trim();
                console.log(`QSTiUM.com: –ù–∞–π–¥–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: "${answerText}". –û—Ç–ø—Ä–∞–≤–ª—è—é –≤ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ.`);
                window.postMessage({ type: "TO_QSTIUM_EXTENSION", answer: answerText }, "*");
            }
        }
    }



    function parseAndRenderQuestionBlock(blockText) {
        if (!blockText) return '<div class="question-text-detail">–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö.</div>';

        // –†–ï–®–ï–ù–ò–ï: –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ—Ö –Ω–µ–Ω—É–∂–Ω—ã—Ö —Ç–µ–≥–æ–≤
        const tagRemovalRegex = /<\/?(question|variant|–≤–æ–ø—Ä–æ—Å|–≤–∞—Ä–∏–∞–Ω—Ç|qst)>/gi;

        const correctedText = blockText.replace(/\\n/g, '\n');
        const lines = correctedText.split('\n').filter(line => line.trim() !== '');

        let questionContentLines = [];
        let optionsHTML = [];
        let foundOptions = false;

        lines.forEach(line => {
            const trimmedLine = line.trim();
            if (trimmedLine.startsWith('+') || trimmedLine.startsWith('=') || trimmedLine.startsWith('-') || trimmedLine.startsWith('~')) {
                foundOptions = true;
                let className = 'answer-option';
                let icon = trimmedLine.startsWith('+') || trimmedLine.startsWith('=') ? '‚úì' : '‚úó';
                if (icon === '‚úì') className += ' correct';
                
                // –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Ç–µ–≥–æ–≤
                const answerText = trimmedLine.substring(1).trim().replace(tagRemovalRegex, '').trim();
                optionsHTML.push(`<div class="${className}">${icon} ${escapeHTML(answerText)}</div>`);
            } else if (!foundOptions) {
                // –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞ –æ—Ç —Ç–µ–≥–æ–≤
                const cleanLine = (trimmedLine.startsWith('?') ? trimmedLine.substring(1).trim() : trimmedLine).replace(tagRemovalRegex, '').trim();
                questionContentLines.push(escapeHTML(cleanLine));
            }
        });

        const questionHTML = `<div class="question-text-detail">${questionContentLines.join('<br>')}</div>`;
        const optionsContainerHTML = optionsHTML.length > 0 ? `<div class="answer-options-container">${optionsHTML.join('')}</div>` : '';
        
        return questionHTML + optionsContainerHTML;
    }


    function handleWebSearch(event) {
        event.preventDefault();
        // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—â–µ–º –±–ª–∏–∂–∞–π—à–∏–π —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π —ç–ª–µ–º–µ–Ω—Ç <a> —Å –∞—Ç—Ä–∏–±—É—Ç–æ–º data-engine
        const target = event.target.closest('a[data-engine]');
        if (!target) return; // –ï—Å–ª–∏ –∫–ª–∏–∫ –±—ã–ª –º–∏–º–æ —Å—Å—ã–ª–æ–∫, –≤—ã—Ö–æ–¥–∏–º
        
        const engine = target.dataset.engine; // –¢–µ–ø–µ—Ä—å –º—ã —Ç–æ—á–Ω–æ –±–µ—Ä–µ–º –∞—Ç—Ä–∏–±—É—Ç —É –Ω—É–∂–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
        if (!engine) return;

        if (currentQuestionIndex >= questionsForCurrentQuiz.length) {
            return;
        }

        const currentQuestion = questionsForCurrentQuiz[currentQuestionIndex];
        const isAnswered = userAnswers[currentQuestionIndex] && userAnswers[currentQuestionIndex].answered;

        let searchQuery = currentQuestion.text;

        if (isAnswered) {
            const correctAnswerText = currentQuestion.options[currentQuestion.correctAnswerIndex].text;
            searchQuery += ` ${correctAnswerText}`;
        }
        
        let searchUrl;
        const encodedQuery = encodeURIComponent(searchQuery);

        switch (engine) {
            case 'google':
                searchUrl = `https://www.google.com/search?q=${encodedQuery}`;
                window.open(searchUrl, '_blank');
                break;
            case 'yandex':
                searchUrl = `https://yandex.ru/search/?text=${encodedQuery}`;
                window.open(searchUrl, '_blank');
                break;
            case 'perplexity':
                searchUrl = `https://www.perplexity.ai/search?q=${encodedQuery}`;
                window.open(searchUrl, '_blank');
                break;
        }

        if (searchDropdownContent) {
            searchDropdownContent.classList.remove('show');
        }
    }




    function renderGradusView(folderId, folderName, isRoot = false) {
        if (isRoot) {
            breadcrumbs = [{ id: folderId, name: folderName }];
        } else {
            const currentIndex = breadcrumbs.findIndex(b => b.id === folderId);
            if (currentIndex > -1) {
                breadcrumbs = breadcrumbs.slice(0, currentIndex + 1);
            } else {
                breadcrumbs.push({ id: folderId, name: folderName });
            }
        }
        updateBreadcrumbs();

        const url = `${googleAppScriptUrl}?action=getFolderContents&folderId=${folderId}`;
        gradusFolderList.innerHTML = `<div class="loading-placeholder">${_('gradus_loading')}</div>`;

        fetch(url)
            .then(response => response.json())
            .then(data => {
                gradusFolderList.innerHTML = '';
                if (!data.success) {
                    throw new Error(data.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ —Å–∫—Ä–∏–ø—Ç–∞');
                }

                (data.folders || []).forEach(folder => {
                    const li = document.createElement('li');
                    li.textContent = folder.name;
                    li.title = _('tooltip_open_folder').replace('{name}', folder.name);
                    li.addEventListener('click', () => renderGradusView(folder.id, folder.name));
                    gradusFolderList.appendChild(li);
                });

                (data.files || []).forEach(file => {
                    const li = document.createElement('li');
                    li.textContent = file.name;
                    li.classList.add('file-item');
                    li.title = _('tooltip_start_test').replace('{name}', file.name);
                    li.addEventListener('click', () => fetchAndLoadQstFile(file.id, file.name));
                    gradusFolderList.appendChild(li);
                });
                
                if (gradusFolderList.innerHTML === '') {
                    gradusFolderList.innerHTML = `<div class="loading-placeholder">${_('gradus_folder_empty')}</div>`;
                }
            })
            .catch(error => {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –ø–∞–ø–∫–∏:', error);
                gradusFolderList.innerHTML = `<div class="loading-placeholder">${_('gradus_loading_error_prefix')} ${error.message}</div>`;
            });
    }




    function updateBreadcrumbs() {
        gradusBreadcrumbs.innerHTML = '';
        breadcrumbs.forEach((crumb, index) => {
            const link = document.createElement('a');
            link.textContent = crumb.name;
            link.dataset.id = crumb.id;
            link.addEventListener('click', () => renderGradusView(crumb.id, crumb.name));
            gradusBreadcrumbs.appendChild(link);

            if (index < breadcrumbs.length - 1) {
                const separator = document.createElement('span');
                separator.textContent = '>';
                gradusBreadcrumbs.appendChild(separator);
            }
        });
    }



    function fetchAndLoadQstFile(fileId, fileName) {
        gradusFolderList.innerHTML = `<div class="loading-placeholder">${_('gradus_loading_quiz_prefix')} "${fileName}"...</div>`;
        const url = `${googleAppScriptUrl}?action=getFileContent&fileId=${fileId}`;

        fetch(url)
            .then(response => response.json())
            .then(data => {
                if (!data.success) {
                    throw new Error(data.error || '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞');
                }
                
                originalFileNameForReview = data.fileName;
                allParsedQuestions = parseQstContent(data.content);

                if (allParsedQuestions.length === 0) {
                    alert(`${_('file_empty_or_invalid_part1')}"${data.fileName}" ${_('file_empty_or_invalid_part2')}`);
                    renderGradusView(breadcrumbs[breadcrumbs.length - 1].id, breadcrumbs[breadcrumbs.length - 1].name);
                    return;
                }

                gradusFoldersContainer.classList.add('hidden');
                quizSetupArea.classList.remove('hidden');
                
                questionRangeStartInput.value = 1;
                questionRangeStartInput.max = allParsedQuestions.length;
                questionRangeEndInput.value = allParsedQuestions.length;
                questionRangeEndInput.max = allParsedQuestions.length;
                maxQuestionsInfoEl.textContent = `(${_('total_questions_label')} ${allParsedQuestions.length} ${_('questions_label_for_range')})`;
            })
            .catch(error => {
                alert(`${_('gradus_loading_error_prefix')} ${error.message}`);
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞:', error);
                renderGradusView(breadcrumbs[breadcrumbs.length - 1].id, breadcrumbs[breadcrumbs.length - 1].name);
            });
    }




    function downloadFileBrowserFallback(fileName, content, contentType) {
        const blob = new Blob([content], { type: contentType });
        const link = document.createElement('a');
        link.href = URL.createObjectURL(blob);
        link.download = fileName;
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
        URL.revokeObjectURL(link.href);
    }
    






    async function downloadOrShareFile(fileName, content, contentType, shareDialogTitlePrefix = '–§–∞–π–ª') {
        console.log(`–ü–æ–ø—ã—Ç–∫–∞ —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª: ${fileName}`);
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –Ω–∞—Ö–æ–¥–∏–º—Å—è –ª–∏ –º—ã –Ω–∞ –º–æ–±–∏–ª—å–Ω–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ
        const isMobile = detectMobileDevice();
        console.log(`–ú–æ–±–∏–ª—å–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: ${isMobile}`);
        
        if (isMobile) {
            // === –ú–û–ë–ò–õ–¨–ù–´–ï –£–°–¢–†–û–ô–°–¢–í–ê: –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é —Å—Å—ã–ª–∫—É ===
            await createTemporaryDownloadLink(fileName, content, contentType, shareDialogTitlePrefix);
        } else {
            // === –ü–ö: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º–æ–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ ===
            downloadFileBrowserFallback(fileName, content, contentType);
        }
    }

    // 2. –£–ª—É—á—à–µ–Ω–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ (–ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ –≤ mainApp)
    function detectMobileDevice() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º User Agent
        const isMobileUA = /Android|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ touch —Å–æ–±—ã—Ç–∏—è
        const hasTouch = 'ontouchstart' in window || navigator.maxTouchPoints > 0;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —ç–∫—Ä–∞–Ω–∞
        const isSmallScreen = window.innerWidth <= 768;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ —ç—Ç–æ –º–æ–±–∏–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ (Capacitor/Cordova)
        const isMobileApp = !!(window.Capacitor || window.cordova);
        
        // –°—á–∏—Ç–∞–µ–º –º–æ–±–∏–ª—å–Ω—ã–º, –µ—Å–ª–∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —É—Å–ª–æ–≤–∏–µ
        const isMobile = isMobileUA || isMobileApp || (hasTouch && isSmallScreen);
        
        console.log(`Mobile UA: ${isMobileUA}, Touch: ${hasTouch}, Small screen: ${isSmallScreen}, Mobile app: ${isMobileApp}`);
        
        return isMobile;
    }



    async function createTemporaryDownloadLink(fileName, content, contentType, shareDialogTitlePrefix) {
        try {
            console.log('–°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é —Å—Å—ã–ª–∫—É –¥–ª—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ (v2)...');
            showMobileDownloadStatus(_('mobile_download_preparing'), 'loading');

            // –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ –ø—Ä—è–º–æ –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
            const uniqueFileName = `qstium.com_${new Date().getTime()}_${fileName.replace(/[^a-zA-Z–∞-—è–ê-–Ø0-9.\-_]/g, '_')}`;

            // –§–æ—Ä–º–∏—Ä—É–µ–º URL —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
            const url = `${googleAppScriptUrl}?action=createTempFile&fileName=${encodeURIComponent(uniqueFileName)}`;

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ –∫–∞–∫ –ø—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å CORS preflight
            const response = await fetch(url, {
                method: 'POST',
                mode: 'cors', // –ò—Å–ø–æ–ª—å–∑—É–µ–º 'cors', —Ç–∞–∫ –∫–∞–∫ Google Script –≤–µ—Ä–Ω–µ—Ç JSON —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
                headers: {
                    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç
                    'Content-Type': 'text/plain;charset=utf-8',
                },
                body: content // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ –Ω–∞–ø—Ä—è–º—É—é
            });

            if (!response.ok) {
                throw new Error(`–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ${response.statusText}`);
            }

            const result = await response.json();

            if (result.success && result.downloadUrl) {
                showMobileDownloadLink(fileName, result.downloadUrl, shareDialogTitlePrefix);
            } else {
                throw new Error(result.error || '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—É—é —Å—Å—ã–ª–∫—É');
            }

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Å—Å—ã–ª–∫–∏:', error);
            showMobileDownloadFallback(fileName, content);
        }
    }




    function showMobileDownloadLink(fileName, downloadUrl, shareDialogTitlePrefix) {
        showMobileDownloadStatus(`
            <div style="text-align: center;">
                <h3 style="color: #28a745; margin-bottom: 15px;">${_('mobile_download_ready_title')}</h3>
                <p style="margin-bottom: 20px;"><strong>${fileName}</strong></p>
                <a href="${downloadUrl}" 
                   target="_blank" 
                   download="${fileName}"
                   style="
                       display: inline-block;
                       background: linear-gradient(135deg, #007bff, #0056b3);
                       color: white;
                       padding: 15px 30px;
                       text-decoration: none;
                       border-radius: 10px;
                       font-weight: bold;
                       font-size: 1.1em;
                       margin-bottom: 15px;
                       box-shadow: 0 4px 15px rgba(0,123,255,0.3);
                       transition: all 0.3s ease;
                   "
                   onmouseover="this.style.transform='translateY(-2px)'"
                   onmouseout="this.style.transform='translateY(0)'">
                    ${_('mobile_download_button')}
                </a>
                <p style="color: #6c757d; font-size: 0.9em; margin-top: 10px;">
                    ${_('mobile_download_link_info')}
                </p>
            </div>
        `, 'success');
    }


    /**
     * Fallback –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤: –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ
     * —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è, –µ—Å–ª–∏ –ø—Ä—è–º–∞—è —Å—Å—ã–ª–∫–∞ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∞.
     * @param {string} fileName - –ò–º—è —Ñ–∞–π–ª–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.
     * @param {string} content - –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞.
     */
    function showMobileDownloadFallback(fileName, content) {
        // –§–æ—Ä–º–∏—Ä—É–µ–º HTML-—Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É—è –∫–ª—é—á–∏ –∏–∑ LANG_PACK
        const modalHTML = `
            <div style="text-align: center;">
                <h3 style="color: #f39c12; margin-bottom: 15px;">${_('mobile_download_fallback_title')}</h3>
                <p style="margin-bottom: 15px;">${_('mobile_download_fallback_p1')}</p>
                <p style="margin-bottom: 20px;">${_('mobile_download_fallback_p2')} <strong>${fileName}</strong>:</p>
                <textarea 
                    readonly 
                    style="
                        width: 100%;
                        height: 200px;
                        font-family: monospace;
                        font-size: 0.9em;
                        border: 1px solid #ddd;
                        border-radius: 5px;
                        padding: 10px;
                        margin-bottom: 15px;
                        background-color: #f8f9fa;
                    "
                >${escapeHTML(content)}</textarea>
                <button 
                    onclick="copyToClipboardMain('${escapeForJS(content)}')" 
                    style="
                        background: #28a745;
                        color: white;
                        border: none;
                        padding: 10px 20px;
                        border-radius: 5px;
                        font-weight: bold;
                        cursor: pointer;
                        margin-right: 10px;
                    ">
                    ${_('mobile_download_copy_button')}
                </button>
            </div>
        `;

        // –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å –Ω—É–∂–Ω—ã–º –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º –∏ —Å—Ç–∏–ª–µ–º "–ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ"
        showMobileDownloadStatus(modalHTML, 'warning');
    }


    // –ü–æ–∫–∞–∑ —Å—Ç–∞—Ç—É—Å–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –Ω–∞ –º–æ–±–∏–ª—å–Ω–æ–º
    function showMobileDownloadStatus(message, type = 'info') {
        // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ, –µ—Å–ª–∏ –µ—Å—Ç—å
        const existingModal = document.getElementById('mobileDownloadModal');
        if (existingModal) {
            existingModal.remove();
        }
        
        const modal = document.createElement('div');
        modal.id = 'mobileDownloadModal';
        modal.style.cssText = `
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0,0,0,0.8);
            z-index: 9999;
            display: flex;
            justify-content: center;
            align-items: center;
            padding: 20px;
            box-sizing: border-box;
            animation: fadeIn 0.3s ease;
        `;
        
        const content = document.createElement('div');
        content.style.cssText = `
            background: white;
            padding: 30px;
            border-radius: 15px;
            max-width: 500px;
            width: 100%;
            max-height: 80%;
            overflow-y: auto;
            color: black;
            text-align: center;
            box-shadow: 0 10px 40px rgba(0,0,0,0.3);
            position: relative;
        `;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∑–∞–∫—Ä—ã—Ç–∏—è
        const closeBtn = document.createElement('button');
        closeBtn.innerHTML = '√ó';
        closeBtn.style.cssText = `
            position: absolute;
            top: 10px;
            right: 15px;
            background: none;
            border: none;
            font-size: 2em;
            cursor: pointer;
            color: #999;
            line-height: 1;
            padding: 0;
            width: 30px;
            height: 30px;
        `;
        closeBtn.onclick = () => modal.remove();
        
        content.appendChild(closeBtn);
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
        const messageDiv = document.createElement('div');
        messageDiv.innerHTML = message;
        content.appendChild(messageDiv);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ –¥–ª—è —Ç–∏–ø–∞ 'loading'
        if (type === 'loading') {
            const spinner = document.createElement('div');
            spinner.style.cssText = `
                border: 4px solid #f3f3f3;
                border-top: 4px solid #007bff;
                border-radius: 50%;
                width: 40px;
                height: 40px;
                animation: spin 1s linear infinite;
                margin: 20px auto;
            `;
            content.appendChild(spinner);
            
            // –î–æ–±–∞–≤–ª—è–µ–º CSS –∞–Ω–∏–º–∞—Ü–∏—é
            if (!document.getElementById('spinnerStyle')) {
                const style = document.createElement('style');
                style.id = 'spinnerStyle';
                style.textContent = `
                    @keyframes spin {
                        0% { transform: rotate(0deg); }
                        100% { transform: rotate(360deg); }
                    }
                    @keyframes fadeIn {
                        from { opacity: 0; }
                        to { opacity: 1; }
                    }
                `;
                document.head.appendChild(style);
            }
        }
        
        modal.appendChild(content);
        document.body.appendChild(modal);
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–∫—Ä—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥ –¥–ª—è —É—Å–ø–µ—à–Ω—ã—Ö –∑–∞–≥—Ä—É–∑–æ–∫
        if (type === 'success') {
            setTimeout(() => {
                if (modal.parentNode) {
                    modal.remove();
                }
            }, 30000);
        }
    }



        // –ü–æ–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ–π –∞–Ω–∏–º–∞—Ü–∏–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
    function showCopySuccess(button) {
        // –í—Ä–µ–º–µ–Ω–Ω–æ –º–µ–Ω—è–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
        const originalText = button.textContent;
        const originalStyle = button.style.cssText;
        
        button.textContent = _('copy_success_short');
        button.style.cssText = `
            ${originalStyle}
            background: #28a745 !important;
            transform: scale(1.1);
            transition: all 0.3s ease;
        `;
        button.classList.add('copied');
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π –≤–∏–¥ —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
        setTimeout(() => {
            button.textContent = originalText;
            button.style.cssText = originalStyle;
            button.classList.remove('copied');
        }, 2000);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        showCopyNotification('–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!');
    }


    /**
     * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–µ toast-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.
     * @param {string} message - –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è.
     * @param {'success' | 'error' | 'info'} type - –¢–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è —Å—Ç–∏–ª–∏–∑–∞—Ü–∏–∏.
     */
    function showToast(message, type = 'success') {
        // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –Ω–∞–ª–æ–∂–µ–Ω–∏—è
        const existingNotification = document.querySelector('.toast-notification');
        if (existingNotification) {
            existingNotification.remove();
        }

        const notification = document.createElement('div');
        notification.className = `toast-notification ${type}`; // –ü—Ä–∏–º–µ–Ω—è–µ–º CSS-–∫–ª–∞—Å—Å—ã
        notification.textContent = message;
        
        document.body.appendChild(notification);

        let timeoutId = null;

        const dismissNotification = () => {
            if (notification.parentNode) {
                notification.remove();
            }
            clearTimeout(timeoutId);
            window.removeEventListener('click', dismissNotification, true); // –ò—Å–ø–æ–ª—å–∑—É–µ–º capturing, —á—Ç–æ–±—ã —Å—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞–≤–µ—Ä–Ω—è–∫–∞
        };

        timeoutId = setTimeout(dismissNotification, 2000); // –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ 2 —Å–µ–∫—É–Ω–¥—ã

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º capturing-—Ñ–∞–∑—É, —á—Ç–æ–±—ã –∫–ª–∏–∫ –ø–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—é —Å—Ä–∞–±–æ—Ç–∞–ª –¥–æ –¥—Ä—É–≥–∏—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö –∫–ª–∏–∫–æ–≤
        setTimeout(() => {
            window.addEventListener('click', dismissNotification, true);
        }, 0);
    }


    /**
     * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥–æ–≤–æ–µ –æ–∫–Ω–æ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞, –µ—Å–ª–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ.
     * @param {string} text - –¢–µ–∫—Å—Ç –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è.
     */
    function showManualCopyDialog(text) {
        const modal = document.createElement('div');
        modal.style.cssText = `
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0,0,0,0.8);
            z-index: 10001;
            display: flex;
            justify-content: center;
            align-items: center;
            padding: 20px;
            box-sizing: border-box;
            animation: fadeIn 0.3s ease;
        `;
        
        const content = document.createElement('div');
        content.style.cssText = `
            background: white;
            padding: 25px;
            border-radius: 15px;
            max-width: 500px;
            width: 100%;
            max-height: 80%;
            overflow-y: auto;
            color: black;
            text-align: center;
            box-shadow: 0 10px 40px rgba(0,0,0,0.3);
            animation: slideUp 0.4s ease;
        `;
        
        // --- –ù–ê–ß–ê–õ–û –ò–ó–ú–ï–ù–ï–ù–ò–ô ---
        // –í–µ—Å—å HTML-–∫–æ–¥ —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∫–ª—é—á–∏ –∏–∑ LANG_PACK —á–µ—Ä–µ–∑ —Ñ—É–Ω–∫—Ü–∏—é _()
        content.innerHTML = `
            <h3 style="color: #f39c12; margin-bottom: 15px;">${_('manual_copy_title')}</h3>
            <p style="margin-bottom: 15px;">${_('manual_copy_p1')}</p>
            <textarea 
                readonly 
                style="
                    width: 100%;
                    height: 200px;
                    font-family: monospace;
                    font-size: 0.9em;
                    border: 2px solid #007bff;
                    border-radius: 8px;
                    padding: 10px;
                    margin-bottom: 15px;
                    background-color: #f8f9fa;
                    resize: vertical;
                "
                onclick="this.select()"
            >${escapeHTML(text)}</textarea>
            <div style="display: flex; gap: 10px; justify-content: center;">
                <button onclick="this.parentElement.parentElement.parentElement.remove()" 
                        style="
                            background: #6c757d;
                            color: white;
                            border: none;
                            padding: 10px 20px;
                            border-radius: 5px;
                            cursor: pointer;
                            font-weight: 500;
                        ">
                    ${_('manual_copy_close_button')}
                </button>
            </div>
        `;
        // --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–ô ---
        
        modal.appendChild(content);
        document.body.appendChild(modal);
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const textarea = content.querySelector('textarea');
        setTimeout(() => {
            textarea.focus();
            textarea.select();
        }, 100);
    }


    /**
     * –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∏–º–µ–µ—Ç –ª–∏ —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∞–≤–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ (—Ü–≤–µ—Ç–∞, –ª–µ–≥–µ–Ω–¥—ã).
     * @returns {boolean} - true, –µ—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ.
     */
    function canEditAIMetadata() {
        // –í –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö —á–∞—Ç–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç –≤—Å–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å.
        if (currentAIChatType === 'private') {
            return true;
        }
        // –í –ø—É–±–ª–∏—á–Ω—ã—Ö —á–∞—Ç–∞—Ö ‚Äî —Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü.
        if (currentAIChatType === 'public') {
            const audienceData = window.aiAudiencesCache?.find(a => a.id === currentAudienceId);
            return currentUser && audienceData && currentUser.uid === audienceData.ownerId;
        }
        // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∑–∞–ø—Ä–µ—â–∞–µ–º.
        return false;
    }


    // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–æ–±–∏–ª—å–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ (—É–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
    function isMobileDevice() {
        return /Android|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent) ||
               ('ontouchstart' in window) ||
               (navigator.maxTouchPoints > 0) ||
               !!(window.Capacitor || window.cordova);
    }

    // –î–æ–±–∞–≤–ª—è–µ–º CSS –∞–Ω–∏–º–∞—Ü–∏–∏, –µ—Å–ª–∏ –∏—Ö –µ—â–µ –Ω–µ—Ç
    if (!document.getElementById('copyAnimationStyles')) {
        const style = document.createElement('style');
        style.id = 'copyAnimationStyles';
        style.textContent = `
            @keyframes slideDown {
                from {
                    opacity: 0;
                    transform: translate(-50%, -20px);
                }
                to {
                    opacity: 1;
                    transform: translate(-50%, 0);
                }
            }
            
            @keyframes fadeOut {
                from { opacity: 1; }
                to { opacity: 0; }
            }
            
            .copy-success-animation {
                animation: success-bounce 0.6s ease;
            }
            
            @keyframes success-bounce {
                0%, 20%, 60%, 100% { transform: scale(1); }
                40% { transform: scale(1.1); }
                80% { transform: scale(1.05); }
            }
        `;
        document.head.appendChild(style);
    }




    // –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ JavaScript
    function escapeForJS(str) {
        return str.replace(/\\/g, '\\\\').replace(/'/g, "\\'").replace(/"/g, '\\"').replace(/\n/g, '\\n').replace(/\r/g, '\\r');
    }

    // –û—Å—Ç–∞–≤–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –±—Ä–∞—É–∑–µ—Ä–Ω–æ–≥–æ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    function downloadFileBrowserFallback(fileName, content, contentType) {
        try {
            const blob = new Blob([content], { type: contentType });
            const link = document.createElement('a');
            link.href = URL.createObjectURL(blob);
            link.download = fileName;
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
            URL.revokeObjectURL(link.href);
            console.log(`–§–∞–π–ª —Å–∫–∞—á–∞–Ω —á–µ—Ä–µ–∑ –±—Ä–∞—É–∑–µ—Ä: ${fileName}`);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –±—Ä–∞—É–∑–µ—Ä–Ω–æ–≥–æ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è:', error);
            alert(_('error_download_generic_with_filename').replace('{fileName}', fileName));
        }
    }

    // --- –ù–û–í–´–ô –ö–û–î ---
    function initServiceWorkerUpdater() {
        if ('serviceWorker' in navigator) {
            navigator.serviceWorker.register('service-worker.js')
                .then(reg => {
                    // 1. –°–ª—É—à–∞–µ–º —Å–æ–±—ã—Ç–∏–µ 'updatefound'
                    reg.onupdatefound = () => {
                        const installingWorker = reg.installing;
                        if (installingWorker) {
                            // 2. –ñ–¥–µ–º, –ø–æ–∫–∞ –Ω–æ–≤—ã–π SW —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è
                            installingWorker.onstatechange = () => {
                                if (installingWorker.state === 'installed') {
                                    // 3. –ï—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π SW, –∑–Ω–∞—á–∏—Ç —ç—Ç–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
                                    if (navigator.serviceWorker.controller) {
                                        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞—à—É –ø–ª–∞—à–∫—É
                                        showUpdateNotification(installingWorker);
                                    }
                                }
                            };
                        }
                    };
                })
                .catch(error => {
                    console.error('–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ Service Worker –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', error);
                });

            // 4. –°–ª—É—à–∞–µ–º —Å–º–µ–Ω—É –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞ –∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
            navigator.serviceWorker.oncontrollerchange = () => {
                console.log('–ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –∏–∑–º–µ–Ω–∏–ª—Å—è, –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã...');
                window.location.reload();
            };
        }
    }

    function showUpdateNotification(worker) {
        if (updateNotification && updateBtn) {
            updateNotification.classList.remove('hidden');
            
            // --- –ò–ó–ú–ï–ù–ï–ù–ò–Ø –ó–î–ï–°–¨ ---
            const handleUpdateClick = () => {
                // 1. –ë–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç—å –¥–≤–æ–π–Ω–æ–µ –Ω–∞–∂–∞—Ç–∏–µ
                updateBtn.disabled = true;
                updateBtn.textContent = '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ...'; // –î–∞–µ–º –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å

                // 2. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –Ω–æ–≤–æ–º—É SW
                worker.postMessage({ action: 'skipWaiting' });
                
                // 3. –°–∫—Ä—ã–≤–∞–µ–º –±–∞–Ω–Ω–µ—Ä (—ç—Ç–æ –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å)
                // updateNotification.classList.add('hidden');
            };

            // –£–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ä—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫, –µ—Å–ª–∏ –æ–Ω –±—ã–ª, –∏ –Ω–∞–∑–Ω–∞—á–∞–µ–º –Ω–æ–≤—ã–π
            updateBtn.onclick = handleUpdateClick;
        }
    }

    function updateQuickModeToggleVisual() {
        if (quickModeToggle) {
            quickModeToggle.classList.toggle('active', quickModeEnabled);
            quickModeToggle.title = quickModeEnabled ? _('quick_mode_title_on') : _('quick_mode_title_off');
        }
    }

    function toggleQuickMode() {
        quickModeEnabled = !quickModeEnabled;
        localStorage.setItem('quizQuickModeEnabled', quickModeEnabled);
        updateQuickModeToggleVisual();
    }

    function updateTriggerWordToggleVisual() {
        if (triggerWordToggle) {
            triggerWordToggle.classList.toggle('active', triggerWordModeEnabled);
            triggerWordToggle.title = triggerWordModeEnabled ? _('trigger_mode_title_on') : _('trigger_mode_title_off');
        }
    }

    function toggleTriggerWordMode() {
        triggerWordModeEnabled = !triggerWordModeEnabled;
        updateTriggerWordToggleVisual();
        if (!quizArea.classList.contains('hidden') && questionsForCurrentQuiz.length > 0) {
            loadQuestion(currentQuestionIndex);
        }
    }

    function tokenizeText(text) {
        return text.split(/(\s+|[.,;:!?()"‚Äú‚Äù¬´¬ª-]+)/g).filter(token => token.length > 0);
    }

    function renderQuestionTextWithTriggers(question) {
        const tokens = tokenizeText(question.text);
        let html = '';
        let wordIndex = 0;
        tokens.forEach(token => {
            const isWord = /\S/.test(token) && !/^[.,;:!?()"‚Äú‚Äù¬´¬ª-]+$/.test(token);
            if (isWord) {
                const isTriggered = question.triggeredWordIndices && question.triggeredWordIndices.includes(wordIndex);
                let spanClasses = [];
                if (isTriggered) {
                    spanClasses.push('triggered-word');
                }
                if (triggerWordModeEnabled) {
                    spanClasses.push('triggerable-word');
                }
                if (spanClasses.length > 0) {
                    html += `<span class="${spanClasses.join(' ')}" data-word-index="${wordIndex}">${token}</span>`;
                } else {
                    html += token;
                }
                wordIndex++;
            } else {
                html += token;
            }
        });
        return html;
    }




    function handleWordTriggerClick(event) {
        if (!triggerWordModeEnabled) return;
        const clickedElement = event.target.closest('.triggerable-word, .triggered-word');
        if (!clickedElement || !clickedElement.dataset.hasOwnProperty('wordIndex')) return;
        
        event.stopPropagation();
        event.preventDefault();

        const wordIndex = parseInt(clickedElement.dataset.wordIndex, 10);
        
        // --- –ù–ê–ß–ê–õ–û –ò–ó–ú–ï–ù–ï–ù–ò–ô: –õ–æ–≥–∏–∫–∞ –≤—ã–±–æ—Ä–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ –¥–ª—è –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ ---

        let questionObjectToModify; // –≠—Ç–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –±—É–¥–µ—Ç —Ö—Ä–∞–Ω–∏—Ç—å –ª–∏–±–æ –æ—Ä–∏–≥–∏–Ω–∞–ª, –ª–∏–±–æ –ø–µ—Ä–µ–≤–æ–¥

        // 1. –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —Å –∫–∞–∫–∏–º –æ–±—ä–µ–∫—Ç–æ–º –º—ã —Å–µ–π—á–∞—Å —Ä–∞–±–æ—Ç–∞–µ–º
        if (isTranslateModeEnabled) {
            // –ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω –ø–µ—Ä–µ–≤–æ–¥, –Ω–∞—à–∞ —Ü–µ–ª—å - –æ–±—ä–µ–∫—Ç –ø–µ—Ä–µ–≤–æ–¥–∞ –≤ –∫—ç—à–µ
            const lang = localStorage.getItem('appLanguage') || 'ru';
            const originalQuestion = questionsForCurrentQuiz[currentQuestionIndex];
            const cacheKey = getCacheKey(originalQuestion.originalIndex, lang);
            
            // –ï—Å–ª–∏ –ø–µ—Ä–µ–≤–æ–¥ –µ—Å—Ç—å –≤ –∫—ç—à–µ, –æ–Ω —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –Ω–∞—à–µ–π —Ü–µ–ª—å—é
            if (currentQuizTranslations.has(cacheKey)) {
                questionObjectToModify = currentQuizTranslations.get(cacheKey);
            } else {
                // –ï—Å–ª–∏ –ø–µ—Ä–µ–≤–æ–¥–∞ –ø–æ—á–µ–º—É-—Ç–æ –Ω–µ—Ç, –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π —Ä–∞–±–æ—Ç–∞–µ–º —Å –æ—Ä–∏–≥–∏–Ω–∞–ª–æ–º
                questionObjectToModify = questionsForCurrentQuiz[currentQuestionIndex];
            }
        } else {
            // –ï—Å–ª–∏ –ø–µ—Ä–µ–≤–æ–¥ –≤—ã–∫–ª—é—á–µ–Ω, –Ω–∞—à–∞ —Ü–µ–ª—å - —ç—Ç–æ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –≤–æ–ø—Ä–æ—Å
            questionObjectToModify = questionsForCurrentQuiz[currentQuestionIndex];
        }

        // 2. –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤ triggeredWordIndices –¢–û–õ–¨–ö–û —É —Ü–µ–ª–µ–≤–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞
        if (!questionObjectToModify.triggeredWordIndices) {
            questionObjectToModify.triggeredWordIndices = [];
        }

        const indexInArray = questionObjectToModify.triggeredWordIndices.indexOf(wordIndex);
        if (indexInArray > -1) {
            questionObjectToModify.triggeredWordIndices.splice(indexInArray, 1);
        } else {
            questionObjectToModify.triggeredWordIndices.push(wordIndex);
            // –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Ñ–ª–∞–≥, —á—Ç–æ —Ç—Ä–∏–≥–≥–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏—Å—å, —Å—Ç–∞–≤–∏–º –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ
            if (!triggerWordsUsedInQuiz && questionObjectToModify.triggeredWordIndices.length > 0) {
                triggerWordsUsedInQuiz = true;
            }
        }

        // 3. –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç, –∏—Å–ø–æ–ª—å–∑—É—è —Ç–æ—Ç –∂–µ —Å–∞–º—ã–π –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç
        questionTextEl.innerHTML = renderQuestionTextWithTriggers(questionObjectToModify);

        // 4. –ó–∞–Ω–æ–≤–æ –Ω–∞–≤–µ—à–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–ª–∏–∫–æ–≤ –Ω–∞ –Ω–æ–≤—ã–µ <span>
        addTriggerClickListeners();
        
        // --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–ô ---
    }


    function addTriggerClickListeners() {
        if (triggerWordModeEnabled) {
            questionTextEl.querySelectorAll('.triggerable-word, .triggered-word').forEach(span => {
                span.removeEventListener('click', handleWordTriggerClick);
                span.addEventListener('click', handleWordTriggerClick);
            });
        }
    }

    function ÿ±Ÿàÿ≥ŸäŸÅÿßŸäQuestionText(text) {
        const cleanedText = text.replace(/[.,\/#!$%\^&\*;:{}=\-_`~()?]/g,"").replace(/~+/g, '');
        let result = '';
        const wordsAndNumbers = cleanedText.match(/[–∞-—è–ê-–Øa-zA-Z]+|\d+/g) || [];
        wordsAndNumbers.forEach(part => {
            if (/\d+/.test(part)) {
                result += part;
            } else if (/[–∞-—è–ê-–Øa-zA-Z]+/.test(part)) {
                result += part.charAt(0);
            }
        });
        return result.toUpperCase();
    }

    function generateCheatSheet(questions) {
        let cheatSheet = '';
        const questionsForSheet = questions.map(q => ({ ...q, }));
        const sortedQuestions = [...questionsForSheet].sort((a, b) => a.text.localeCompare(b.text, 'ru', { sensitivity: 'base' }));
        sortedQuestions.forEach(question => {
            const ÿ±Ÿàÿ≥ŸäŸÅÿßŸädQuestion = ÿ±Ÿàÿ≥ŸäŸÅÿßŸäQuestionText(question.text);
            let correctAnswerText = question.options.find(opt => opt.isCorrect)?.text || '';
            cheatSheet += `${ÿ±Ÿàÿ≥ŸäŸÅÿßŸädQuestion}\n+ ${correctAnswerText}\n\n`;
        });
        return cheatSheet.trim();
    }




    function handleGenerateCheatSheet() {
        if (allParsedQuestions.length === 0) {
            alert(_('error_load_file_first'));
            return;
        }
        let questionsToProcess = [];
        let startRange = parseInt(questionRangeStartInput.value);
        let endRange = parseInt(questionRangeEndInput.value);
        if (!isNaN(startRange) && !isNaN(endRange) && startRange >= 1 && endRange >= startRange && endRange <= allParsedQuestions.length) {
            questionsToProcess = allParsedQuestions.slice(startRange - 1, endRange);
        } else {
            questionsToProcess = allParsedQuestions;
        }
        if (questionsToProcess.length === 0) {
            alert(_('error_no_questions_for_cheatsheet'));
            return;
        }
        generatedCheatSheetContent = generateCheatSheet(questionsToProcess);
        cheatSheetOutputEl.value = generatedCheatSheetContent;
        quizSetupArea.classList.add('hidden');
        quizArea.classList.add('hidden');
        resultsArea.classList.add('hidden');
        cheatSheetResultArea.classList.remove('hidden');
    }




    async function handleDownloadOrShareCheatSheet() {
        if (!generatedCheatSheetContent) {
            alert(_('error_cheat_sheet_first'));
            return;
        }
        const fileNameBase = originalFileNameForReview ? originalFileNameForReview.replace(/\.qst$/i, '').replace(/\.txt$/i, '') : 'cheatsheet';
        const fileName = `${fileNameBase}_spora.txt`;
        await downloadOrShareFile(fileName, generatedCheatSheetContent, 'text/plain;charset=utf-8', _('share_title_cheatsheet'));
    }


    // –ù–û–í–´–ô –£–ß–ê–°–¢–û–ö –ö–û–î–ê
    function saveRecentFile(fileName, fileContent) {
        let recentFiles = JSON.parse(localStorage.getItem(RECENT_FILES_STORAGE_KEY)) || [];
        recentFiles = recentFiles.filter(f => f.name !== fileName);

        // --- –ù–ê–ß–ê–õ–û –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞ ---
        const isPdf = fileName.toLowerCase().endsWith('.pdf');
        // –î–ª—è PDF —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –∏–º—è, –∞ –∫–æ–Ω—Ç–µ–Ω—Ç –¥–µ–ª–∞–µ–º –ø—É—Å—Ç—ã–º, —á—Ç–æ–±—ã –Ω–µ –∑–∞–±–∏–≤–∞—Ç—å localStorage
        const contentToStore = isPdf ? '' : fileContent; 
        
        recentFiles.unshift({ name: fileName, content: contentToStore });
        // --- –ö–û–ù–ï–¶ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø ---

        if (recentFiles.length > MAX_RECENT_FILES) {
            recentFiles.pop();
        }
        try {
            localStorage.setItem(RECENT_FILES_STORAGE_KEY, JSON.stringify(recentFiles));
        } catch (e) {
            console.error("–û—à–∏–±–∫–∞ localStorage:", e);
            localStorage.removeItem(RECENT_FILES_STORAGE_KEY);
        }
        loadRecentFiles();

        // –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Å –ø–æ–ª–Ω—ã–º –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º
        ChatModule.uploadFileToServer(fileName, fileContent, googleAppScriptUrl); 
    }


    function loadRecentFiles() {
        const recentFilesData = JSON.parse(localStorage.getItem(RECENT_FILES_STORAGE_KEY)) || [];
        recentFilesListEl.innerHTML = '';
        if (recentFilesData.length > 0) {
            recentFilesArea.classList.remove('hidden');
            recentFilesData.forEach(fileData => {
                const li = document.createElement('li');
                li.textContent = fileData.name;
                
                // --- –ù–ê–ß–ê–õ–û –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞ ---
                if (fileData.name.toLowerCase().endsWith('.pdf')) {
                    li.title = 'PDF-—Ñ–∞–π–ª—ã –Ω–µ–ª—å–∑—è –æ—Ç–∫—Ä—ã—Ç—å –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –∑–∞–Ω–æ–≤–æ.';
                    li.style.opacity = '0.6';
                    li.style.cursor = 'not-allowed';
                } else {
                    li.title = _('tooltip_load_file').replace('{name}', fileData.name);
                    li.addEventListener('click', () => {
                        if (!fileData.content) {
                            alert('–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —ç—Ç–æ–≥–æ —Ñ–∞–π–ª–∞ –Ω–µ –±—ã–ª–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –µ–≥–æ –∑–∞–Ω–æ–≤–æ.');
                            return;
                        }
                        fileInput.value = ''; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∏–Ω–ø—É—Ç
                        processFile(fileData.name, fileData.content);
                    });
                }
                // --- –ö–û–ù–ï–¶ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø ---
                
                recentFilesListEl.appendChild(li);
            });
        } else {
            recentFilesArea.classList.add('hidden');
        }
    }



    async function handleFileSelect(event) {
        const files = event.target.files;
        if (!files || files.length === 0) return;

        // --- –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê ---
        // –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω –æ–¥–∏–Ω PDF-—Ñ–∞–π–ª, –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å –∫–∞—Ä—Ç–∏–Ω–∫–∞–º–∏
        if (files.length === 1 && files[0].name.toLowerCase().endsWith('.pdf')) {
            showGlobalLoader('–û–±—Ä–∞–±–æ—Ç–∫–∞ PDF —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏...');
            try {
                await processPdfWithImages(files[0]);
            } catch (error) {
                console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ PDF —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏:", error);
                alert(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å PDF: ${error.message}`);
            } finally {
                hideGlobalLoader();
            }
            return; // –ó–∞–≤–µ—Ä—à–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
        }
        // --- –ö–û–ù–ï–¶ –ù–û–í–û–ô –õ–û–ì–ò–ö–ò ---

        // –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–∞–π–ª–æ–≤ –∏–ª–∏ –Ω–µ PDF, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—É—é –ª–æ–≥–∏–∫—É –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
        showGlobalLoader('–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤...');

        let combinedText = '';
        let combinedFileName = files.length > 1 ? 'Combined_Test' : files[0].name;

        for (const file of files) {
            if (file.name.toLowerCase().endsWith('.pdf')) {
                try {
                    const pdfText = await extractTextFromPdf(file);
                    const formattedPdfText = preformatPddText(pdfText);
                    combinedText += formattedPdfText + '\n\n';
                } catch (error) {
                    console.error(`–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∏–∑ PDF ${file.name}:`, error);
                    alert(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å PDF-—Ñ–∞–π–ª: ${file.name}`);
                }
            } else {
                try {
                    const text = await readFileAsText(file);
                    combinedText += text + '\n\n';
                } catch (error) {
                    console.error(`–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ ${file.name}:`, error);
                }
            }
        }
        
        hideGlobalLoader();

        if (combinedText.trim()) {
            processFile(combinedFileName, combinedText);
        } else {
            alert('–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤.');
        }
    }


    // –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç inline/XObject.
    // –ï—Å–ª–∏ –ø—Ä—è–º—ã—Ö –∫–∞—Ä—Ç–∏–Ω–æ–∫ –Ω–µ—Ç –∏–ª–∏ –æ–±—ä–µ–∫—Ç "–Ω–µ –≥–æ—Ç–æ–≤" ‚Äî –¥–µ–ª–∞–µ—Ç —Ñ–æ–ª–±—ç–∫: —Ä–µ–Ω–¥–µ—Ä–∏—Ç –≤—Å—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ PNG.
    // –í–û–ó–í–†–ê–©–ê–ï–¢: { images: string[], isFallback: boolean }
    async function extractImagesFromPage(page) {
      const images = [];
      let isFallbackRender = false; // –§–ª–∞–≥, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–∫–∞–∂–µ—Ç, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –ª–∏ –º—ã "–∑–∞–ø–∞—Å–Ω–æ–π –ø–ª–∞–Ω"

      // –ü—Ä–µ–≤—Ä–∞—â–∞–µ—Ç "—Å—ã—Ä—ã–µ" –¥–∞–Ω–Ω—ã–µ (RGBA/RGB/Gray) –≤ dataURL
      function toDataURL(raw, w, h) {
        if (!raw || !w || !h) return null;
        const data =
          raw.data ||
          (raw.imgData && raw.imgData.data) ||
          (raw.bitmap && raw.bitmap.data) ||
          raw.rgba ||
          null;
        if (!data) return null;

        const canvas = document.createElement('canvas');
        canvas.width = w;
        canvas.height = h;
        const ctx = canvas.getContext('2d', { willReadFrequently: true });
        const imgData = ctx.createImageData(w, h);
        const dest = imgData.data;

        if (data.length === dest.length) {
          // —É–∂–µ RGBA
          dest.set(data);
        } else if (data.length === (dest.length / 4) * 3) {
          // RGB -> RGBA
          for (let si = 0, di = 0; si < data.length; ) {
            dest[di++] = data[si++]; // R
            dest[di++] = data[si++]; // G
            dest[di++] = data[si++]; // B
            dest[di++] = 255;        // A
          }
        } else if (data.length === dest.length / 4) {
          // Gray -> RGBA
          for (let si = 0, di = 0; si < data.length; ) {
            const g = data[si++];
            dest[di++] = g; dest[di++] = g; dest[di++] = g; dest[di++] = 255;
          }
        } else {
          return null; // –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
        }

        ctx.putImageData(imgData, 0, 0);
        return canvas.toDataURL('image/png');
      }

      try {
        const opList = await page.getOperatorList();
        const { fnArray, argsArray } = opList;

        for (let idx = 0; idx < fnArray.length; idx++) {
          const fn = fnArray[idx];

          if (fn === pdfjsLib.OPS.paintInlineImageXObject) {
            const obj = argsArray[idx][0];
            const url = toDataURL(obj, obj && obj.width, obj && obj.height);
            if (url) images.push(url);
            continue;
          }

          if (fn === pdfjsLib.OPS.paintImageXObject) {
            const key = argsArray[idx][0];
            let obj = null;
            try {
              if (page.objs && typeof page.objs.get === 'function' && (!page.objs.has || page.objs.has(key))) {
                obj = page.objs.get(key);
              }
            } catch (_) {}
            if (!obj) {
              try {
                if (page.commonObjs && typeof page.commonObjs.get === 'function' && (!page.commonObjs.has || page.commonObjs.has(key))) {
                  obj = page.commonObjs.get(key);
                }
              } catch (_) {}
            }
            if (obj) {
              const w = obj.width || (obj.bitmap && obj.bitmap.width);
              const h = obj.height || (obj.bitmap && obj.bitmap.height);
              const url = toDataURL(obj, w, h);
              if (url) images.push(url);
            }
          }
        }
      } catch (e) {
        console.warn('extractImagesFromPage: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è fallback.', e);
      }

      // –§–æ–ª–±—ç–∫: —Ä–µ–Ω–¥–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤ PNG, –µ—Å–ª–∏ "–Ω–∞—Å—Ç–æ—è—â–∏—Ö" –∫–∞—Ä—Ç–∏–Ω–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
      if (images.length === 0) {
        isFallbackRender = true; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥, —á—Ç–æ —ç—Ç–æ –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç
        try {
          const baseViewport = page.getViewport({ scale: 1 });
          const TARGET_CSS_WIDTH = Math.min(1200, Math.floor(window.innerWidth * 0.9));
          const DPR = Math.max(1, window.devicePixelRatio || 1);
          const scale = Math.max(2, (TARGET_CSS_WIDTH * DPR) / baseViewport.width);
          const viewport = page.getViewport({ scale });

          const canvas = document.createElement('canvas');
          canvas.width  = Math.ceil(viewport.width);
          canvas.height = Math.ceil(viewport.height);
          const ctx = canvas.getContext('2d', { alpha: false });
          ctx.imageSmoothingEnabled = true;
          ctx.imageSmoothingQuality = 'high';

          await page.render({ canvasContext: ctx, viewport }).promise;
          images.push(canvas.toDataURL('image/png'));
        } catch (err) {
          console.error('extractImagesFromPage: —Ñ–æ–ª–±—ç–∫-—Ä–µ–Ω–¥–µ—Ä –Ω–µ —É–¥–∞–ª—Å—è.', err);
          isFallbackRender = false; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥, –µ—Å–ª–∏ –¥–∞–∂–µ —Ñ–æ–ª–±—ç–∫ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª
        }
      }

      return { images: images, isFallback: isFallbackRender };
    }




    /**
     * –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ä—Å–µ—Ä –¥–ª—è –º–Ω–æ–≥–æ—è–∑—ã—á–Ω—ã—Ö PDF-–±–ª–æ–∫–æ–≤ —Ñ–æ—Ä–º–∞—Ç–∞ "–í–æ–ø—Ä–æ—Å No...".
     * –§–ò–ù–ê–õ–¨–ù–ê–Ø –í–ï–†–°–ò–Ø: –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –∏ –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω–∞—è –ª–æ–≥–∏–∫–∞.
     * @param {string} text - –¢–µ–∫—Å—Ç –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ (–æ–±—ã—á–Ω–æ —Å–æ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã PDF).
     * @returns {Array<object>} - –ú–∞—Å—Å–∏–≤ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ QST.
     */
    function parseTrilingualPdfBlock(text) {
        // –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –±–ª–æ–∫–∞ –æ–¥–Ω–æ–≥–æ —è–∑—ã–∫–∞.
        const parseLanguageBlock = (lines) => {
            if (!lines || lines.length < 2) return null;

            const optionMarkerRegex = /^\s*\d+[\.\)]\s*/;

            // 1. –ù–∞—Ö–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–∏, –∫–æ—Ç–æ—Ä–∞—è —è–≤–ª—è–µ—Ç—Å—è –≤–∞—Ä–∏–∞–Ω—Ç–æ–º –æ—Ç–≤–µ—Ç–∞.
            const firstOptionIndex = lines.findIndex(line => optionMarkerRegex.test(line.trim()));
            
            // –ï—Å–ª–∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, —Å—á–∏—Ç–∞–µ–º –±–ª–æ–∫ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º.
            if (firstOptionIndex === -1) return null;

            // 2. –í—Å—ë –¥–æ —ç—Ç–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞ - —ç—Ç–æ —Å—Ç—Ä–æ–∫–∏ –≤–æ–ø—Ä–æ—Å–∞.
            const questionLines = lines.slice(0, firstOptionIndex)
                .map(line => line.trim())
                .filter(line => line); // –£–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏

            // 3. –í—Å—ë –Ω–∞—á–∏–Ω–∞—è —Å —ç—Ç–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞ - —ç—Ç–æ —Å—Ç—Ä–æ–∫–∏ —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏.
            const optionLinesRaw = lines.slice(firstOptionIndex);
            
            if (questionLines.length === 0 || optionLinesRaw.length === 0) return null;

            // 4. –°–∫–ª–µ–∏–≤–∞–µ–º –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã.
            const optionLinesProcessed = [];
            let currentOption = '';
            for (const line of optionLinesRaw) {
                if (optionMarkerRegex.test(line.trim())) {
                    if (currentOption) optionLinesProcessed.push(currentOption);
                    currentOption = line.trim();
                } else if (currentOption) {
                    currentOption += ' ' + line.trim();
                }
            }
            if (currentOption) optionLinesProcessed.push(currentOption);

            // 5. –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç –≤–æ–ø—Ä–æ—Å–∞
            const questionText = questionLines.join(' ').trim();
            const options = [];
            let correctAnswer = null;

            optionLinesProcessed.forEach(line => {
                let cleanText = line.replace(optionMarkerRegex, '').trim();
                if (cleanText.endsWith('*')) {
                    cleanText = cleanText.slice(0, -1).trim();
                    correctAnswer = cleanText;
                }
                options.push(cleanText);
            });

            if (questionText && correctAnswer) {
                return { text: questionText, options: options, correctAnswer: correctAnswer };
            }
            return null;
        };

        // –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ (–æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π, –æ–Ω–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ)
        const russianQuestions = [];
        const kazakhQuestions = [];
        const englishQuestions = [];

        const blocks = text.split(/(?=^–í–æ–ø—Ä–æ—Å (No|‚Ññ) \d+)/m).filter(b => b.trim() !== '');

        for (const block of blocks) {
            const lines = block.split('\n');
            const kazakhStartRegex = /[”ô—ñ“£“ì“Ø“±“õ”©“ª]/i;
            const englishStartRegex = /\b(is|are|what|when|allowed|prohibited|which|driver|vehicle)\b/i;

            let kazakhStartIndex = lines.findIndex(line => kazakhStartRegex.test(line));
            if (kazakhStartIndex === -1) kazakhStartIndex = lines.length;

            let englishStartIndex = lines.findIndex((line, index) => index >= kazakhStartIndex && englishStartRegex.test(line));
            if (englishStartIndex === -1) englishStartIndex = lines.length;

            const russianLines = lines.slice(0, kazakhStartIndex);
            const kazakhLines = lines.slice(kazakhStartIndex, englishStartIndex);
            const englishLines = lines.slice(englishStartIndex);

            const rusResult = parseLanguageBlock(russianLines);
            if (rusResult) russianQuestions.push(rusResult);

            const kazResult = parseLanguageBlock(kazakhLines);
            if (kazResult) kazakhQuestions.push(kazResult);

            const engResult = parseLanguageBlock(englishLines);
            if (engResult) englishQuestions.push(engResult);
        }

        const allQuestions = [...russianQuestions, ...kazakhQuestions, ...englishQuestions];
        return allQuestions.map(q => ({
            text: q.text,
            options: q.options.map(optText => ({
                text: optText,
                isCorrect: optText === q.correctAnswer
            })),
            correctAnswerIndex: q.options.findIndex(optText => optText === q.correctAnswer)
        }));
    }





    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫ –≤–æ–ø—Ä–æ—Å–∞ (–∫—ç—à–∏—Ä—É–µ–º –≤ q.lang, —á—Ç–æ–±—ã –Ω–µ —Å—á–∏—Ç–∞—Ç—å –∫–∞–∂–¥—ã–π —Ä–∞–∑)
    function getQuestionLang(q) {
      if (!q.lang) {
        try { q.lang = typeof detectLanguage === 'function' ? detectLanguage(q.text) : 'ru'; }
        catch { q.lang = 'ru'; }
      }
      return q.lang;
    }

    // –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Å—Å–∏–≤ –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞
    function getQuestionsByLanguage(lang) {
      return allParsedQuestions.filter(q =>
        q.type !== 'category' &&
        (lang === 'all' || getQuestionLang(q) === lang)
      );
    }

    // –û–±–Ω–æ–≤–ª—è–µ—Ç ¬´–≤—Å–µ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤¬ª –∏ —Å–ª–∞–π–¥–µ—Ä—ã –ø–æ–¥ –≤—ã–±—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫
    function updateUiForLanguage(lang) {
      const filtered = getQuestionsByLanguage(lang);
      const total = filtered.length;

      // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å—å "(–≤—Å–µ–≥–æ N –≤–æ–ø—Ä–æ—Å–æ–≤)"
      if (typeof _ === 'function' && window.maxQuestionsInfoEl) {
        maxQuestionsInfoEl.textContent =
          `(${_('total_questions_label')} ${total} ${_('questions_label_for_range')})`;
      }

      // –ü–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –∏ ¬´—Å–ª—É—á–∞–π–Ω—ã–π –Ω–∞–±–æ—Ä¬ª
      if (typeof initDualSlider === 'function')  initDualSlider(total);
      if (typeof initSingleSlider === 'function') initSingleSlider();

      // –ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ–ª–µ ¬´–°–ª—É—á–∞–π–Ω—ã–π –Ω–∞–±–æ—Ä –∏–∑ X¬ª, –ø–æ–¥—Ä–µ–∂–µ–º max –ø–æ–¥ total
      const rndInput = document.getElementById('randomQuestionsCount');
      if (rndInput) {
        const val = Math.min(parseInt(rndInput.value || 50, 10), Math.max(total, 1));
        rndInput.max = Math.max(total, 1);
        rndInput.value = val;
      }

      // –°–æ—Ö—Ä–∞–Ω–∏–º ¬´—Ä–∞–±–æ—á–∏–π¬ª —Å–ø–∏—Å–æ–∫ –Ω–∞ –±—É–¥—É—â–µ–µ (–µ—Å–ª–∏ —Å—Ç–∞—Ä—Ç —Ç–µ—Å—Ç–∞ —á–∏—Ç–∞–µ—Ç –æ—Ç—Å—é–¥–∞)
      window.questionsFilteredByLang = filtered;
    }

    // –ù–∞–≤–µ—à–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞ —Å–µ–ª–µ–∫—Ç —è–∑—ã–∫–æ–≤ –∏ –¥–µ–ª–∞–µ–º –ø–µ—Ä–≤–∏—á–Ω—ã–π –ø–µ—Ä–µ—Å—á—ë—Ç
    function attachLanguageFilterBehavior() {
      const select = document.getElementById('languageFilter');
      if (select && !select.__langBound) {
        select.addEventListener('change', (e) => {
            updateUiForLanguage(e.target.value);
            // –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–∑–æ–≤ –¥–ª—è –ø–µ—Ä–µ—Å—á–µ—Ç–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
            updateQuestionCountForFilters(); 
        });
        select.__langBound = true;
      }
      // –ü–µ—Ä–≤–∏—á–Ω—ã–π –≤—ã–∑–æ–≤
      updateUiForLanguage(select ? select.value : 'all');
    }




    function handleReadingModeChange() {
        if (readingModeCheckbox.checked) {
            // –ï—Å–ª–∏ —Ä–µ–∂–∏–º —á—Ç–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω, –æ—Ç–∫–ª—é—á–∞–µ–º –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –Ω–µ–Ω—É–∂–Ω—ã–µ –æ–ø—Ü–∏–∏
            shuffleQuestionsCheckbox.checked = false;
            shuffleQuestionsCheckbox.disabled = true;
            shuffleAnswersCheckbox.checked = false;
            shuffleAnswersCheckbox.disabled = true;
        } else {
            // –ï—Å–ª–∏ –≤—ã–∫–ª—é—á–µ–Ω, —Å–Ω–æ–≤–∞ –¥–µ–ª–∞–µ–º –æ–ø—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏
            shuffleQuestionsCheckbox.disabled = false;
            shuffleAnswersCheckbox.disabled = false;
        }
    }

    // –ù–û–í–ê–Ø –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –¥–ª—è —á—Ç–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤
    function readFileAsText(file) {
        return new Promise((resolve, reject) => {
            const reader = new FileReader();
            reader.onload = (e) => resolve(e.target.result);
            reader.onerror = (e) => reject(e.target.error);
            reader.readAsText(file, 'UTF-8');
        });
    }

    // –ù–û–í–ê–Ø –£–ú–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∏–∑ PDF —Å–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π
    async function extractTextFromPdf(file) {
        const arrayBuffer = await file.arrayBuffer();
        const pdf = await pdfjsLib.getDocument({ data: arrayBuffer }).promise;
        let fullText = '';

        for (let i = 1; i <= pdf.numPages; i++) {
            const page = await pdf.getPage(i);
            const textContent = await page.getTextContent();
            
            if (!textContent.items || textContent.items.length === 0) {
                continue;
            }

            // –°–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –±–ª–æ–∫–∏ —Å–Ω–∞—á–∞–ª–∞ –ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏, –ø–æ—Ç–æ–º –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏
            const items = textContent.items.sort((a, b) => {
                const y1 = a.transform[5];
                const y2 = b.transform[5];
                if (Math.abs(y1 - y2) > 1) { // –ï—Å–ª–∏ —Ä–∞–∑–Ω–∏—Ü–∞ –ø–æ Y —Å—É—â–µ—Å—Ç–≤–µ–Ω–Ω–∞, —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ Y
                    return y2 - y1;
                }
                return a.transform[4] - b.transform[4]; // –ò–Ω–∞—á–µ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ X
            });
            
            let lastY = items[0].transform[5];
            let pageText = '';

            for (const item of items) {
                const currentY = item.transform[5];
                // –ï—Å–ª–∏ Y-–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ —Å–∏–ª—å–Ω–æ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å, —ç—Ç–æ –Ω–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞.
                if (Math.abs(currentY - lastY) > 4) {
                    pageText += '\n';
                } else {
                    pageText += ' '; // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–±–µ–ª –º–µ–∂–¥—É —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ –Ω–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ
                }
                pageText += item.str;
                lastY = currentY;
            }
            fullText += pageText + '\n\n'; // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å—Ç—É–ø –º–µ–∂–¥—É —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏
        }
        return fullText;
    }
     

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç PDF-—Ñ–∞–π–ª –ø–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω–æ, –∏–∑–≤–ª–µ–∫–∞—è —Ç–µ–∫—Å—Ç –° –°–û–•–†–ê–ù–ï–ù–ò–ï–ú –°–¢–†–£–ö–¢–£–†–´ –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.
     * @param {File} file - PDF-—Ñ–∞–π–ª –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.
     */
    async function processPdfWithImages(file) {
        isPdfSession = true;
        const arrayBuffer = await file.arrayBuffer();
        const pdf = await pdfjsLib.getDocument({ data: arrayBuffer }).promise;
        
        let allQuestionsWithImages = [];
        let detectedLangs = new Set(); // –î–ª—è —Å–±–æ—Ä–∞ —è–∑—ã–∫–æ–≤

        for (let i = 1; i <= pdf.numPages; i++) {
            const page = await pdf.getPage(i);
            
            // === –ò–ó–ú–ï–ù–ï–ù–ò–ï ‚Ññ1: –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º, –∞ –Ω–µ –ø—Ä–æ—Å—Ç–æ –º–∞—Å—Å–∏–≤ ===
            const [textContent, imageExtractionResult] = await Promise.all([
                page.getTextContent(),
                extractImagesFromPage(page)
            ]);

            let pageText = '';
            if (textContent.items && textContent.items.length > 0) {
                const items = textContent.items.sort((a, b) => {
                    const y1 = a.transform[5];
                    const y2 = b.transform[5];
                    if (Math.abs(y1 - y2) > 1) {
                        return y2 - y1;
                    }
                    return a.transform[4] - b.transform[4];
                });
                
                let lastY = items[0].transform[5];

                for (const item of items) {
                    const currentY = item.transform[5];
                    if (Math.abs(currentY - lastY) > 4) {
                        pageText += '\n';
                    } else {
                        pageText += ' ';
                    }
                    pageText += item.str;
                    lastY = currentY;
                }
            }
            
            const questionsOnPage = parseTrilingualPdfBlock(pageText);

            if (questionsOnPage.length > 0) {
                const questionsWithImage = questionsOnPage.map(q => {
                    detectedLangs.add(detectLanguage(q.text)); // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫ –∫–∞–∂–¥–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
                    
                    // === –ò–ó–ú–ï–ù–ï–ù–ò–ï ‚Ññ2: –£–º–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏ ===
                    // –ö–∞—Ä—Ç–∏–Ω–∫–∞ –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å –ò —ç—Ç–æ –Ω–µ fallback-—Ä–µ–Ω–¥–µ—Ä –≤—Å–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                    if (imageExtractionResult.images.length > 0 && !imageExtractionResult.isFallback) {
                        q.image = imageExtractionResult.images[0];
                    }
                    // ===============================================
                    
                    return q;
                });
                allQuestionsWithImages.push(...questionsWithImage);
            }
        }
        
        if (allQuestionsWithImages.length > 0) {
            originalFileNameForReview = file.name;
            allParsedQuestions = allQuestionsWithImages;
            
            fileUploadArea.classList.add('hidden');
            quizSetupArea.classList.remove('hidden');
            
            // –õ–æ–≥–∏–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–∞ —è–∑—ã–∫–æ–≤
            const langFilterGroup = getEl('languageFilterGroup');
            const langFilterSelect = getEl('languageFilter');
            if (detectedLangs.size > 1) {
                langFilterSelect.innerHTML = `<option value="all">–í—Å–µ —è–∑—ã–∫–∏</option>`;
                detectedLangs.forEach(lang => {
                    const langName = { ru: '–†—É—Å—Å–∫–∏–π', kk: '“ö–∞–∑–∞“õ—à–∞', en: 'English' }[lang] || lang;
                    langFilterSelect.innerHTML += `<option value="${lang}">${langName}</option>`;
                });
                langFilterGroup.classList.remove('hidden');
            } else {
                langFilterGroup.classList.add('hidden');
            }
            // –í—ã–∑—ã–≤–∞–µ–º attachLanguageFilterBehavior –ü–û–°–õ–ï –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è select
            attachLanguageFilterBehavior();

            const questionCount = allParsedQuestions.filter(q => q.type !== 'category').length;
            maxQuestionsInfoEl.textContent = `(${_('total_questions_label')} ${questionCount} ${_('questions_label_for_range')})`;
            initDualSlider(questionCount);
            initSingleSlider(); 
            shuffleNCheckbox.checked = false;
            handleShuffleNToggle();
            manageBackButtonInterceptor();
        } else {
            alert(`${_('file_empty_or_invalid_part1')}"${file.name}"${_('file_empty_or_invalid_part2')}`);
        }
    }




    /**
     * –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞ —Å —Ç–µ—Å—Ç–æ–º.
     * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç, –ø–∞—Ä—Å–∏—Ç –µ–≥–æ, –ø–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –∫—ç—à –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —ç–∫—Ä–∞–Ω –Ω–∞—Å—Ç—Ä–æ–µ–∫.
     * –Ø–≤–ª—è–µ—Ç—Å—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π, —Ç–∞–∫ –∫–∞–∫ –æ–∂–∏–¥–∞–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Ö—ç—à–∞ –¥–ª—è –∫–ª—é—á–∞ –∫—ç—à–∞.
     *
     * @param {string} fileName - –ò–º—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º–æ–≥–æ —Ñ–∞–π–ª–∞.
     * @param {string} fileContent - –¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞.
     * @param {object|null} quizContext - –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç, –ø–µ—Ä–µ–¥–∞–≤–∞–µ–º—ã–π –∏–∑ —á–∞—Ç–∞ (–¥–ª—è –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤).
     */
    async function processFile(fileName, fileContent, quizContext = null) {
        isPdfSession = false;
        originalFileNameForReview = fileName;
        
        const contentHash = await generateContentHash(fileContent);
        currentFileCacheKey = `translation_cache_${fileName}_${contentHash}`;
        
        currentQuizTranslations.clear();
        
        const storedTranslations = localStorage.getItem(currentFileCacheKey);
        if (storedTranslations) {
            try {
                const parsedData = JSON.parse(storedTranslations);
                if (Array.isArray(parsedData) && (parsedData.length === 0 || Array.isArray(parsedData[0]))) {
                    currentQuizTranslations = new Map(parsedData);
                    console.log(`–ó–∞–≥—Ä—É–∂–µ–Ω –∫—ç—à –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –¥–ª—è —Ñ–∞–π–ª–∞ "${fileName}" (${currentQuizTranslations.size} –∑–∞–ø–∏—Å–µ–π).`);
                } else {
                    currentQuizTranslations = new Map();
                }
            } catch (e) {
                console.error("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫—ç—à–∞ –ø–µ—Ä–µ–≤–æ–¥–æ–≤:", e);
                currentQuizTranslations = new Map();
            }
        } else {
            currentQuizTranslations = new Map();
        }

        allParsedQuestions = parseQstContent(fileContent);
        currentQuizContext = quizContext; 
        hideGlobalLoader();

        if (allParsedQuestions.length > 0) {
            saveRecentFile(fileName, fileContent);
            
            fileUploadArea.classList.add('hidden');
            searchResultsContainer.classList.add('hidden');
            quizSetupArea.classList.remove('hidden');
            
            // --- –ù–ê–ß–ê–õ–û –ò–ó–ú–ï–ù–ï–ù–ò–ô: –õ–û–ì–ò–ö–ê –û–¢–û–ë–†–ê–ñ–ï–ù–ò–Ø –ö–ê–¢–ï–ì–û–†–ò–ô ---
            const categories = allParsedQuestions.filter(item => item.type === 'category').map(item => item.text);

            if (categories.length > 0) {
                // –ï—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–∞–π–¥–µ–Ω—ã, —Å–æ–∑–¥–∞–µ–º –¥–ª—è –Ω–∏—Ö —á–µ–∫–±–æ–∫—Å—ã
                categoryCheckboxesContainer.innerHTML = categories.map(category => `
                    <label class="category-checkbox-label">
                        <input type="checkbox" name="category" value="${escapeHTML(category)}">
                        <span>${escapeHTML(category)}</span>
                    </label>
                `).join('');
                categoryFilterGroup.classList.remove('hidden');
                // –ü–µ—Ä–≤–∏—á–Ω—ã–π –≤—ã–∑–æ–≤ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
                updateQuestionCountForFilters();
            } else {
                // –ï—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–µ—Ç, —Å–∫—Ä—ã–≤–∞–µ–º –±–ª–æ–∫
                categoryFilterGroup.classList.add('hidden');
                categoryCheckboxesContainer.innerHTML = '';
            }
            // --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–ô ---
            
            const questionCount = allParsedQuestions.filter(q => q.type !== 'category').length;
            
            maxQuestionsInfoEl.textContent = `(${_('total_questions_label')} ${questionCount} ${_('questions_label_for_range')})`;
            shuffleNCountInput.max = questionCount;
            
            initDualSlider(questionCount);
            initSingleSlider(); 
            
            shuffleNCheckbox.checked = false;
            handleShuffleNToggle();

            if (quizContext && !quizContext.isPractice) {
                shuffleQuestionsCheckbox.checked = true;
                shuffleAnswersCheckbox.checked = true;
                readingModeCheckbox.checked = false;
                flashcardsModeCheckbox.checked = false;
                shuffleQuestionsCheckbox.disabled = true;
                shuffleAnswersCheckbox.disabled = true;
                readingModeCheckbox.disabled = true;
                flashcardsModeCheckbox.disabled = true;
                questionRangeStartInput.disabled = true;
                questionRangeEndInput.disabled = true;
            } else {
                shuffleQuestionsCheckbox.disabled = false;
                shuffleAnswersCheckbox.disabled = false;
                readingModeCheckbox.disabled = false;
                flashcardsModeCheckbox.disabled = false;
                questionRangeStartInput.disabled = false;
                questionRangeEndInput.disabled = false;
            }
        } else {
            alert(`${_('file_empty_or_invalid_part1')}"${fileName}"${_('file_empty_or_invalid_part2')}`);
        }
        manageBackButtonInterceptor();
    }



    function parseQstContent(content) {
        let parsedItems = [];
        const lines = content.replace(/\r\n/g, '\n').split('\n');
        
        let currentQuestion = null;
        // –≠–≤—Ä–∏—Å—Ç–∏–∫–∞: —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ –≤–æ–ø—Ä–æ—Å –∑–∞–∫–æ–Ω—á–∏–ª—Å—è, –µ—Å–ª–∏ —É –Ω–µ–≥–æ —É–∂–µ –µ—Å—Ç—å 4+ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –∏ –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è –Ω–æ–≤—ã–π "+"
        const MIN_OPTIONS_BEFORE_SPLIT = 4; 
        // –•—Ä–∞–Ω–∏–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å—Ç—Ä–æ–∫ –∫–∞–∫ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –Ω–∞ —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞
        let lastTextLines = []; 

        const saveCurrentQuestion = () => {
            if (currentQuestion && currentQuestion.options.length > 0 && currentQuestion.correctAnswerIndex > -1) {
                // –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –≤–æ–ø—Ä–æ—Å–∞ –æ—Ç –≤—Å–µ—Ö —Ç–µ–≥–æ–≤
                currentQuestion.text = currentQuestion.text
                    .replace(/<\/?(question|–≤–æ–ø—Ä–æ—Å|qst)>/gi, '')
                    .trim();
                // –£–±–∏—Ä–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—É—é –Ω—É–º–µ—Ä–∞—Ü–∏—é –≤ –Ω–∞—á–∞–ª–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "1. ", "2) ")
                currentQuestion.text = currentQuestion.text.replace(/^\s*\d+[\.\)]\s*/, '');

                if (currentQuestion.text) { // –°–æ—Ö—Ä–∞–Ω—è–µ–º, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞
                    parsedItems.push(currentQuestion);
                }
            }
            currentQuestion = null;
        };

        for (const line of lines) {
            const trimmedLine = line.trim();
            const tagRemovalRegex = /<\/?(variant|–≤–∞—Ä–∏–∞–Ω—Ç)>/gi;

            if (!trimmedLine) continue; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏

            if (trimmedLine.startsWith('#_#') && trimmedLine.endsWith('#_#')) {
                saveCurrentQuestion();
                const categoryName = trimmedLine.slice(3, -3).trim();
                parsedItems.push({ text: categoryName, type: 'category' });
                lastTextLines = [];
                continue;
            }

            if (trimmedLine.startsWith('?')) {
                saveCurrentQuestion();
                currentQuestion = {
                    text: trimmedLine.substring(1).trim(),
                    options: [],
                    correctAnswerIndex: -1,
                    originalRaw: [line]
                };
                lastTextLines = []; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
            } else if (trimmedLine.startsWith('+')) {
                // –≠–í–†–ò–°–¢–ò–ö–ê: –ï—Å–ª–∏ —É —Ç–µ–∫—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ —É–∂–µ –µ—Å—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤,
                // —Ç–æ —ç—Ç–æ, —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ, –Ω–∞—á–∞–ª–æ –Ω–æ–≤–æ–≥–æ "—Å–∫–ª–µ–µ–Ω–Ω–æ–≥–æ" –≤–æ–ø—Ä–æ—Å–∞.
                if (currentQuestion && currentQuestion.correctAnswerIndex > -1 && currentQuestion.options.length >= MIN_OPTIONS_BEFORE_SPLIT) {
                    saveCurrentQuestion();
                }

                if (!currentQuestion) {
                    // –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å–∞ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å—Ç—Ä–æ–∫.
                    currentQuestion = {
                        text: lastTextLines.join(' ').trim(),
                        options: [],
                        correctAnswerIndex: -1,
                        originalRaw: [...lastTextLines, line]
                    };
                }
                
                const optionText = trimmedLine.substring(1).trim().replace(tagRemovalRegex, '').trim();
                currentQuestion.options.push({ text: optionText, isCorrect: true });
                // –ü–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º –∏–Ω–¥–µ–∫—Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Å–∫–æ–ª—å–∫–æ
                currentQuestion.correctAnswerIndex = currentQuestion.options.length - 1;
                lastTextLines = []; // –í–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ç–µ–∫—Å—Ç–æ–º –≤–æ–ø—Ä–æ—Å–∞
            
            } else if (trimmedLine.startsWith('-')) {
                if (currentQuestion) {
                    const optionText = trimmedLine.substring(1).trim().replace(tagRemovalRegex, '').trim();
                    currentQuestion.options.push({ text: optionText, isCorrect: false });
                    currentQuestion.originalRaw.push(line);
                    lastTextLines = []; // –í–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ç–µ–∫—Å—Ç–æ–º –≤–æ–ø—Ä–æ—Å–∞
                }
            } else if (trimmedLine.length > 0) {
                // –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –∫–æ–º–∞–Ω–¥–∞, —Ç–æ —ç—Ç–æ –ª–∏–±–æ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –≤–æ–ø—Ä–æ—Å–∞, –ª–∏–±–æ —Å–∞–º —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞
                if (currentQuestion) {
                    currentQuestion.text += ' ' + trimmedLine;
                    currentQuestion.originalRaw.push(line);
                }
                // –í –ª—é–±–æ–º —Å–ª—É—á–∞–µ, –∑–∞–ø–æ–º–∏–Ω–∞–µ–º —ç—Ç—É —Å—Ç—Ä–æ–∫—É –∫–∞–∫ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
                lastTextLines.push(trimmedLine);
                if(lastTextLines.length > 3) lastTextLines.shift(); // –•—Ä–∞–Ω–∏–º –Ω–µ –±–æ–ª—å—à–µ 3-—Ö –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å—Ç—Ä–æ–∫
            }
        }
        
        saveCurrentQuestion(); // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∞–º—ã–π –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–æ–ø—Ä–æ—Å –≤ —Ñ–∞–π–ª–µ

        return parsedItems;
    }


    // –ù–æ–≤–∞—è –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
    function formatQuestionObjectToQstString(questionObject) {
        if (!questionObject || !questionObject.text || !questionObject.options) {
            return '';
        }
        let qstString = `? ${questionObject.text}\n`;
        questionObject.options.forEach(opt => {
            const prefix = opt.isCorrect ? '+' : '-';
            qstString += `${prefix} ${opt.text}\n`;
        });
        return qstString.trim();
    }

    /**
     * –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –¥–∏–∞–ø–∞–∑–æ–Ω –Ω–æ–º–µ—Ä–æ–≤ –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ —Ä–µ–∞–ª—å–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã –º–∞—Å—Å–∏–≤–∞, –ø—Ä–æ–ø—É—Å–∫–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.
     * @param {Array} sourceArray - –ú–∞—Å—Å–∏–≤ —Å–æ –≤—Å–µ–º–∏ —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ (–≤–æ–ø—Ä–æ—Å–∞–º–∏ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏).
     * @param {number} startNum - –ù–∞—á–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –≤–æ–ø—Ä–æ—Å–∞ (–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è).
     * @param {number} endNum - –ö–æ–Ω–µ—á–Ω—ã–π –Ω–æ–º–µ—Ä –≤–æ–ø—Ä–æ—Å–∞ (–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è).
     * @returns {{startIndex: number, endIndex: number}} - –û–±—ä–µ–∫—Ç —Å –Ω–∞—á–∞–ª—å–Ω—ã–º –∏ –∫–æ–Ω–µ—á–Ω—ã–º –∏–Ω–¥–µ–∫—Å–∞–º–∏.
     */
    function mapQuestionRangeToIndices(sourceArray, startNum, endNum) {
        let questionCounter = 0;
        let startIndex = -1;
        let endIndex = -1;
        
        // –§–∏–ª—å—Ç—Ä—É–µ–º –º–∞—Å—Å–∏–≤, —á—Ç–æ–±—ã —Ä–∞–±–æ—Ç–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏
        const onlyQuestions = sourceArray.filter(item => item.type !== 'category');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∏–∞–ø–∞–∑–æ–Ω –Ω–µ –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ –ø—Ä–µ–¥–µ–ª—ã –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤–æ–ø—Ä–æ—Å–æ–≤
        if (startNum < 1) startNum = 1;
        if (endNum > onlyQuestions.length) endNum = onlyQuestions.length;

        sourceArray.forEach((item, index) => {
            // –°—á–∏—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ —Ä–µ–∞–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã
            if (item.type !== 'category') {
                questionCounter++;
                
                // –ù–∞—Ö–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –Ω–∞—á–∞–ª—É –¥–∏–∞–ø–∞–∑–æ–Ω–∞
                if (questionCounter === startNum && startIndex === -1) {
                    startIndex = index;
                }
                
                // –ù–∞—Ö–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –∫–æ–Ω—Ü—É –¥–∏–∞–ø–∞–∑–æ–Ω–∞
                if (questionCounter === endNum) {
                    endIndex = index;
                }
            }
        });

        // –ï—Å–ª–∏ –∫–æ–Ω–µ—á–Ω—ã–π –∏–Ω–¥–µ–∫—Å –Ω–µ –±—ã–ª –Ω–∞–π–¥–µ–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–∏–∞–ø–∞–∑–æ–Ω –¥–æ –∫–æ–Ω—Ü–∞),
        // –∏—â–µ–º –¥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –º–∞—Å—Å–∏–≤–∞.
        if (endIndex === -1) {
            endIndex = sourceArray.length - 1;
        }

        return { startIndex, endIndex };
    }



    function applySettingsAndStartQuiz(isErrorReview = false, questionsSource = null) {
        if (!isErrorReview) {
            currentQuizTranslations.clear();
            prefetchedIndices.clear();
        }

        let finalQuizContext = currentQuizContext;
        let sourceArray;
        
        const langFilterGroup = getEl('languageFilterGroup');
        const langFilterSelect = getEl('languageFilter');
        let baseQuestions = allParsedQuestions;

        if (!langFilterGroup.classList.contains('hidden') && langFilterSelect.value !== 'all') {
            const selectedLang = langFilterSelect.value;
            baseQuestions = allParsedQuestions.filter(q => detectLanguage(q.text) === selectedLang);
        }

        // --- –ù–ê–ß–ê–õ–û –ò–ó–ú–ï–ù–ï–ù–ò–ô: –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê –§–ò–õ–¨–¢–†–ê–¶–ò–ò –ü–û –ö–ê–¢–ï–ì–û–†–ò–Ø–ú ---
        if (!isErrorReview && !categoryFilterGroup.classList.contains('hidden')) {
            const selectedCategories = Array.from(categoryCheckboxesContainer.querySelectorAll('input:checked')).map(input => input.value);
            
            if (selectedCategories.length > 0) {
                const filteredWithCategories = [];
                let currentCategory = null;
                let includeCurrentSection = false;

                baseQuestions.forEach(item => {
                    if (item.type === 'category') {
                        currentCategory = item.text;
                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –≤–∫–ª—é—á–∞—Ç—å —ç—Ç—É —Å–µ–∫—Ü–∏—é
                        includeCurrentSection = selectedCategories.includes(currentCategory);
                        if (includeCurrentSection) {
                            // –ï—Å–ª–∏ –Ω—É–∂–Ω–æ, –î–û–ë–ê–í–õ–Ø–ï–ú –°–ê–ú–£ –ö–ê–¢–ï–ì–û–†–ò–Æ –≤ –∏—Ç–æ–≥–æ–≤—ã–π –º–∞—Å—Å–∏–≤
                            filteredWithCategories.push(item);
                        }
                    } else if (includeCurrentSection) {
                        // –ï—Å–ª–∏ —Å–µ–∫—Ü–∏—è –≤–∫–ª—é—á–µ–Ω–∞, –¥–æ–±–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å
                        filteredWithCategories.push(item);
                    }
                });
                // –ó–∞–º–µ–Ω—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π –º–∞—Å—Å–∏–≤ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–º (–≤–º–µ—Å—Ç–µ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏)
                baseQuestions = filteredWithCategories;
            }
        }
        // --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–ô ---

        if (shuffleNCheckbox.checked && !isErrorReview) {
            quizSettings.shuffleQuestions = true;
            quizSettings.shuffleAnswers = shuffleAnswersCheckbox.checked;
            quizSettings.feedbackMode = feedbackModeCheckbox.checked;
            quizSettings.readingMode = readingModeCheckbox.checked;
            quizSettings.flashcardsMode = flashcardsModeCheckbox.checked;
            quizSettings.timeLimit = parseInt(timeLimitInput.value, 10);

            const n = parseInt(shuffleNCountInput.value);
            const allActualQuestions = baseQuestions.filter(q => q.type !== 'category');

            if (n > allActualQuestions.length || n < 1) {
                alert(`–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç 1 –¥–æ ${allActualQuestions.length}`);
                return;
            }
            
            const questionMap = new Map();
            baseQuestions.forEach((q, index) => {
                if(q.type !== 'category') {
                    questionMap.set(index, q);
                }
            });

            const allQuestionIndices = Array.from(questionMap.keys());
            shuffleArray(allQuestionIndices);
            const selectedIndices = new Set(allQuestionIndices.slice(0, n));
            
            sourceArray = [];
            baseQuestions.forEach((item, index) => {
                const originalGlobalIndex = allParsedQuestions.indexOf(item);
                if (item.type === 'category' || selectedIndices.has(index)) {
                    sourceArray.push({ ...item, originalIndex: originalGlobalIndex });
                }
            });

            sourceArray = sourceArray.filter((item, index, arr) => {
                if (item.type === 'category') {
                    const nextItem = arr[index + 1];
                    return nextItem && nextItem.type !== 'category';
                }
                return true;
            });

        } else if (!isErrorReview) {
            quizSettings.timeLimit = parseInt(timeLimitInput.value, 10);
            quizSettings.shuffleQuestions = shuffleQuestionsCheckbox.checked;
            quizSettings.shuffleAnswers = shuffleAnswersCheckbox.checked;
            quizSettings.feedbackMode = feedbackModeCheckbox.checked;
            quizSettings.readingMode = readingModeCheckbox.checked;
            quizSettings.flashcardsMode = flashcardsModeCheckbox.checked;
            
            const totalQuestionsCount = baseQuestions.filter(q => q.type !== 'category').length;
            
            let startRange = parseInt(questionRangeStartInput.value);
            let endRange = parseInt(questionRangeEndInput.value);

            if (isNaN(startRange) || startRange < 1) startRange = 1;
            if (isNaN(endRange) || endRange < startRange) endRange = totalQuestionsCount;
            
            const indices = mapQuestionRangeToIndices(baseQuestions, startRange, endRange);

            let finalStartIndex = indices.startIndex;
            if (indices.startIndex > 0 && baseQuestions[indices.startIndex - 1].type === 'category') {
                finalStartIndex = indices.startIndex - 1;
            }

            sourceArray = baseQuestions.slice(finalStartIndex, indices.endIndex + 1)
                .map((question) => ({
                    ...question,
                    originalIndex: allParsedQuestions.indexOf(question)
                }));     

        } else {
            sourceArray = questionsSource;
            quizSettings.timeLimit = 0;
            quizSettings.shuffleQuestions = false;
            quizSettings.shuffleAnswers = shuffleAnswersCheckbox.checked;
        }
        
        if (quizSettings.shuffleQuestions && !isErrorReview) {
            let shuffledQuiz = [];
            let questionGroup = [];

            sourceArray.forEach((item) => {
                if (item.type === 'category') {
                    if (questionGroup.length > 0) {
                        shuffleArray(questionGroup);
                        shuffledQuiz.push(...questionGroup);
                        questionGroup = []; 
                    }
                    shuffledQuiz.push(item);
                } else {
                    questionGroup.push(item);
                }
            });

            if (questionGroup.length > 0) {
                shuffleArray(questionGroup);
                shuffledQuiz.push(...questionGroup);
            }
            
            questionsForCurrentQuiz = shuffledQuiz;

        } else {
            questionsForCurrentQuiz = [...sourceArray];
        }

        questionsForCurrentQuiz = questionsForCurrentQuiz.map(q => JSON.parse(JSON.stringify(q)));
        triggerWordsUsedInQuiz = questionsForCurrentQuiz.some(q => q.type !== 'category' && q.triggeredWordIndices && q.triggeredWordIndices.length > 0);
        
        if (quizSettings.readingMode) {
            questionsForCurrentQuiz.forEach(q => {
                if (q.type !== 'category' && q.options && q.correctAnswerIndex > -1) {
                    const correctAnswer = q.options[q.correctAnswerIndex];
                    q.options.splice(q.correctAnswerIndex, 1);
                    q.options.unshift(correctAnswer);
                    q.correctAnswerIndex = 0;
                }
            });
        }

        if (quizSettings.shuffleAnswers) {
            questionsForCurrentQuiz.forEach(q => {
                if (q.type !== 'category' && q.options) {
                    const correctAnswerObject = q.options[q.correctAnswerIndex];
                    shuffleArray(q.options);
                    q.correctAnswerIndex = q.options.findIndex(opt => opt === correctAnswerObject);
                }
            });
        }
        
        if (questionsForCurrentQuiz.filter(q => q.type !== 'category').length === 0) {
            alert("–ù–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∞ —Å —Ç–µ–∫—É—â–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏.");
            return;
        }

        questionsForCurrentQuiz.forEach((q, index) => {
            q.originalIndexInQuiz = index;
        });
        
        quizSetupArea.classList.add('hidden');
        cheatSheetResultArea.classList.add('hidden');
        gradusFoldersContainer.classList.add('hidden');
        quizArea.classList.remove('hidden');
        resultsArea.classList.add('hidden');
        startQuiz(finalQuizContext);
        manageBackButtonInterceptor();
    }


    function startQuiz(quizContext = null) {
        document.body.classList.add('quiz-active');
        appTitleHeader?.classList.add('hidden');
        currentQuizContext = quizContext;
        quizStartTime = new Date().getTime();
        currentQuestionIndex = 0;
        score = 0;
        userAnswers = new Array(questionsForCurrentQuiz.length).fill(null).map(() => ({ answered: false, correct: null, selectedOptionIndex: null }));
        incorrectlyAnsweredQuestionsData = [];
        currentQuizErrorData = [];
        totalQuestionsNumEl.textContent = questionsForCurrentQuiz.filter(q => q.type !== 'category').length;
        updateScoreDisplay();
        // --- –ò–ó–ú–ï–ù–ï–ù–ò–ï –ó–î–ï–°–¨ ---
        setupTimer(quizSettings.timeLimit); // –ü–µ—Ä–µ–¥–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞–ø—Ä—è–º—É—é
        generateQuickNav();

        // --- –ù–ê–ß–ê–õ–û –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ô –õ–û–ì–ò–ö–ò –û–¢–û–ë–†–ê–ñ–ï–ù–ò–Ø –ö–ù–û–ü–û–ö ---

        // 1. –°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –≤–∏–¥–Ω—ã –≤ –õ–Æ–ë–û–ú —Ä–µ–∂–∏–º–µ —Ç–µ—Å—Ç–∞
        finishTestButton?.classList.remove('hidden');
        continueLaterButton?.classList.remove('hidden');
        languageToggle?.classList.add('hidden');

        // 2. –¢–µ–ø–µ—Ä—å, –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞, –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –¥–ª—è –Ω–µ–≥–æ –∫–Ω–æ–ø–∫–∏
        if (quizSettings.flashcardsMode) {
            // –†–ï–ñ–ò–ú –ö–ê–†–¢–û–ß–ï–ö
            // –°–∫—Ä—ã–≤–∞–µ–º:
            webSearchDropdown?.classList.add('hidden');
            copyQuestionBtnQuiz?.classList.add('hidden');
            getEl('favoriteQuestionBtn')?.classList.add('hidden');
            quickModeToggle?.classList.add('hidden');
            triggerWordToggle?.classList.add('hidden');
            downloadTranslatedTxtButton?.classList.add('hidden');
            downloadTranslatedQstButton?.classList.add('hidden');
        } else {
            // –û–ë–´–ß–ù–´–ô –†–ï–ñ–ò–ú –¢–ï–°–¢–ê
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º:
            webSearchDropdown?.classList.remove('hidden');
            copyQuestionBtnQuiz?.classList.remove('hidden');
            getEl('favoriteQuestionBtn')?.classList.remove('hidden');
            quickModeToggle?.classList.remove('hidden');
            triggerWordToggle?.classList.remove('hidden');
            downloadTranslatedTxtButton?.classList.remove('hidden');
            downloadTranslatedQstButton?.classList.remove('hidden');
        }
        // --- –ö–û–ù–ï–¶ –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ô –õ–û–ì–ò–ö–ò ---

        // === –ì–õ–ê–í–ù–û–ï –ò–ó–ú–ï–ù–ï–ù–ò–ï: –í–´–ó–´–í–ê–ï–ú –ù–ê–®–£ –ù–û–í–£–Æ –§–£–ù–ö–¶–ò–Æ –ó–î–ï–°–¨ ===
        updateTranslateButtonsVisibility();

        // –í—ã–∑—ã–≤–∞–µ–º —ç—Ç–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –≤ —Å–∞–º–æ–º –∫–æ–Ω—Ü–µ, —á—Ç–æ–±—ã –æ–Ω–∏ –ø—Ä–∏–º–µ–Ω–∏–ª–∏—Å—å –∫ –≤–∏–¥–∏–º—ã–º –∫–Ω–æ–ø–∫–∞–º
        updateDownloadButtonsText();
        updateTranslateModeToggleVisual();

        loadQuestion(currentQuestionIndex);
        window.addEventListener('beforeunload', handleBeforeUnload);
    }

    function setupTimer(timeLimitInMinutes) {
       if (timerInterval) clearInterval(timerInterval);
       if (timeLimitInMinutes > 0) {
           timeLeftInSeconds = timeLimitInMinutes * 60;
           timerDisplayEl.classList.remove('hidden');
           updateTimerDisplay();
           timerInterval = setInterval(() => {
               timeLeftInSeconds--;
               updateTimerDisplay();
               if (timeLeftInSeconds <= 0) {
                   clearInterval(timerInterval);
                   showResults();
               }
           }, 1000);
       } else {
           timerDisplayEl.classList.add('hidden');
       }
    }

    function updateTimerDisplay() {
        const minutes = Math.floor(timeLeftInSeconds / 60);
        const seconds = timeLeftInSeconds % 60;
        timeLeftEl.textContent = `${String(minutes).padStart(2, '0')}:${String(seconds).padStart(2, '0')}`;
    }



    function generateQuickNav() {
        quickNavButtonsContainer.innerHTML = '';
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–∞–Ω–µ–ª—å, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤ —Ç–µ—Å—Ç–µ –±–æ–ª—å—à–µ –æ–¥–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ (–≤–æ–ø—Ä–æ—Å–∞ –∏–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏)
        if (questionsForCurrentQuiz.length > 1) {
            quickNavPanel.classList.remove('hidden');
            
            let questionNumber = 1; // –ó–∞–≤–æ–¥–∏–º –æ—Ç–¥–µ–ª—å–Ω—ã–π —Å—á–µ—Ç—á–∏–∫ –¥–ª—è –Ω—É–º–µ—Ä–∞—Ü–∏–∏ –¢–û–õ–¨–ö–û –≤–æ–ø—Ä–æ—Å–æ–≤

            questionsForCurrentQuiz.forEach((item, index) => {
                // –ï–°–õ–ò –≠–¢–û –ö–ê–¢–ï–ì–û–†–ò–Ø
                if (item.type === 'category') {
                    const categoryHeader = document.createElement('div');
                    categoryHeader.className = 'quick-nav-category';
                    categoryHeader.textContent = item.text;
                    quickNavButtonsContainer.appendChild(categoryHeader);
                } 
                // –ï–°–õ–ò –≠–¢–û –û–ë–´–ß–ù–´–ô –í–û–ü–†–û–°
                else {
                    const btn = document.createElement('button');
                    btn.classList.add('quick-nav-btn');
                    btn.textContent = questionNumber; // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—à —Å—á–µ—Ç—á–∏–∫
                    btn.dataset.questionIndex = index; // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å –≤ –º–∞—Å—Å–∏–≤–µ
                    btn.addEventListener('click', () => loadQuestion(index));
                    quickNavButtonsContainer.appendChild(btn);

                    questionNumber++; // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —Ç–æ–ª—å–∫–æ –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤
                }
            });
        } else {
            quickNavPanel.classList.add('hidden');
        }
    }




    function updateQuickNavButtons() {
        const buttons = quickNavButtonsContainer.querySelectorAll('.quick-nav-btn');
        buttons.forEach((btn) => {
            const btnIndex = parseInt(btn.dataset.questionIndex);
            btn.classList.remove('current', 'answered', 'correct', 'incorrect');
            if (btnIndex === currentQuestionIndex) {
                btn.classList.add('current');
            }
            
            const answerState = userAnswers[btnIndex];
            if (answerState && answerState.answered) {
                btn.classList.add('answered');
                
                // --- –ù–ê–ß–ê–õ–û –ò–ó–ú–ï–ù–ï–ù–ò–ô: –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Ä–µ–∂–∏–º–∞ ---
                if (quizSettings.flashcardsMode) {
                    // –î–ª—è –∫–∞—Ä—Ç–æ—á–µ–∫ "–ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–æ" –≤—Å–µ–≥–¥–∞ –æ–∑–Ω–∞—á–∞–µ—Ç "–≤—ã–ø–æ–ª–Ω–µ–Ω–æ" (–∑–µ–ª–µ–Ω—ã–π)
                    btn.classList.add('correct');
                } else {
                    // –î–ª—è –æ–±—ã—á–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ –æ—Å—Ç–∞–≤–ª—è–µ–º —Å—Ç–∞—Ä—É—é –ª–æ–≥–∏–∫—É
                    btn.classList.add(answerState.correct ? 'correct' : 'incorrect');
                }
                // --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–ô ---
            }
        });
    }



    function displayCategoryPage(categoryName) {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –≤–æ–ø—Ä–æ—Å–∞9
        questionContainer.classList.remove('hidden');
        // --- –ù–ê–ß–ê–õ–û –ò–ó–ú–ï–ù–ï–ù–ò–ô ---
        // –û—á–∏—â–∞–µ–º –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç, –∏—Å–ø–æ–ª—å–∑—É—è —Å–∏—Å—Ç–µ–º—É –ø–µ—Ä–µ–≤–æ–¥–æ–≤
        questionTextEl.innerHTML = `
            <div class="quiz-category-screen">
                <span>${_('flashcard_category_label')}</span>
                <h2>${escapeHTML(categoryName)}</h2>
            </div>
        `;
        // --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–ô ---
        getEl('score').style.visibility = 'hidden';

        // –ü—Ä—è—á–µ–º –Ω–µ–Ω—É–∂–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        answerOptionsEl.innerHTML = '';
        feedbackAreaEl.textContent = '';
        feedbackAreaEl.className = 'feedback-area';
        copyQuestionBtnQuiz?.classList.add('hidden');
        getEl('favoriteQuestionBtn')?.classList.add('hidden');
        translateQuestionBtn?.classList.add('hidden');
        webSearchDropdown?.classList.add('hidden');
    }



    function loadQuestion(index, options = { animateTranslation: true }) { // <-- –ò–ó–ú–ï–ù–ï–ù–ò–ï –ó–î–ï–°–¨
        if (index < 0 || index >= questionsForCurrentQuiz.length) return;
        currentQuestionIndex = index;
        const item = questionsForCurrentQuiz[index];

        // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫—É –¥–ª—è —Å–ª–µ–¥—É—é—â–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
        if (isTranslateModeEnabled) {
            prefetchNextQuestions(index);
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã UI
        updateNavigationButtons();
        updateQuickNavButtons();
        getEl('score').style.visibility = 'hidden';
        feedbackAreaEl.innerHTML = '';
        answerOptionsEl.innerHTML = '';
        questionTextEl.innerHTML = '';

        // –ì–ª–∞–≤–Ω–æ–µ –≤–µ—Ç–≤–ª–µ–Ω–∏–µ –ª–æ–≥–∏–∫–∏ (—Ç–µ–ø–µ—Ä—å –ø–µ—Ä–µ–¥–∞–µ–º 'options' –¥–∞–ª—å—à–µ)
        if (quizSettings.flashcardsMode) {
            if (item.type === 'category') {
                displayCategoryAsCard(item);
            } else {
                displayFlashcard(item, options); // <-- –ò–ó–ú–ï–ù–ï–ù–ò–ï –ó–î–ï–°–¨
            }
        } else {
            if (item.type === 'category') {
                displayCategoryPage(item.text);
            } else {
                displayQuestionAsTest(item, options); // <-- –ò–ó–ú–ï–ù–ï–ù–ò–ï –ó–î–ï–°–¨
            }
        }
    }




    async function displayFlashcard(question, options = { animateTranslation: true }) {
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –≤–∏–¥–∏–º–æ—Å—Ç—å –∫–Ω–æ–ø–æ–∫ –≤ —à–∞–ø–∫–µ
        webSearchDropdown?.classList.add('hidden');
        copyQuestionBtnQuiz?.classList.add('hidden');
        getEl('favoriteQuestionBtn')?.classList.add('hidden');
        quickModeToggle?.classList.add('hidden');
        triggerWordToggle?.classList.add('hidden');
        translateQuestionBtn?.classList.remove('hidden');

        // –û—á–∏—Å—Ç–∫–∞ –∏ –∑–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞
        questionTextEl.innerHTML = '';
        answerOptionsEl.innerHTML = '';
        const indexAtRequestTime = question.originalIndexInQuiz;

        const originalCorrectAnswerText = question.options[question.correctAnswerIndex].text;
        const cardHTML = `
            <div class="flashcard-viewport">
                <div class="flashcard" id="currentFlashcard">
                    <div class="flashcard-face flashcard-front">
                        <div class="flashcard-text-content" id="flashcardFrontText">${escapeHTML(question.text)}</div>
                    </div>
                    <div class="flashcard-face flashcard-back" id="flashcardBack">
                        <div class="flashcard-answer-text">
                            <div class="flashcard-text-content" id="flashcardBackText">${escapeHTML(originalCorrectAnswerText)}</div>
                        </div>
                        <button id="explainFlashcardBtn" class="explain-flashcard-btn"><i data-lucide="brain-circuit"></i> ${_('ai_explain_button')}</button>
                    </div>
                </div>
            </div>
        `;
        answerOptionsEl.innerHTML = cardHTML;
        if (lucide) lucide.createIcons(); // –í–∞–∂–Ω–æ –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∞—Ç—å –∏–∫–æ–Ω–∫—É

        const cardElement = getEl('currentFlashcard');
        const frontFace = getEl('flashcardFront');
        const backFace = getEl('flashcardBack');
        const frontFaceTextContainer = getEl('flashcardFrontText');
        const backFaceTextContainer = getEl('flashcardBackText');
        
        const resizeCard = () => {
            if (!cardElement || !frontFace || !backFace) return;
            requestAnimationFrame(() => {
                const frontHeight = frontFace.scrollHeight;
                const backHeight = backFace.scrollHeight;
                const maxHeight = Math.max(frontHeight, backHeight);
                cardElement.style.height = `${maxHeight + 40}px`;
            });
        };

        const explainBtn = getEl('explainFlashcardBtn');
        if (explainBtn) {
            explainBtn.addEventListener('click', (e) => {
                e.stopPropagation(); 
                showAIExplanation(question, null, question.image);
            });
        }

        // === –ù–ê–ß–ê–õ–û –ò–ó–ú–ï–ù–ï–ù–ò–ô –í –õ–û–ì–ò–ö–ï –ü–ï–†–ï–í–û–î–ê –ö–ê–†–¢–û–ß–ï–ö ===
        if (isTranslateModeEnabled) {
            const lang = localStorage.getItem('appLanguage') || 'ru';
            const cacheKey = getCacheKey(question.originalIndex, lang);
            
            if (!currentQuizTranslations.has(cacheKey)) {
                translateQuestionBtn?.classList.add('translating');
            }

            const translationResult = await getCachedOrFetchTranslation(question, question.originalIndex, lang);
            
            translateQuestionBtn?.classList.remove('translating');
            
            if (currentQuestionIndex !== indexAtRequestTime) return;

            if (translationResult) {
                const translatedQuestion = translationResult.question;
                const translatedCorrectAnswerText = translatedQuestion.options[translatedQuestion.correctAnswerIndex].text;

                // === –ì–õ–ê–í–ù–û–ï –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–∞ –ª–∏ –∞–Ω–∏–º–∞—Ü–∏—è ===
                if (options.animateTranslation) {
                    await Promise.all([
                        animateTextTransformation(frontFaceTextContainer, question.text, translatedQuestion.text),
                        animateTextTransformation(backFaceTextContainer, originalCorrectAnswerText, translatedCorrectAnswerText)
                    ]);
                } else {
                    // –ï—Å–ª–∏ –Ω–µ –Ω—É–∂–Ω–∞ - –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –º–≥–Ω–æ–≤–µ–Ω–Ω–æ
                    frontFaceTextContainer.textContent = translatedQuestion.text;
                    backFaceTextContainer.textContent = translatedCorrectAnswerText;
                }
                // =======================================================

                resizeCard();
            } else {
                alert(_('error_flashcard_translation_failed'));
            }
        }

        
        // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ
        resizeCard();
        // === –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–ô ===

        if (cardElement) {
            cardElement.addEventListener('click', (e) => {
                e.currentTarget.classList.toggle('is-flipped');
                if (!userAnswers[currentQuestionIndex].answered) {
                    userAnswers[currentQuestionIndex].answered = true;
                }
            });
        }
    }




    /**
     * –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –°–û–î–ï–†–ñ–ò–ú–û–ï –≤–æ–ø—Ä–æ—Å–∞ (—Ç–µ–∫—Å—Ç –∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã) –ë–ï–ó –∫–∞—Ä—Ç–∏–Ω–∫–∏.
     * @param {object} question - –û–±—ä–µ–∫—Ç –≤–æ–ø—Ä–æ—Å–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.
     */
    function displayQuestionContent(question) {
        questionTextEl.innerHTML = renderQuestionTextWithTriggers(question);

        if (triggerWordModeEnabled) {
            addTriggerClickListeners();
        }
        
        displayQuestionOptions(question);
    }

    /**
     * –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞.
     * @param {object} question - –û–±—ä–µ–∫—Ç –≤–æ–ø—Ä–æ—Å–∞, —á—å–∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã –Ω—É–∂–Ω–æ –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å.
     */
    function displayQuestionOptions(question) {
        answerOptionsEl.innerHTML = '';
        const answerState = userAnswers[currentQuestionIndex];

        question.options.forEach((option, index) => {
            const li = document.createElement('li');
            li.textContent = option.text;
            li.dataset.index = index;

            if (answerState && answerState.answered) {
                li.classList.add('answered');
                if (index === question.correctAnswerIndex) {
                    li.classList.add('actual-correct');
                }
                if (index === answerState.selectedOptionIndex) {
                    li.classList.add(answerState.correct ? 'correct' : 'incorrect');
                }
            } else {
                li.addEventListener('click', handleAnswerSelect);
            }
            answerOptionsEl.appendChild(li);
        });
    }

    /**
     * –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤ –≤–∏–¥–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–π –Ω–µ–ø–µ—Ä–µ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏.
     * @param {object} category - –û–±—ä–µ–∫—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.
     */
    function displayCategoryAsCard(category) {
        // --- –ù–ê–ß–ê–õ–û –ò–ó–ú–ï–ù–ï–ù–ò–ô: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –≤–∏–¥–∏–º–æ—Å—Ç—å –∫–Ω–æ–ø–æ–∫ –≤ —à–∞–ø–∫–µ ---
        webSearchDropdown?.classList.add('hidden');
        copyQuestionBtnQuiz?.classList.add('hidden');
        getEl('favoriteQuestionBtn')?.classList.add('hidden');
        quickModeToggle?.classList.add('hidden');
        triggerWordToggle?.classList.add('hidden');
        // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –∫–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ –¢–û–ß–ù–û –≤–∏–¥–Ω–∞
        translateQuestionBtn?.classList.remove('hidden');
        // --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–ô ---

        // –°–æ–∑–¥–∞–µ–º HTML-—Å—Ç—Ä—É–∫—Ç—É—Ä—É, –∏–º–∏—Ç–∏—Ä—É—é—â—É—é –∫–∞—Ä—Ç–æ—á–∫—É, –Ω–æ –±–µ–∑ 3D-—ç—Ñ—Ñ–µ–∫—Ç–æ–≤
        const cardHTML = `
            <div class="flashcard-viewport">
                <div class="flashcard" style="cursor: default;">
                    <div class="flashcard-face flashcard-category">
                        <div>
                            <span class="flashcard-category-label">${_('flashcard_category_label')}</span>
                            <h2 class="flashcard-category-title">${escapeHTML(category.text)}</h2>
                        </div>
                    </div>
                </div>
            </div>
        `;
        // –í—Å—Ç–∞–≤–ª—è–µ–º —ç—Ç—É –∫–∞—Ä—Ç–æ—á–∫—É –≤ –æ–±–ª–∞—Å—Ç—å –æ—Ç–≤–µ—Ç–æ–≤
        answerOptionsEl.innerHTML = cardHTML;
    }



    function handleAnswerSelect(event) {
        // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª –ª–∏ —É–∂–µ –¥–∞–Ω –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å
        if (userAnswers[currentQuestionIndex].answered) return;

        // 2. –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∫–ª–∏–∫–µ –∏ —Ç–µ–∫—É—â–µ–º –≤–æ–ø—Ä–æ—Å–µ
        const selectedOptionLi = event.target;
        const selectedIndex = parseInt(selectedOptionLi.dataset.index);
        
        // --- –ù–ê–ß–ê–õ–û –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ô –õ–û–ì–ò–ö–ò –ü–†–û–í–ï–†–ö–ò ---
        
        // –í—Å–µ–≥–¥–∞ –ø–æ–ª—É—á–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π (–Ω–µ–ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–π) –≤–æ–ø—Ä–æ—Å –∫–∞–∫ –∏—Å—Ç–æ—á–Ω–∏–∫ –∏—Å—Ç–∏–Ω—ã
        const originalQuestion = questionsForCurrentQuiz[currentQuestionIndex];
        
        // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é, –≤–æ–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ - —ç—Ç–æ –æ—Ä–∏–≥–∏–Ω–∞–ª
        let questionForValidation = originalQuestion;

        // –ï—Å–ª–∏ —Ä–µ–∂–∏–º –ø–µ—Ä–µ–≤–æ–¥–∞ –∞–∫—Ç–∏–≤–µ–Ω, –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é –¥–ª—è –ü–†–û–í–ï–†–ö–ò
        if (isTranslateModeEnabled) {
            const lang = localStorage.getItem('appLanguage') || 'ru';
            const cacheKey = getCacheKey(originalQuestion.originalIndex, lang);
            
            if (currentQuizTranslations.has(cacheKey)) {
                // –ï—Å–ª–∏ –ø–µ—Ä–µ–≤–æ–¥ –µ—Å—Ç—å –≤ –∫—ç—à–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
                questionForValidation = currentQuizTranslations.get(cacheKey);
            }
            // –ï—Å–ª–∏ –ø–µ—Ä–µ–≤–æ–¥–∞ –≤ –∫—ç—à–µ –Ω–µ—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, –æ–Ω –µ—â–µ –≥—Ä—É–∑–∏—Ç—Å—è),
            // –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–π–¥–µ—Ç –ø–æ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º—É –≤–æ–ø—Ä–æ—Å—É, —á—Ç–æ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç –æ—à–∏–±–∫—É.
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å, –∏—Å–ø–æ–ª—å–∑—É—è –í–´–ë–†–ê–ù–ù–´–ô –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –æ–±—ä–µ–∫—Ç –≤–æ–ø—Ä–æ—Å–∞
        const isCorrect = selectedIndex === questionForValidation.correctAnswerIndex;

        // --- –ö–û–ù–ï–¶ –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ô –õ–û–ì–ò–ö–ò –ü–†–û–í–ï–†–ö–ò ---

        // 3. –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        userAnswers[currentQuestionIndex] = { answered: true, correct: isCorrect, selectedOptionIndex: selectedIndex };

        // 4. –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –æ—Ç–≤–µ—Ç–∞
        if (isCorrect) {
            selectedOptionLi.classList.add('correct');
            feedbackAreaEl.textContent = _('feedback_correct');
            feedbackAreaEl.className = 'feedback-area correct-feedback';
            score++;
        } else {
            selectedOptionLi.classList.add('incorrect');
            feedbackAreaEl.textContent = _('feedback_incorrect');
            feedbackAreaEl.className = 'feedback-area incorrect-feedback';

            // –ü–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É—è –¥–∞–Ω–Ω—ã–µ –∏–∑ –æ–±—ä–µ–∫—Ç–∞ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
            const correctLi = answerOptionsEl.querySelector(`li[data-index="${questionForValidation.correctAnswerIndex}"]`);
            if (correctLi) correctLi.classList.add('actual-correct');

            // –ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω —Ä–µ–∂–∏–º –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ–± –æ—à–∏–±–∫–µ
            if (quizSettings.feedbackMode) {
                // –î–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—à–∏–±–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –í–°–ï–ì–î–ê –û–†–ò–ì–ò–ù–ê–õ–¨–ù–´–ô –≤–æ–ø—Ä–æ—Å –¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
                let errorQstBlock = `? ${originalQuestion.text.replace(/\n/g, ' ')}\n`;

                originalQuestion.options.forEach((option, index) => {
                    const prefix = (index === originalQuestion.correctAnswerIndex) ? '+' : '-';
                    errorQstBlock += `${prefix} ${option.text.replace(/\n/g, ' ')}\n`;
                });

                incorrectlyAnsweredQuestionsData.push(errorQstBlock, "");

                // –î–ª—è –ò–ò-–∞–Ω–∞–ª–∏–∑–∞ —Ç–∞–∫–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –≤–æ–ø—Ä–æ—Å, –Ω–æ –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–µ—Ä–µ–º –∏–∑ —Ç–æ–≥–æ, —á—Ç–æ –æ–Ω –≤–∏–¥–µ–ª
                const errorDetails = {
                  questionText: originalQuestion.text,
                  correctAnswer: originalQuestion.options[originalQuestion.correctAnswerIndex].text,
                  userAnswer: questionForValidation.options[selectedIndex].text // –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ç–æ–≥–æ —è–∑—ã–∫–∞, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –æ–Ω –æ—Ç–≤–µ—á–∞–ª
                };
                currentQuizErrorData.push(errorDetails);
            }
        }

        // 5. –ë–ª–æ–∫–∏—Ä—É–µ–º –≤—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–∞, —á—Ç–æ–±—ã –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –∫–ª–∏–∫
        Array.from(answerOptionsEl.children).forEach(li => {
            li.removeEventListener('click', handleAnswerSelect);
            li.classList.add('answered');
        });
      
        // 6. –°–æ–∑–¥–∞–µ–º –ø–∞–Ω–µ–ª—å –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ —Å –∫–Ω–æ–ø–∫–æ–π "–û–±—ä—è—Å–Ω–∏—Ç—å"
        const feedbackText = isCorrect ? _('feedback_correct') : _('feedback_incorrect');
        
        const explainBtn = document.createElement('button');
        explainBtn.innerHTML = `<i data-lucide="brain-circuit"></i> ${_('ai_explain_button')}`;
        explainBtn.className = 'explain-btn';

        if (isCorrect) {
            explainBtn.onclick = () => showAIExplanation(originalQuestion, null, originalQuestion.image);
        } else {
            const incorrectAnswerText = questionForValidation.options[selectedIndex].text;
            explainBtn.onclick = () => showAIExplanation(originalQuestion, incorrectAnswerText, originalQuestion.image);
        }
        
        // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        feedbackAreaEl.innerHTML = ''; 
        const textNode = document.createTextNode(feedbackText);
        feedbackAreaEl.appendChild(textNode);
        feedbackAreaEl.appendChild(explainBtn);

        // === –í–û–¢ –û–ù–û, –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï! ===
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –∏–∫–æ–Ω–∫–∏ Lucide, —á—Ç–æ–±—ã –Ω–∞—à–∞ –Ω–æ–≤–∞—è –∏–∫–æ–Ω–∫–∞ –ø–æ—è–≤–∏–ª–∞—Å—å.
        if (window.lucide) {
            lucide.createIcons();
        }
      
        // 7. –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        updateScoreDisplay();
        updateNavigationButtons();
        updateQuickNavButtons();
          
        // 8. –ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω –±—ã—Å—Ç—Ä—ã–π —Ä–µ–∂–∏–º, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
        if (quickModeEnabled && currentQuestionIndex < questionsForCurrentQuiz.length - 1) {
            setTimeout(() => handleNextButtonClick(), QUICK_MODE_DELAY);
        }
    }



    function handleNextButtonClick() {
        if (currentQuestionIndex < questionsForCurrentQuiz.length - 1) {
            loadNextQuestion();
        } else {
            // === –ò–ó–ú–ï–ù–ï–ù–ò–ï: –í—ã–∑—ã–≤–∞–µ–º –Ω–∞—à—É –Ω–æ–≤—É—é —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é ===
            handleFinishQuizAttempt();
        }
    }
    
    function loadNextQuestion() {
        currentQuestionIndex++;
        loadQuestion(currentQuestionIndex);
    }


    function loadPreviousQuestion() {
        if (currentQuestionIndex > 0) {
            currentQuestionIndex--;
            // === –ì–õ–ê–í–ù–û–ï –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ü–µ—Ä–µ–¥–∞–µ–º —Ñ–ª–∞–≥ –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏ ===
            loadQuestion(currentQuestionIndex, { animateTranslation: false });
        }
    }


    function updateNavigationButtons() {
        prevQuestionButton.disabled = currentQuestionIndex === 0;
        const isLastQuestion = currentQuestionIndex === questionsForCurrentQuiz.length - 1;
        nextButton.textContent = isLastQuestion ? _('finish_button') : _('next_question_button');
        nextButton.classList.toggle('finish-test', isLastQuestion);
    }


    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–ø—ã—Ç–∫—É –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—è—è –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤.
     */
    async function handleFinishQuizAttempt() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤ –º–∞—Å—Å–∏–≤–µ –æ—Ç–≤–µ—Ç–æ–≤ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –Ω–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã–π
        const hasUnanswered = userAnswers.some(answer => answer && !answer.answered);

        let proceedToFinish = true;

        // –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã–µ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        if (hasUnanswered) {
            proceedToFinish = await showConfirmationModal(
                'confirm_finish_with_unanswered_title',
                'confirm_finish_with_unanswered_text',
                'finish_button' // –¢–µ–∫—Å—Ç –¥–ª—è –∫—Ä–∞—Å–Ω–æ–π –∫–Ω–æ–ø–∫–∏
            );
        }

        // –ï—Å–ª–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±–æ–≤–∞–ª–æ—Å—å –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ–≥–æ –¥–∞–ª, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ—Å—Ç
        if (proceedToFinish) {
            if (timerInterval) clearInterval(timerInterval);
            showResults();
        }
    }



    async function showResults() {
        // === –í–û–¢ –û–ù–û, –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï! ===
        // –°—Ä–∞–∑—É —É–±–∏—Ä–∞–µ–º –∫–ª–∞—Å—Å, –∫–æ—Ç–æ—Ä—ã–π –≥–æ–≤–æ—Ä–∏—Ç, —á—Ç–æ —Ç–µ—Å—Ç –∞–∫—Ç–∏–≤–µ–Ω.
        document.body.classList.remove('quiz-active');

        if (originalFileNameForReview) {
            DBManager.delete(originalFileNameForReview, 'SavedSessions');
        }
        window.removeEventListener('beforeunload', handleBeforeUnload);
        if (timerInterval) clearInterval(timerInterval);

        // === –ù–ê–ß–ê–õ–û –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø ===
        // 1. –ù–∞—Ö–æ–¥–∏–º –±–ª–æ–∫ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –∞–Ω–∞–ª–∏–∑–∞ –ò–ò.
        const aiAnalysisResult = getEl('aiAnalysisResult');
        // 2. –û—á–∏—â–∞–µ–º –µ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∏ —Å–∫—Ä—ã–≤–∞–µ–º.
        //    –≠—Ç–æ —Ä–µ—à–∞–µ—Ç –∏—Å—Ö–æ–¥–Ω—É—é –ø—Ä–æ–±–ª–µ–º—É —Å "–∑–∞–≤–∏—Å—à–∏–º" —Ç–µ–∫—Å—Ç–æ–º.
        if (aiAnalysisResult) {
            aiAnalysisResult.innerHTML = '';
            aiAnalysisResult.classList.add('hidden');
        }
        // === –ö–û–ù–ï–¶ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø ===

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ —ç—Ç–æ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å
        if (currentQuizContext && !currentQuizContext.isPractice && currentUser) {
            
            // --- –ò–ó–ú–ï–ù–ï–ù–ò–ï ‚Ññ1: –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–æ–¥—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ ---
            const timeTaken = quizStartTime > 0 ? Math.round((new Date().getTime() - quizStartTime) / 1000) : 0;
            
            const questionsInThisQuiz = questionsForCurrentQuiz.filter(q => q.type !== 'category');
            const finalAccuracy = questionsInThisQuiz.length > 0 
                ? ((score / questionsInThisQuiz.length) * 100) 
                : 0;

            const resultData = {
                userId: currentUser.uid,
                userName: currentUser.displayName || '–ê–Ω–æ–Ω–∏–º',
                fileId: currentQuizContext.fileId,
                channelId: currentQuizContext.channelId,
                accuracy: finalAccuracy,
                timeSpentSeconds: timeTaken,
                timestamp: firebase.firestore.FieldValue.serverTimestamp()
            };

            // --- –ò–ó–ú–ï–ù–ï–ù–ò–ï ‚Ññ2: –õ–æ–≥–∏–∫–∞ –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ ---
            try {
                // –ò—â–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —ç—Ç–æ–≥–æ –∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —ç—Ç–æ–≥–æ –∂–µ —Ñ–∞–π–ª–∞
                const querySnapshot = await db.collection('testResults')
                    .where('userId', '==', currentUser.uid)
                    .where('fileId', '==', currentQuizContext.fileId)
                    .limit(1)
                    .get();

                if (querySnapshot.empty) {
                    // –ï—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–µ—Ç - –ø—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π
                    await db.collection('testResults').add(resultData);
                    console.log("–†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!");
                } else {
                    // –ï—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –µ—Å—Ç—å - –æ–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π
                    const docId = querySnapshot.docs[0].id;
                    await db.collection('testResults').doc(docId).update(resultData);
                    console.log("–†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!");
                }
            } catch (err) {
                console.error("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è/–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:", err);
            }
        }
        
        currentQuizContext = null;
        quizStartTime = 0; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–∞–π–º–µ—Ä

        quizArea.classList.add('hidden');
        resultsArea.classList.remove('hidden');
        webSearchDropdown?.classList.add('hidden');
        finishTestButton?.classList.add('hidden');
        downloadTranslatedTxtButton?.classList.add('hidden');
        downloadTranslatedQstButton?.classList.add('hidden');
        copyQuestionBtnQuiz?.classList.add('hidden');
        
        const questionsInThisQuiz = questionsForCurrentQuiz.filter(q => q.type !== 'category');
        const finalTotalContainer = finalTotalEl.parentElement; // <p> —Å –æ–±—â–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º
        const finalPercentageContainer = finalPercentageEl.parentElement; // <p> —Å —Ç–æ—á–Ω–æ—Å—Ç—å—é

        // --- –ù–ê–ß–ê–õ–û –ò–ó–ú–ï–ù–ï–ù–ò–ô: –õ–æ–≥–∏–∫–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ä–µ–∂–∏–º–æ–≤ ---
        if (quizSettings.flashcardsMode) {
            // –†–ï–ñ–ò–ú –ö–ê–†–¢–û–ß–ï–ö
            const cardsViewed = userAnswers.filter(a => a && a.answered).length;
            finalTotalContainer.innerHTML = `<span data-lang-key="results_flashcards_viewed">${_('results_flashcards_viewed')}:</span> ${cardsViewed} <span data-lang-key="of_label">${_('of_label')}</span> ${questionsInThisQuiz.length}.`;
            finalPercentageContainer.classList.add('hidden'); // –°–∫—Ä—ã–≤–∞–µ–º —Ç–æ—á–Ω–æ—Å—Ç—å
            // –°–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Ä–∞–±–æ—Ç—ã –Ω–∞–¥ –æ—à–∏–±–∫–∞–º–∏, –æ–Ω–∏ –Ω–µ –Ω—É–∂–Ω—ã –¥–ª—è –∫–∞—Ä—Ç–æ—á–µ–∫
            feedbackDownloadArea.classList.add('hidden');
            errorReviewArea.classList.add('hidden');
            getEl('aiAnalysisArea').classList.add('hidden');
        } else {
            // –û–ë–´–ß–ù–´–ô –†–ï–ñ–ò–ú –¢–ï–°–¢–ê

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã (–µ—Å–ª–∏ –æ–Ω–∏ –±—ã–ª–∏ —Å–∫—Ä—ã—Ç—ã —Ä–µ–∂–∏–º–æ–º –∫–∞—Ä—Ç–æ—á–µ–∫)
            finalTotalContainer.style.display = ''; // –ò—Å–ø–æ–ª—å–∑—É–µ–º style.display –¥–ª—è —Å–±—Ä–æ—Å–∞
            finalPercentageContainer.classList.remove('hidden');

            // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –Ω–∞–ø—Ä—è–º—É—é –≤ –Ω—É–∂–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–∞—Ö
            finalCorrectEl.textContent = score;
            finalTotalEl.textContent = questionsInThisQuiz.length;

            const percentage = questionsInThisQuiz.length > 0 ? ((score / questionsInThisQuiz.length) * 100).toFixed(1) : 0;
            finalPercentageEl.textContent = percentage;

            if (quizSettings.feedbackMode && incorrectlyAnsweredQuestionsData.length > 0) {
                feedbackDownloadArea.classList.remove('hidden');
                errorReviewArea.classList.remove('hidden');
                getEl('aiAnalysisArea').classList.remove('hidden');
            } else {
                feedbackDownloadArea.classList.add('hidden');
                errorReviewArea.classList.add('hidden');
                getEl('aiAnalysisArea').classList.add('hidden');
            }
        }
        // --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–ô ---

        if (triggerWordsUsedInQuiz) {
            triggeredQuizDownloadArea.classList.remove('hidden');
        } else {
            triggeredQuizDownloadArea.classList.add('hidden');
        }
    }


    function startErrorReviewQuiz() {
        const errorContent = incorrectlyAnsweredQuestionsData.join('\n');
        const errorQuestions = parseQstContent(errorContent);
        if (errorQuestions.length > 0) {
            resultsArea.classList.add('hidden');
            applySettingsAndStartQuiz(true, errorQuestions);
        } else {
            alert(_('error_review_questions_not_found'));
        }
    }

    function downloadErrorFile() {
        const content = incorrectlyAnsweredQuestionsData.join('\n').trim();
        const fileNameBase = originalFileNameForReview ? originalFileNameForReview.replace(/\.qst$|\.txt$/i, '') : 'test';
        const fileName = `errors_${fileNameBase}.qst`;
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–ª—é—á –∏–∑ —è–∑—ã–∫–æ–≤–æ–≥–æ –ø–∞–∫–µ—Ç–∞ –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞
        downloadOrShareFile(fileName, content, 'text/plain;charset=utf-8', _('share_title_errors'));
    }

    function downloadTriggeredQuizFile() {
        let content = '';
        questionsForCurrentQuiz.forEach(q => {
            const tokens = tokenizeText(q.text);
            let questionTextForFile = '? ';
            let wordIdx = 0;
            tokens.forEach(token => {
                const isWord = /\S/.test(token) && !/^[.,;:!?()"‚Äú‚Äù¬´¬ª-]+$/.test(token);
                if (isWord) {
                    if (q.triggeredWordIndices?.includes(wordIdx)) {
                        questionTextForFile += `~${token}~`;
                    } else {
                        questionTextForFile += token;
                    }
                    wordIdx++;
                } else {
                    questionTextForFile += token;
                }
            });
            content += questionTextForFile.trim() + '\n';
            q.options.forEach(opt => {
                content += `${opt.isCorrect ? '+' : '-'} ${opt.text}\n`;
            });
            content += '\n';
        });
        const fileNameBase = originalFileNameForReview ? originalFileNameForReview.replace(/\.qst$|\.txt$|\.txt$/i, '') : 'quiz';
        const fileName = `triggered_${fileNameBase}.qst`;
        downloadOrShareFile(fileName, content, 'text/plain;charset=utf-8', _('share_title_triggered_quiz'));
    }

    function updateScoreDisplay() {
        correctAnswersCountEl.textContent = score;
    }



    async function resetQuizForNewFile(clearInput = true) {
        // === –ù–ê–ß–ê–õ–û –ò–ó–ú–ï–ù–ï–ù–ò–ô ===
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç–∏–≤–µ–Ω –ª–∏ —Å–µ–π—á–∞—Å —Ç–µ—Å—Ç. –ö–ª–∞—Å—Å 'quiz-active' - –Ω–∞—à –≥–ª–∞–≤–Ω—ã–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä.
        if (document.body.classList.contains('quiz-active')) {
            const confirmed = await showConfirmationModal(
                'confirm_exit_quiz_title',          // –ó–∞–≥–æ–ª–æ–≤–æ–∫ –æ–∫–Ω–∞
                'confirm_exit_quiz_text',           // –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
                'confirm_exit_quiz_confirm_button'  // –¢–µ–∫—Å—Ç –¥–ª—è –∫—Ä–∞—Å–Ω–æ–π –∫–Ω–æ–ø–∫–∏
            );
            // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª "–û—Ç–º–µ–Ω–∞" (–∏–ª–∏ –∑–∞–∫—Ä—ã–ª –æ–∫–Ω–æ), –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—Å—é —Ñ—É–Ω–∫—Ü–∏—é.
            if (!confirmed) {
                return; 
            }
        }
        // === –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–ô ===

        document.body.classList.remove('quiz-active');
        appTitleHeader?.classList.remove('hidden');
        quizSettings = { timeLimit: 0, shuffleQuestions: false, shuffleAnswers: false, questionRangeStart: 1, questionRangeEnd: 0, feedbackMode: false, readingMode: false, flashcardsMode: false };
        quizStartTime = 0;
        if (clearInput) {
             // –≠—Ç–æ—Ç –≤—ã–∑–æ–≤ –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–µ–Ω, —Ç.–∫. –º—ã –ø–µ—Ä–µ—à–ª–∏ –Ω–∞ IndexedDB
             // localStorage.removeItem(SAVED_SESSIONS_STORAGE_KEY);
        }
        window.removeEventListener('beforeunload', handleBeforeUnload);

        if (timerInterval) clearInterval(timerInterval);
        allParsedQuestions = [];
        questionsForCurrentQuiz = [];
        currentQuestionIndex = 0;
        score = 0;
        userAnswers = [];
        incorrectlyAnsweredQuestionsData = [];
        currentQuizErrorData = [];
        originalFileNameForReview = '';
        generatedCheatSheetContent = '';
        triggerWordsUsedInQuiz = false;
        isPdfSession = false; 

        // –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–±—Ä–æ—Å –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –ò–ò
        const aiAnalysisResult = getEl('aiAnalysisResult');
        if (aiAnalysisResult) {
            aiAnalysisResult.innerHTML = ''; 
            aiAnalysisResult.classList.add('hidden');
        }

        isTranslateModeEnabled = false;
        localStorage.setItem('isTranslateModeEnabled', 'false');
        updateTranslateModeToggleVisual();
        
        currentQuizTranslations.clear();
        prefetchedIndices.clear();
        currentFileCacheKey = null;
        
        const screensToHide = [quizSetupArea, quizArea, resultsArea, cheatSheetResultArea, gradusFoldersContainer, searchResultsContainer, parserArea, categoryFilterGroup];
        screensToHide.forEach(el => el?.classList.add('hidden'));

        fileUploadArea?.classList.remove('hidden');
        
        timerDisplayEl?.classList.add('hidden');
        quickNavPanel?.classList.add('hidden');
        
        copyQuestionBtnQuiz?.classList.add('hidden');
        triggeredQuizDownloadArea?.classList.add('hidden');
        finishTestButton?.classList.add('hidden');
        webSearchDropdown?.classList.add('hidden');
        getEl('favoriteQuestionBtn')?.classList.add('hidden');
        downloadTranslatedTxtButton?.classList.add('hidden');
        downloadTranslatedQstButton?.classList.add('hidden');
        languageToggle?.classList.remove('hidden');
        quickModeToggle?.classList.add('hidden');
        triggerWordToggle?.classList.add('hidden');
        
        if (clearInput) fileInput.value = '';
        
        if(questionTextEl) questionTextEl.textContent = '';
        if(answerOptionsEl) answerOptionsEl.innerHTML = '';
        if(feedbackAreaEl) {
            feedbackAreaEl.textContent = '';
            feedbackAreaEl.className = 'feedback-area';
        }

        if (finalCorrectEl) finalCorrectEl.textContent = '0';
        if (finalTotalEl) finalTotalEl.textContent = '0';
        if (finalPercentageEl) finalPercentageEl.textContent = '0';

        loadRecentFiles();
        loadSavedSession();
        manageBackButtonInterceptor();
        updateTranslateButtonsVisibility();
    }



    function shuffleArray(array) {
        for (let i = array.length - 1; i > 0; i--) {
            const j = Math.floor(Math.random() * (i + 1));
            [array[i], array[j]] = [array[j], array[i]];
        }
    }


    async function saveSessionForLater() {
        if (questionsForCurrentQuiz.length === 0) return;

        const existingSession = await DBManager.get(originalFileNameForReview, 'SavedSessions');
        let finalFileName = originalFileNameForReview;
        
        if (existingSession) {
            const choice = await showSessionConflictModal(originalFileNameForReview);
            if (choice === 'cancel') {
                return; 
            }
            if (choice === 'save_new') {
                finalFileName = await getNewSessionName(originalFileNameForReview);
            }
        }

        const newSessionData = {
            quizState: questionsForCurrentQuiz,
            fullQuestionsData: allParsedQuestions,
            isPdfSession: isPdfSession,
            userAnswers,
            currentQuestionIndex,
            score,
            quizSettings,
            timeLeftInSeconds,
            originalFileNameForReview: finalFileName,
            totalQuestionCount: questionsForCurrentQuiz.filter(q => q.type !== 'category').length,
            timestamp: new Date().getTime(),
            isTranslateModeEnabled: isTranslateModeEnabled,
            translations: Array.from(currentQuizTranslations.entries())
        };

        try {
            await DBManager.save(newSessionData, 'SavedSessions');
            showToast(_('session_saved_success'), 'success'); // <-- –ò–ó–ú–ï–ù–ï–ù–ò–ï –ó–î–ï–°–¨
            resetQuizForNewFile(false);
        } catch (e) {
            console.error("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏ –≤ IndexedDB:", e);
            if (e.name === 'QuotaExceededError') {
                 showToast(_('error_session_save_failed'), 'error'); // <-- –ò –ò–ó–ú–ï–ù–ï–ù–ò–ï –ó–î–ï–°–¨
            } else {
                 showToast(`–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: ${e.message}`, 'error'); // <-- –ò –ò–ó–ú–ï–ù–ï–ù–ò–ï –ó–î–ï–°–¨
            }
        }
    }


    /**
     * –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞ —Å–µ—Å—Å–∏–π –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
     * @param {string} fileName - –ò–º—è —Ñ–∞–π–ª–∞, –≤—ã–∑–≤–∞–≤—à–µ–≥–æ –∫–æ–Ω—Ñ–ª–∏–∫—Ç.
     * @returns {Promise<'overwrite'|'save_new'|'cancel'>} - –ü—Ä–æ–º–∏—Å, –∫–æ—Ç–æ—Ä—ã–π —Ä–∞–∑—Ä–µ—à–∞–µ—Ç—Å—è –≤—ã–±–æ—Ä–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
     */
    function showSessionConflictModal(fileName) {
        return new Promise(resolve => {
            sessionConflictText.textContent = _('session_conflict_text').replace('{fileName}', fileName);
            sessionConflictModal.classList.remove('hidden');

            const cleanup = (choice) => {
                sessionConflictModal.classList.add('hidden');
                overwriteSessionBtn.onclick = null;
                saveNewSessionBtn.onclick = null;
                cancelConflictBtn.onclick = null;
                resolve(choice);
            };

            overwriteSessionBtn.onclick = () => cleanup('overwrite');
            saveNewSessionBtn.onclick = () => cleanup('save_new');
            cancelConflictBtn.onclick = () => cleanup('cancel');
        });
    }

    /**
     * –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤–æ–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è –¥–ª—è —Å–µ—Å—Å–∏–∏.
     * –ù–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ "test.txt" —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –≤–µ—Ä–Ω–µ—Ç "test.txt (2)".
     * @param {string} baseFileName - –ò—Å—Ö–æ–¥–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞.
     * @returns {Promise<string>} - –ü—Ä–æ–º–∏—Å —Å –Ω–æ–≤—ã–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –∏–º–µ–Ω–µ–º.
     */
    async function getNewSessionName(baseFileName) {
        const allSessions = await DBManager.getAll('SavedSessions');
        const baseName = baseFileName.replace(/\s\(\d+\)$/, ''); // –£–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ä—ã–π —Å—É—Ñ—Ñ–∏–∫—Å, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        let counter = 1;
        let newName;
        
        // eslint-disable-next-line no-constant-condition
        while (true) {
            counter++;
            newName = `${baseName} (${counter})`;
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Å–µ—Å—Å–∏—è —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º
            const nameExists = allSessions.some(session => session.originalFileNameForReview === newName);
            if (!nameExists) {
                break; // –ù–∞—à–ª–∏ —Å–≤–æ–±–æ–¥–Ω–æ–µ –∏–º—è
            }
        }
        return newName;
    }


    async function loadSavedSession() {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º DBManager –≤–º–µ—Å—Ç–æ localStorage
        const sessions = await DBManager.getAll('SavedSessions');

        savedSessionList.innerHTML = '';

        if (sessions.length === 0) {
            savedSessionArea.classList.add('hidden');
            return;
        }
        
        // –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å–µ—Å—Å–∏–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏, —Å–∞–º—ã–µ –Ω–æ–≤—ã–µ –≤–≤–µ—Ä—Ö—É
        sessions.sort((a, b) => b.timestamp - a.timestamp);

        const template = getEl('savedSessionCardTemplate');

        sessions.forEach(sessionData => {
            const cardClone = template.content.cloneNode(true);
            
            const nameEl = cardClone.querySelector('.saved-session-name');
            const progressLabelEl = cardClone.querySelector('.progress-label');
            const timeEl = cardClone.querySelector('.saved-session-time');
            const progressBarFillEl = cardClone.querySelector('.progress-bar-fill');
            const resumeBtn = cardClone.querySelector('.btn-resume');
            const deleteBtn = cardClone.querySelector('.btn-delete');
            
            const totalQuestions = sessionData.totalQuestionCount;
            const answeredQuestions = sessionData.userAnswers.filter(a => a && a.answered).length;
            const progress = totalQuestions > 0 ? (answeredQuestions / totalQuestions) * 100 : 0;

            nameEl.textContent = sessionData.originalFileNameForReview || '–°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç';
            progressBarFillEl.style.width = `${progress}%`;
            
            if (sessionData.quizSettings && sessionData.quizSettings.flashcardsMode) {
                progressLabelEl.textContent = `${_('session_cards_viewed')} ${answeredQuestions} ${_('from')} ${totalQuestions}`;
            } else {
                progressLabelEl.textContent = `${_('answered_of')} ${answeredQuestions} ${_('from')} ${totalQuestions}`;
            }
            
            if (sessionData.quizSettings.timeLimit > 0 && sessionData.timeLeftInSeconds) {
                const minutes = Math.floor(sessionData.timeLeftInSeconds / 60);
                const seconds = sessionData.timeLeftInSeconds % 60;
                timeEl.textContent = `${_('time_left')}: ${String(minutes).padStart(2, '0')}:${String(seconds).padStart(2, '0')}`;
            }

            resumeBtn.textContent = _('continue_quiz_button');
            deleteBtn.textContent = _('delete_session_button');
            resumeBtn.dataset.filename = sessionData.originalFileNameForReview;
            deleteBtn.dataset.filename = sessionData.originalFileNameForReview;
            
            savedSessionList.appendChild(cardClone);
        });

        savedSessionArea.classList.remove('hidden');
        savedSessionList.removeEventListener('click', handleSessionCardClick);
        savedSessionList.addEventListener('click', handleSessionCardClick);
    }



    // –≠—Ç–æ –Ω–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –≤ –∫–∞—Ä—Ç–æ—á–∫–∞—Ö
    function handleSessionCardClick(event) {
        const target = event.target;
        const fileName = target.dataset.filename;
        if (!fileName) return;

        if (target.classList.contains('btn-resume')) {
            restoreQuizSession(fileName);
        } else if (target.classList.contains('btn-delete')) {
            deleteSavedSession(fileName);
        }
    }


    async function restoreQuizSession(fileName) {
        const sessionData = await DBManager.get(fileName, 'SavedSessions');
        
        if (!sessionData) {
            alert(_('error_session_not_found'));
            return;
        }

        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–∞ –∏ –∫—ç—à
        isTranslateModeEnabled = sessionData.isTranslateModeEnabled || false;
        currentQuizTranslations = sessionData.translations ? new Map(sessionData.translations) : new Map();
        updateTranslateModeToggleVisual();
        
        // --- –ù–ê–ß–ê–õ–û –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô: –ù–æ–≤–∞—è –ª–æ–≥–∏–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è ---

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤ —Å–µ—Å—Å–∏–∏ –ø–æ–ª–Ω—ã–π –Ω–∞–±–æ—Ä –≤–æ–ø—Ä–æ—Å–æ–≤ (–Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç)
        if (sessionData.fullQuestionsData && sessionData.quizState) {
            console.log("–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –∏–∑ –∞–≤—Ç–æ–Ω–æ–º–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (–Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç).");
            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞–ø—Ä—è–º—É—é –∏–∑ –æ–±—ä–µ–∫—Ç–∞ —Å–µ—Å—Å–∏–∏
            allParsedQuestions = sessionData.fullQuestionsData;
            questionsForCurrentQuiz = sessionData.quizState;
            isPdfSession = sessionData.isPdfSession || false;
        } else {
            // Fallback –¥–ª—è —Å—Ç–∞—Ä—ã—Ö —Å–µ—Å—Å–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –∑–∞–≤–∏—Å—è—Ç –æ—Ç localStorage
            console.warn("–û–±–Ω–∞—Ä—É–∂–µ–Ω —Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–µ—Å—Å–∏–∏. –ü–æ–ø—ã—Ç–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑ localStorage.");
            const recentFiles = JSON.parse(localStorage.getItem(RECENT_FILES_STORAGE_KEY)) || [];
            const originalFile = recentFiles.find(f => f.name === sessionData.originalFileNameForReview);

            if (!originalFile || !originalFile.content) {
                alert(_('error_session_file_not_found'));
                deleteSavedSession(fileName);
                return;
            }
            allParsedQuestions = parseQstContent(originalFile.content);
            questionsForCurrentQuiz = sessionData.questionOrderIndices.map(originalIndex => ({
                ...allParsedQuestions[originalIndex],
                originalIndex
            }));
            isPdfSession = false; // –í —Å—Ç–∞—Ä—ã—Ö —Å–µ—Å—Å–∏—è—Ö –Ω–µ –±—ã–ª–æ PDF
        }
        // --- –ö–û–ù–ï–¶ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô ---
        
        userAnswers = sessionData.userAnswers;
        currentQuestionIndex = sessionData.currentQuestionIndex;
        score = sessionData.score;
        quizSettings = sessionData.quizSettings;
        timeLeftInSeconds = sessionData.timeLeftInSeconds;
        originalFileNameForReview = sessionData.originalFileNameForReview;

        fileUploadArea.classList.add('hidden');
        quizSetupArea.classList.add('hidden');
        quizArea.classList.remove('hidden');
        appTitleHeader?.classList.add('hidden');

        totalQuestionsNumEl.textContent = questionsForCurrentQuiz.filter(q => q.type !== 'category').length;
        updateScoreDisplay();
        setupTimer(sessionData.quizSettings.timeLimit);
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª–∑—É–Ω–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏
        if (timeLimitSlider) {
            timeLimitSlider.value = sessionData.quizSettings.timeLimit || 0;
            updateSingleSliderVisuals();
        }
        generateQuickNav();
        loadQuestion(currentQuestionIndex);

        webSearchDropdown?.classList.remove('hidden');
        finishTestButton?.classList.remove('hidden');
        continueLaterButton?.classList.remove('hidden');
        copyQuestionBtnQuiz?.classList.remove('hidden');
        getEl('favoriteQuestionBtn')?.classList.remove('hidden');
        languageToggle?.classList.add('hidden');
        quickModeToggle?.classList.remove('hidden');
        triggerWordToggle?.classList.remove('hidden');
        updateTranslateButtonsVisibility();

        window.addEventListener('beforeunload', handleBeforeUnload);
    }

    
    async function deleteSavedSession(fileName) {
        // === –ù–ê–ß–ê–õ–û –ò–ó–ú–ï–ù–ï–ù–ò–ô ===

        // 1. –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, –≤—Å—Ç–∞–≤–ª—è—è –≤ –Ω–µ–≥–æ –∏–º—è —Ñ–∞–π–ª–∞.
        const confirmationMessage = _('confirm_delete_session').replace('{fileName}', fileName);

        // 2. –í—ã–∑—ã–≤–∞–µ–º –Ω–∞—à–µ –∫—Ä–∞—Å–∏–≤–æ–µ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –≤–º–µ—Å—Ç–æ —É—Ä–æ–¥–ª–∏–≤–æ–≥–æ confirm().
        const confirmed = await showConfirmationModal(
            'confirm_action_title', // –ö–ª—é—á –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞ "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è"
            confirmationMessage,      // –£–∂–µ –≥–æ—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            'confirm_button_delete' // –ö–ª—é—á –¥–ª—è –∫—Ä–∞—Å–Ω–æ–π –∫–Ω–æ–ø–∫–∏ "–£–¥–∞–ª–∏—Ç—å"
        );

        // 3. –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª "–£–¥–∞–ª–∏—Ç—å", –≤—ã–ø–æ–ª–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ.
        if (confirmed) {
            await DBManager.delete(fileName, 'SavedSessions');
            loadSavedSession();
        }
        // === –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–ô ===
    }

 

    function loadTheme() {
        const currentThemeId = localStorage.getItem('theme') || 'dark-mode'; // <-- –í–û–¢ –ò–ó–ú–ï–ù–ï–ù–ò–ï
        
        // 1. –£–¥–∞–ª—è–µ–º –í–°–ï –≤–æ–∑–º–æ–∂–Ω—ã–µ –∫–ª–∞—Å—Å—ã —Ç–µ–º
        Object.keys(THEMES).forEach(themeKey => {
            document.body.classList.remove(themeKey);
        });
        
        // 2. –î–æ–±–∞–≤–ª—è–µ–º –Ω—É–∂–Ω—ã–π –∫–ª–∞—Å—Å, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ —Å–≤–µ—Ç–ª–∞—è —Ç–µ–º–∞
        if (currentThemeId !== 'light') {
            document.body.classList.add(currentThemeId);
        }

        // 3. –û–±–Ω–æ–≤–ª—è–µ–º –∏–∫–æ–Ω–∫—É –≤ –≥–ª–∞–≤–Ω–æ–π –∫–Ω–æ–ø–∫–µ
        if (themeIcon) { 
            const iconName = {
                'glass-dark': 'gem',
                'synthwave-mode': 'milestone',
                'dark-mode': 'moon',
                'claude-mode': 'cloud-sun',
                'light': 'sun'
            }[currentThemeId] || 'sun-moon';
            
            themeIcon.innerHTML = `<i data-lucide="${iconName}"></i>`;
        }

        // 4. –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –ø—É–Ω–∫—Ç –≤ –≤—ã–ø–∞–¥–∞—é—â–µ–º —Å–ø–∏—Å–∫–µ
        if (themeDropdownContent) {
            const links = themeDropdownContent.querySelectorAll('a');
            links.forEach(link => {
                link.classList.toggle('active', link.dataset.theme === currentThemeId);
            });
        }
        
        // 5. –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –∏–∫–æ–Ω–∫–∏
        if (window.lucide) {
            lucide.createIcons();
        }
    }



    function populateThemeDropdown() {
        if (!themeDropdownContent) return;
        themeDropdownContent.innerHTML = ''; // –û—á–∏—â–∞–µ–º –Ω–∞ —Å–ª—É—á–∞–π –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞

        for (const themeId in THEMES) {
            const theme = THEMES[themeId];
            const link = document.createElement('a');
            link.href = '#';
            link.dataset.theme = themeId;
            link.title = theme.name; // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–º—ã –≤–æ –≤—Å–ø–ª—ã–≤–∞—é—â—É—é –ø–æ–¥—Å–∫–∞–∑–∫—É
            link.innerHTML = `<span class="theme-option-icon">${theme.icon}</span>`;
            themeDropdownContent.appendChild(link);
        }
    }

    /**
     * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–æ–≤—É—é —Ç–µ–º—É, —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç UI.
     * @param {string} themeId - ID –Ω–æ–≤–æ–π —Ç–µ–º—ã.
     */
    function setTheme(themeId) {
        localStorage.setItem('theme', themeId);
        loadTheme();
    }


    async function handleCopyExplanation() {
        const outputEl = getEl('aiExplanationOutput');
        if (!outputEl) return;

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º innerText, —á—Ç–æ–±—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç —Ç–∞–∫, –∫–∞–∫ –µ–≥–æ –≤–∏–¥–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å,
        // –±–µ–∑ HTML-—Ç–µ–≥–æ–≤, –Ω–æ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–µ—Ä–µ–Ω–æ—Å–∞–º–∏ —Å—Ç—Ä–æ–∫.
        const textToCopy = outputEl.innerText;

        if (textToCopy.trim()) {
            await copyToClipboardMain(textToCopy);
        }
    }


    // --- –ù–û–í–´–ï –§–£–ù–ö–¶–ò–ò –î–õ–Ø –ü–ï–†–ï–í–û–î–ê –Ø–ó–´–ö–ê ---

 

    /**
     * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —è–∑—ã–∫ –¥–ª—è –≤—Å–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å.
     * @param {string} lang - –ö–æ–¥ —è–∑—ã–∫–∞ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ ('ru', 'en', 'kk').
     */
    function setLanguage(lang) {
        // 1. –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ localStorage –¥–ª—è –±—É–¥—É—â–∏—Ö —Å–µ—Å—Å–∏–π.
        localStorage.setItem('appLanguage', lang);
        
        // 2. –í—ã–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥ setLanguage –∏–∑ –º–æ–¥—É–ª—è —á–∞—Ç–∞, —á—Ç–æ–±—ã –æ–Ω —Ç–æ–∂–µ –æ–±–Ω–æ–≤–∏–ª—Å—è.
        // –î–æ–±–∞–≤–ª–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –º–æ–¥—É–ª—å —á–∞—Ç–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.
        if (window.ChatModule) {
            ChatModule.setLanguage(lang);
        }

        // 3. –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –ø–∞–∫–µ—Ç –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞.
        const translations = LANG_PACK[lang];
        if (!translations) {
            console.error(`–ü–∞–∫–µ—Ç –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –¥–ª—è —è–∑—ã–∫–∞ "${lang}" –Ω–µ –Ω–∞–π–¥–µ–Ω.`);
            return;
        }

        // 4. –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–∞—Ö —Å –∞—Ç—Ä–∏–±—É—Ç–æ–º data-lang-key.
        // –≠—Ç–æ –æ—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ö–∞–Ω–∏–∑–º –ø–µ—Ä–µ–≤–æ–¥–∞ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞.
        document.querySelectorAll('[data-lang-key]').forEach(el => {
            if (el.hasAttribute('data-lang-skip-content')) return; // <-- –î–û–ë–ê–í–õ–ï–ù–û: –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —Å –º–µ—Ç–∫–æ–π

            const key = el.dataset.langKey;
            if (translations[key]) {
                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–æ–≤ –∏–ª–∏ –¥–ª—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞.
                if (el.placeholder) {
                    el.placeholder = translations[key];
                } else {
                    // –ò—Å–ø–æ–ª—å–∑—É–µ–º innerHTML, —Ç–∞–∫ –∫–∞–∫ –≤ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –ø–µ—Ä–µ–≤–æ–¥–∞—Ö –º–æ–≥—É—Ç –±—ã—Ç—å —Ç–µ–≥–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, <span>)
                    el.innerHTML = translations[key];
                }
            }
        });
        
        // 5. –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–ø–ª—ã–≤–∞—é—â–∏–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏ (–∞—Ç—Ä–∏–±—É—Ç title) —É –∫–Ω–æ–ø–æ–∫ –≤ —à–∞–ø–∫–µ.
        const copyBtn = getEl('copyQuestionBtnQuiz');
        if (copyBtn) copyBtn.title = translations.copy_question_title;
        
        const searchWebBtn = getEl('searchWebButton');
        if (searchWebBtn) searchWebBtn.title = translations.search_web_title;
        
        const chatBtn = getEl('chatToggle');
        if (chatBtn) chatBtn.title = translations.chat_button_title;
        
        const quickModeBtn = getEl('quickModeToggle');
        if (quickModeBtn) quickModeBtn.title = translations.quick_mode_title;
        
        const triggerBtn = getEl('triggerWordToggle');
        if (triggerBtn) triggerBtn.title = translations.trigger_words_title;
        
        const themeBtn = getEl('themeDropdownButton');
        if (themeBtn) themeBtn.title = translations.theme_button_title;
        
        const langBtn = getEl('languageToggle');
        if (langBtn) langBtn.title = translations.language_toggle_title;
        
        const favoriteBtn = getEl('favoriteQuestionBtn');
        if (favoriteBtn) favoriteBtn.title = translations.favorite_button_title;
        
        const translateBtn = getEl('translateQuestionBtn');
        if (translateBtn) translateBtn.title = translations.translate_question_title;
        
// 6. –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —Å–∞–º–æ–π –∫–Ω–æ–ø–∫–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —è–∑—ã–∫–∞.
        // –ö–Ω–æ–ø–∫–∞ –¥–æ–ª–∂–Ω–∞ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –∞–±–±—Ä–µ–≤–∏–∞—Ç—É—Ä—É –¢–ï–ö–£–©–ï–ì–û —è–∑—ã–∫–∞.
        if (languageToggle && SUPPORTED_LANGS[lang]) {
            languageToggle.textContent = SUPPORTED_LANGS[lang];
        }

        // 7. –ï—Å–ª–∏ –æ—Ç–∫—Ä—ã—Ç —ç–∫—Ä–∞–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞, –ø–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –µ–≥–æ, —á—Ç–æ–±—ã –ø—Ä–∏–º–µ–Ω–∏–ª—Å—è –Ω–æ–≤—ã–π —è–∑—ã–∫.
        if (searchResultsContainer && !searchResultsContainer.classList.contains('hidden') && searchResultsData.length > 0) {
            console.log('–ü–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ –¥–ª—è –Ω–æ–≤–æ–≥–æ —è–∑—ã–∫–∞...');
            displaySingleResult(currentResultIndex);
        }
        
// 9. –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ –∫–Ω–æ–ø–∫–∞—Ö —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞, –µ—Å–ª–∏ –æ–Ω–∏ –≤–∏–¥–∏–º—ã.
        updateDownloadButtonsText();

        // 10. (–ù–û–í–´–ô –®–ê–ì) –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –≤—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫ –ø–∞—Ä—Å–µ—Ä–∞ —Å –Ω–æ–≤—ã–º —è–∑—ã–∫–æ–º.
        populateParserPatterns();

        // --- –ù–ê–ß–ê–õ–û –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø: –î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –≤–æ–ø—Ä–æ—Å–æ–≤ ---
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∏–¥–µ–Ω –ª–∏ —ç–∫—Ä–∞–Ω –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –ª–∏ –≤–æ–ø—Ä–æ—Å—ã
        if (quizSetupArea && !quizSetupArea.classList.contains('hidden') && allParsedQuestions.length > 0) {
            const questionCount = allParsedQuestions.filter(q => q.type !== 'category').length;
            // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ—Å–æ–±–∏—Ä–∞–µ–º —Å—Ç—Ä–æ–∫—É —Å —É–∂–µ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–º–∏ —á–∞—Å—Ç—è–º–∏
            maxQuestionsInfoEl.textContent = `(${_('total_questions_label')} ${questionCount} ${_('questions_label_for_range')})`;
        }
        // --- –ö–û–ù–ï–¶ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø ---
    }



    function toggleLanguage() {
        const currentLang = localStorage.getItem('appLanguage') || 'ru';
        
        // 2. –ò—Å–ø–æ–ª—å–∑—É–µ–º –µ–¥–∏–Ω—ã–π –º–∞—Å—Å–∏–≤ LANG_CYCLE
        const currentIndex = LANG_CYCLE.indexOf(currentLang);
        const nextIndex = (currentIndex + 1) % LANG_CYCLE.length;
        const newLang = LANG_CYCLE[nextIndex];
        
        setLanguage(newLang);
    }

    function handleCopyQuestionInQuiz() {
        if (currentQuestionIndex >= questionsForCurrentQuiz.length) {
            alert(_('error_no_question_to_copy')); // –ò–ó–ú–ï–ù–ï–ù–ò–ï
            return;
        }

        const questionData = questionsForCurrentQuiz[currentQuestionIndex];
        
        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤ .qst —Ñ–æ—Ä–º–∞—Ç
        let qstContent = `? ${questionData.text}\n`;
        questionData.options.forEach(opt => {
            qstContent += `${opt.isCorrect ? '+' : '-'} ${opt.text}\n`;
        });

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–∞—à—É –≥–ª–æ–±–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
        copyToClipboardMain(qstContent.trim());
    }


    function handleFavoriteClickInQuiz() {
        if (!ChatModule.isInitialized() || !ChatModule.getCurrentUser()) {
            alert(('error_no_question_to_favorite'));
            ChatModule.openAuthModal();
            return;
        }
        if (currentQuestionIndex >= questionsForCurrentQuiz.length) {
            alert(_('error_no_current_question'));
            return;
        }
        const questionData = questionsForCurrentQuiz[currentQuestionIndex];
        const questionObject = {
            text: questionData.text,
            options: questionData.options,
        };
        ChatModule.addToFavorites(questionObject, 'question');
    }

    function handleFavoriteClickInSearch(event, rawQuestionText) {
        event.stopPropagation(); 
        if (!ChatModule.isInitialized() || !ChatModule.getCurrentUser()) {
            alert(_('error_favorites_require_auth'));
            ChatModule.openAuthModal();
            return;
        }
        
        // –ò–°–ü–†–ê–í–¨–¢–ï —ç—Ç—É —Å—Ç—Ä–æ–∫—É - —É–±–µ—Ä–∏—Ç–µ escape():
        const cleanText = rawQuestionText.replace(/\\n/g, '\n');
        const parsedQuestion = parseQstContent(`? ${cleanText}`)[0];
        
        if (parsedQuestion) {
            const questionObject = {
                text: parsedQuestion.text,
                options: parsedQuestion.options
            };
            ChatModule.addToFavorites(questionObject, 'question');
        } else {
            alert(_('error_cannot_process_question'));
        }
    }


    function handleCopyClickInSearch(event, rawQuestionText) {
    event.stopPropagation(); // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–µ –¥—Ä—É–≥–∏—Ö –∫–ª–∏–∫–æ–≤

    // –¢–µ–∫—Å—Ç –∏–∑ –±–∞–∑—ã –ø—Ä–∏—Ö–æ–¥–∏—Ç —Å —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –ø–µ—Ä–µ–Ω–æ—Å–∞–º–∏ —Å—Ç—Ä–æ–∫ (\\n). 
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∏—Ö –≤ –Ω–∞—Å—Ç–æ—è—â–∏–µ –ø–µ—Ä–µ–Ω–æ—Å—ã (\n).
    const cleanText = rawQuestionText.replace(/\\n/g, '\n');
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–∞—à—É –∂–µ —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
    copyToClipboardMain(cleanText); 
}

    function showExitToast() {
        const toast = getEl('exitToast');
        if (!toast) return;

        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —Å–ª—É—á–∞–π —Å–º–µ–Ω—ã —è–∑—ã–∫–∞
        toast.textContent = _('exit_toast_text');

        toast.classList.remove('hidden');
        toast.classList.add('show');

        setTimeout(() => {
            toast.classList.remove('show');
        }, 1700); // –°–∫—Ä—ã–≤–∞–µ–º —á—É—Ç—å —Ä–∞–Ω—å—à–µ, —á–µ–º —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç—Å—è —Ñ–ª–∞–≥
    }

    


    function escapeHTML(str) {
        const p = document.createElement("p");
        p.textContent = str;
        return p.innerHTML;
    }



    /**
     * –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø
     * –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–æ—Ä–æ—Ç–∫–∏–π SHA-1 —Ö—ç—à –∏–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ.
     * @param {string} text - –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞.
     * @returns {Promise<string>} - –ü—Ä–æ–º–∏—Å, –∫–æ—Ç–æ—Ä—ã–π —Ä–∞–∑—Ä–µ—à–∞–µ—Ç—Å—è –≤ —Å—Ç—Ä–æ–∫—É —Ö—ç—à–∞.
     */
    async function generateContentHash(text) {
        if (!text || typeof text !== 'string') return 'no_content';
        try {
            // –ö–æ–¥–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –≤ –±–∏–Ω–∞—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
            const encoder = new TextEncoder();
            const data = encoder.encode(text);
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º Web Crypto API –¥–ª—è —Ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
            const hashBuffer = await crypto.subtle.digest('SHA-1', data);
            // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –±–∏–Ω–∞—Ä–Ω—ã–π —Ö—ç—à –≤ —Å—Ç—Ä–æ–∫—É HEX
            const hashArray = Array.from(new Uint8Array(hashBuffer));
            const hashHex = hashArray.map(b => b.toString(16).padStart(2, '0')).join('');
            return hashHex;
        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ö—ç—à–∞:", error);
            // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–ª–∏–Ω—É –∫–∞–∫ –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç
            return `fallback_${text.length}`;
        }
    }


    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Ü–µ–ª–µ–≤–æ–π —ç–ª–µ–º–µ–Ω—Ç —Ç–µ–∫—Å—Ç, –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—å.
     * @param {HTMLElement} targetElement - –≠–ª–µ–º–µ–Ω—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, textarea), –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å.
     * @returns {boolean} - –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç true, –µ—Å–ª–∏ –º–æ–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å, –∏ false, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ–Ω–∏–ª –¥–µ–π—Å—Ç–≤–∏–µ.
     */
    function checkAndConfirmOverwrite(targetElement) {
        if (targetElement.value.trim() !== '') {
            // –ï—Å–ª–∏ –ø–æ–ª–µ –Ω–µ –ø—É—Å—Ç–æ–µ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            return confirm(_('parser_overwrite_warning'));
        }
        // –ï—Å–ª–∏ –ø–æ–ª–µ –ø—É—Å—Ç–æ–µ, —Ä–∞–∑—Ä–µ—à–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –±–µ–∑ –¥–∏–∞–ª–æ–≥–∞
        return true;
    }




    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤ –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞ –¥–ª—è –ò–ò –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.
     */
    function checkAICharacterLimit() {
        if (!aiParserInput || !generateTestFromTextBtn) return; // <-- –ò–ó–ú–ï–ù–ï–ù–û

        const currentLength = aiParserInput.value.length; // <-- –ò–ó–ú–ï–ù–ï–ù–û
        const originalButtonText = _('ai_generate_from_text_button');

        if (currentLength > AI_INPUT_CHAR_LIMIT) {
            generateTestFromTextBtn.disabled = true;
            const warningText = _('ai_char_limit_exceeded')
                .replace('{current}', currentLength)
                .replace('{max}', AI_INPUT_CHAR_LIMIT);
            generateTestFromTextBtn.innerHTML = `<span>‚ö†Ô∏è ${warningText}</span>`;
            aiParserInput.style.borderColor = 'var(--accent, red)'; // <-- –ò–ó–ú–ï–ù–ï–ù–û
        } else {
            generateTestFromTextBtn.disabled = false;
            generateTestFromTextBtn.innerHTML = `<span data-lang-key="ai_generate_from_text_button">${originalButtonText}</span>`;
            aiParserInput.style.borderColor = ''; // <-- –ò–ó–ú–ï–ù–ï–ù–û
        }
    }




    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è "—É–º–Ω–æ–≥–æ" —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –Ω–∞ –±–ª–æ–∫–∏
    function smartSplitIntoBlocks(text) {
        // –°–Ω–∞—á–∞–ª–∞ –∑–∞–º–µ–Ω—è–µ–º –¥–≤–æ–π–Ω—ã–µ –∏–ª–∏ –±–æ–ª–µ–µ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫ –Ω–∞ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
        const withDelimiter = text.replace(/\n\s*\n/g, '<<<BLOCK_DELIMITER>>>');
        // –¢–µ–ø–µ—Ä—å –¥–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –ø–µ—Ä–µ–¥ —Ç–µ–≥–∞–º–∏ –≤–æ–ø—Ä–æ—Å–æ–≤, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ –≤ –Ω–∞—á–∞–ª–µ —Å—Ç—Ä–æ–∫–∏
        const finalWithDelimiter = withDelimiter.replace(/\n(?=<–í–æ–ø—Ä–æ—Å>|<question>)/gi, '<<<BLOCK_DELIMITER>>>');
        
        return finalWithDelimiter.split('<<<BLOCK_DELIMITER>>>').filter(b => b.trim() !== '');
    }



    // ======== –ù–ê–ß–ê–õ–û –ù–û–í–û–ì–û –ö–û–î–ê –î–õ–Ø –ó–ê–ú–ï–ù–´ ========
    /**
     * –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ä—Å–µ—Ä –¥–ª—è –º–Ω–æ–≥–æ—è–∑—ã—á–Ω—ã—Ö PDF-–±–ª–æ–∫–æ–≤ —Ñ–æ—Ä–º–∞—Ç–∞ "–í–æ–ø—Ä–æ—Å No...".
     * –§–ò–ù–ê–õ–¨–ù–ê–Ø –í–ï–†–°–ò–Ø: –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –∏ –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω–∞—è –ª–æ–≥–∏–∫–∞.
     * @param {string} text - –¢–µ–∫—Å—Ç –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ (–æ–±—ã—á–Ω–æ —Å–æ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã PDF).
     * @returns {Array<object>} - –ú–∞—Å—Å–∏–≤ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ QST.
     */
    function parseTrilingualPdfBlock(text) {
        // –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –±–ª–æ–∫–∞ –æ–¥–Ω–æ–≥–æ —è–∑—ã–∫–∞.
        const parseLanguageBlock = (lines) => {
            if (!lines || lines.length < 2) return null;

            const optionMarkerRegex = /^\s*\d+[\.\)]\s*/;

            // 1. –ù–∞—Ö–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–∏, –∫–æ—Ç–æ—Ä–∞—è —è–≤–ª—è–µ—Ç—Å—è –≤–∞—Ä–∏–∞–Ω—Ç–æ–º –æ—Ç–≤–µ—Ç–∞.
            const firstOptionIndex = lines.findIndex(line => optionMarkerRegex.test(line.trim()));
            
            // –ï—Å–ª–∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, —Å—á–∏—Ç–∞–µ–º –±–ª–æ–∫ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º.
            if (firstOptionIndex === -1) return null;

            // 2. –í—Å—ë –¥–æ —ç—Ç–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞ - —ç—Ç–æ —Å—Ç—Ä–æ–∫–∏ –≤–æ–ø—Ä–æ—Å–∞.
            const questionLines = lines.slice(0, firstOptionIndex)
                .map(line => line.trim())
                .filter(line => line); // –£–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏

            // 3. –í—Å—ë –Ω–∞—á–∏–Ω–∞—è —Å —ç—Ç–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞ - —ç—Ç–æ —Å—Ç—Ä–æ–∫–∏ —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏.
            const optionLinesRaw = lines.slice(firstOptionIndex);
            
            if (questionLines.length === 0 || optionLinesRaw.length === 0) return null;

            // 4. –°–∫–ª–µ–∏–≤–∞–µ–º –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã.
            const optionLinesProcessed = [];
            let currentOption = '';
            for (const line of optionLinesRaw) {
                if (optionMarkerRegex.test(line.trim())) {
                    if (currentOption) optionLinesProcessed.push(currentOption);
                    currentOption = line.trim();
                } else if (currentOption) {
                    currentOption += ' ' + line.trim();
                }
            }
            if (currentOption) optionLinesProcessed.push(currentOption);

            // 5. –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç –≤–æ–ø—Ä–æ—Å–∞
            const questionText = questionLines.join(' ').trim();
            const options = [];
            let correctAnswer = null;

            optionLinesProcessed.forEach(line => {
                let cleanText = line.replace(optionMarkerRegex, '').trim();
                if (cleanText.endsWith('*')) {
                    cleanText = cleanText.slice(0, -1).trim();
                    correctAnswer = cleanText;
                }
                options.push(cleanText);
            });

            if (questionText && correctAnswer) {
                return { text: questionText, options: options, correctAnswer: correctAnswer };
            }
            return null;
        };

        // –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ (–æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π, –æ–Ω–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ)
        const russianQuestions = [];
        const kazakhQuestions = [];
        const englishQuestions = [];

        const blocks = text.split(/(?=^–í–æ–ø—Ä–æ—Å (No|‚Ññ) \d+)/m).filter(b => b.trim() !== '');

        for (const block of blocks) {
            const lines = block.split('\n');
            const kazakhStartRegex = /[”ô—ñ“£“ì“Ø“±“õ”©“ª]/i;
            const englishStartRegex = /\b(is|are|what|when|allowed|prohibited|which|driver|vehicle)\b/i;

            let kazakhStartIndex = lines.findIndex(line => kazakhStartRegex.test(line));
            if (kazakhStartIndex === -1) kazakhStartIndex = lines.length;

            let englishStartIndex = lines.findIndex((line, index) => index >= kazakhStartIndex && englishStartRegex.test(line));
            if (englishStartIndex === -1) englishStartIndex = lines.length;

            const russianLines = lines.slice(0, kazakhStartIndex);
            const kazakhLines = lines.slice(kazakhStartIndex, englishStartIndex);
            const englishLines = lines.slice(englishStartIndex);

            const rusResult = parseLanguageBlock(russianLines);
            if (rusResult) russianQuestions.push(rusResult);

            const kazResult = parseLanguageBlock(kazakhLines);
            if (kazResult) kazakhQuestions.push(kazResult);

            const engResult = parseLanguageBlock(englishLines);
            if (engResult) englishQuestions.push(engResult);
        }

        const allQuestions = [...russianQuestions, ...kazakhQuestions, ...englishQuestions];
        return allQuestions.map(q => ({
            text: q.text,
            options: q.options.map(optText => ({
                text: optText,
                isCorrect: optText === q.correctAnswer
            })),
            correctAnswerIndex: q.options.findIndex(optText => optText === q.correctAnswer)
        }));
    }
    // ======== –ö–û–ù–ï–¶ –ù–û–í–û–ì–û –ö–û–î–ê –î–õ–Ø –ó–ê–ú–ï–ù–´ ========



    const PARSER_PATTERNS = [
// ======== –ù–ê–ß–ê–õ–û –ù–û–í–û–ì–û –ö–û–î–ê –î–õ–Ø –ó–ê–ú–ï–ù–´ ========
        {
            id: 'trilingual_numbered_asterisk',
            langKey: "parser_pattern_trilingual",
            detector: (text) => /^–í–æ–ø—Ä–æ—Å (No|‚Ññ) \d+/m.test(text) && /^\s*\d+\.\s*/m.test(text) && /\*\s*$/m.test(text),
            // –¢–µ–ø–µ—Ä—å –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –ø—Ä–æ—Å—Ç–æ –≤—ã–∑—ã–≤–∞–µ—Ç –Ω–∞—à—É –Ω–æ–≤—É—é —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
            processor: (text) => {
                const questions = parseTrilingualPdfBlock(text);
                // –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä–∞ –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –¥—Ä—É–≥–æ–π —Ñ–æ—Ä–º–∞—Ç, –ø–æ—ç—Ç–æ–º—É –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º
                return questions.map(q => ({
                    text: q.text,
                    options: q.options.map(opt => opt.text),
                    correctAnswer: q.options[q.correctAnswerIndex].text
                }));
            }
        },
// ======== –ö–û–ù–ï–¶ –ù–û–í–û–ì–û –ö–û–î–ê –î–õ–Ø –ó–ê–ú–ï–ù–´ ========
        {
            id: 'structured_test_format',
            langKey: "parser_pattern_structured",
            detector: (text) => /^\s*\d+[\.\)]/m.test(text) && /^\s*[a-zA-Z–∞-—è–ê-–Ø][\.\)]/m.test(text),
            processor: (text) => {
                const questions = [];
                let currentQuestion = null;
                const lines = text.split(/\r?\n/);

                const questionStartRegex = /^\s*\d+[\.\)]\s*/;
                const optionMarkerRegex = /^\s*[a-zA-Z–∞-—è–ê-–Ø][\.\)]\s*/;

                const saveCurrentQuestion = () => {
                    if (currentQuestion && currentQuestion.correctAnswer && currentQuestion.options.length > 0) {
                        currentQuestion.text = currentQuestion.text.trim();
                        questions.push(currentQuestion);
                    }
                };

                for (const line of lines) {
                    const trimmedLine = line.trim();
                    if (!trimmedLine) continue;

                    if (questionStartRegex.test(trimmedLine)) {
                        saveCurrentQuestion();
                        currentQuestion = {
                            text: trimmedLine.replace(questionStartRegex, ''),
                            options: [],
                            correctAnswer: null
                        };
                    } 
                    else if (currentQuestion) {
                        if (optionMarkerRegex.test(trimmedLine)) {
                            const optionText = trimmedLine.replace(optionMarkerRegex, '');
                            
                            // --- –ù–ê–ß–ê–õ–û –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø ---
                            let isCorrect = false;
                            let cleanOptionText = optionText.trim(); // –°—Ä–∞–∑—É —É–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã

                            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ —Å–æ –∑–Ω–∞–∫–∞ "+"
                            if (cleanOptionText.startsWith('+')) {
                                isCorrect = true;
                                // –£–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ü–ï–†–í–´–ô "+" –≤ –Ω–∞—á–∞–ª–µ —Å—Ç—Ä–æ–∫–∏, –∞ –Ω–µ –≤—Å–µ –ø–æ–¥—Ä—è–¥
                                cleanOptionText = cleanOptionText.substring(1).trim();
                            }
                            // --- –ö–û–ù–ï–¶ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø ---

                            currentQuestion.options.push(cleanOptionText);
                            if (isCorrect) {
                                currentQuestion.correctAnswer = cleanOptionText;
                            }
                        } 
                        else {
                            currentQuestion.text += ' ' + trimmedLine;
                        }
                    }
                }

                saveCurrentQuestion();
                return questions;
            }
        },
        {
            id: 'plus_at_end_generic',
            langKey: "parser_pattern_plus_at_end",
            detector: (text) => /\+\s*$/m.test(text),
            processor: (text) => {
                const questions = [];
                const blocks = smartSplitIntoBlocks(text);
                // –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏ —É–¥–∞–ª–µ–Ω–∏—è –º–∞—Ä–∫–µ—Ä–æ–≤ —Ç–∏–ø–∞ A), B), c. –∏ —Ç.–¥.
                const markerRegex = /^\s*[a-zA-Z–∞-—è–ê-–Ø][\.\)]\s*/;

                for (const block of blocks) {
                    const lines = block.trim().split('\n');
                    if (lines.length < 2) continue;

                    let questionLines = [];
                    const optionLines = [];
                    let correctAnswer = null;
                    
                    let firstOptionIndex = -1;

                    for (let i = 1; i < lines.length; i++) {
                        if (lines[i] && /^\s/.test(lines[i])) { 
                            firstOptionIndex = i;
                            break;
                        }
                    }

                    if (firstOptionIndex === -1) {
                        firstOptionIndex = 1;
                    }

                    questionLines = lines.slice(0, firstOptionIndex).filter(l => l.trim() !== '');
                    const rawOptionLines = lines.slice(firstOptionIndex).filter(l => l.trim() !== '');
                    
                    const questionText = questionLines.join(' ').replace(/^\s*\d+\s*\.?\s*/, '').trim();

                    rawOptionLines.forEach(line => {
                        const trimmedLine = line.trim();
                        let answer = trimmedLine;
                        let isCorrect = false;

                        // --- –ù–ê–ß–ê–õ–û –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø ---
                        if (trimmedLine.endsWith('+')) {
                            answer = trimmedLine.slice(0, -1).trim(); // –£–¥–∞–ª—è–µ–º "+" –≤ –∫–æ–Ω—Ü–µ
                            isCorrect = true;
                        }

                        // –£–¥–∞–ª—è–µ–º –±—É–∫–≤–µ–Ω–Ω—ã–π –º–∞—Ä–∫–µ—Ä, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
                        answer = answer.replace(markerRegex, '').trim();
                        
                        optionLines.push(answer);
                        if (isCorrect) {
                            correctAnswer = answer;
                        }
                        // --- –ö–û–ù–ï–¶ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø ---
                    });

                    if (questionText && correctAnswer) {
                        questions.push({
                            text: questionText,
                            options: optionLines,
                            correctAnswer: correctAnswer
                        });
                    }
                }
                return questions;
            }
        },
        {
            id: 'first_answer_correct_fallback',
            langKey: "parser_pattern_no_markers",
            detector: (text) => {
                if (!text || text.trim() === '') return false;
                const hasPlusAtStart = /^\s*\+/m.test(text);
                const hasPlusAtEnd = /\+\s*$/m.test(text);
                const hasTags = /<question>|<variant>|<–í–æ–ø—Ä–æ—Å>|<–≤–∞—Ä–∏–∞–Ω—Ç>/i.test(text);
                if (hasPlusAtStart || hasPlusAtEnd || hasTags) return false;
                const lines = text.trim().split('\n');
                const hasAtLeastTwoLines = lines.length >= 2;
                const hasLetters = /[a-zA-Z–∞-—è–ê-–Ø]/.test(text);
                return hasAtLeastTwoLines && hasLetters;
            },
            processor: (text) => {
                const questions = [];
                const blocks = smartSplitIntoBlocks(text);

                for (const block of blocks) {
                    const lines = block.trim().split('\n').filter(l => l.trim() !== '');
                    if (lines.length < 2) continue;

                    const questionText = lines.shift().replace(/^\s*\d+\s*\.?\s*/, '').trim();
                    const options = lines.map(l => l.trim());
                    
                    if (questionText && options.length > 0) {
                        questions.push({
                            text: questionText,
                            options: options,
                            correctAnswer: options[0]
                        });
                    }
                }
                return questions;
            }
        },
        {
            id: 'numbered_list_plus_answer',
            langKey: "parser_pattern_numbered_plus",
            detector: (text) => /^\s*\d+\./m.test(text) && /^\s*\+/m.test(text),
            processor: (text) => {
                const questions = [];
                let currentQuestion = null;
                const lines = text.split(/\r?\n/);

                for (const line of lines) {
                    const trimmedLine = line.trim();
                    if (trimmedLine === '') continue;

                    if (/^\d+\.\s*/.test(trimmedLine)) {
                        if (currentQuestion && currentQuestion.correctAnswer) {
                            questions.push(currentQuestion);
                        }
                        currentQuestion = {
                            text: trimmedLine.replace(/^\d+\.\s*/, '').trim(),
                            options: [],
                            correctAnswer: null
                        };
                    } else if (trimmedLine.startsWith('+') && currentQuestion) {
                        const answerText = trimmedLine.substring(1).trim();
                        currentQuestion.correctAnswer = answerText;
                        currentQuestion.options.push(answerText);
                    } else if (currentQuestion && !currentQuestion.correctAnswer) {
                        currentQuestion.options.push(trimmedLine);
                    } else if (currentQuestion && currentQuestion.correctAnswer) {
                        currentQuestion.options.push(trimmedLine);
                    }
                }

                if (currentQuestion && currentQuestion.correctAnswer) {
                    questions.push(currentQuestion);
                }

                return questions;
            }
        },
        {
            id: 'plus_at_start',
            langKey: "parser_pattern_plus_at_start",
            detector: (text) => text.split('\n').some(line => line.trim().startsWith('+')),
            processor: (text) => {
                const questions = [];
                const blocks = text.split(/\n\s*\n/);
                for (const block of blocks) {
                    const lines = block.trim().split('\n').filter(l => l.trim() !== '');
                    if (lines.length < 2) continue;

                    const questionLines = [];
                    const optionLines = [];
                    let correctAnswer = null;

                    lines.forEach(line => {
                        const trimmedLine = line.trim();
                        
                        // --- –ù–ê–ß–ê–õ–û –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø ---
                        if (trimmedLine.startsWith('+')) {
                            // –£–¥–∞–ª—è–µ–º "+" –∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤ –≤–∞—Ä–∏–∞–Ω—Ç—ã
                            correctAnswer = trimmedLine.substring(1).trim();
                            optionLines.push(correctAnswer);
                        } else if (trimmedLine.startsWith('-')) {
                             // –£–¥–∞–ª—è–µ–º "-" –∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤ –≤–∞—Ä–∏–∞–Ω—Ç—ã
                            optionLines.push(trimmedLine.substring(1).trim());
                        } else if (correctAnswer !== null) {
                            // –ï—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞ –ø–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ –º—ã –Ω–∞—à–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç,
                            // —Å—á–∏—Ç–∞–µ–º –µ–µ —Ç–æ–∂–µ –≤–∞—Ä–∏–∞–Ω—Ç–æ–º (–±–µ–∑ –º–∞—Ä–∫–µ—Ä–∞)
                            optionLines.push(trimmedLine);
                        } else {
                            // –ò–Ω–∞—á–µ —ç—Ç–æ —á–∞—Å—Ç—å –≤–æ–ø—Ä–æ—Å–∞
                            questionLines.push(trimmedLine);
                        }
                    });

                    if (questionLines.length > 0 && correctAnswer) {
                        questions.push({
                            text: questionLines.join(' ').replace(/^\s*\d+\s*\.?\s*/, '').trim(),
                            options: optionLines,
                            correctAnswer: correctAnswer
                        });
                    }
                }
                return questions;
            }
        },
        {
            id: 'tags_vopros_variant',
            langKey: "parser_pattern_tags_cyrillic",
            detector: (text) => /<–í–æ–ø—Ä–æ—Å>|<–≤–∞—Ä–∏–∞–Ω—Ç>/i.test(text),
            processor: (text) => {
                const questions = [];
                const cleanedText = text.replace(/^\s*\d+\s*\.?\s*</gm, '<');
                const blocks = cleanedText.split(/<–í–æ–ø—Ä–æ—Å>/i).filter(b => b.trim() !== '');

                for (const block of blocks) {
                    const parts = block.split(/<–≤–∞—Ä–∏–∞–Ω—Ç>/i).map(p => p.trim());
                    if (parts.length < 2) continue;

                    const questionText = parts.shift();
                    questions.push({
                        text: questionText,
                        options: parts,
                        correctAnswer: parts[0]
                    });
                }
                return questions;
            }
        },
        {
            id: 'tags_question_variant',
            langKey: "parser_pattern_tags_latin",
            detector: (text) => /<question|<variant>/i.test(text),
            processor: (text) => {
                const questions = [];
                const cleanedText = text.replace(/^\s*\d+\s*\.?\s*</gm, '<');
                const blocks = cleanedText.split(/<question.*?>/i).filter(b => b.trim() !== '');

                for (const block of blocks) {
                    const parts = block.split(/<variant>/i).map(p => p.trim().replace(/<\/?[^>]+(>|$)/g, ""));
                    if (parts.length < 2) continue;
                    
                    const questionText = parts.shift();
                    questions.push({
                        text: questionText,
                        options: parts,
                        correctAnswer: parts[0]
                    });
                }
                return questions;
            }
        }
    ];


    function processTextWithMultiFormat(text) {
        // === –ù–ê–ß–ê–õ–û –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø: –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∏ —Ä—É—á–Ω–æ–π –ø–æ–¥—Å—á—ë—Ç –∏–Ω–¥–µ–∫—Å–∞ ===

        let allParsedQuestions = [];
        let parsingErrors = [];

        // 1. –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –≤—Å–µ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫ –∫ –µ–¥–∏–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É '\n'.
        //    –≠—Ç–æ —Ä–µ—à–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—É —Å \r\n –∏ –¥–µ–ª–∞–µ—Ç –ø–æ–¥—Å—á–µ—Ç –Ω–∞–¥–µ–∂–Ω—ã–º.
        const normalizedText = text.replace(/\r\n/g, '\n');
        const lines = normalizedText.split('\n');

        const processAndAddBlock = (blockLines, startIndex) => {
            if (blockLines.length === 0) return;
            const blockText = blockLines.join('\n');
            // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–Ω–µ—á–Ω—ã–π –∏–Ω–¥–µ–∫—Å
            const endIndex = startIndex + blockText.length;

            const individualPatterns = PARSER_PATTERNS.filter(p => p.id !== 'multi_format');
            let blockParsed = false;

            for (const pattern of individualPatterns) {
                if (pattern.detector(blockText)) {
                    try {
                        const parsed = pattern.processor(blockText);
                        if (parsed.length > 0) {
                            allParsedQuestions.push(...parsed);
                            blockParsed = true;
                            break;
                        }
                    } catch (e) {
                        console.warn(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –±–ª–æ–∫–∞ —à–∞–±–ª–æ–Ω–æ–º "${pattern.name}":`, e);
                    }
                }
            }
            if (!blockParsed) {
                console.warn("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –±–ª–æ–∫–∞:\n---\n", blockText);
                parsingErrors.push({
                    text: blockText.trim(),
                    start: startIndex,
                    end: endIndex
                });
            }
        };

        // 2. –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä—É—á–Ω–æ–π –ø–æ–¥—Å—á–µ—Ç –∏–Ω–¥–µ–∫—Å–∞ –≤–º–µ—Å—Ç–æ –Ω–µ–Ω–∞–¥–µ–∂–Ω–æ–≥–æ indexOf.
        let currentIndex = 0;
        let currentBlockLines = [];
        let currentBlockStartIndex = 0;

        lines.forEach(line => {
            const trimmedLine = line.trim();
            const isCategoryTag = trimmedLine.startsWith('#_#') && trimmedLine.endsWith('#_#');
            const isNewBlockStart = /^\s*\d+\.\s+/.test(trimmedLine) || /^\s*<question>|^\s*<–í–æ–ø—Ä–æ—Å>/i.test(trimmedLine);
            
            if (isCategoryTag) {
                processAndAddBlock(currentBlockLines, currentBlockStartIndex);
                const categoryName = trimmedLine.slice(3, -3).trim();
                allParsedQuestions.push({ text: categoryName, type: 'category' });
                currentBlockLines = [];
            } else if (isNewBlockStart && currentBlockLines.length > 0) {
                processAndAddBlock(currentBlockLines, currentBlockStartIndex);
                currentBlockLines = [line];
                // –ù–æ–≤—ã–π –±–ª–æ–∫ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å —Ç–µ–∫—É—â–µ–π –ø–æ–∑–∏—Ü–∏–∏
                currentBlockStartIndex = currentIndex;
            } else {
                if (currentBlockLines.length === 0) {
                    // –≠—Ç–æ –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –Ω–æ–≤–æ–≥–æ –±–ª–æ–∫–∞
                    currentBlockStartIndex = currentIndex;
                }
                currentBlockLines.push(line);
            }

            // 3. –í –∫–æ–Ω—Ü–µ –∫–∞–∂–¥–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏ —Å–¥–≤–∏–≥–∞–µ–º –∏–Ω–¥–µ–∫—Å –Ω–∞ –¥–ª–∏–Ω—É —Å—Ç—Ä–æ–∫–∏ + 1 (–∑–∞ —Å–∏–º–≤–æ–ª '\n')
            currentIndex += line.length + 1;
        });

        // –ù–µ –∑–∞–±—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–∞–º—ã–π –ø–æ—Å–ª–µ–¥–Ω–∏–π –±–ª–æ–∫
        processAndAddBlock(currentBlockLines, currentBlockStartIndex);

        return {
            questions: allParsedQuestions,
            errors: parsingErrors
        };
        // === –ö–û–ù–ï–¶ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø ===
    }




    function populateParserPatterns() {
        // –®–ê–ì 1: –ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –æ–ø—Ü–∏–∏
        parserPatternSelect.innerHTML = '';

        // –®–ê–ì 2: –°–æ–∑–¥–∞–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ü–∏—é "–ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ" –∑–∞–Ω–æ–≤–æ, –∏—Å–ø–æ–ª—å–∑—É—è —Å–∏—Å—Ç–µ–º—É –ø–µ—Ä–µ–≤–æ–¥–æ–≤
        const autoOption = document.createElement('option');
        autoOption.value = 'auto';
        autoOption.textContent = _('parser_auto_detect'); // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–ª—é—á –∏–∑ LANG_PACK
        autoOption.selected = true;
        parserPatternSelect.appendChild(autoOption);

        // –®–ê–ì 3: –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏ –∏–∑ –Ω–∞—à–µ–≥–æ –º–∞—Å—Å–∏–≤–∞ (—ç—Ç–æ—Ç –∫–æ–¥ –Ω–µ –º–µ–Ω—è–µ—Ç—Å—è)
        PARSER_PATTERNS.forEach(pattern => {
            const option = document.createElement('option');
            option.value = pattern.id;
            option.textContent = _(pattern.langKey);
            parserPatternSelect.appendChild(option);
        });
    }



    async function handleParserFileInput(event) {
        const files = event.target.files;
        if (!files || files.length === 0) return;

        showGlobalLoader('–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤...');

        let combinedText = '';

        for (const file of files) {
            if (file.name.toLowerCase().endsWith('.pdf')) {
                try {
                    const pdfText = await extractTextFromPdf(file);
                    const formattedPdfText = preformatPddText(pdfText);
                    combinedText += formattedPdfText + '\n\n';
                } catch (error) {
                    console.error(`–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∏–∑ PDF ${file.name}:`, error);
                    alert(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å PDF-—Ñ–∞–π–ª: ${file.name}`);
                }
            } else {
                try {
                    const text = await readFileAsText(file);
                    combinedText += text + '\n\n';
                } catch (error) {
                    console.error(`–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ ${file.name}:`, error);
                }
            }
        }
        
        hideGlobalLoader();

        if (combinedText.trim()) {
            parserInput.value = combinedText;
            checkAICharacterLimit();
        } else {
            alert('–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤.');
        }
    }


    function preformatPddText(rawText) {
        // –¢–µ–ø–µ—Ä—å –Ω–∞–º –Ω—É–∂–Ω–∞ —Ç–æ–ª—å–∫–æ –±–∞–∑–æ–≤–∞—è –æ—á–∏—Å—Ç–∫–∞!
        const lines = rawText.split('\n');
        const cleanedLines = lines.map(line => line.trim()).filter(line => line.length > 0);
        return cleanedLines.join('\n');
    }


    /**
     * –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –æ—à–∏–±–æ–∫ –∏ –ø—Ä–∏–≤—è–∑—ã–≤–∞–µ—Ç –∫ –Ω–∏–º –∫–ª–∏–∫–∏ –¥–ª—è –ø–æ–¥—Å–≤–µ—Ç–∫–∏ –≤ –Ω—É–∂–Ω–æ–º –ø–æ–ª–µ.
     * @param {HTMLTextAreaElement} targetTextarea - –ü–æ–ª–µ, –≤ –∫–æ—Ç–æ—Ä–æ–º –±—É–¥—É—Ç –ø–æ–¥—Å–≤–µ—á–∏–≤–∞—Ç—å—Å—è –æ—à–∏–±–∫–∏.
     * @param {Array<Object>} errors - –ú–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤ –æ—à–∏–±–æ–∫.
     */
    function renderErrors(targetTextarea, errors) {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–µ—Å—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å –æ—à–∏–±–∫–∞–º–∏
        converterErrorsArea.classList.remove('hidden');
        // –°–†–ê–ó–£ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏ —Å–∞–º —Å–ø–∏—Å–æ–∫
        converterErrorList.classList.remove('hidden'); 
        
        converterErrorCount.textContent = errors.length;
        converterErrorList.innerHTML = '';      

        errors.forEach(error => {
            const li = document.createElement('li');
            li.className = 'error-list-item';
            
            // --- –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê –û–ë–†–ï–ó–ö–ò –¢–ï–ö–°–¢–ê ---
            let displayText = (error.text || '').replace(/^\s*\?\s*/, '').trim();
            if (displayText.length > 60) {
                displayText = displayText.substring(0, 60) + '...';
            }
            // --- –ö–û–ù–ï–¶ –ù–û–í–û–ô –õ–û–ì–ò–ö–ò ---

            li.textContent = displayText || '[–ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞]';
            li.title = `–ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã –≤—ã–¥–µ–ª–∏—Ç—å –æ—à–∏–±–∫—É:\n\n${error.text}`;
            
            li.addEventListener('click', () => {
                li.classList.toggle('reviewed');
                highlightErrorInTextarea(targetTextarea, error.start, error.end);
            });
            
            converterErrorList.appendChild(li);
        });
    }


    /**
     * –í—ã–¥–µ–ª—è–µ—Ç —Ñ—Ä–∞–≥–º–µ–Ω—Ç —Ç–µ–∫—Å—Ç–∞ –≤ –£–ö–ê–ó–ê–ù–ù–û–ú —Ç–µ–∫—Å—Ç–æ–≤–æ–º –ø–æ–ª–µ –∏ –ø—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ—Ç –∫ –Ω–µ–º—É.
     * @param {HTMLTextAreaElement} targetTextarea - –ü–æ–ª–µ <textarea>, –≤ –∫–æ—Ç–æ—Ä–æ–º –Ω—É–∂–Ω–æ –≤—ã–¥–µ–ª–∏—Ç—å —Ç–µ–∫—Å—Ç.
     * @param {number} start - –ù–∞—á–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è.
     * @param {number} end - –ö–æ–Ω–µ—á–Ω—ã–π –∏–Ω–¥–µ–∫—Å –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è.
     */
    function highlightErrorInTextarea(targetTextarea, start, end) {
        if (!targetTextarea) return;

        targetTextarea.focus();
        targetTextarea.setSelectionRange(start, end);

        const mirrorDiv = document.createElement('div');
        const computedStyle = getComputedStyle(targetTextarea);

        [
            'font', 'lineHeight', 'letterSpacing', 'wordSpacing',
            'paddingTop', 'paddingRight', 'paddingBottom', 'paddingLeft',
            'borderTopWidth', 'borderRightWidth', 'borderBottomWidth', 'borderLeftWidth',
            'boxSizing', 'whiteSpace', 'wordWrap', 'wordBreak'
        ].forEach(prop => {
            mirrorDiv.style[prop] = computedStyle[prop];
        });

        mirrorDiv.style.position = 'absolute';
        mirrorDiv.style.top = '-9999px';
        mirrorDiv.style.left = '0px';
        mirrorDiv.style.width = targetTextarea.clientWidth + 'px';
        mirrorDiv.textContent = targetTextarea.value.substring(0, start) + '\u00A0';
        document.body.appendChild(mirrorDiv);

        const scrollPosition = mirrorDiv.scrollHeight - 180;
        targetTextarea.scrollTop = scrollPosition > 0 ? scrollPosition : 0;

        document.body.removeChild(mirrorDiv);
    }



    function hideAndResetErrorArea() {
        converterErrorsArea?.classList.add('hidden');
        converterErrorList.innerHTML = '';
        converterErrorCount.textContent = '0';
    }

 

    function createVariantFilterCheckboxes() {
        if (!filterVariantCheckboxes) return;
        let checkboxesHTML = '';
        for (let i = 1; i <= 10; i++) {
            checkboxesHTML += `
                <label>
                    <input type="checkbox" value="${i}">${i}
                </label>
            `;
        }
        filterVariantCheckboxes.innerHTML = checkboxesHTML;
    }

    /**
     * –ü–∞—Ä—Å–∏—Ç –≥–æ—Ç–æ–≤—ã–π .qst —Ç–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.
     * @param {string} qstText - –¢–µ–∫—Å—Ç –∏–∑ –ø–æ–ª—è "–†–µ–∑—É–ª—å—Ç–∞—Ç".
     * @returns {Array<Object>} –ú–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤ –≤–æ–ø—Ä–æ—Å–æ–≤ { text, variantCount, start, end }.
     */
    function parseQstResultForFiltering(qstText) {
        const questions = [];
        const delimiterRegex = /\n\s*\n/g; // –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø—É—Å—Ç—ã—Ö —Å—Ç—Ä–æ–∫-—Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–π
        let lastIndex = 0; // –ò–Ω–¥–µ–∫—Å, —Å –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–∞—á–∏–Ω–∞–µ–º –∏—Å–∫–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–π –±–ª–æ–∫

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ü–∏–∫–ª —Å —Ä–µ–≥—É–ª—è—Ä–Ω—ã–º –≤—ã—Ä–∞–∂–µ–Ω–∏–µ–º, —á—Ç–æ–±—ã –Ω–∞–¥–µ–∂–Ω–æ –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –ø–æ –≤—Å–µ–º—É —Ç–µ–∫—Å—Ç—É
        let match;
        while ((match = delimiterRegex.exec(qstText)) !== null) {
            // –¢–µ–∫—Å—Ç –±–ª–æ–∫–∞ - —ç—Ç–æ –≤—Å—ë, —á—Ç–æ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –º–µ–∂–¥—É lastIndex –∏ –Ω–∞—á–∞–ª–æ–º –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è
            const blockText = qstText.substring(lastIndex, match.index);
            const blockStart = lastIndex;

            if (blockText.trim() !== '') {
                const lines = blockText.split('\n');
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –≤–æ–ø—Ä–æ—Å (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å "?")
                if (lines.some(l => l.trim().startsWith('?'))) {
                    const variantCount = lines.filter(l => l.trim().startsWith('+') || l.trim().startsWith('-')).length;
                    questions.push({
                        text: blockText,
                        variantCount: variantCount,
                        start: blockStart, // –ù–∞–¥–µ–∂–Ω–∞—è —Å—Ç–∞—Ä—Ç–æ–≤–∞—è –ø–æ–∑–∏—Ü–∏—è
                        end: blockStart + blockText.length // –ù–∞–¥–µ–∂–Ω–∞—è –∫–æ–Ω–µ—á–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è
                    });
                }
            }
            // –°–¥–≤–∏–≥–∞–µ–º –∫—É—Ä—Å–æ—Ä –Ω–∞ –ø–æ–∑–∏—Ü–∏—é –ü–û–°–õ–ï –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è
            lastIndex = delimiterRegex.lastIndex;
        }

        // –ù–µ –∑–∞–±—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–∞–º—ã–π –ø–æ—Å–ª–µ–¥–Ω–∏–π –±–ª–æ–∫ —Ç–µ–∫—Å—Ç–∞, –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è
        const lastBlockText = qstText.substring(lastIndex);
        if (lastBlockText.trim() !== '') {
            const lines = lastBlockText.split('\n');
            if (lines.some(l => l.trim().startsWith('?'))) {
                const variantCount = lines.filter(l => l.trim().startsWith('+') || l.trim().startsWith('-')).length;
                questions.push({
                    text: lastBlockText,
                    variantCount: variantCount,
                    start: lastIndex,
                    end: lastIndex + lastBlockText.length
                });
            }
        }

        return questions;
    }

    function filterByVariantCount() {
        hideAndResetErrorArea();

        const selectedCounts = Array.from(filterVariantCheckboxes.querySelectorAll('input:checked'))
                                    .map(input => parseInt(input.value));

        if (selectedCounts.length === 0) {
            alert(_('error_filter_no_variant_selected'));
            return;
        }

        const qstText = converterOutput.value;
        const allQuestions = parseQstResultForFiltering(qstText);
        
        const defectiveQuestions = allQuestions.filter(q => !selectedCounts.includes(q.variantCount));

        if (defectiveQuestions.length > 0) {
            // === –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ó–î–ï–°–¨ ===
            // 1. –ù–∞—Ö–æ–¥–∏–º –Ω—É–∂–Ω—ã–π span –≤–Ω—É—Ç—Ä–∏ –Ω–∞—à–µ–≥–æ –Ω–æ–≤–æ–≥–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞
            const errorLabel = converterErrorsHeader.querySelector('span[data-lang-key]');
            // 2. –ú–µ–Ω—è–µ–º –µ–≥–æ —Ç–µ–∫—Å—Ç (—ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ, —Ç–∞–∫ –∫–∞–∫ –æ—à–∏–±–∫–∞ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω–∞)
            if (errorLabel) errorLabel.textContent = '‚ö†Ô∏è –û—à–∏–±–∫–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤';
            
            // 3. –í—ã–∑—ã–≤–∞–µ–º renderErrors, –∫–æ—Ç–æ—Ä—ã–π —Å–¥–µ–ª–∞–µ—Ç –±–ª–æ–∫ –≤–∏–¥–∏–º—ã–º
            renderErrors(converterOutput, defectiveQuestions); 
            
            alert(_('error_filter_found_mismatch').replace('{count}', defectiveQuestions.length));
        } else {
            alert(_('error_filter_all_match'));
        }
        filterVariantsDropdown.classList.add('hidden');
    }

    function resetVariantFilter() {
        // –≠—Ç–∞ —Å—Ç—Ä–æ–∫–∞ –±–æ–ª—å—à–µ –Ω–µ –≤—ã–∑–æ–≤–µ—Ç –æ—à–∏–±–∫—É, —Ç–∞–∫ –∫–∞–∫ filterVariantCheckboxes –±—É–¥–µ—Ç –Ω–∞–π–¥–µ–Ω
        filterVariantCheckboxes.querySelectorAll('input:checked').forEach(input => input.checked = false); 
        hideAndResetErrorArea();
        filterVariantsDropdown.classList.add('hidden');
    }

    function runParser() {
        resetVariantFilter();
        const text = parserInput.value;
        if (text.trim() === '') {
            alert(_('parser_input_empty_alert'));
            return;
        }

        if (!checkAndConfirmOverwrite(converterOutput)) {
            return;
        }

        hideAndResetErrorArea();
        converterOutputArea.classList.add('hidden');

        const selectedPatternId = parserPatternSelect.value;
        let result;

        if (selectedPatternId === 'auto') {
            result = processTextWithMultiFormat(text);
        } else {
            const pattern = PARSER_PATTERNS.find(p => p.id === selectedPatternId);
            if (!pattern) {
                alert(_('parser_pattern_not_found_alert'));
                return;
            }
            result = {
                questions: pattern.processor(text),
                errors: []
            };
        }

        const parsedQuestions = result.questions;
        const errors = result.errors;
        
        if (errors.length > 0) {
            // === –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ó–î–ï–°–¨ ===
            const errorLabel = converterErrorsHeader.querySelector('span[data-lang-key]');
            if (errorLabel) {
                 // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ —Å–ª–æ–≤–∞—Ä—è
                errorLabel.textContent = _('parser_errors_found');
            }
            renderErrors(parserInput, errors);
        }

        if (parsedQuestions.length === 0) {
            if (errors.length > 0) {
                alert(_('parser_no_questions_with_errors_alert').replace('{count}', errors.length));
            } else {
                alert(_('parser_no_questions_recognized_alert'));
            }
            return;
        }

        let qstResult = '';
        parsedQuestions.forEach(q => {
            if (q.type === 'category') {
                qstResult += `#_#${q.text}#_#\n\n`;
            } else {
                if (q.text && q.options && q.options.length > 0) {
                    qstResult += `? ${q.text.replace(/\n/g, ' ')}\n`;
                    q.options.forEach(opt => {
                        const prefix = (opt === q.correctAnswer) ? '+' : '-';
                        qstResult += `${prefix} ${opt.replace(/\n/g, ' ')}\n`;
                    });
                    qstResult += '\n';
                }
            }
        });

        converterOutput.value = qstResult.trim();
        converterOutputArea.classList.remove('hidden');

        if (errors.length > 0) {
            alert(_('parser_conversion_summary_alert').replace('{parsed}', parsedQuestions.length).replace('{errors}', errors.length));
        } else {
            alert(_('parser_conversion_success_alert').replace('{count}', parsedQuestions.length));
        }
    }


    function clearParserOutput(type) {
        let outputArea, outputTextarea;
        if (type === 'converter') {
            outputArea = converterOutputArea;
            outputTextarea = converterOutput;
        } else if (type === 'aiFromText') {
            outputArea = aiFromTextOutputArea;
            outputTextarea = aiFromTextOutput;
        } else if (type === 'aiFromTopic') {
            outputArea = aiFromTopicOutputArea;
            outputTextarea = aiFromTopicOutput;
        }
        
        if (outputArea && outputTextarea) {
            outputArea.classList.add('hidden');
            outputTextarea.value = '';
        }
    }

    // –ó–∞–º–µ–Ω–∏—Ç–µ —Å—Ç–∞—Ä—É—é —Ñ—É–Ω–∫—Ü–∏—é downloadParsedQst –Ω–∞ —ç—Ç—É
    async function downloadParsedQst(type) {
        let content = '';
        if (type === 'converter') {
            content = converterOutput.value;
        } else if (type === 'aiFromText') {
            content = aiFromTextOutput.value;
        } else if (type === 'aiFromTopic') {
            content = aiFromTopicOutput.value;
        }

        if (!content) {
            alert(_('error_download_parsed_first'));
            return;
        }
        await downloadOrShareFile('parsed_test.qst', content, 'text/plain;charset=utf-8', _('share_title_converted_test'));
    }

    function clearParserInput() {
        parserInput.value = '';
        parserFileInput.value = ''; // –í–∞–∂–Ω–æ —Ç–∞–∫–∂–µ —Å–±—Ä–æ—Å–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ñ–∞–π–ª!
        parserInput.focus(); // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫—É—Ä—Å–æ—Ä –≤ –ø–æ–ª–µ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
        hideAndResetErrorArea();
        checkAICharacterLimit();
    }

    function handleAiParserFileInput(event) {
        const file = event.target.files[0];
        if (!file) return;
        const reader = new FileReader();
        reader.onload = (e) => {
            aiParserInput.value = e.target.result;
            checkAICharacterLimit();
        };
        reader.readAsText(file, 'UTF-8');
    }

    function clearAiParserInput() {
        aiParserInput.value = '';
        aiParserFileInput.value = '';
        aiParserInput.focus();
        checkAICharacterLimit();
    }


    async function handleAIGenerationRequest() {
        const text = aiParserInput.value.trim();
        if (!text) {
            alert(_('ai_error_text_empty'));
            return;
        }
        
        // --- –ù–ê–ß–ê–õ–û –ò–ó–ú–ï–ù–ï–ù–ò–ô: –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—å ---
        if (!checkAndConfirmOverwrite(aiFromTextOutput)) {
            return; // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª "–û—Ç–º–µ–Ω–∞", –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
        }
        // --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–ô ---

        // –í—Ä–µ–º–µ–Ω–Ω–æ –∏–∑–º–µ–Ω—è–µ–º –≤–∏–¥ –∫–Ω–æ–ø–∫–∏ –Ω–∞ –≤—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏
        const originalButtonHTML = `<span>${_('ai_generate_from_text_button')}</span>`; // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–ª—é—á
        generateTestFromTextBtn.disabled = true;
        generateTestFromTextBtn.innerHTML = `<span>${_('ai_generating_button')}</span>`;
        showGlobalLoader(_('ai_analyzing_text'));

        const questionCount = aiAutoCount.checked ? 'auto' : aiQuestionCount.value;
        const answerCount = getEl('aiAnswerCount').value;
        const autoCategorize = getEl('aiAutoCategory').checked; // –°—á–∏—Ç—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —á–µ–∫–±–æ–∫—Å–∞

        try {
            const response = await fetch(googleAppScriptUrl, {
                method: 'POST',
                headers: {
                  'Content-Type': 'text/plain',
                },
                body: JSON.stringify({
                    action: 'generateTest',
                    text: text,
                    count: questionCount,
                    answerCount: answerCount,
                    autoCategorize: autoCategorize // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –ø–æ–ª–µ –≤ –∑–∞–ø—Ä–æ—Å
                })
            });

            const result = await response.json();

            if (result.success && result.qst) {
                aiFromTextOutput.value = result.qst;
                aiFromTextOutputArea.classList.remove('hidden');
                aiFromTextOutputArea.scrollIntoView({ behavior: 'smooth' });
            } else {
                throw new Error(result.error || _('ai_error_generation'));
            }



        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–∞:", error);
            // --- –ù–ê–ß–ê–õ–û –ò–ó–ú–ï–ù–ï–ù–ò–ô: –£–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ ---
            let userFriendlyError;

            if (error.message.includes("INTERNAL") || error.message.includes("HTTP 500")) {
                // –ï—Å–ª–∏ —ç—Ç–æ –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç
                userFriendlyError = _('ai_error_server_generation');
            } else {
                // –ò–Ω–∞—á–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â–∏–π —Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏
                userFriendlyError = _('ai_error_generation');
            }

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ–Ω—è—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            alert(userFriendlyError);
            // --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–ô ---
        } finally {
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–Ω–æ–ø–∫—É –≤ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            generateTestFromTextBtn.disabled = false;
            // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ —á–µ—Ä–µ–∑ —Å–∏—Å—Ç–µ–º—É –ø–µ—Ä–µ–≤–æ–¥–æ–≤
            generateTestFromTextBtn.innerHTML = `<span>${_('ai_generate_from_text_button')}</span>`; 
            hideGlobalLoader();
        }
    }


    /**
     * –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—É—é –≤–∫–ª–∞–¥–∫—É –≤ —Ä–∞–∑–¥–µ–ª–µ –ø–∞—Ä—Å–µ—Ä–∞.
     * @param {string} tabId - ID –≤–∫–ª–∞–¥–∫–∏ ('converter', 'aiFromText' –∏–ª–∏ 'aiGenerator').
     */
    function switchParserTab(tabId) {
        // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –≤–∫–ª–∞–¥–∫–∏
        converterContent.classList.remove('active');
        aiFromTextContent.classList.remove('active');
        aiGeneratorContent.classList.remove('active');

        // –£–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —É –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫
        converterTabBtn.classList.remove('active');
        aiFromTextTabBtn.classList.remove('active');
        aiFromTopicTabBtn.classList.remove('active');

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω—É–∂–Ω—É—é –≤–∫–ª–∞–¥–∫—É –∏ –¥–µ–ª–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ–π –µ–µ –∫–Ω–æ–ø–∫—É
        if (tabId === 'converter') {
            converterContent.classList.add('active');
            converterTabBtn.classList.add('active');
        } else if (tabId === 'aiFromText') {
            aiFromTextContent.classList.add('active');
            aiFromTextTabBtn.classList.add('active');
        } else if (tabId === 'aiGenerator') {
            aiGeneratorContent.classList.add('active');
            aiFromTopicTabBtn.classList.add('active');
        }
    }


    async function handleAIGenerationFromTopicRequest() {
        const topic = aiTopicInput.value.trim();
        if (!topic) {
            alert(_('ai_topic_empty_alert'));
            return;
        }

        if (!checkAndConfirmOverwrite(aiFromTopicOutput)) {
            return;
        }

        const originalButtonHTML = generateTestFromTopicBtn.innerHTML;
        generateTestFromTopicBtn.disabled = true;
        generateTestFromTopicBtn.innerHTML = `<span>${_('ai_generating_button')}</span>`;
        showGlobalLoader(_('ai_thinking_topic'));

        const questionCount = aiTopicQuestionCount.value;
        const answerCount = aiTopicAnswerCount.value;
        const autoCategorize = aiTopicAutoCategory.checked;

        try {
            const response = await fetch(googleAppScriptUrl, {
                method: 'POST',
                headers: { 'Content-Type': 'text/plain' },
                body: JSON.stringify({
                    action: 'generateTestFromTopic',
                    topic: topic,
                    count: questionCount,
                    answerCount: answerCount,
                    autoCategorize: autoCategorize,
                    targetLanguage: localStorage.getItem('appLanguage') || 'ru'
                })
            });

            const result = await response.json();

            if (result.success && result.qst) {
                aiFromTopicOutput.value = result.qst;
                aiFromTopicOutputArea.classList.remove('hidden');
                aiFromTopicOutputArea.scrollIntoView({ behavior: 'smooth' });
            } else {
                throw new Error(result.error || _('ai_error_generation'));
            }
        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–∞ –ø–æ —Ç–µ–º–µ:", error);
            
            let userFriendlyError;
            if (error.message.includes("INTERNAL") || error.message.includes("HTTP 500")) {
                userFriendlyError = _('ai_error_server_generation');
            } else {
                userFriendlyError = _('ai_error_generation');
            }
            alert(userFriendlyError);
        } finally {
            generateTestFromTopicBtn.disabled = false;
            generateTestFromTopicBtn.innerHTML = originalButtonHTML;
            hideGlobalLoader();
        }
    }






    /**
     * –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø-–ü–û–ú–û–©–ù–ò–ö
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—ã—Å–æ—Ç—É –±–ª–æ–∫–∞ —Å –≤–æ–ø—Ä–æ—Å–æ–º –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ –ò–ò –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç/—É–±–∏—Ä–∞–µ—Ç
     * –∫–Ω–æ–ø–∫—É "—Å–≤–µ—Ä–Ω—É—Ç—å/—Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—å", –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ.
     * @param {HTMLElement} questionElement - DOM-—ç–ª–µ–º–µ–Ω—Ç –±–ª–æ–∫–∞ —Å –≤–æ–ø—Ä–æ—Å–æ–º (#aiExplanationQuestion).
     */
    function setupAIQuestionCollapser(questionElement) {
        if (!questionElement) return;

        // 1. –ò—â–µ–º –∫–Ω–æ–ø–∫—É –†–Ø–î–û–ú —Å –±–ª–æ–∫–æ–º –≤–æ–ø—Ä–æ—Å–∞, –∞ –Ω–µ –≤–Ω—É—Ç—Ä–∏ –Ω–µ–≥–æ, –∏ —É–¥–∞–ª—è–µ–º –µ–µ, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è.
        const oldBtn = questionElement.nextElementSibling;
        if (oldBtn && oldBtn.classList.contains('expand-question-btn')) {
            oldBtn.remove();
        }

        // 2. –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫–ª–∞—Å—Å—ã, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É —Å —á–∏—Å—Ç–æ–≥–æ –ª–∏—Å—Ç–∞.
        questionElement.classList.remove('collapsible', 'expanded');
        
        // 3. –ò—Å–ø–æ–ª—å–∑—É–µ–º setTimeout(0), —á—Ç–æ–±—ã –±—Ä–∞—É–∑–µ—Ä —É—Å–ø–µ–ª —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ä–µ–∞–ª—å–Ω—É—é –≤—ã—Å–æ—Ç—É –∫–æ–Ω—Ç–µ–Ω—Ç–∞.
        setTimeout(() => {
            const MAX_HEIGHT = 80; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≤—ã—Å–æ—Ç–∞ —Å–≤–µ—Ä–Ω—É—Ç–æ–≥–æ –±–ª–æ–∫–∞
            
            // 4. –ï—Å–ª–∏ —Ä–µ–∞–ª—å–Ω–∞—è –≤—ã—Å–æ—Ç–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –±–æ–ª—å—à–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π, —Ç–æ –Ω–∞–º –Ω—É–∂–Ω–∞ –∫–Ω–æ–ø–∫–∞.
            if (questionElement.scrollHeight > MAX_HEIGHT) {
                // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å, –∫–æ—Ç–æ—Ä—ã–π "—Å–≤–µ—Ä–Ω–µ—Ç" –±–ª–æ–∫ —Å –ø–æ–º–æ—â—å—é CSS.
                questionElement.classList.add('collapsible');
                
                // –°–æ–∑–¥–∞–µ–º —Å–∞–º—É –∫–Ω–æ–ø–∫—É.
                const expandBtn = document.createElement('button');
                expandBtn.className = 'expand-question-btn';
                
                // 5. –ù–∞–∑–Ω–∞—á–∞–µ–º "—É–º–Ω—ã–π" –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞.
                expandBtn.onclick = (e) => {
                    e.stopPropagation();
                    // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –∫–ª–∞—Å—Å 'expanded' –Ω–∞ –±–ª–æ–∫–µ –≤–æ–ø—Ä–æ—Å–∞ (—Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ–º/—Å–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –µ–≥–æ).
                    questionElement.classList.toggle('expanded');
                    
                    // –ù–∞—Ö–æ–¥–∏–º –±–ª–æ–∫ —Å –æ—Ç–≤–µ—Ç–æ–º –ò–ò.
                    const outputEl = getEl('aiExplanationOutput');
                    if (outputEl) {
                        // –°–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º –∫–ª–∞—Å—Å 'collapsed' –Ω–∞ –±–ª–æ–∫–µ –æ—Ç–≤–µ—Ç–∞.
                        // –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç (has 'expanded'), —Ç–æ –æ—Ç–≤–µ—Ç —Å–≤–æ—Ä–∞—á–∏–≤–∞–µ—Ç—Å—è (gets 'collapsed').
                        outputEl.classList.toggle('collapsed', questionElement.classList.contains('expanded'));
                    }
                };

                // 6. –í—Å—Ç–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ü–û–°–õ–ï –±–ª–æ–∫–∞ —Å –≤–æ–ø—Ä–æ—Å–æ–º, –∞ –Ω–µ –≤–Ω—É—Ç—Ä—å –Ω–µ–≥–æ.
                questionElement.insertAdjacentElement('afterend', expandBtn);
            }
        }, 0);
    }


 
    async function showAIExplanation(question, userIncorrectAnswerText = null, imageBase64 = null) {
        currentAIQuestion = question;
        currentAIUserIncorrectAnswer = userIncorrectAnswerText;
        currentAITranslation = null;
        isAIModalShowingTranslation = false;
        
        const outputEl = getEl('aiExplanationOutput');
        const toggleBtn = getEl('aiExplanationTranslateBtn');
        const questionEl = getEl('aiExplanationQuestion');
        
        toggleBtn.classList.add('hidden');
        outputEl.innerHTML = '';

        const styleContentEl = getEl('aiExplanationStyleContent');
        const styleTextEl = getEl('aiExplanationStyleText');
        styleContentEl.innerHTML = ''; 
        
        const styles = ['simple', 'scientific', 'associative', 'stepbystep', 'practical', 'visual'];
        
        styles.forEach(styleKey => {
            const link = document.createElement('a');
            link.href = '#';
            link.dataset.style = styleKey;
            link.textContent = _('ai_style_' + styleKey.toLowerCase());
            
            if (styleKey === 'simple') {
                link.classList.add('active');
            }
            styleContentEl.appendChild(link);
        });
        styleTextEl.textContent = _('ai_style_simple');

        showGlobalLoader(_('ai_explanation_title'));

        try {
            if (isTranslateModeEnabled) {
                const lang = localStorage.getItem('appLanguage') || 'ru';
                const translationResult = await getCachedOrFetchTranslation(question, question.originalIndex, lang);
                
                if (translationResult) {
                    currentAITranslation = translationResult.question;
                    isAIModalShowingTranslation = true;
                    toggleBtn.classList.remove('hidden');
                }
            } else {
                const appLang = localStorage.getItem('appLanguage') || 'ru';
                const questionLang = detectLanguage(question.text);

                if (appLang !== questionLang) {
                    toggleBtn.classList.remove('hidden');
                }
            }
            
            updateAIModalQuestionText();
            document.body.classList.add('chat-open');
            ChatModule.showModal('aiExplanationModal');
            
            fetchAndDisplayExplanation('simple', userIncorrectAnswerText, imageBase64);

        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –æ–∫–Ω–∞ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è:", error);
            alert(_('ai_explanation_prepare_error'));
        } finally {
            hideGlobalLoader();
        }
    }


    function updateAIModalQuestionText() {
        const questionEl = getEl('aiExplanationQuestion');
        const toggleBtn  = getEl('aiExplanationTranslateBtn');
        const outputEl   = getEl('aiExplanationOutput');
        if (!questionEl || !toggleBtn) return;

        // 1) –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–æ –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∏
        const wasExpanded        = questionEl.classList.contains('expanded');
        const wasOutputCollapsed = outputEl ? outputEl.classList.contains('collapsed') : null;
        const prevScrollTop      = questionEl.scrollTop;

        // 2) –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–æ–π —Ç–µ–∫—Å—Ç –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å
        let questionToDisplay;
        if (isAIModalShowingTranslation && currentAITranslation) {
            questionToDisplay = currentAITranslation;
            toggleBtn.textContent = _('ai_show_original_button');
        } else {
            questionToDisplay = currentAIQuestion;
            toggleBtn.textContent = _('ai_show_translation_button');
        }
        if (!questionToDisplay) return;

        // 3) –°–æ–±–∏—Ä–∞–µ–º HTML (–∫–∞—Ä—Ç–∏–Ω–∫–∞ + –≤–æ–ø—Ä–æ—Å + –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç)
        let imageHTML = '';
        if (currentAIQuestion && currentAIQuestion.image) {
            imageHTML = `<img src="${currentAIQuestion.image}" alt="–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫ –≤–æ–ø—Ä–æ—Å—É" class="ai-explanation-image">`;
        }
        questionEl.innerHTML = `
            ${imageHTML}
            <div class="ai-q-text">
                <strong>${_('ai_explanation_question')}:</strong> ${escapeHTML(questionToDisplay.text)}
            </div>
            <div class="ai-a-text">
                <strong>${_('ai_explanation_correct_answer')}:</strong> ${escapeHTML(questionToDisplay.options[questionToDisplay.correctAnswerIndex].text)}
            </div>
        `;

        // 4) –ü–µ—Ä–µ—Å–æ–±–∏—Ä–∞–µ–º –∫–æ–ª–ª–∞–ø—Å–µ—Ä (–æ–Ω –º–æ–∂–µ—Ç –ø–æ–Ω–∞–¥–æ–±–∏—Ç—å—Å—è –∏–∑-–∑–∞ –∏–Ω–æ–π –≤—ã—Å–æ—Ç—ã —Ç–µ–∫—Å—Ç–∞)
        setupAIQuestionCollapser(questionEl); // —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –≤–Ω—É—Ç—Ä–∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç –∫–ª–∞—Å—Å—ã :contentReference[oaicite:3]{index=3}

        // 5) –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞–∑–≤–æ—Ä–æ—Ç–∞/—Å–≤—ë—Ä—Ç–∫–∏
        if (wasExpanded) {
            questionEl.classList.add('expanded');
        }
        if (outputEl) {
            if (typeof wasOutputCollapsed === 'boolean') {
                outputEl.classList.toggle('collapsed', wasOutputCollapsed);
            } else {
                // –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–µ—Ä–∂–∏–º –æ—Ç–≤–µ—Ç —Å–≤—ë—Ä–Ω—É—Ç—ã–º, –µ—Å–ª–∏ –≤–æ–ø—Ä–æ—Å —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç
                outputEl.classList.toggle('collapsed', questionEl.classList.contains('expanded'));
            }
        }

        // 6) –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–æ–∫—Ä—É—Ç–∫—É (–µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª –≤–Ω—É—Ç—Ä–∏ —Ä–∞–∑–≤—ë—Ä–Ω—É—Ç–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞)
        if (wasExpanded) {
            questionEl.scrollTop = prevScrollTop;
        }
    }



    /**
     * –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —è–∑—ã–∫–∞ –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ –ò–ò.
     */
    async function handleAITranslateToggle() {
        const toggleBtn = getEl('aiExplanationTranslateBtn');
        if (!toggleBtn) return;

        // –ï—Å–ª–∏ –º—ã —Ö–æ—Ç–∏–º –ø–æ–∫–∞–∑–∞—Ç—å –ø–µ—Ä–µ–≤–æ–¥, –Ω–æ –æ–Ω –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω
        if (!isAIModalShowingTranslation && !currentAITranslation) {
            const lang = localStorage.getItem('appLanguage') || 'ru';
            toggleBtn.disabled = true;
            toggleBtn.textContent = '...'; // –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏

            // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥
            const translationResult = await getCachedOrFetchTranslation(currentAIQuestion, currentAIQuestion.originalIndex, lang);
            
            toggleBtn.disabled = false;
            
            if (translationResult) {
                currentAITranslation = translationResult.question;
                isAIModalShowingTranslation = true;
            } else {
                alert(_('error_translation_failed'));
                // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞, –æ—Å—Ç–∞–µ–º—Å—è –Ω–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª–µ
                isAIModalShowingTranslation = false;
            }
        } else {
            // –ï—Å–ª–∏ –ø–µ—Ä–µ–≤–æ–¥ —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω, –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Ñ–ª–∞–≥
            isAIModalShowingTranslation = !isAIModalShowingTranslation;
        }
        
        // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞/–æ—Ç–≤–µ—Ç–∞ –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ
        updateAIModalQuestionText();
    }



    async function fetchAndDisplayExplanation(style, userIncorrectAnswerText = null, imageBase64 = null) {
        if (!currentAIQuestion) return;

        const styleContentEl = getEl('aiExplanationStyleContent');
        styleContentEl.querySelectorAll('a').forEach(a => a.classList.remove('active'));
        const activeLink = styleContentEl.querySelector(`a[data-style="${style}"]`);
        if (activeLink) activeLink.classList.add('active');
            
        const outputEl = getEl('aiExplanationOutput');
        outputEl.innerHTML = `<div class="typing-loader-container"><div class="typing-loader">${_('ai_explanation_loading')}</div></div>`;

        try {
            const payload = {
                action: 'getExplanation',
                question_text: currentAIQuestion.text,
                correct_answer_text: currentAIQuestion.options[currentAIQuestion.correctAnswerIndex].text,
                style: style,
                targetLanguage: localStorage.getItem('appLanguage') || 'ru'
            };

            if (userIncorrectAnswerText) {
                payload.user_incorrect_answer_text = userIncorrectAnswerText;
            }
            
            if (imageBase64) {
                payload.image_base64 = imageBase64;
            }

            const response = await fetch(googleAppScriptUrl, {
                method: 'POST',
                body: JSON.stringify(payload)
            });
            const result = await response.json();

            if (result.success) {
                if (window.marked) {
                    outputEl.innerHTML = marked.parse(result.explanation);
                } else {
                    console.warn('–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ marked.js –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞. –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.');
                    outputEl.innerHTML = result.explanation.replace(/\n/g, '<br>');
                }
            } else {
                throw new Error(result.error);
            }
        } catch (error) {
            let userFriendlyError;
            if (error.message.includes("INTERNAL") || error.message.includes("HTTP 500")) {
                userFriendlyError = _('ai_error_server');
            } else {
                userFriendlyError = _('ai_error_generic');
            }
            outputEl.innerHTML = `<p style="color: var(--feedback-incorrect-text);">${userFriendlyError}</p>`;
        }
    }


    function handleExplainClickInSearch(event, rawQuestionText) {
        event.stopPropagation();

        const parsedQuestions = parseQstContent(rawQuestionText);

        if (parsedQuestions && parsedQuestions.length > 0) {
            const questionObject = parsedQuestions[0];
            
            if (questionObject && questionObject.text && questionObject.options) {
                showAIExplanation(questionObject, null, questionObject.image);
            } else {
                alert(_('error_cannot_fully_process_question'));
            }
        } else {
            alert(_('error_no_question_for_explanation'));
        }
    }


    async function handleTranslateClickInSearch(event, buttonElement, rawQuestionText) {
        event.stopPropagation();

        const parsedQuestions = parseQstContent(rawQuestionText);
        if (!parsedQuestions || parsedQuestions.length === 0) {
            alert(_('error_cannot_process_question'));
            return;
        }
        const originalQuestionObject = parsedQuestions[0];

        buttonElement.classList.add('translating');
        buttonElement.disabled = true;

        try {
            const targetLang = localStorage.getItem('appLanguage') || 'ru';
            const translatedQuestionObject = await getTranslatedQuestion(originalQuestionObject, targetLang);

            if (translatedQuestionObject) {
                const card = buttonElement.closest('.result-card');
                if (!card) return;

                // 1. –ù–∞—Ö–æ–¥–∏–º —ç–ª–µ–º–µ–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –∞–Ω–∏–º–∏—Ä–æ–≤–∞—Ç—å
                const questionElement = card.querySelector('.question-text-detail');
                const optionElements = card.querySelectorAll('.answer-option');

                if (!questionElement || optionElements.length === 0) {
                    // –ï—Å–ª–∏ –≤–¥—Ä—É–≥ –Ω–µ –Ω–∞—à–ª–∏ —ç–ª–µ–º–µ–Ω—Ç—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥ –∫–∞–∫ –∑–∞–ø–∞—Å–Ω–æ–π
                    const contentArea = card.querySelector('.result-card-content');
                    const translatedRawText = formatQuestionObjectToQstString(translatedQuestionObject);
                    contentArea.innerHTML = parseAndRenderQuestionBlock(translatedRawText);
                } else {
                    // 2. –°–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤ –¥–ª—è –≤—Å–µ—Ö –∞–Ω–∏–º–∞—Ü–∏–π
                    const allAnimations = [];

                    // –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –¥–ª—è —Ç–µ–∫—Å—Ç–∞ –≤–æ–ø—Ä–æ—Å–∞
                    allAnimations.push(
                        animateTextTransformation(questionElement, originalQuestionObject.text, translatedQuestionObject.text)
                    );
                    
                    // –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞
                    optionElements.forEach((optionEl, i) => {
                        const originalOption = originalQuestionObject.options[i];
                        const translatedOption = translatedQuestionObject.options[i];

                        if (originalOption && translatedOption) {
                            // –°–æ–±–∏—Ä–∞–µ–º –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç (—Å –∏–∫–æ–Ω–∫–æ–π) –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
                            const originalFullText = `${originalOption.isCorrect ? '‚úì' : '‚úó'} ${originalOption.text}`;
                            const translatedFullText = `${translatedOption.isCorrect ? '‚úì' : '‚úó'} ${translatedOption.text}`;
                            
                            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ –ø—Ä–æ—Å—Ç—É—é –∞–Ω–∏–º–∞—Ü–∏—é –¥–ª—è –æ–¥–Ω–æ—Å—Ç—Ä–æ—á–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
                            allAnimations.push(animateSingleLine(optionEl, originalFullText, translatedFullText));
                        }
                    });

                    // 3. –ñ–¥–µ–º, –ø–æ–∫–∞ –í–°–ï –∞–Ω–∏–º–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–∞—Ç—Å—è
                    await Promise.all(allAnimations);
                }

                // 4. –û–±–Ω–æ–≤–ª—è–µ–º onclick-–∞—Ç—Ä–∏–±—É—Ç—ã –∫–Ω–æ–ø–æ–∫ –Ω–æ–≤—ã–º (–ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–º) —Ç–µ–∫—Å—Ç–æ–º
                const translatedRawText = formatQuestionObjectToQstString(translatedQuestionObject);
                const escapedTranslatedText = escape(translatedRawText);

                const explainBtn = card.querySelector('.explain-search-result-btn');
                if (explainBtn) explainBtn.setAttribute('onclick', `window.mainApp.handleExplainClickInSearch(event, "${escapedTranslatedText}")`);
                
                const copyBtn = card.querySelector('.copy-search-result-btn');
                if (copyBtn) copyBtn.setAttribute('onclick', `window.mainApp.handleCopyClickInSearch(event, "${escapedTranslatedText}")`);
                
                const favBtn = card.querySelector('.favorite-search-result-btn');
                if (favBtn) favBtn.setAttribute('onclick', `window.mainApp.handleFavoriteClickInSearch(event, "${escapedTranslatedText}")`);
                
                buttonElement.setAttribute('onclick', `window.mainApp.handleTranslateClickInSearch(event, this, "${escapedTranslatedText}")`);
            } else {
                alert(_('error_translation_failed'));
            }
        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ –≤ –ø–æ–∏—Å–∫–µ:", error);
            alert(_('error_translation_failed'));
        } finally {
            buttonElement.classList.remove('translating');
            buttonElement.disabled = false;
        }
    }


          
    function manageBackButtonInterceptor() {
        // –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
        window.removeEventListener('popstate', handleBackButton);
        // –ê —Ç–µ–ø–µ—Ä—å –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π
        window.addEventListener('popstate', handleBackButton);
        
        // –≠—Ç–æ—Ç –∫–æ–¥ –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
        history.pushState(null, '', location.href);
        console.log('–õ–æ–≤—É—à–∫–∞ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞.');
    }




    function setupExtensionListener() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—â–µ–Ω–æ –ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è Chrome
        // === –ù–ê–ß–ê–õ–û –ù–û–í–û–ì–û –ö–û–î–ê ===
        window.addEventListener("message", (event) => {
            // –ü—Ä–∏–Ω–∏–º–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –æ—Ç —Å–∞–º–æ–≥–æ —Å–µ–±—è (–æ—Ç –Ω–∞—à–µ–≥–æ content script)
            if (event.source !== window || !event.data) {
                return;
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞—à —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ç–∏–ø
            if (event.data.type && (event.data.type === "FROM_QSTIUM_EXTENSION")) {
                 console.log('–°–∞–π—Ç QSTiUM –ø–æ–ª—É—á–∏–ª –∫–æ–º–∞–Ω–¥—É –ø–æ–∏—Å–∫–∞ –æ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è:', event.data.text);
                 
                 const searchInput = getEl('searchQueryInput');
                 const searchButton = getEl('searchButton');
                 
                 if(searchInput && searchButton) {
                    // –í—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –≤ –ø–æ–ª–µ
                    searchInput.value = event.data.text;
                    
                    // –ò–º–∏—Ç–∏—Ä—É–µ–º –∫–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ –ø–æ–∏—Å–∫–∞
                    searchButton.click();
                 }
            }
        }, false);
        // === –ö–û–ù–ï–¶ –ù–û–í–û–ì–û –ö–û–î–ê ===
        console.log("–°–ª—É—à–∞—Ç–µ–ª—å —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è QSTiUM Helper –∞–∫—Ç–∏–≤–µ–Ω.");
    }



    /**
     * –°–æ–∑–¥–∞–µ—Ç –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç Intersection Observer –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è CSS-–∞–Ω–∏–º–∞—Ü–∏—è–º–∏.
     * –ê–Ω–∏–º–∞—Ü–∏—è –±—É–¥–µ—Ç –∞–∫—Ç–∏–≤–Ω–∞ —Ç–æ–ª—å–∫–æ —Ç–æ–≥–¥–∞, –∫–æ–≥–¥–∞ —ç–ª–µ–º–µ–Ω—Ç –≤–∏–¥–µ–Ω –Ω–∞ —ç–∫—Ä–∞–Ω–µ.
     */
    function setupAnimationObserver() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ª–∏ –±—Ä–∞—É–∑–µ—Ä —ç—Ç—É —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—é
        if (!('IntersectionObserver' in window)) {
            console.warn('IntersectionObserver –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è. –ê–Ω–∏–º–∞—Ü–∏–∏ –±—É–¥—É—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ—Å—Ç–æ—è–Ω–Ω–æ.');
            // –í –∫–∞—á–µ—Å—Ç–≤–µ –∑–∞–ø–∞—Å–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞, –ø—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å –≤—Å–µ–º —ç–ª–µ–º–µ–Ω—Ç–∞–º
            document.querySelectorAll('.chat-badge, .unread-badge, .question-square.has-votes, .tab-counter').forEach(el => {
                el.classList.add('pulse-active');
            });
            return;
        }

        // –°–æ–∑–¥–∞–µ–º —Å–∞–º "–Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—å"
        const observer = new IntersectionObserver((entries) => {
            entries.forEach(entry => {
                // isIntersecting - —ç—Ç–æ —Å–≤–æ–π—Å—Ç–≤–æ, –∫–æ—Ç–æ—Ä–æ–µ –≥–æ–≤–æ—Ä–∏—Ç, –≤–∏–¥–µ–Ω –ª–∏ —ç–ª–µ–º–µ–Ω—Ç
                if (entry.isIntersecting) {
                    // –ï—Å–ª–∏ –≤–∏–¥–µ–Ω - –¥–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
                    entry.target.classList.add('pulse-active');
                } else {
                    // –ï—Å–ª–∏ –Ω–µ –≤–∏–¥–µ–Ω - —É–±–∏—Ä–∞–µ–º –∫–ª–∞—Å—Å
                    entry.target.classList.remove('pulse-active');
                }
            });
        });

        // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã, –∑–∞ –∫–æ—Ç–æ—Ä—ã–º–∏ –Ω—É–∂–Ω–æ —Å–ª–µ–¥–∏—Ç—å
        const animatedElements = document.querySelectorAll('.chat-badge, .unread-badge, .question-square.has-votes, .tab-counter');
        
        // –ì–æ–≤–æ—Ä–∏–º "–Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—é" –Ω–∞—á–∞—Ç—å —Å–ª–µ–¥–∏—Ç—å –∑–∞ –∫–∞–∂–¥—ã–º –∏–∑ –Ω–∏—Ö
        animatedElements.forEach(el => observer.observe(el));
    }


    // Expose mainApp to window for ChatModule access
    // =================================================================
    // ====      –ù–û–í–´–ï –§–£–ù–ö–¶–ò–ò –î–õ–Ø –ü–ï–†–ï–í–û–î–ê –í–û–ü–†–û–°–ê (v1.0)        ====
    // =================================================================


    /**
     * –ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —Ä–µ–∂–∏–º –ø–µ—Ä–µ–≤–æ–¥–∞, —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å.
     */
    function toggleTranslateMode() {
        isTranslateModeEnabled = !isTranslateModeEnabled;
        localStorage.setItem('isTranslateModeEnabled', isTranslateModeEnabled);
        updateTranslateModeToggleVisual();
        
        // –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å, —á—Ç–æ–±—ã –ø—Ä–∏–º–µ–Ω–∏—Ç—å/–æ—Ç–º–µ–Ω–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥
        if (!quizArea.classList.contains('hidden') && questionsForCurrentQuiz.length > 0) {
            // === –ù–û–í–´–ô –ö–û–î: –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫—É –ø—Ä–∏ –≤–∫–ª—é—á–µ–Ω–∏–∏ —Ä–µ–∂–∏–º–∞ ===
            if (isTranslateModeEnabled) {
                prefetchNextQuestions(currentQuestionIndex);
            }
            // ==========================================================
            loadQuestion(currentQuestionIndex);
        }
    }


    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç –≤–Ω–µ—à–Ω–∏–π –≤–∏–¥ –∫–Ω–æ–ø–∫–∏-–ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞.
     */
    function updateTranslateModeToggleVisual() {
        if (translateQuestionBtn) {
            translateQuestionBtn.classList.toggle('active', isTranslateModeEnabled);
        }
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –æ–±—ä–µ–∫—Ç–∞ –≤–æ–ø—Ä–æ—Å–∞.
     * @param {object} questionObject - –ò—Å—Ö–æ–¥–Ω—ã–π –æ–±—ä–µ–∫—Ç –≤–æ–ø—Ä–æ—Å–∞.
     * @param {string} targetLang - –ö–æ–¥ —Ü–µ–ª–µ–≤–æ–≥–æ —è–∑—ã–∫–∞ ('ru', 'en', 'kz').
     * @returns {Promise<object|null>} - –ü—Ä–æ–º–∏—Å —Å –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–º –æ–±—ä–µ–∫—Ç–æ–º –≤–æ–ø—Ä–æ—Å–∞ –∏–ª–∏ null –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏.
     */
    async function getTranslatedQuestion(questionObject, targetLang) {
        const initialEngine = currentTranslateEngine;
        const action = initialEngine === 'ai' ? 'aiTranslateQuestion' : 'translateQuestion';

        try {
            console.log(`–ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ —á–µ—Ä–µ–∑ –¥–≤–∏–∂–æ–∫: ${initialEngine}`);
            const response = await fetch(googleAppScriptUrl, {
                method: 'POST',
                body: JSON.stringify({
                    action: action,
                    questionObject: questionObject,
                    targetLang: targetLang
                })
            });
            const result = await response.json();
            if (result.success) {
                // === –ò–ó–ú–ï–ù–ï–ù–ò–ï: –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ä–µ–∫—Ç —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ–º –¥–≤–∏–∂–∫–∞ ===
                return { question: result.translatedQuestion, engine: initialEngine };
            } else {
                console.error(`–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ (${initialEngine}):`, result.error);
                throw new Error(result.error);
            }
        } catch (error) {
            console.warn(`–ü–µ—Ä–µ–≤–æ–¥ —á–µ—Ä–µ–∑ ${initialEngine} –Ω–µ —É–¥–∞–ª—Å—è.`, error);

            if (initialEngine === 'ai') {
                console.log("–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ Google Translate...");
                try {
                    const fallbackResponse = await fetch(googleAppScriptUrl, {
                        method: 'POST',
                        body: JSON.stringify({
                            action: 'translateQuestion',
                            questionObject: questionObject,
                            targetLang: targetLang
                        })
                    });
                    const fallbackResult = await fallbackResponse.json();
                    if (fallbackResult.success) {
                        console.log("‚úÖ Fallback –Ω–∞ Google Translate —É—Å–ø–µ—à–µ–Ω.");
                        // === –ò–ó–ú–ï–ù–ï–ù–ò–ï: –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç fallback'–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º –¥–≤–∏–∂–∫–∞ ===
                        return { question: fallbackResult.translatedQuestion, engine: 'google' };
                    }
                } catch (fallbackError) {
                    console.error("‚ùå Fallback –Ω–∞ Google Translate —Ç–∞–∫–∂–µ –Ω–µ —É–¥–∞–ª—Å—è:", fallbackError);
                }
            }
            
            return null; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º null, –µ—Å–ª–∏ –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å
        }
    }





    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –ø–µ—Ä–µ–≤–æ–¥ –∏–∑ –∫—ç—à–∞ –∏–ª–∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Å —Å–µ—Ä–≤–µ—Ä–∞, –µ—Å–ª–∏ –µ–≥–æ —Ç–∞–º –Ω–µ—Ç.
     * –¢–µ–ø–µ—Ä—å —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –∫–ª—é—á–∞–º–∏, –∑–∞–≤–∏—Å—è—â–∏–º–∏ –æ—Ç —è–∑—ã–∫–∞.
     * @param {object} questionObject - –ò—Å—Ö–æ–¥–Ω—ã–π –æ–±—ä–µ–∫—Ç –≤–æ–ø—Ä–æ—Å–∞.
     * @param {number} originalIndex - –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å –≤–æ–ø—Ä–æ—Å–∞ –≤ –∏—Å—Ö–æ–¥–Ω–æ–º —Ñ–∞–π–ª–µ.
     * @param {string} targetLang - –¶–µ–ª–µ–≤–æ–π —è–∑—ã–∫ –ø–µ—Ä–µ–≤–æ–¥–∞.
     * @returns {Promise<{question: object, fromCache: boolean}|null>} - –û–±—ä–µ–∫—Ç —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –∏–ª–∏ null.
     */
    async function getCachedOrFetchTranslation(questionObject, originalIndex, targetLang) {
        const cacheKey = getCacheKey(originalIndex, targetLang);

        if (currentQuizTranslations.has(cacheKey)) {
            return { question: currentQuizTranslations.get(cacheKey), fromCache: true };
        }

        // 1. –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –∫–æ—Ç–æ—Ä—ã–π —Ç–µ–ø–µ—Ä—å —Å–æ–¥–µ—Ä–∂–∏—Ç –∏ –ø–µ—Ä–µ–≤–æ–¥, –∏ –¥–≤–∏–∂–æ–∫
        const translationResult = await getTranslatedQuestion(questionObject, targetLang);

        if (translationResult) {
            // === –ù–ê–ß–ê–õ–û –ì–õ–ê–í–ù–û–ì–û –ò–ó–ú–ï–ù–ï–ù–ò–Ø ===
            // 2. –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –¢–û–õ–¨–ö–û –ï–°–õ–ò –æ–Ω –±—ã–ª –ø–æ–ª—É—á–µ–Ω –æ—Ç –í–´–ë–†–ê–ù–ù–û–ì–û –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –¥–≤–∏–∂–∫–∞
            if (translationResult.engine === currentTranslateEngine) {
                console.log(`–ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –æ—Ç ${translationResult.engine} –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞ #${originalIndex}`);
                currentQuizTranslations.set(cacheKey, translationResult.question);

                if (currentFileCacheKey) {
                    try {
                        const serializedCache = JSON.stringify(Array.from(currentQuizTranslations.entries()));
                        localStorage.setItem(currentFileCacheKey, serializedCache);
                    } catch (e) {
                        console.error("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫—ç—à–∞ –≤ localStorage (–≤–æ–∑–º–æ–∂–Ω–æ, –Ω–µ—Ç –º–µ—Å—Ç–∞):", e);
                    }
                }
            } else {
                // –ï—Å–ª–∏ —Å—Ä–∞–±–æ—Ç–∞–ª fallback, –º—ã –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –Ω–æ –Ω–µ –∫—ç—à–∏—Ä—É–µ–º –µ–≥–æ
                console.log(`–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω Fallback-–ø–µ—Ä–µ–≤–æ–¥ (${translationResult.engine}). –†–µ–∑—É–ª—å—Ç–∞—Ç –ù–ï –±—É–¥–µ—Ç –∫—ç—à–∏—Ä–æ–≤–∞–Ω.`);
            }
            // === –ö–û–ù–ï–¶ –ì–õ–ê–í–ù–û–ì–û –ò–ó–ú–ï–ù–ï–ù–ò–Ø ===

            // 3. –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–∞–º –æ–±—ä–µ–∫—Ç –≤–æ–ø—Ä–æ—Å–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            return { question: translationResult.question, fromCache: false };
        }

        return null;
    }







    /**
     * –ö–æ–ø–∏—Ä—É–µ—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–µ CSS-—Å—Ç–∏–ª–∏ –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ –∑–µ—Ä–∫–∞–ª—å–Ω—ã–π
     */
    function copyRelevantStyles(sourceElement, targetElement) {
        const computedStyle = window.getComputedStyle(sourceElement);
        const relevantStyles = [
            'width', 'font-family', 'font-size', 'font-weight', 'font-style',
            'line-height', 'letter-spacing', 'word-spacing', 'text-transform',
            'padding-left', 'padding-right', 'padding-top', 'padding-bottom',
            'border-left-width', 'border-right-width', 'box-sizing',
            'word-break', 'overflow-wrap', 'hyphens'
        ];
        
        relevantStyles.forEach(style => {
            targetElement.style[style] = computedStyle[style];
        });
    }

    /**
     * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –≤–∏–∑—É–∞–ª—å–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ —Ç–µ–∫—Å—Ç–∞, –∞–Ω–∞–ª–∏–∑–∏—Ä—É—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—ã—Å–æ—Ç—ã —ç–ª–µ–º–µ–Ω—Ç–∞
     */
    function getVisualLines(text, referenceElement) {
        if (!text.trim()) return [''];
        
        // –°–æ–∑–¥–∞–µ–º –∑–µ—Ä–∫–∞–ª—å–Ω—ã–π –Ω–µ–≤–∏–¥–∏–º—ã–π —ç–ª–µ–º–µ–Ω—Ç
        const mirror = document.createElement('div');
        mirror.style.position = 'absolute';
        mirror.style.visibility = 'hidden';
        mirror.style.top = '-9999px';
        mirror.style.left = '-9999px';
        mirror.style.whiteSpace = 'normal';
        mirror.style.wordWrap = 'break-word';
        
        // –ö–æ–ø–∏—Ä—É–µ–º —Å—Ç–∏–ª–∏
        copyRelevantStyles(referenceElement, mirror);
        
        document.body.appendChild(mirror);
        
        const words = text.split(/(\s+)/); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–±–µ–ª—ã
        const lines = [];
        let currentLine = '';
        let lastHeight = 0;
        
        try {
            for (let i = 0; i < words.length; i++) {
                const testText = currentLine + words[i];
                mirror.textContent = testText;
                const currentHeight = mirror.offsetHeight;
                
                // –ï—Å–ª–∏ –≤—ã—Å–æ—Ç–∞ —É–≤–µ–ª–∏—á–∏–ª–∞—Å—å, –∑–Ω–∞—á–∏—Ç –ø—Ä–æ–∏–∑–æ—à–µ–ª –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏
                if (lastHeight > 0 && currentHeight > lastHeight) {
                    // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é —Å—Ç—Ä–æ–∫—É –≤ –º–∞—Å—Å–∏–≤ (–±–µ–∑ —Ç–µ–∫—É—â–µ–≥–æ —Å–ª–æ–≤–∞)
                    lines.push(currentLine.trim());
                    currentLine = words[i];
                } else {
                    currentLine = testText;
                }
                
                lastHeight = currentHeight;
            }
            
            // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Ç—Ä–æ–∫—É
            if (currentLine.trim()) {
                lines.push(currentLine.trim());
            }
            
            return lines.length > 0 ? lines : [''];
        } finally {
            document.body.removeChild(mirror);
        }
    }

    /**
     * –ê–Ω–∏–º–∏—Ä—É–µ—Ç –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É —Å —ç—Ñ—Ñ–µ–∫—Ç–æ–º –∫—É—Ä—Å–æ—Ä–∞
     */
    async function animateSingleLine(element, startText, endText) {
        const cursor = '|';
        const charDelay = 7;
        const totalSteps = Math.max(startText.length, endText.length);

        for (let i = 0; i <= totalSteps; i++) {
            const newPart = endText.substring(0, i);
            const oldPart = startText.substring(i);
            element.textContent = newPart + cursor + oldPart;
            await new Promise(resolve => setTimeout(resolve, charDelay));
        }
        element.textContent = endText;
    }

    /**
     * –û—Å–Ω–æ–≤–Ω–∞—è "—É–º–Ω–∞—è" —Ñ—É–Ω–∫—Ü–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
     */
    async function animateTextTransformation(element, startText, endText) {
        // –§–∞–∑–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è: –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–∏–∑—É–∞–ª—å–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
        const startLines = getVisualLines(startText, element);
        const endLines = getVisualLines(endText, element);
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
        const maxLines = Math.max(startLines.length, endLines.length);
        
        // –§–∞–∑–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏: —Å–æ–∑–¥–∞–µ–º div –¥–ª—è –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–∏
        const originalContent = element.innerHTML;
        element.innerHTML = '';
        
        const lineDivs = [];
        for (let i = 0; i < maxLines; i++) {
            const lineDiv = document.createElement('div');
            lineDiv.style.minHeight = '1em'; // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º —Å—Ö–ª–æ–ø—ã–≤–∞–Ω–∏–µ –ø—É—Å—Ç—ã—Ö —Å—Ç—Ä–æ–∫
            element.appendChild(lineDiv);
            lineDivs.push(lineDiv);
        }
        
        try {
            // –§–∞–∑–∞ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –∞–Ω–∏–º–∞—Ü–∏–∏: –∑–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –≤—Å–µ—Ö —Å—Ç—Ä–æ–∫ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
            const animations = [];
            
            for (let i = 0; i < maxLines; i++) {
                const startLine = startLines[i] || '';
                const endLine = endLines[i] || '';
                
                animations.push(
                    animateSingleLine(lineDivs[i], startLine, endLine)
                );
            }
            
            // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∞–Ω–∏–º–∞—Ü–∏–π
            await Promise.all(animations);
            
        } finally {
            // –§–∞–∑–∞ –æ—á–∏—Å—Ç–∫–∏: –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
            element.innerHTML = '';
            element.textContent = endText;
        }
    }





    /**
     * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —è–∑—ã–∫ —Ç–µ–∫—Å—Ç–∞ –ø–æ –Ω–∞–ª–∏—á–∏—é —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤.
     * @param {string} text - –¢–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.
     * @returns {string} - –ö–æ–¥ —è–∑—ã–∫–∞ ('kk', 'en', 'ru').
     */
    function detectLanguage(text) {
        if (/[”ô—ñ“£“ì“Ø“±“õ”©“ª]/i.test(text)) return 'kk';
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ª–∞—Ç–∏–Ω–∏—Ü—É, –Ω–æ –∏—Å–∫–ª—é—á–∞–µ–º –æ–¥–∏–Ω–æ—á–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –∏–ª–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Å–ª–æ–≤–∞
        if (/[a-z]/i.test(text) && !/[–∞-—è]/i.test(text)) return 'en';
        return 'ru';
    }



    /**
     * –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–µ—Ä–µ–≤–æ–¥—ã –¥–ª—è —Å–ª–µ–¥—É—é—â–∏—Ö N –≤–æ–ø—Ä–æ—Å–æ–≤, –µ—Å–ª–∏ –∏—Ö –µ—â–µ –Ω–µ—Ç –≤ –∫—ç—à–µ.
     * –†–∞–±–æ—Ç–∞–µ—Ç –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ, –Ω–µ –±–ª–æ–∫–∏—Ä—É—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å.
     * @param {number} startIndex - –ò–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –≤ –º–∞—Å—Å–∏–≤–µ questionsForCurrentQuiz.
     */
    function prefetchNextQuestions(startIndex) {
        if (!isTranslateModeEnabled || questionsForCurrentQuiz.length === 0) {
            return;
        }

        const lang = localStorage.getItem('appLanguage') || 'ru';

        // –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ "–æ–∫–Ω—É" —Å–ª–µ–¥—É—é—â–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
        for (let i = 0; i < PREFETCH_WINDOW_SIZE; i++) {
            const questionIndex = startIndex + i;

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –Ω–µ –≤—ã—à–ª–∏ –∑–∞ –ø—Ä–µ–¥–µ–ª—ã —Ç–µ—Å—Ç–∞
            if (questionIndex >= questionsForCurrentQuiz.length) {
                break;
            }

            const question = questionsForCurrentQuiz[questionIndex];

            // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            if (question.type === 'category') {
                continue;
            }
            
            const originalIndex = question.originalIndex;
            const cacheKey = getCacheKey(originalIndex, lang);

            // –ì–õ–ê–í–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê: –µ—Å–ª–∏ –ø–µ—Ä–µ–≤–æ–¥ —É–∂–µ –µ—Å—Ç—å –ò–õ–ò –æ–Ω —É–∂–µ –≤ –æ—á–µ—Ä–µ–¥–∏ –Ω–∞ –∑–∞–≥—Ä—É–∑–∫—É, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
            if (currentQuizTranslations.has(cacheKey) || prefetchedIndices.has(originalIndex)) {
                continue;
            }

            // –ü–æ–º–µ—á–∞–µ–º, —á—Ç–æ –º—ã –Ω–∞—á–∞–ª–∏ –∑–∞–≥—Ä—É–∑–∫—É –¥–ª—è —ç—Ç–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
            prefetchedIndices.add(originalIndex);
            console.log(`üöÄ –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞ #${originalIndex}`);

            // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–∞, –Ω–æ –ù–ï –∂–¥–µ–º –µ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è (fire-and-forget)
            // –û–Ω —Å–∞–º –¥–æ–±–∞–≤–∏—Ç—Å—è –≤ –∫—ç—à, –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤.
            getCachedOrFetchTranslation(question, originalIndex, lang)
                .catch(err => {
                    // –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –≤—ã–≤–æ–¥–∏–º –µ–µ –≤ –∫–æ–Ω—Å–æ–ª—å, –Ω–æ –Ω–µ –±–µ—Å–ø–æ–∫–æ–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏ –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞ #${originalIndex}:`, err);
                })
                .finally(() => {
                    // –í–Ω–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞, —É–±–∏—Ä–∞–µ–º –≤–æ–ø—Ä–æ—Å –∏–∑ –æ—á–µ—Ä–µ–¥–∏,
                    // —á—Ç–æ–±—ã –µ–≥–æ –º–æ–∂–Ω–æ –±—ã–ª–æ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–Ω–æ–≤–∞, –µ—Å–ª–∏ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è.
                    prefetchedIndices.delete(originalIndex);
                });
        }
    }



    /**
     * –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è —É–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞.
     * @param {object} originalQuestion - –ò—Å—Ö–æ–¥–Ω—ã–π (–Ω–µ–ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–π) –æ–±—ä–µ–∫—Ç –≤–æ–ø—Ä–æ—Å–∞.
     */
    async function displayTranslatedQuestion(originalQuestion, options = { animateTranslation: true }) {
        const indexAtRequestTime = currentQuestionIndex;
        const targetLang = localStorage.getItem('appLanguage') || 'ru';
        const cacheKey = getCacheKey(originalQuestion.originalIndex, targetLang);
        const isCached = currentQuizTranslations.has(cacheKey);

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª –∫–∞–∫ "–Ω–∞—á–∞–ª—å–Ω—ã–π –∫–∞–¥—Ä", —á—Ç–æ–±—ã –±—ã–ª–æ –æ—Ç —á–µ–≥–æ –∞–Ω–∏–º–∏—Ä–æ–≤–∞—Ç—å
        displayQuestionContent(originalQuestion);

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –≤ –∫—ç—à–µ
        if (!isCached) {
            translateQuestionBtn?.classList.add('translating');
        }
        
        try {
            const result = await getCachedOrFetchTranslation(originalQuestion, originalQuestion.originalIndex, targetLang);

            // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ–∫–ª—é—á–∏–ª –≤–æ–ø—Ä–æ—Å, –ø–æ–∫–∞ —à—ë–ª –ø–µ—Ä–µ–≤–æ–¥, –∏–ª–∏ –ø–µ—Ä–µ–≤–æ–¥ –Ω–µ —É–¥–∞–ª—Å—è - –≤—ã—Ö–æ–¥–∏–º
            if (indexAtRequestTime !== currentQuestionIndex || !result) {
                if (!result) alert("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –≤–æ–ø—Ä–æ—Å. –ë—É–¥–µ—Ç –ø–æ–∫–∞–∑–∞–Ω –æ—Ä–∏–≥–∏–Ω–∞–ª.");
                return;
            }

            const translatedQuestion = result.question;
            const optionElements = answerOptionsEl.querySelectorAll('li');

            // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –Ω–æ–≤—ã–π, –Ω–µ–∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥ –∏ –æ–ø—Ü–∏—è –≤–∫–ª—é—á–µ–Ω–∞
            if (options.animateTranslation && !result.fromCache) {
                const allAnimations = [
                    animateTextTransformation(questionTextEl, originalQuestion.text, translatedQuestion.text)
                ];
                optionElements.forEach((li, i) => {
                    const originalOptionText = originalQuestion.options[i]?.text || '';
                    const translatedOptionText = translatedQuestion.options[i]?.text || '';
                    if (originalOptionText || translatedOptionText) {
                        allAnimations.push(animateSingleLine(li, originalOptionText, translatedOptionText));
                    }
                });
                await Promise.all(allAnimations);
            }

            // --- –ì–õ–ê–í–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï ---
            // –í–Ω–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–æ–≥–æ, –±—ã–ª–∞ –ª–∏ –∞–Ω–∏–º–∞—Ü–∏—è, —Ç–µ–ø–µ—Ä—å –º—ã –ü–ï–†–ï–†–ò–°–û–í–´–í–ê–ï–ú —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç,
            // –∏—Å–ø–æ–ª—å–∑—É—è —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –¥–æ–±–∞–≤–ª—è–µ—Ç –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ <span> –¥–ª—è —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤.
            questionTextEl.innerHTML = renderQuestionTextWithTriggers(translatedQuestion);
            
            // –¢–∞–∫–∂–µ –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –∞–Ω–∏–º–∞—Ü–∏–∏ –Ω–µ –±—ã–ª–æ
            optionElements.forEach((li, i) => {
                li.textContent = translatedQuestion.options[i]?.text || '';
            });

            // –ò –∑–∞–Ω–æ–≤–æ –ø—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–ª–∏–∫–æ–≤ –∫ –Ω–æ–≤—ã–º <span>
            if (triggerWordModeEnabled) {
                addTriggerClickListeners();
            }
            // --- –ö–û–ù–ï–¶ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø ---
            
        } finally {
            translateQuestionBtn?.classList.remove('translating');
        }
    }



    function displayQuestionAsTest(question, options = { animateTranslation: true }) {
        // UI
        feedbackAreaEl.className = 'feedback-area';
        getEl('score').style.visibility = 'visible';
        copyQuestionBtnQuiz?.classList.remove('hidden');
        getEl('favoriteQuestionBtn')?.classList.remove('hidden');
        translateQuestionBtn?.classList.remove('hidden');
        webSearchDropdown?.classList.remove('hidden');

        // –ù–æ–º–µ—Ä –≤–æ–ø—Ä–æ—Å–∞
        const questionNumber = questionsForCurrentQuiz
            .slice(0, currentQuestionIndex + 1)
            .filter(q => q.type !== 'category').length;
        currentQuestionNumEl.textContent = questionNumber;

        // –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
        const questionContainer = questionTextEl?.parentElement;

        if (questionContainer) {
            const prevImgWrap = questionContainer.querySelector('.question-image-wrapper');
            if (prevImgWrap) prevImgWrap.remove();
        }
        questionTextEl.innerHTML = '';

        // –†–µ–Ω–¥–µ—Ä–∏–º —Ç–µ–∫—Å—Ç + –≤–∞—Ä–∏–∞–Ω—Ç—ã
        if (isTranslateModeEnabled) {
            displayTranslatedQuestion(question, options);
        } else {
            questionTextEl.innerHTML = renderQuestionTextWithTriggers(question);
            if (triggerWordModeEnabled) addTriggerClickListeners();
            displayQuestionOptions(question);
        }

        // –í—Å—Ç–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É
        if (question.image && questionContainer) {
            const imgWrap = document.createElement('div');
            imgWrap.className = 'question-image-wrapper';
            const img = document.createElement('img');
            img.src = question.image;
            img.alt = '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫ –≤–æ–ø—Ä–æ—Å—É';
            img.className = 'question-image';
            imgWrap.appendChild(img);
            questionContainer.insertBefore(imgWrap, questionTextEl);
        }

        // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ—Ç–≤–µ—Ç–∞
        const answerState = userAnswers[currentQuestionIndex];
        if (answerState && answerState.answered) {
            const feedbackText = answerState.correct ? _('feedback_correct') : _('feedback_incorrect');
            feedbackAreaEl.className = `feedback-area ${answerState.correct ? 'correct' : 'incorrect'}-feedback`;
            
            // === –ù–ê–ß–ê–õ–û –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø ===
            const textNode = document.createTextNode(feedbackText);
            const explainBtn = document.createElement('button');
            
            // 1. –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É —Ç–æ—á–Ω–æ —Ç–∞–∫ –∂–µ, –∫–∞–∫ –≤ `handleAnswerSelect`, —Å —Ç–µ–≥–æ–º –∏–∫–æ–Ω–∫–∏
            explainBtn.innerHTML = `<i data-lucide="brain-circuit"></i> ${_('ai_explain_button')}`;
            explainBtn.className = 'explain-btn';
            
            const incorrectAnswerText = !answerState.correct ? question.options[answerState.selectedOptionIndex].text : null;
            explainBtn.onclick = () => showAIExplanation(question, incorrectAnswerText, question.image);
            
            feedbackAreaEl.innerHTML = '';
            feedbackAreaEl.appendChild(textNode);
            feedbackAreaEl.appendChild(explainBtn);
            
            // 2. –°—Ä–∞–∑—É –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∏ –≤ DOM, –≤—ã–∑—ã–≤–∞–µ–º Lucide –¥–ª—è –µ—ë –æ—Ç—Ä–∏—Å–æ–≤–∫–∏
            if (window.lucide) {
                lucide.createIcons();
            }
            // === –ö–û–ù–ï–¶ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø ===
        }
    }



    /**
     * –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –°–û–î–ï–†–ñ–ò–ú–û–ï –≤–æ–ø—Ä–æ—Å–∞ (—Ç–µ–∫—Å—Ç –∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã) –ë–ï–ó –∫–∞—Ä—Ç–∏–Ω–∫–∏.
     * –í—ã–∑—ã–≤–∞–µ—Ç—Å—è, –∫–æ–≥–¥–∞ —É –≤–æ–ø—Ä–æ—Å–∞ –Ω–µ—Ç —Å–≤—è–∑–∞–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.
     * @param {object} question - –û–±—ä–µ–∫—Ç –≤–æ–ø—Ä–æ—Å–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.
     */
    function displayQuestionContent(question) {
        // –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ–ø–µ—Ä—å –æ—Ç–≤–µ—á–∞–µ—Ç –¢–û–õ–¨–ö–û –∑–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.
        questionTextEl.innerHTML = renderQuestionTextWithTriggers(question);

        if (triggerWordModeEnabled) {
            addTriggerClickListeners();
        }
        
        // –í—ã–∑—ã–≤–∞–µ–º –Ω–æ–≤—É—é –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞.
        displayQuestionOptions(question);
    }
    // ======== –ö–û–ù–ï–¶ –ù–û–í–û–ì–û –ö–û–î–ê –î–õ–Ø –ó–ê–ú–ï–ù–´ ========


    /**
     * –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞.
     * –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –∫–∞–∫ –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤ —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π, —Ç–∞–∫ –∏ –±–µ–∑.
     * @param {object} question - –û–±—ä–µ–∫—Ç –≤–æ–ø—Ä–æ—Å–∞, —á—å–∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã –Ω—É–∂–Ω–æ –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å.
     */
    function displayQuestionOptions(question) {
        answerOptionsEl.innerHTML = '';
        const answerState = userAnswers[currentQuestionIndex];

        question.options.forEach((option, index) => {
            const li = document.createElement('li');
            li.textContent = option.text;
            li.dataset.index = index;

            if (answerState && answerState.answered) {
                li.classList.add('answered');
                if (index === question.correctAnswerIndex) {
                    li.classList.add('actual-correct');
                }
                if (index === answerState.selectedOptionIndex) {
                    li.classList.add(answerState.correct ? 'correct' : 'incorrect');
                }
            } else {
                li.addEventListener('click', handleAnswerSelect);
            }
            answerOptionsEl.appendChild(li);
        });
    }

    // === –ù–ê–ß–ê–õ–û –ù–û–í–û–ì–û –ö–û–î–ê ===
    function updateDownloadButtonsText() {
        if (!downloadTranslatedTxtButton || !downloadTranslatedQstButton) return;
        const lang = localStorage.getItem('appLanguage') || 'ru';
        
        let textTxt = _('download_translated_txt_button').replace('{lang}', lang);
        downloadTranslatedTxtButton.textContent = textTxt;

        let textQst = _('download_translated_qst_button').replace('{lang}', lang);
        downloadTranslatedQstButton.textContent = textQst;
    }



    /**
     * –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø-–ü–û–ú–û–©–ù–ò–ö
     * –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—É—é —Å—Ç—Ä–æ–∫—É –≤–æ–ø—Ä–æ—Å–∞, –≤—Å—Ç–∞–≤–ª—è—è –º–∞—Ä–∫–µ—Ä—ã (~) –¥–ª—è —Ç—Ä–∏–≥–≥–µ—Ä-—Å–ª–æ–≤.
     * @param {object} questionObject - –û–±—ä–µ–∫—Ç –≤–æ–ø—Ä–æ—Å–∞, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å triggeredWordIndices.
     * @returns {string} - –¢–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞, –≥–æ—Ç–æ–≤—ã–π –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ .qst —Ñ–∞–π–ª.
     */
    function reconstructTextWithTriggers(questionObject) {
        // –ï—Å–ª–∏ —É –≤–æ–ø—Ä–æ—Å–∞ –Ω–µ—Ç —Ç–µ–∫—Å—Ç–∞ –∏–ª–∏ –Ω–µ—Ç –æ—Ç–º–µ—á–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤, –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç.
        if (!questionObject.text || !questionObject.triggeredWordIndices || questionObject.triggeredWordIndices.length === 0) {
            return questionObject.text;
        }

        const tokens = tokenizeText(questionObject.text);
        let reconstructedText = '';
        let wordIdx = 0;

        tokens.forEach(token => {
            const isWord = /\S/.test(token) && !/^[.,;:!?()"‚Äú‚Äù¬´¬ª-]+$/.test(token);
            if (isWord) {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—É—â–µ–µ —Å–ª–æ–≤–æ —Ç—Ä–∏–≥–≥–µ—Ä–æ–º
                if (questionObject.triggeredWordIndices.includes(wordIdx)) {
                    reconstructedText += `~${token}~`; // –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º –≤ –º–∞—Ä–∫–µ—Ä—ã
                } else {
                    reconstructedText += token;
                }
                wordIdx++;
            } else {
                // –≠—Ç–æ –ø—É–Ω–∫—Ç—É–∞—Ü–∏—è –∏–ª–∏ –ø—Ä–æ–±–µ–ª, –ø—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º
                reconstructedText += token;
            }
        });

        return reconstructedText.trim();
    }


 

    async function handleDownloadTranslatedTxt() {
        if (!isTranslateModeEnabled || currentQuizTranslations.size === 0) {
            alert(_('no_translations_to_download'));
            return;
        }

        const lang = localStorage.getItem('appLanguage') || 'ru';
        let fileContent = '';

        questionsForCurrentQuiz.forEach(q => {
            if (q.type === 'category') {
                fileContent += `--- ${q.text} ---\n\n`;
                return;
            }
            
            const cacheKey = getCacheKey(q.originalIndex, lang);
            const translatedQuestion = currentQuizTranslations.get(cacheKey);
            const questionToUse = translatedQuestion || q;
            
            const correctAnswer = questionToUse.options.find(opt => opt.isCorrect);

            // --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Ç–µ–∫—Å—Ç–∞ –≤–æ–ø—Ä–æ—Å–∞ ---
            const questionTextForFile = reconstructTextWithTriggers(questionToUse);

            fileContent += `${_('download_txt_question_label')}: ${questionTextForFile}\n`;
            fileContent += `${_('download_txt_answer_label')}: ${correctAnswer ? correctAnswer.text : 'N/A'}\n\n`;
        });

        if (!fileContent.trim()) {
            alert(_('error_creating_translation_file'));
            return;
        }

        const baseFileName = originalFileNameForReview ? originalFileNameForReview.replace(/\.(qst|txt)$/i, '') : 'quiz';
        const fileName = `${lang}_${baseFileName}.txt`;

        await downloadOrShareFile(fileName, fileContent, 'text/plain;charset=utf-8', _('share_title_translated_test_txt'));
    }



    async function handleDownloadTranslatedQst() {
        if (!isTranslateModeEnabled || currentQuizTranslations.size === 0) {
            alert(_('no_translations_to_download'));
            return;
        }
        
        const lang = localStorage.getItem('appLanguage') || 'ru';
        let fileContent = '';

        questionsForCurrentQuiz.forEach(q => {
            if (q.type === 'category') {
                fileContent += `#_#${q.text}#_#\n\n`;
                return;
            }
            
            const cacheKey = getCacheKey(q.originalIndex, lang);
            const translatedQuestion = currentQuizTranslations.get(cacheKey);
            const questionToUse = translatedQuestion || q;

            // --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Ç–µ–∫—Å—Ç–∞ –≤–æ–ø—Ä–æ—Å–∞ ---
            const questionTextForFile = reconstructTextWithTriggers(questionToUse);

            fileContent += `? ${questionTextForFile}\n`;
            questionToUse.options.forEach(opt => {
                const prefix = opt.isCorrect ? '+' : '-';
                fileContent += `${prefix} ${opt.text}\n`;
            });
            fileContent += '\n';
        });
        
        if (!fileContent.trim()) {
            alert(_('error_creating_translation_file'));
            return;
        }

        const baseFileName = originalFileNameForReview ? originalFileNameForReview.replace(/\.(qst|txt)$/i, '') : 'quiz';
        const fileName = `${lang}_${baseFileName}.qst`;

        await downloadOrShareFile(fileName, fileContent, 'text/plain;charset=utf-8', _('share_title_translated_test_qst'));
    }


     function handleFlashcardsModeChange() {
            const isChecked = flashcardsModeCheckbox.checked;

            // –ë–ª–æ–∫–∏—Ä—É–µ–º/—Ä–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –æ–ø—Ü–∏–∏
            shuffleAnswersCheckbox.disabled = isChecked;
            readingModeCheckbox.disabled = isChecked;
            feedbackModeCheckbox.disabled = isChecked;

            if (isChecked) {
                // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –Ω–µ—Å–æ–≤–º–µ—Å—Ç–∏–º—ã–µ –æ–ø—Ü–∏–∏
                shuffleAnswersCheckbox.checked = false;
                readingModeCheckbox.checked = false;
                feedbackModeCheckbox.checked = false;
                // –ú–µ–Ω—è–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
                startQuizButton.textContent = _('start_flashcards_button');
            } else {
                // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                startQuizButton.textContent = _('start_quiz_button');
            }
        }



    async function requestErrorAnalysis() {
        if (currentQuizErrorData.length === 0) {
            alert(_('error_analysis_no_data'));
            return;
        }

        const analysisBtn = getEl('aiAnalysisBtn');
        const resultContainer = getEl('aiAnalysisResult');
        const originalBtnText = analysisBtn.textContent;

        analysisBtn.disabled = true;
        // === –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏—Å—Ç–µ–º—É –ø–µ—Ä–µ–≤–æ–¥–æ–≤ ===
        analysisBtn.textContent = _('ai_analyzing_errors_button');
        resultContainer.classList.add('hidden');
        resultContainer.innerHTML = '';

        try {
            const currentUser = ChatModule.getCurrentUser();
            const userNameForAnalysis = currentUser ? currentUser.displayName : 'guest';

            const response = await fetch(googleAppScriptUrl, {
                method: 'POST',
                body: JSON.stringify({
                    action: 'getErrorAnalysis',
                    errors: currentQuizErrorData,
                    userName: userNameForAnalysis,
                    targetLanguage: localStorage.getItem('appLanguage') || 'ru'
                })
            });

            const result = await response.json();

            if (result.success && result.analysis) {
                resultContainer.innerHTML = marked.parse(result.analysis);
                resultContainer.classList.remove('hidden');
            } else {
                throw new Error(result.error || '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞–Ω–∞–ª–∏–∑ –æ—Ç –ò–ò.');
            }

        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∞–Ω–∞–ª–∏–∑–∞ –æ—à–∏–±–æ–∫:", error);
            resultContainer.innerHTML = `<p style="color: var(--feedback-incorrect-text);">–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: ${error.message}</p>`;
            resultContainer.classList.remove('hidden');
        } finally {
            analysisBtn.disabled = false;
            analysisBtn.textContent = _('ai_error_analysis_button');
        }
    }


    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –¥–≤–æ–π–Ω–æ–π –ø–æ–ª–∑—É–Ω–æ–∫ –≤—ã–±–æ—Ä–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞.
     * @param {number} totalQuestions - –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ —Ç–µ—Å—Ç–µ.
     */
    function initDualSlider(totalQuestions) {
        if (!rangeSliderStart || !rangeSliderEnd) return;

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        rangeSliderStart.max = totalQuestions;
        rangeSliderEnd.max = totalQuestions;
        questionRangeStartInput.max = totalQuestions;
        questionRangeEndInput.max = totalQuestions;

        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (–≤–µ—Å—å –¥–∏–∞–ø–∞–∑–æ–Ω)
        rangeSliderStart.value = 1;
        questionRangeStartInput.value = 1;
        rangeSliderEnd.value = totalQuestions;
        questionRangeEndInput.value = totalQuestions;
        
        // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
        rangeSliderStart.removeEventListener('input', handleSliderInput);
        rangeSliderEnd.removeEventListener('input', handleSliderInput);
        questionRangeStartInput.removeEventListener('input', handleNumberInput);
        questionRangeEndInput.removeEventListener('input', handleNumberInput);

        rangeSliderStart.addEventListener('input', handleSliderInput);
        rangeSliderEnd.addEventListener('input', handleSliderInput);
        questionRangeStartInput.addEventListener('input', handleNumberInput);
        questionRangeEndInput.addEventListener('input', handleNumberInput);

        updateSliderVisuals();
        generateSliderTicks(totalQuestions); // <-- –î–û–ë–ê–í–õ–ï–ù–û
    }
    
    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç –≤–∏–∑—É–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª–∑—É–Ω–∫–∞ (–∑–∞–∫—Ä–∞—à–µ–Ω–Ω—É—é –æ–±–ª–∞—Å—Ç—å).
     */
    function updateSliderVisuals() {
        if (!sliderProgress || !rangeSliderStart || !rangeSliderEnd) return;
        
        const startValue = parseInt(rangeSliderStart.value);
        const endValue = parseInt(rangeSliderEnd.value);
        const max = parseInt(rangeSliderStart.max);

        const startPercent = ((startValue - 1) / (max - 1)) * 100;
        const endPercent = ((endValue - 1) / (max - 1)) * 100;

        sliderProgress.style.left = `${startPercent}%`;
        sliderProgress.style.width = `${endPercent - startPercent}%`;
    }


    function handleSliderInput(event) {
        const startSlider = rangeSliderStart;
        const endSlider = rangeSliderEnd;
        const max = parseInt(startSlider.max);

        // --- –£–ú–ù–ê–Ø –õ–û–ì–ò–ö–ê –†–ê–°–ß–ï–¢–ê –®–ê–ì–ê ---
        let step;
        if (max <= 30) {
            step = 1; // –î–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö —Ç–µ—Å—Ç–æ–≤ –ø—Ä–∏–º–∞–≥–Ω–∏—á–∏–≤–∞–Ω–∏–µ –Ω–µ –Ω—É–∂–Ω–æ
        } else if (max <= 100) {
            step = 5; // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —à–∞–≥ –¥–ª—è —Ç–µ—Å—Ç–æ–≤ —Å—Ä–µ–¥–Ω–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
        } else if (max <= 500) {
            step = 10; // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —à–∞–≥ –¥–ª—è –±–æ–ª—å—à–∏—Ö —Ç–µ—Å—Ç–æ–≤
        } else {
            step = 25; // –û—á–µ–Ω—å –±–æ–ª—å—à–æ–π —à–∞–≥ –¥–ª—è –æ–≥—Ä–æ–º–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
        }
        // --- –ö–û–ù–ï–¶ –£–ú–ù–û–ô –õ–û–ì–ò–ö–ò ---

        // –ü–æ–ª—É—á–∞–µ–º "–ø—Ä–∏–º–∞–≥–Ω–∏—á–µ–Ω–Ω—ã–µ" –∑–Ω–∞—á–µ–Ω–∏—è
        let startValue = snapToStep(parseInt(startSlider.value), step, max);
        let endValue = snapToStep(parseInt(endSlider.value), step, max);
        
        // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ –±–µ–≥—É–Ω–∫–æ–≤
        if (endValue < startValue) {
            // –ï—Å–ª–∏ –¥–≤–∏–≥–∞–ª–∏ –ª–µ–≤—ã–π –±–µ–≥—É–Ω–æ–∫ –∏ –æ–Ω "–∑–∞–µ—Ö–∞–ª" –∑–∞ –ø—Ä–∞–≤—ã–π, –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–µ–º –∏—Ö
            if (event.target.id === 'rangeSliderStart') {
                 startValue = endValue;
            } else { // –ò –Ω–∞–æ–±–æ—Ä–æ—Ç
                 endValue = startValue;
            }
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–æ–∂–µ–Ω–∏–µ —Å–∞–º–∏—Ö –ø–æ–ª–∑—É–Ω–∫–æ–≤, —á—Ç–æ–±—ã –æ–Ω–∏ "–ø—Ä—ã–≥–Ω—É–ª–∏" –Ω–∞ –Ω—É–∂–Ω—É—é –ø–æ–∑–∏—Ü–∏—é
        startSlider.value = startValue;
        endSlider.value = endValue;

        // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —á–∏—Å–ª–æ–≤—ã–µ –ø–æ–ª—è
        questionRangeStartInput.value = startValue;
        questionRangeEndInput.value = endValue;
        
        updateSliderVisuals();
    }

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π –≤ —á–∏—Å–ª–æ–≤—ã—Ö –ø–æ–ª—è—Ö.
     */
    function handleNumberInput(event) {
        let startValue = parseInt(questionRangeStartInput.value);
        let endValue = parseInt(questionRangeEndInput.value);
        const max = parseInt(rangeSliderStart.max);

        // –í–∞–ª–∏–¥–∞—Ü–∏—è
        if (startValue < 1) startValue = 1;
        if (endValue > max) endValue = max;
        if (startValue > endValue) {
             if (event.target.id === 'questionRangeStart') {
                startValue = endValue;
             } else {
                endValue = startValue;
             }
        }
        
        questionRangeStartInput.value = startValue;
        questionRangeEndInput.value = endValue;

        // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –ø–æ–ª–∑—É–Ω–∫–∏
        rangeSliderStart.value = startValue;
        rangeSliderEnd.value = endValue;
        
        updateSliderVisuals();
    }



    
    function handleShuffleNToggle() {
        const isRandomModeActive = shuffleNCheckbox.checked;

        // --- –°—É—â–µ—Å—Ç–≤—É—é—â–∞—è –ª–æ–≥–∏–∫–∞ (–æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
        // –í–∫–ª—é—á–∞–µ—Ç/–æ—Ç–∫–ª—é—á–∞–µ—Ç –±–ª–æ–∫ –≤—ã–±–æ—Ä–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
        questionRangeGroup.classList.toggle('disabled', isRandomModeActive);
        shuffleNCountInput.disabled = !isRandomModeActive;

        // --- –ù–ê–ß–ê–õ–û –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –ë–ê–ì–ê ---
        if (isRandomModeActive) {
            // –ï—Å–ª–∏ "–°–ª—É—á–∞–π–Ω—ã–π –Ω–∞–±–æ—Ä" –í–ö–õ–Æ–ß–ï–ù:
            // 1. –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å—Ç–∞–≤–∏–º –≥–∞–ª–æ—á–∫—É "–ü–µ—Ä–µ–º–µ—à–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã", —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ.
            shuffleQuestionsCheckbox.checked = true;
            // 2. –ë–ª–æ–∫–∏—Ä—É–µ–º —ç—Ç–æ—Ç —á–µ–∫–±–æ–∫—Å, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –º–æ–≥ –µ–≥–æ –æ—Ç–∫–ª—é—á–∏—Ç—å.
            shuffleQuestionsCheckbox.disabled = true;
        } else {
            // –ï—Å–ª–∏ "–°–ª—É—á–∞–π–Ω—ã–π –Ω–∞–±–æ—Ä" –í–´–ö–õ–Æ–ß–ï–ù:
            // 1. –°–Ω–∏–º–∞–µ–º –≥–∞–ª–æ—á–∫—É "–ü–µ—Ä–µ–º–µ—à–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã", –≤–æ–∑–≤—Ä–∞—â–∞—è –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.
            shuffleQuestionsCheckbox.checked = false;
            // 2. –°–Ω–æ–≤–∞ –¥–µ–ª–∞–µ–º —á–µ–∫–±–æ–∫—Å –∞–∫—Ç–∏–≤–Ω—ã–º, –ù–û —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ—Ç "–†–µ–∂–∏–º —á—Ç–µ–Ω–∏—è".
            //    –≠—Ç–æ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã —Å –¥—Ä—É–≥–æ–π –ª–æ–≥–∏–∫–æ–π.
            if (!readingModeCheckbox.checked) {
                shuffleQuestionsCheckbox.disabled = false;
            }
        }
        // --- –ö–û–ù–ï–¶ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –ë–ê–ì–ê ---
    }


    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ–¥–∏–Ω–æ—á–Ω—ã–π –ø–æ–ª–∑—É–Ω–æ–∫ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏).
     */
    function initSingleSlider() {
        if (!timeLimitSlider) return;
        generateTimeSliderTicks();
        updateSingleSliderVisuals(); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ
    }



    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç –≤—Å–µ –≤–∏–∑—É–∞–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å–ª–∞–π–¥–µ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏: –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –∏ –≤—Å–ø–ª—ã–≤–∞—é—â—É—é –ø–æ–¥—Å–∫–∞–∑–∫—É.
     * –í–∫–ª—é—á–∞–µ—Ç –ª–æ–≥–∏–∫—É "–∑–∞–ª–∏–ø–∞–Ω–∏—è" –ø–æ–¥—Å–∫–∞–∑–∫–∏ —É –∫—Ä–∞–µ–≤.
     */
    function updateSingleSliderVisuals() {
        if (!timeLimitSlider || !timeSliderProgress || !timeSliderValueBubble) return;

        const value = parseInt(timeLimitSlider.value, 10);
        const min = parseInt(timeLimitSlider.min, 10);
        const max = parseInt(timeLimitSlider.max, 10);

        // 1. –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –≤ –ø–æ–¥—Å–∫–∞–∑–∫–µ
        timeSliderValueBubble.textContent = `${value} –º–∏–Ω`;

        // 2. –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
        const percent = (max > min) ? ((value - min) / (max - min)) * 100 : 0;
        
        // 3. –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
        timeSliderProgress.style.width = `${percent}%`;

        // 4. "–ú–∞–≥–∏—è" –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥—Å–∫–∞–∑–∫–∏ —Å —É—á–µ—Ç–æ–º –∫—Ä–∞–µ–≤
        const sliderWidth = timeLimitSlider.offsetWidth;
        const bubbleWidth = timeSliderValueBubble.offsetWidth;
        
        // –ü–æ–∑–∏—Ü–∏—è —Ü–µ–Ω—Ç—Ä–∞ —à–∞—Ä–∏–∫–∞ –≤ –ø–∏–∫—Å–µ–ª—è—Ö
        const thumbPosition = sliderWidth * (percent / 100);
        
        // –ò–¥–µ–∞–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è –ª–µ–≤–æ–≥–æ –∫—Ä–∞—è –ø–æ–¥—Å–∫–∞–∑–∫–∏ (—á—Ç–æ–±—ã –æ–Ω–∞ –±—ã–ª–∞ –ø–æ —Ü–µ–Ω—Ç—Ä—É)
        let bubbleLeft = thumbPosition - (bubbleWidth / 2);

        // "–ó–∞–ª–∏–ø–∞–Ω–∏–µ" —É –ª–µ–≤–æ–≥–æ –∫—Ä–∞—è
        if (bubbleLeft < 0) {
            bubbleLeft = 0;
        }
        // "–ó–∞–ª–∏–ø–∞–Ω–∏–µ" —É –ø—Ä–∞–≤–æ–≥–æ –∫—Ä–∞—è
        if (bubbleLeft + bubbleWidth > sliderWidth) {
            bubbleLeft = sliderWidth - bubbleWidth;
        }

        timeSliderValueBubble.style.left = `${bubbleLeft}px`;
    }
    
    /**
     * "–î–∏—Ä–∏–∂–µ—Ä": –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç –ø–æ–ª–∑—É–Ω–æ–∫ –≤—Ä–µ–º–µ–Ω–∏, —á–∏—Å–ª–æ–≤–æ–µ –ø–æ–ª–µ –∏ –≤—Å–µ –≤–∏–∑—É–∞–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã.
     * @param {number} newValue - –ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏.
     * @param {HTMLElement} sourceElement - –≠–ª–µ–º–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–ª –∏–∑–º–µ–Ω–µ–Ω–∏–µ.
     */
    function updateTimeControls(newValue, sourceElement) {
        const value = Math.max(0, Math.min(180, parseInt(newValue, 10) || 0));

        if (sourceElement !== timeLimitInput) {
            timeLimitInput.value = value;
        }
        if (sourceElement !== timeLimitSlider) {
            timeLimitSlider.value = value;
        }
        
        updateSingleSliderVisuals();
    }

    /**
     * –ò–∑–º–µ–Ω—è–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏ —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º —à–∞–≥–æ–º (–¥–ª—è —Å—Ç—Ä–µ–ª–æ–∫ –∏ –∫–æ–ª–µ—Å–∏–∫–∞).
     * @param {number} direction - 1 –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è, -1 –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è.
     */
    function adjustTimeLimit(direction) {
        let currentValue = parseInt(timeLimitInput.value, 10);
        if (isNaN(currentValue)) currentValue = 0;

        let step;
        if (direction > 0) { // –õ–æ–≥–∏–∫–∞ –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è
            if (currentValue < 10) step = 1;
            else step = 5;
        } else { // –õ–æ–≥–∏–∫–∞ –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è
            if (currentValue <= 10) step = 1;
            else step = 5;
        }
        
        let newValue = currentValue + (step * direction);

        if (direction < 0 && currentValue > 10 && newValue < 10) {
            newValue = 10;
        }
        
        updateTimeControls(newValue, timeLimitInput);
    }

    function generateTimeSliderTicks() {
        if (!timeSliderTicks || !timeLimitSlider) return;
        timeSliderTicks.innerHTML = '';
        const max = parseInt(timeLimitSlider.max, 10);

        // --- –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—É—é –ª–æ–≥–∏–∫—É –∏–∑ –ø—Ä–æ—à–ª–æ–≥–æ —à–∞–≥–∞ ---
        const tickPoints = [5, 10, 15, 20, 25];
        const labelPoints = [0, 30, 60, 90, 120, 150, 180];

        // –°–æ–∑–¥–∞–µ–º –º–∞–ª–µ–Ω—å–∫–∏–µ –Ω–∞—Å–µ—á–∫–∏
        tickPoints.forEach(value => {
            const positionPercent = (value / max) * 100;
            const tick = document.createElement('div');
            tick.className = 'tick';
            tick.style.left = `${positionPercent}%`;
            timeSliderTicks.appendChild(tick);
        });

        // –°–æ–∑–¥–∞–µ–º –±–æ–ª—å—à–∏–µ –Ω–∞—Å–µ—á–∫–∏ —Å –ø–æ–¥–ø–∏—Å—è–º–∏
        labelPoints.forEach(value => {
            if (value > 0 && value < max && !tickPoints.includes(value)) {
                 const positionPercent = (value / max) * 100;
                 const tick = document.createElement('div');
                 tick.className = 'tick';
                 tick.style.left = `${positionPercent}%`;
                 timeSliderTicks.appendChild(tick);
            }
            const positionPercent = (value / max) * 100;
            const label = document.createElement('span');
            label.className = 'tick-label';
            label.textContent = value;
            label.style.left = `${positionPercent}%`;
            timeSliderTicks.appendChild(label);
        });
    }






    /**
     * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –Ω–∞—Å–µ—á–∫–∏ (ticks) –ø–æ–¥ –¥–≤–æ–π–Ω—ã–º –ø–æ–ª–∑—É–Ω–∫–æ–º.
     * @param {number} totalQuestions - –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤.
     */
    function generateSliderTicks(totalQuestions) {
        if (!sliderTicks || totalQuestions < 10) {
            sliderTicks.innerHTML = '';
            return;
        }

        sliderTicks.innerHTML = ''; // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –Ω–∞—Å–µ—á–∫–∏

        // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è –Ω–∞—Å–µ—á–µ–∫, —á—Ç–æ–±—ã –∏—Ö –Ω–µ –±—ã–ª–æ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ
        const interval = 5;

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫ —á–∞—Å—Ç–æ —Å—Ç–∞–≤–∏—Ç—å —á–∏—Å–ª–æ–≤—ã–µ –º–µ—Ç–∫–∏
        const labelIntervalMultiplier = totalQuestions > 200 ? 5 : 4;
        const labelInterval = interval * labelIntervalMultiplier;

        for (let i = 1; i <= totalQuestions; i += interval) {
            const positionPercent = ((i - 1) / (totalQuestions - 1)) * 100;
            
            const tick = document.createElement('div');
            tick.className = 'tick';
            tick.style.left = `${positionPercent}%`;
            sliderTicks.appendChild(tick);

            // –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∫–∏ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ, –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏ "—é–±–∏–ª–µ–π–Ω—ã—Ö" –∑–Ω–∞—á–µ–Ω–∏–π
            if (i === 1 || i % labelInterval === 0 || i + interval > totalQuestions) {
                const label = document.createElement('span');
                label.className = 'tick-label';
                label.textContent = (i + interval > totalQuestions && i !== totalQuestions) ? totalQuestions : i;
                label.style.left = `${positionPercent}%`;
                sliderTicks.appendChild(label);
            }
        }
    }









    /**
     * "–ü—Ä–∏–º–∞–≥–Ω–∏—á–∏–≤–∞–µ—Ç" –∑–Ω–∞—á–µ–Ω–∏–µ –∫ –±–ª–∏–∂–∞–π—à–µ–º—É —à–∞–≥—É, —Å –æ—Å–æ–±—ã–º —Å–ª—É—á–∞–µ–º –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è.
     * @param {number} value - –¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.
     * @param {number} step - –®–∞–≥, –∫ –∫–æ—Ç–æ—Ä–æ–º—É –Ω—É–∂–Ω–æ "–ø—Ä–∏–º–∞–≥–Ω–∏—Ç–∏—Ç—å".
     * @param {number} max - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –≤–æ–∑–º–æ–∂–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.
     * @returns {number} - "–ü—Ä–∏–º–∞–≥–Ω–∏—á–µ–Ω–Ω–æ–µ" –∑–Ω–∞—á–µ–Ω–∏–µ.
     */
    function snapToStep(value, step, max) {
      // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–≤–µ–ª –ø–æ–ª–∑—É–Ω–æ–∫ –¥–æ —Å–∞–º–æ–≥–æ –∫–æ–Ω—Ü–∞, –≤—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –º–∞–∫—Å–∏–º—É–º.
      if (value === max) {
        return max;
      }
      // –û–∫—Ä—É–≥–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –¥–æ –±–ª–∏–∂–∞–π—à–µ–≥–æ, –∫—Ä–∞—Ç–Ω–æ–≥–æ —à–∞–≥—É.
      const snappedValue = Math.round(value / step) * step;
      // –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ –±—É–¥–µ—Ç –º–µ–Ω—å—à–µ 1.
      return Math.max(1, snappedValue);
    }


    /**
     * –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: "–ü—Ä–∏–º–∞–≥–Ω–∏—á–∏–≤–∞–µ—Ç" –∑–Ω–∞—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –∫ –Ω—É–∂–Ω—ã–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞–º.
     * –®–∞–≥ 1 –¥–æ 10 –º–∏–Ω—É—Ç, —à–∞–≥ 5 –ø–æ—Å–ª–µ 10 –º–∏–Ω—É—Ç.
     * @param {number} value - –¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.
     * @returns {number} - "–ü—Ä–∏–º–∞–≥–Ω–∏—á–µ–Ω–Ω–æ–µ" –∑–Ω–∞—á–µ–Ω–∏–µ.
     */
    function snapTimeValue(value) {
        if (value <= 10) {
            // –û—Ç 0 –¥–æ 10 –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ
            return Math.round(value);
        }
        // –ü–æ—Å–ª–µ 10 –æ–∫—Ä—É–≥–ª—è–µ–º –¥–æ –±–ª–∏–∂–∞–π—à–µ–≥–æ —á–∏—Å–ª–∞, –∫—Ä–∞—Ç–Ω–æ–≥–æ 5
        return Math.round(value / 5) * 5;
    }


    /**
     * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –Ω–∞—Å–µ—á–∫–∏ (ticks) –ø–æ–¥ –¥–≤–æ–π–Ω—ã–º –ø–æ–ª–∑—É–Ω–∫–æ–º.
     * @param {number} totalQuestions - –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤.
     */
    function generateSliderTicks(totalQuestions) {
        if (!sliderTicks || totalQuestions < 10) {
            sliderTicks.innerHTML = '';
            return;
        }

        sliderTicks.innerHTML = ''; // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –Ω–∞—Å–µ—á–∫–∏

        // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è –Ω–∞—Å–µ—á–µ–∫, —á—Ç–æ–±—ã –∏—Ö –Ω–µ –±—ã–ª–æ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ
        const interval = 5;

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫ —á–∞—Å—Ç–æ —Å—Ç–∞–≤–∏—Ç—å —á–∏—Å–ª–æ–≤—ã–µ –º–µ—Ç–∫–∏
        const labelIntervalMultiplier = totalQuestions > 200 ? 5 : 4;
        const labelInterval = interval * labelIntervalMultiplier;

        for (let i = 1; i <= totalQuestions; i += interval) {
            const positionPercent = ((i - 1) / (totalQuestions - 1)) * 100;
            
            const tick = document.createElement('div');
            tick.className = 'tick';
            tick.style.left = `${positionPercent}%`;
            sliderTicks.appendChild(tick);

            // –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∫–∏ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ, –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏ "—é–±–∏–ª–µ–π–Ω—ã—Ö" –∑–Ω–∞—á–µ–Ω–∏–π
            if (i === 1 || i % labelInterval === 0 || i + interval > totalQuestions) {
                const label = document.createElement('span');
                label.className = 'tick-label';
                label.textContent = (i + interval > totalQuestions && i !== totalQuestions) ? totalQuestions : i;
                label.style.left = `${positionPercent}%`;
                sliderTicks.appendChild(label);
            }
        }
    }



    async function handleActivateSearch() {
        const code = accessCodeInput.value.trim();
        if (!code) {
            // === –ò–ó–ú–ï–ù–ï–ù–ò–ï ‚Ññ1: –ó–∞–º–µ–Ω—è–µ–º alert –Ω–∞ toast ===
            window.mainApp.showToast(_('enter_activation_key_alert'), 'error');
            return;
        }

        activateSearchBtn.disabled = true;
        activateSearchBtn.textContent = _('checking_button');

        try {
            const response = await fetch(googleAppScriptUrl, {
                method: 'POST',
                body: JSON.stringify({
                    action: 'validateAccessCode',
                    code: code
                })
            });

            const result = await response.json();

            if (result.success) {
                await DBManager.save({ key: 'activatedSearchKey', value: code }, 'AppSettings');
                searchActivationContainer.classList.add('hidden');
                searchContainer.classList.remove('hidden');
                // === –ò–ó–ú–ï–ù–ï–ù–ò–ï ‚Ññ2: –ó–∞–º–µ–Ω—è–µ–º –≥–ª–∞–≤–Ω—ã–π alert –Ω–∞ toast (—Ç–∏–ø 'success') ===
                window.mainApp.showToast(_('search_activated_alert'), 'success');
            } else {
                // === –ò–ó–ú–ï–ù–ï–ù–ò–ï ‚Ññ3: –ó–∞–º–µ–Ω—è–µ–º alert –æ–± –æ—à–∏–±–∫–µ –Ω–∞ toast (—Ç–∏–ø 'error') ===
                window.mainApp.showToast(result.error || _('error_generic_for_alert'), 'error');
            }

        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–ª—é—á–∞:", error);
            // === –ò–ó–ú–ï–ù–ï–ù–ò–ï ‚Ññ4: –ó–∞–º–µ–Ω—è–µ–º alert –æ–± –æ—à–∏–±–∫–µ —Å–µ—Ç–∏ –Ω–∞ toast (—Ç–∏–ø 'error') ===
            window.mainApp.showToast(_('server_connection_error_alert'), 'error');
        } finally {
            activateSearchBtn.disabled = false;
            activateSearchBtn.textContent = _('activation_button');
        }
    }




    async function revalidateSearchKey(key) {
        searchVerificationContainer.classList.remove('hidden'); // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º "–ü—Ä–æ–≤–µ—Ä–∫–∞..."

        try {
            const response = await fetch(googleAppScriptUrl, {
                method: 'POST',
                body: JSON.stringify({
                    action: 'revalidateKey',
                    code: key
                })
            });
            const result = await response.json();

            if (result.success) {
                // –°–µ—Ä–≤–µ—Ä –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª, —á—Ç–æ –∫–ª—é—á –≤—Å–µ –µ—â–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω
                searchContainer.classList.remove('hidden');
            } else {
                // –ö–ª—é—á –±–æ–ª—å—à–µ –Ω–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω!
                await DBManager.delete('activatedSearchKey', 'AppSettings');  // –°—Ç–∏—Ä–∞–µ–º –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π –∫–ª—é—á
                searchActivationContainer.classList.remove('hidden');
                console.warn('–î–æ—Å—Ç—É–ø –∫ –ø–æ–∏—Å–∫—É –æ—Ç–æ–∑–≤–∞–Ω —Å–µ—Ä–≤–µ—Ä–æ–º.');
            }
        } catch (error) {
            // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Å–µ—Ç–∏, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ (–±–µ–∑–æ–ø–∞—Å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç)
            console.error("–û—à–∏–±–∫–∞ —Ä–µ–≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–ª—é—á–∞:", error);
            await DBManager.delete('activatedSearchKey', 'AppSettings');
            searchActivationContainer.classList.remove('hidden');
        } finally {
            searchVerificationContainer.classList.add('hidden'); // –°–∫—Ä—ã–≤–∞–µ–º "–ü—Ä–æ–≤–µ—Ä–∫–∞..."
        }
    }

    /**
     * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–µ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.
     * @param {string} title - –ó–∞–≥–æ–ª–æ–≤–æ–∫ –æ–∫–Ω–∞.
     * @param {string} message - –¢–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.
     * @param {string} confirmTextKey - –ö–ª—é—á –ø–µ—Ä–µ–≤–æ–¥–∞ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.
     * @returns {Promise<boolean>} - Promise, –∫–æ—Ç–æ—Ä—ã–π —Ä–∞–∑—Ä–µ—à–∞–µ—Ç—Å—è –≤ true, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", –∏–Ω–∞—á–µ false.
     */
    function showConfirmationModal(titleKey, messageKey, confirmTextKey = 'exit_modal_confirm') {
        return new Promise(resolve => {
            const modal = getEl('confirmModal');
            const titleEl = getEl('confirmModalTitle');
            const textEl = getEl('confirmModalText');
            const yesBtn = getEl('confirmModalYesBtn');
            const noBtn = getEl('confirmModalNoBtn');

            // === –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –¢–µ–ø–µ—Ä—å –º—ã –ø–µ—Ä–µ–≤–æ–¥–∏–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ ===
            titleEl.textContent = _(titleKey);
            textEl.textContent = _(messageKey);
            
            yesBtn.textContent = _(confirmTextKey);
            noBtn.textContent = _('modal_cancel_button');

            const cleanup = (result) => {
                modal.classList.add('hidden');
                yesBtn.onclick = null;
                noBtn.onclick = null;
                resolve(result);
            };

            yesBtn.onclick = () => cleanup(true);
            noBtn.onclick = () => cleanup(false);

            modal.classList.remove('hidden');
        });
    }



// =======================================================
// ===         –ù–û–í–´–ô –ú–û–î–£–õ–¨ –î–õ–Ø AI-–ß–ê–¢–ê (FAB)          ===
// =======================================================

// –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ —á–∞—Ç–∞
    let aiChatFab, aiChatModal, aiChatModalContent, aiChatCloseBtn, aiChatMessages, aiChatInput, aiChatSendBtn, aiChatResizeBtn,
        aiChatHistoryBtn, aiChatSidebar, aiNewChatBtn, aiChatHistoryList, aiChatScrollWrapper, aiChatsListener = null; // <-- –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–æ–±–∞–≤–∏–ª–∏ aiChatScrollWrapper —Å—é–¥–∞

    let isAllTooltipsVisible = false;
    // === –ù–ê–ß–ê–õ–û –ù–û–í–´–• –ü–ï–†–ï–ú–ï–ù–ù–´–• ===
    let aiTopicsView, aiTopicsList, aiTopicsBreadcrumb, aiBackToAudiencesBtn, aiNewTopicBtn;
    let currentAudienceId = null; // ID —Ç–µ–∫—É—â–µ–π –æ—Ç–∫—Ä—ã—Ç–æ–π –ø–∞–ø–∫–∏-–∞—É–¥–∏—Ç–æ—Ä–∏–∏
    let currentTopicId = null; // ID —Ç–µ–∫—É—â–µ–≥–æ –æ—Ç–∫—Ä—ã—Ç–æ–≥–æ —á–∞—Ç–∞-—Ç–µ–º—ã
    // === –ö–û–ù–ï–¶ –ù–û–í–´–• –ü–ï–†–ï–ú–ï–ù–ù–´–• ===
    let allAIChats = {}; // –û–±—ä–µ–∫—Ç –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –í–°–ï–• —á–∞—Ç–æ–≤ { chatId: [messages] }
    let currentAIChatId = null; // ID —Ç–µ–∫—É—â–µ–≥–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —á–∞—Ç–∞
    let currentAIChatType = 'private'; // 'private' –∏–ª–∏ 'public'
    let currentAudienceListener = null; // –°–ª—É—à–∞—Ç–µ–ª—å –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π –≤ "–ê—É–¥–∏—Ç–æ—Ä–∏–∏"
    let aiColorLegendsWithEditor, aiColorLegendsWithList, aiColorLegendEditor, aiLegendEditorColor, aiLegendTextInput, aiLegendSaveBtn, aiLegendCancelBtn;


    const AI_CHATS_STORAGE_KEY = 'allUserAIChats'; // –ö–ª—é—á –¥–ª—è localStorage
    const AI_LEGENDS_STORAGE_KEY = 'aiColorLegends';

    let attachedFile = null; 
    let isAIResponding = false;
    let isAIChatExpanded = false;
    let aiReplyContext = null; // –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –æ—Ç–≤–µ—Ç–∞

    let currentPublicChatMessages = []; // –•—Ä–∞–Ω–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π –æ—Ç–∫—Ä—ã—Ç–æ–π –ê—É–¥–∏—Ç–æ—Ä–∏–∏
    let aiReplyPanel, aiReplyText, aiCancelReplyBtn; // –î–ª—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ UI
    // –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ —Å–∫—Ä–æ–ª–ª–±–∞—Ä–∞
    let aiCustomScrollbar, aiScrollbarThumb, aiScrollbarDots;
    let aiScrollbarTooltip;
    let activeTooltipDot = null; 


    function initAIChat() {
        // 1. –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ DOM-—ç–ª–µ–º–µ–Ω—Ç—ã
        aiChatFab = getEl('aiChatFab');
        aiChatModal = getEl('aiChatModal');
        aiChatCloseBtn = getEl('aiChatCloseBtn');
        aiChatResizeBtn = getEl('aiChatResizeBtn');
        aiChatModalContent = aiChatModal?.querySelector('.ai-chat-modal-content');
        aiChatMessages = getEl('aiChatMessages');
        aiChatInput = getEl('aiChatInput');
        aiChatSendBtn = getEl('aiChatSendBtn');
        aiReplyPanel = getEl('aiReplyPanel');
        aiReplyText = getEl('aiReplyText');
        aiCancelReplyBtn = getEl('aiCancelReplyBtn');
        aiScrollbarTooltip = getEl('aiScrollbarTooltip');
        const aiChatAttachBtn = getEl('aiChatAttachBtn');
        const aiChatFileInput = getEl('aiChatFileInput');
        const aiChatSettingsBtn = getEl('aiChatSettingsBtn');
        const aiChatSettingsPanel = getEl('aiChatSettingsPanel');
        const aiCreativitySlider = getEl('aiCreativitySlider');
        const aiGroundingToggleMain = getEl('aiGroundingToggleMain');
        const imagePreviewModal = getEl('imagePreviewModal');
        const closeImagePreviewBtn = imagePreviewModal?.querySelector('.close-image-preview');
        const textPreviewModal = getEl('textPreviewModal');
        const closeTextPreviewBtn = textPreviewModal?.querySelector('.close-text-preview');
        const aiScrollToBottomBtn = getEl('aiScrollToBottomBtn'); 
        
        aiChatScrollWrapper = aiChatModal?.querySelector('.ai-chat-scroll-wrapper');
        const aiSidebarHandle = getEl('aiSidebarHandle');
        const aiShowAllUserMessagesBtn = getEl('aiShowAllUserMessagesBtn');
        
        aiCustomScrollbar = getEl('aiCustomScrollbar');
        aiScrollbarThumb = getEl('aiScrollbarThumb');
        aiScrollbarDots = getEl('aiScrollbarDots');

        aiChatHistoryBtn = getEl('aiChatHistoryBtn'); // –≠—Ç–∞ –∫–Ω–æ–ø–∫–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å —É–∂–µ —É–¥–∞–ª–µ–Ω–∞, –Ω–æ –æ—Å—Ç–∞–≤–∏–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        aiChatSidebar = getEl('aiChatSidebar');
        const aiNewPrivateChatBtn = getEl('aiNewPrivateChatBtn');
        const aiNewAudienceBtn = getEl('aiNewAudienceBtn');
        aiChatHistoryList = getEl('aiChatHistoryList');
        const aiAudiencesList = getEl('aiAudiencesList'); // –ù–∞—Ö–æ–¥–∏–º –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫
        // === –ù–ê–ß–ê–õ–û –ù–û–í–û–ì–û –ö–û–î–ê ===
        aiTopicsView = getEl('aiTopicsView');
        aiTopicsList = getEl('aiTopicsList');
        aiTopicsBreadcrumb = getEl('aiTopicsBreadcrumb');
        aiBackToAudiencesBtn = getEl('aiBackToAudiencesBtn');
        aiNewTopicBtn = getEl('aiNewTopicBtn');
        // === –ö–û–ù–ï–¶ –ù–û–í–û–ì–û –ö–û–î–ê ===
        aiColorLegendsWithEditor = getEl('aiColorLegendsWithEditor');
        aiColorLegendsWithList = getEl('aiColorLegendsWithList');
        aiColorLegendEditor = getEl('aiColorLegendEditor');
        aiLegendEditorColor = getEl('aiLegendEditorColor');
        aiLegendTextInput = getEl('aiLegendTextInput');
        aiLegendSaveBtn = getEl('aiLegendSaveBtn');
        aiLegendCancelBtn = getEl('aiLegendCancelBtn');
        
        const closeImageModal = () => imagePreviewModal?.classList.add('hidden');
        const closeTextModal = () => textPreviewModal?.classList.add('hidden');

        // 2. –ù–∞–≤–µ—à–∏–≤–∞–µ–º –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
        if (aiChatFab) {
            makeFabDraggable(aiChatFab);
            loadFabPosition(aiChatFab);
        }
        
        // --- –ù–ê–ß–ê–õ–û –§–ò–ù–ê–õ–¨–ù–´–• –ò–ó–ú–ï–ù–ï–ù–ò–ô ---

        const aiUserMessagesSidebar = getEl('aiChatUserMessagesSidebar');
        const aiUserMessagesList = getEl('aiUserMessagesList');

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏, –æ—Ç–∫—Ä—ã–≤–∞—é—â–µ–π –ø—Ä–∞–≤—É—é –ø–∞–Ω–µ–ª—å
        aiShowAllUserMessagesBtn?.addEventListener('click', (e) => {
            e.stopPropagation(); 
            toggleUserMessagesSidebar();
        });

        // –ù–∞–¥–µ–∂–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –ø—Ä–∞–≤–æ–π –ø–∞–Ω–µ–ª–∏ –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ –µ–µ
        aiChatModalContent?.addEventListener('click', (e) => {
            if (aiChatModalContent.classList.contains('user-sidebar-open')) {
                const target = e.target;
                if (!aiUserMessagesSidebar.contains(target) && !aiShowAllUserMessagesBtn.contains(target)) {
                    toggleUserMessagesSidebar();
                }
            }
        });

        if (aiUserMessagesList) {
            let longPressTimer = null;
            let touchStartX = 0;
            let touchStartY = 0;
            const MOVE_THRESHOLD = 10;
            
            // –§–ª–∞–≥, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –∂–∏—Ç—å –º–µ–∂–¥—É —Å–æ–±—ã—Ç–∏—è–º–∏. –û–Ω —Å–∫–∞–∂–µ—Ç –Ω–∞–º, –±—ã–ª–æ –ª–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–æ–ª–≥–∏–º –Ω–∞–∂–∞—Ç–∏–µ–º.
            let wasLongPress = false;

            const handlePressStart = (e) => {
                const item = e.target.closest('.ai-user-message-item');
                if (!item) return;

                if (!canEditAIMetadata()) {
                    // –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –ø—Ä–∞–≤, –ø—Ä–æ—Å—Ç–æ –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º.
                    // –î–æ–ª–≥–æ–µ –Ω–∞–∂–∞—Ç–∏–µ –Ω–µ –±—É–¥–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å –ø–∞–ª–∏—Ç—Ä—É.
                    return;
                }

                // –í —Å–∞–º–æ–º –Ω–∞—á–∞–ª–µ –ª—é–±–æ–≥–æ –Ω–∞–∂–∞—Ç–∏—è —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥.
                wasLongPress = false;

                const touch = e.touches ? e.touches[0] : e;
                touchStartX = touch.clientX;
                touchStartY = touch.clientY;
                
                // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–≤–∏–∂–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–º–µ–Ω—è–µ—Ç –¥–æ–ª–≥–æ–µ –Ω–∞–∂–∞—Ç–∏–µ, –µ—Å–ª–∏ –±—ã–ª —Å–∫—Ä–æ–ª–ª.
                const handleMove = (moveEvent) => {
                    if (!longPressTimer) return;
                    const moveTouch = moveEvent.touches ? moveEvent.touches[0] : moveEvent;
                    if (Math.abs(moveTouch.clientX - startX) > MOVE_THRESHOLD || Math.abs(moveTouch.clientY - startY) > MOVE_THRESHOLD) {
                        clearTimeout(longPressTimer);
                        longPressTimer = null;
                    }
                };

                // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä. –ï—Å–ª–∏ –æ–Ω —Å—Ä–∞–±–æ—Ç–∞–µ—Ç, –∑–Ω–∞—á–∏—Ç, —ç—Ç–æ –±—ã–ª–æ –¥–æ–ª–≥–æ–µ –Ω–∞–∂–∞—Ç–∏–µ.
                longPressTimer = setTimeout(() => {
                    wasLongPress = true; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—à –≥–ª–∞–≤–Ω—ã–π —Ñ–ª–∞–≥!
                    const index = parseInt(item.dataset.index, 10);
                    showDotColorPicker(item, index);
                    
                    // –û—á–∏—â–∞–µ–º —Å–ª—É—à–∞—Ç–µ–ª–∏ –¥–≤–∏–∂–µ–Ω–∏—è, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∏ –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω—ã.
                    item.removeEventListener('mousemove', handleMove);
                    item.removeEventListener('touchmove', handleMove);
                }, 500);

                // –°–ª—É—à–∞—Ç–µ–ª–∏, –∫–æ—Ç–æ—Ä—ã–µ –æ—Ç–º–µ–Ω—è—Ç —Ç–∞–π–º–µ—Ä –ø—Ä–∏ —Å–∫—Ä–æ–ª–ª–µ.
                item.addEventListener('mousemove', handleMove);
                item.addEventListener('touchmove', handleMove, { passive: true });

                // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –ø–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ –ø–∞–ª–µ—Ü/–∫–Ω–æ–ø–∫–∞ –º—ã—à–∏ –æ—Ç–ø—É—â–µ–Ω–∞.
                const cleanup = (upEvent) => {
                    clearTimeout(longPressTimer);
                    item.removeEventListener('mousemove', handleMove);
                    item.removeEventListener('touchmove', handleMove);
                    item.removeEventListener('mouseup', cleanup);
                    item.removeEventListener('touchend', cleanup);

                    // –ï—Å–ª–∏ —ç—Ç–æ –±—ã–ª–æ –¥–æ–ª–≥–æ–µ –Ω–∞–∂–∞—Ç–∏–µ, –º—ã –¥–æ–ª–∂–Ω—ã –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∞–ª—å–Ω–µ–π—à–µ–µ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π.
                    if (wasLongPress) {
                        upEvent.preventDefault();
                        upEvent.stopPropagation();
                    }
                };
                
                // –í–µ—à–∞–µ–º —Å–ª—É—à–∞—Ç–µ–ª–∏ –Ω–∞ –æ—Ç–ø—É—Å–∫–∞–Ω–∏–µ.
                item.addEventListener('mouseup', cleanup);
                item.addEventListener('touchend', cleanup);
            };

            const handleClick = (e) => {
                // –ì–õ–ê–í–ù–û–ï –ü–†–ê–í–ò–õ–û: –ï—Å–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ –±—ã–ª–æ –¥–æ–ª–≥–∏–º –Ω–∞–∂–∞—Ç–∏–µ–º,
                // –º—ã –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º —ç—Ç–æ—Ç –∫–ª–∏–∫.
                if (wasLongPress) {
                    e.preventDefault();
                    e.stopPropagation();
                    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –∏ –≤—ã—Ö–æ–¥–∏–º.
                    wasLongPress = false;
                    return;
                }
                
                // –ï—Å–ª–∏ —ç—Ç–æ –±—ã–ª –æ–±—ã—á–Ω—ã–π, –∫–æ—Ä–æ—Ç–∫–∏–π –∫–ª–∏–∫, –≤—ã–ø–æ–ª–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ.
                const item = e.target.closest('.ai-user-message-item');
                if (item) {
                    const index = parseInt(item.dataset.index, 10);
                    scrollToAIMessage(index, 'start');
                    toggleUserMessagesSidebar();
                }
            };
            
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º 'mousedown' –∏ 'touchstart' –≤–º–µ—Å—Ç–æ 'click' –¥–ª—è –∏–Ω–∏—Ü–∏–∞—Ü–∏–∏ –ª–æ–≥–∏–∫–∏.
            // –°–ª—É—à–∞—Ç–µ–ª—å 'click' —Ç–µ–ø–µ—Ä—å –æ—Ç–≤–µ—á–∞–µ—Ç —Ç–æ–ª—å–∫–æ –∑–∞ –∫–æ—Ä–æ—Ç–∫–∏–µ –Ω–∞–∂–∞—Ç–∏—è.
            aiUserMessagesList.addEventListener('mousedown', handlePressStart);
            aiUserMessagesList.addEventListener('touchstart', handlePressStart, { passive: true });
            aiUserMessagesList.addEventListener('click', handleClick, true); // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∞–∑—É –∑–∞—Ö–≤–∞—Ç–∞ –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
        }

            
            // –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è —Å–∫—Ä—ã–≤–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—É—é –ø–æ–¥—Å–∫–∞–∑–∫—É
            const hideSourceTooltip = () => {
                if (activeSourceTooltip) {
                    activeSourceTooltip.classList.remove('visible');
                    // –£–¥–∞–ª—è–µ–º –∏–∑ DOM –ø–æ—Å–ª–µ –∞–Ω–∏–º–∞—Ü–∏–∏, —á—Ç–æ–±—ã –Ω–µ –Ω–∞–∫–∞–ø–ª–∏–≤–∞–ª–∏—Å—å
                    setTimeout(() => {
                        if (activeSourceTooltip && !activeSourceTooltip.classList.contains('visible')) {
                            activeSourceTooltip.remove();
                        }
                        activeSourceTooltip = null;
                    }, 200);
                }
            };

            // –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è —Å–æ–∑–¥–∞–µ—Ç –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–¥—Å–∫–∞–∑–∫—É
            const showSourceTooltip = (targetElement) => {
                // –°–Ω–∞—á–∞–ª–∞ —Å–∫—Ä—ã–≤–∞–µ–º —Å—Ç–∞—Ä—É—é, –µ—Å–ª–∏ –æ–Ω–∞ –±—ã–ª–∞
                hideSourceTooltip();

                const tooltip = document.createElement('div');
                tooltip.className = 'source-tooltip';
                
                try {
                    const sources = JSON.parse(targetElement.dataset.source);
                    if (!sources || sources.length === 0) return;

                    tooltip.innerHTML = sources.map(source => 
                        `<a href="${source.uri}" target="_blank" rel="noopener noreferrer">${escapeHTML(source.title || '–ò—Å—Ç–æ—á–Ω–∏–∫')}</a>`
                    ).join('<br>');
                    
                    document.body.appendChild(tooltip);

                    const targetRect = targetElement.getBoundingClientRect();
                    tooltip.style.left = `${targetRect.left}px`;
                    tooltip.style.top = `${targetRect.bottom + 5}px`;

                    const tooltipRect = tooltip.getBoundingClientRect();
                    if (tooltipRect.right > window.innerWidth - 10) {
                        tooltip.style.left = `${window.innerWidth - tooltipRect.width - 10}px`;
                    }
                    if (tooltipRect.bottom > window.innerHeight - 10) {
                        tooltip.style.top = `${targetRect.top - tooltipRect.height - 5}px`;
                    }
                    
                    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –∞–∫—Ç–∏–≤–Ω—É—é –ø–æ–¥—Å–∫–∞–∑–∫—É –∏ –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –µ–µ –≤—ã–∑–≤–∞–ª
                    activeSourceTooltip = tooltip;
                    activeSourceTooltip.sourceElement = targetElement;
                    
                    // –î–µ–ª–∞–µ–º –≤–∏–¥–∏–º–æ–π
                    setTimeout(() => tooltip.classList.add('visible'), 10);

                } catch (err) {
                    console.error("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–∞:", err);
                    tooltip.remove();
                }
            };

            // –ì–ª–∞–≤–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–æ–≤ –ø–æ –≤—Å–µ–º—É –¥–æ–∫—É–º–µ–Ω—Ç—É
            const handleDocumentClickForTooltips = (e) => {
                const clickedSegment = e.target.closest('.grounded-segment');
                
                // –ï—Å–ª–∏ –∫–ª–∏–∫–Ω—É–ª–∏ –ø–æ —Å–µ–≥–º–µ–Ω—Ç—É...
                if (clickedSegment) {
                    // ...–∏ —ç—Ç–æ —Ç–æ—Ç –∂–µ —Å–µ–≥–º–µ–Ω—Ç, —á—Ç–æ —É–∂–µ –æ—Ç–∫—Ä—ã–ª –ø–æ–¥—Å–∫–∞–∑–∫—É...
                    if (activeSourceTooltip && activeSourceTooltip.sourceElement === clickedSegment) {
                        // ...—Ç–æ –ø—Ä–æ—Å—Ç–æ —Å–∫—Ä—ã–≤–∞–µ–º –µ–µ (toggle).
                        hideSourceTooltip();
                    } else {
                        // ...–∏–Ω–∞—á–µ (–µ—Å–ª–∏ —ç—Ç–æ –¥—Ä—É–≥–æ–π —Å–µ–≥–º–µ–Ω—Ç) - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–æ–≤—É—é –ø–æ–¥—Å–∫–∞–∑–∫—É.
                        showSourceTooltip(clickedSegment);
                    }
                    return; // –ó–∞–≤–µ—Ä—à–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
                }

                // –ï—Å–ª–∏ –∫–ª–∏–∫–Ω—É–ª–∏ –ù–ï –ø–æ —Å–µ–≥–º–µ–Ω—Ç—É –∏ –ù–ï –ø–æ —Å–∞–º–æ–π –ø–æ–¥—Å–∫–∞–∑–∫–µ, —Ç–æ —Å–∫—Ä—ã–≤–∞–µ–º –µ–µ.
                if (activeSourceTooltip && !activeSourceTooltip.contains(e.target)) {
                    hideSourceTooltip();
                }
            };
            
            // –ù–∞–≤–µ—à–∏–≤–∞–µ–º –æ–¥–∏–Ω —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞ –≤–µ—Å—å –¥–æ–∫—É–º–µ–Ω—Ç
            document.removeEventListener('click', handleDocumentClickForTooltips); // –û—á–∏—Å—Ç–∫–∞ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
            document.addEventListener('click', handleDocumentClickForTooltips);




            // --- –ö–û–ù–ï–¶ –§–ò–ù–ê–õ–¨–ù–´–• –ò–ó–ú–ï–ù–ï–ù–ò–ô ---
        
        aiCancelReplyBtn?.addEventListener('click', cancelAIReply);
        aiChatCloseBtn?.addEventListener('click', closeAIChat);
        aiChatResizeBtn?.addEventListener('click', toggleAIChatSize);
        aiChatAttachBtn?.addEventListener('click', () => aiChatFileInput?.click());
        aiChatFileInput?.addEventListener('change', handleAIAttachment);
        imagePreviewModal?.addEventListener('click', (e) => { if (e.target === imagePreviewModal) closeImageModal(); });
        closeImagePreviewBtn?.addEventListener('click', closeImageModal);
        textPreviewModal?.addEventListener('click', (e) => { if (e.target === textPreviewModal) closeTextModal(); });
        closeTextPreviewBtn?.addEventListener('click', closeTextModal);

        aiChatSettingsBtn?.addEventListener('click', (e) => {
            e.stopPropagation();
            const isHidden = aiChatSettingsPanel.classList.contains('hidden');
            if (!isHidden) {
                aiChatSettingsPanel.classList.add('hidden');
                return;
            }
            const modalRect = aiChatModalContent.getBoundingClientRect();
            const panelWidth = aiChatSettingsPanel.offsetWidth;
            const windowWidth = window.innerWidth;
            const margin = 15;
            if (modalRect.right + panelWidth + margin > windowWidth) {
                aiChatSettingsPanel.classList.add('is-inside');
            } else {
                aiChatSettingsPanel.classList.remove('is-inside');
            }
            aiChatSettingsPanel.classList.remove('hidden');
        });

        aiCreativitySlider?.addEventListener('input', saveAIChatSettings);
        aiGroundingToggleMain?.addEventListener('change', saveAIChatSettings);
        aiChatSendBtn?.addEventListener('click', sendAIChatMessage);
        if (aiChatInput && aiChatSendBtn) {
            aiChatInput.addEventListener('keydown', (e) => {
                if (e.key === 'Enter' && e.ctrlKey) { e.preventDefault(); sendAIChatMessage(); }
            });
            aiChatInput.addEventListener('input', () => {
                const hasText = aiChatInput.value.trim().length > 0 || attachedFile;
                aiChatSendBtn.disabled = !hasText;
                aiChatInput.style.height = 'auto';
                aiChatInput.style.height = `${aiChatInput.scrollHeight}px`;
            });
            aiChatSendBtn.disabled = true;
        }

        const openSidebar = () => {
            aiChatModalContent?.classList.add('sidebar-open');
        };
        const closeSidebar = () => {
            aiChatModalContent?.classList.remove('sidebar-open');
        };

        aiSidebarHandle?.addEventListener('click', (e) => {
            e.stopPropagation();
            openSidebar();
        });
        aiChatScrollWrapper?.addEventListener('click', closeSidebar);

        let touchStartX = 0;
        aiChatModalContent?.addEventListener('touchstart', (e) => {
            touchStartX = e.touches[0].clientX;
        }, { passive: true });


        aiChatModalContent?.addEventListener('touchmove', (e) => {
            if (window.innerWidth > 800) return;

            const currentX = e.touches[0].clientX;
            const sidebarIsOpen = aiChatModalContent.classList.contains('sidebar-open');

            if (!sidebarIsOpen && touchStartX < 30 && currentX > 70) {
                openSidebar();
            } 
            else if (sidebarIsOpen && currentX < touchStartX - 50) { 
                closeSidebar();
            }
        }, { passive: true });



        aiChatHistoryBtn?.addEventListener('click', (e) => {
            e.stopPropagation();
            aiChatModalContent?.classList.toggle('sidebar-open');
        });

        aiNewPrivateChatBtn?.addEventListener('click', startNewAIChat);
        // ======================= –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ó–î–ï–°–¨ =======================
        // –¢–µ–ø–µ—Ä—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–∑—ã–≤–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é createNewAudience, –∫–æ—Ç–æ—Ä–∞—è
        // –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ç–æ–º –∂–µ –º–æ–¥—É–ª–µ mainApp.
        aiNewAudienceBtn?.addEventListener('click', createNewAudience);
        // ===============================================================
        // === –ù–ê–ß–ê–õ–û –ù–û–í–û–ì–û –ö–û–î–ê ===
        aiBackToAudiencesBtn?.addEventListener('click', closeAudienceFolder);
        aiNewTopicBtn?.addEventListener('click', createNewTopicInAudience);
        // === –ö–û–ù–ï–¶ –ù–û–í–û–ì–û –ö–û–î–ê ===
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–ø–∏—Å–∫–∞ –ü–†–ò–í–ê–¢–ù–´–• —á–∞—Ç–æ–≤
        aiChatHistoryList?.addEventListener('click', (e) => {
            const item = e.target.closest('.ai-chat-history-item');
            if (!item) return;

            const chatId = item.dataset.chatId;

            if (e.target.closest('.ai-chat-history-delete')) {
                e.stopPropagation();
                deleteAIChat(chatId);
            } else {
                switchToAIChat(chatId, 'private'); // –£–∫–∞–∑—ã–≤–∞–µ–º —Ç–∏–ø —á–∞—Ç–∞
            }
        });

        // –ù–û–í–´–ô –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–ø–∏—Å–∫–∞ –ü–£–ë–õ–ò–ß–ù–´–• –∞—É–¥–∏—Ç–æ—Ä–∏–π
        aiAudiencesList?.addEventListener('click', (e) => {
            const item = e.target.closest('.ai-chat-history-item');
            if (!item) return;

            // –õ–æ–≥–∏–∫–∞ –¥–ª—è –∫–Ω–æ–ø–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è
            if (e.target.closest('.ai-chat-history-delete')) {
                const chatId = item.dataset.chatId;
                const ownerId = item.dataset.ownerId;
                deleteAudience(chatId, ownerId);
            } 
            // –õ–æ–≥–∏–∫–∞ –¥–ª—è –∫–ª–∏–∫–∞ –ø–æ —Å–∞–º–æ–º—É —ç–ª–µ–º–µ–Ω—Ç—É (–æ—Ç–∫—Ä—ã—Ç–∏–µ –ø–∞–ø–∫–∏)
            else {
                const audienceId = item.dataset.chatId;
                const audienceTitle = item.querySelector('.ai-chat-history-title')?.textContent || '–ê—É–¥–∏—Ç–æ—Ä–∏—è';
                openAudienceFolder(audienceId, audienceTitle);
            }
        });

        aiChatMessages?.addEventListener('click', (e) => {
            const targetButton = e.target.closest('.ai-action-btn');
            const targetAttachment = e.target.closest('.ai-message-attachment');
            const targetReply = e.target.closest('.ai-reply-context');
            const targetImage = e.target.closest('.ai-message-image');
            const groundedIcon = e.target.closest('.ai-grounded-icon'); // <-- –í–û–¢ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï

            // --- –ù–û–í–´–ô –ë–õ–û–ö –î–õ–Ø –û–ë–†–ê–ë–û–¢–ö–ò –ö–õ–ò–ö–ê –ü–û –ò–ö–û–ù–ö–ï ---
            if (groundedIcon) {
                e.preventDefault();
                e.stopPropagation();
                showGroundedIconTooltip(groundedIcon);
                return; // –ó–∞–≤–µ—Ä—à–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É, —á—Ç–æ–±—ã –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏ –¥—Ä—É–≥–∏–µ –∫–ª–∏–∫–∏
            }
            // --- –ö–û–ù–ï–¶ –ù–û–í–û–ì–û –ë–õ–û–ö–ê ---

            if (targetButton) {
                const action = targetButton.dataset.action;
                const index = parseInt(targetButton.dataset.index, 10);
                switch(action) {
                    case 'reply-ai': startAIReply(index); break;
                    case 'copy-ai':
                    case 'copy-user': handleCopyAIChat(targetButton); break;
                    case 'share-ai': handleShareAIChat(targetButton); break;
                    case 'regenerate-ai': regenerateLastAIResponse(); break;
                    case 'edit-user': startEditUserMessage(index); break;
                    case 'delete-ai': deleteAIChatMessage(index); break;
                }
            } else if (targetAttachment) {
                e.preventDefault();
                const index = parseInt(targetAttachment.dataset.index, 10);
                const message = getAIChatMessageByIndex(index);
                if (message?.attachment) {
                    openAIAttachment(message.attachment);
                }
            } else if (targetReply) {
                const index = parseInt(targetReply.dataset.index, 10);
                scrollToAIMessage(index);
            } else if (targetImage) {
                e.preventDefault();
                showImageInModal(targetImage.src);
            }
        });

        window.addEventListener('click', (e) => {
            if (aiChatSettingsPanel && !aiChatSettingsPanel.classList.contains('hidden') && !aiChatSettingsPanel.contains(e.target) && e.target !== aiChatSettingsBtn) {
                aiChatSettingsPanel.classList.add('hidden');
            }
            document.querySelectorAll('.ai-custom-select.open').forEach(select => {
                if (!select.contains(e.target)) {
                    select.classList.remove('open');
                    select.querySelector('.ai-select-dropdown').classList.add('hidden');
                }
            });
        });

        initCustomScrollbar();
        initScrollbarInteraction();
        aiChatMessages?.addEventListener('scroll', handleChatScroll);
        aiScrollToBottomBtn?.addEventListener('click', () => {
            aiChatMessages.scrollTo({
                top: aiChatMessages.scrollHeight,
                behavior: 'smooth'
            });
        });
        if (window.lucide) {
            lucide.createIcons();
        }
        setupCustomSelect('aiModelSelectContainer');
        setupCustomSelect('aiResponseLengthSelectContainer');
        loadAIChatSettings();
    }


    /**
     * –ó–∞–≥—Ä—É–∂–∞–µ—Ç AI-—á–∞—Ç—ã.
     * –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–Ω–ª–∞–π–Ω - –∏–∑ Firestore (—Å real-time –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏).
     * –ï—Å–ª–∏ –æ—Ñ—Ñ–ª–∞–π–Ω - –∏–∑ IndexedDB.
     */
    function loadAIChatsFromStorage() {
        // –û—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è –æ—Ç —Å—Ç–∞—Ä–æ–≥–æ —Å–ª—É—à–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω –±—ã–ª
        if (aiChatsListener) {
            aiChatsListener();
            aiChatsListener = null;
        }

        if (currentUser && db) {
            // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–Ω–ª–∞–π–Ω: —Å–ª—É—à–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ Firestore
            const chatsRef = db.collection('users').doc(currentUser.uid).collection('ai_chats').orderBy('lastModified', 'desc');
            
            aiChatsListener = chatsRef.onSnapshot(snapshot => {
                // === –ì–õ–ê–í–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ë–ª–æ–∫–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ, –ø–æ–∫–∞ –∂–¥–µ–º –æ—Ç–≤–µ—Ç–∞ –ò–ò ===
                if (isAIResponding) {
                    return; 
                }
                // =======================================================================

                if (snapshot.empty) {
                    console.log("–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç —á–∞—Ç–æ–≤ –≤ Firebase, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π.");
                    startNewAIChat(false); // –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–≤—ã–π —á–∞—Ç, –µ—Å–ª–∏ –≤ –æ–±–ª–∞–∫–µ –ø—É—Å—Ç–æ
                } else {
                    snapshot.docs.forEach(doc => {
                        allAIChats[doc.id] = doc.data().messages;
                    });
                    
                    currentAIChatId = localStorage.getItem('currentAIChatId');
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –µ—â–µ —Ç–µ–∫—É—â–∏–π —á–∞—Ç
                    if (!allAIChats[currentAIChatId]) {
                        currentAIChatId = snapshot.docs[0].id; // –ï—Å–ª–∏ –Ω–µ—Ç, –±–µ—Ä–µ–º —Å–∞–º—ã–π –Ω–æ–≤—ã–π
                    }
                    
                    renderAIChatList();
                    switchToAIChat(currentAIChatId);
                }
            }, error => {
                console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —á–∞—Ç–æ–≤ –∏–∑ Firestore:", error);
                // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏, –ø—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
                loadLocalAIChats();
            });

        } else {
            // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ñ—Ñ–ª–∞–π–Ω: –∑–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ IndexedDB
            loadLocalAIChats();
        }
    }

    /**
     * –ó–∞–≥—Ä—É–∂–∞–µ—Ç —á–∞—Ç—ã –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ (IndexedDB).
     * –í—ã–∑—ã–≤–∞–µ—Ç—Å—è, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∏–ª–∏ –Ω–µ—Ç —Å–µ—Ç–∏.
     */
    async function loadLocalAIChats() {
        try {
            const savedChatsArray = await DBManager.getAll('AIChats');
            allAIChats = savedChatsArray.reduce((acc, chat) => {
                acc[chat.chatId] = chat.messages;
                return acc;
            }, {});
            currentAIChatId = localStorage.getItem('currentAIChatId');

            if (!currentAIChatId || !allAIChats[currentAIChatId]) {
                startNewAIChat(false);
            } else {
                renderAIChatList();
                switchToAIChat(currentAIChatId);
            }
        } catch (error) {
            console.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–µ —á–∞—Ç—ã, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π.", error);
            startNewAIChat(false);
        }
    }

    /**
     * –ü–µ—Ä–µ–Ω–æ—Å–∏—Ç –ª–æ–∫–∞–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —á–∞—Ç—ã –≤ –∞–∫–∫–∞—É–Ω—Ç Firebase.
     * –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ –≤—Ö–æ–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∞–∫–∫–∞—É–Ω—Ç.
     */
    async function migrateLocalChatsToFirebase() {
        if (!currentUser || !db) return;

        try {
            const localChats = await DBManager.getAll('AIChats');
            if (localChats.length === 0) {
                console.log("–õ–æ–∫–∞–ª—å–Ω—ã—Ö —á–∞—Ç–æ–≤ –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.");
                return;
            }

            console.log(`–ù–∞—á–∏–Ω–∞–µ—Ç—Å—è –º–∏–≥—Ä–∞—Ü–∏—è ${localChats.length} –ª–æ–∫–∞–ª—å–Ω—ã—Ö —á–∞—Ç–æ–≤ –≤ Firebase...`);
            const batch = db.batch();
            const chatsCollectionRef = db.collection('users').doc(currentUser.uid).collection('ai_chats');

            localChats.forEach(chat => {
                const docRef = chatsCollectionRef.doc(chat.chatId);
                batch.set(docRef, { 
                    messages: chat.messages,
                    lastModified: new Date() // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –¥–ª—è –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö
                });
            });

            await batch.commit();
            console.log("–ú–∏–≥—Ä–∞—Ü–∏—è –≤ Firebase –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ.");

            // –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏ —É–¥–∞–ª—è–µ–º —á–∞—Ç—ã –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
            const deletePromises = localChats.map(chat => DBManager.delete(chat.chatId, 'AIChats'));
            await Promise.all(deletePromises);
            console.log("–õ–æ–∫–∞–ª—å–Ω—ã–µ —á–∞—Ç—ã —É–¥–∞–ª–µ–Ω—ã –ø–æ—Å–ª–µ –º–∏–≥—Ä–∞—Ü–∏–∏.");
            showToast(`–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ ${localChats.length} –ª–æ–∫–∞–ª—å–Ω—ã—Ö —á–∞—Ç–æ–≤.`, 'success');

        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –º–∏–≥—Ä–∞—Ü–∏–∏ –ª–æ–∫–∞–ª—å–Ω—ã—Ö —á–∞—Ç–æ–≤:", error);
            showToast("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–µ —á–∞—Ç—ã.", "error");
        }
    }



    /**
     * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–µ–∫—É—â–∏–π –∞–∫—Ç–∏–≤–Ω—ã–π AI-—á–∞—Ç.
     * –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ Firestore.
     * –ï—Å–ª–∏ –Ω–µ—Ç - —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –ª–æ–∫–∞–ª—å–Ω–æ –≤ IndexedDB.
     */
    async function saveAIChatsToStorage() {
        if (!currentAIChatId || !allAIChats[currentAIChatId]) return;

        const chatData = {
            messages: allAIChats[currentAIChatId],
            // –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
            lastModified: firebase.firestore.FieldValue.serverTimestamp()
        };
        
        if (currentUser && db) {
            // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–Ω–ª–∞–π–Ω - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Firebase
            try {
                const chatRef = db.collection('users').doc(currentUser.uid).collection('ai_chats').doc(currentAIChatId);
                await chatRef.set(chatData, { merge: true }); // set —Å merge - –±–µ–∑–æ–ø–∞—Å–Ω–æ –∏ —Å–æ–∑–¥–∞–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
            } catch (error) {
                console.error("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è AI-—á–∞—Ç–∞ –≤ Firestore:", error);
                showToast("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å —á–∞—Ç.", "error");
            }
        } else {
            // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ñ—Ñ–ª–∞–π–Ω - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ IndexedDB
            try {
                await DBManager.save({
                    chatId: currentAIChatId,
                    messages: allAIChats[currentAIChatId]
                }, 'AIChats');
            } catch (error) {
                console.error("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è AI-—á–∞—Ç–∞ –≤ IndexedDB:", error);
                showToast("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞.", "error");
            }
        }
        // ID —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞ –≤—Å–µ–≥–¥–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
        localStorage.setItem('currentAIChatId', currentAIChatId);
    }

    /**
     * –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –£–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ AI-—á–∞—Ç–∞ (–ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∏–ª–∏ –ø—É–±–ª–∏—á–Ω–æ–≥–æ).
     * @param {number} index - –ò–Ω–¥–µ–∫—Å —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.
     */
    async function deleteAIChatMessage(index) {
        const confirmed = await showConfirmationModal(
            'confirm_action_title',
            'confirm_delete_message',
            'confirm_button_delete'
        );
        if (!confirmed) return;

        if (currentAIChatType === 'private') {
            const currentChat = allAIChats[currentAIChatId];
            if (!currentChat) return;

            currentChat.splice(index, 1);
            await saveAIChatsToStorage();
            
            renderAIChatMessages();
            renderColorLegends();
            showToast("–°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ.", "success");

        } else {
            const messageToDelete = currentPublicChatMessages[index];
            if (!messageToDelete || !messageToDelete.id) {
                showToast("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.", "error");
                return;
            }

            // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—â–µ–º –∞—É–¥–∏—Ç–æ—Ä–∏—é –ø–æ currentAudienceId, –∞ –Ω–µ currentAIChatId
            const audienceData = window.aiAudiencesCache?.find(a => a.id === currentAudienceId); 
            if (!currentUser || !audienceData || currentUser.uid !== audienceData.ownerId) {
                showToast("–¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –º–æ–∂–µ—Ç —É–¥–∞–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ê—É–¥–∏—Ç–æ—Ä–∏–∏.", "error");
                return;
            }

            try {
                const messageRef = db.collection('ai_audiences').doc(currentAudienceId).collection('topics').doc(currentTopicId).collection('messages').doc(messageToDelete.id);
                await messageRef.delete();
                showToast("–°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ –∏–∑ –ê—É–¥–∏—Ç–æ—Ä–∏–∏.", "success");
            } catch (error) {
                console.error("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –ê—É–¥–∏—Ç–æ—Ä–∏–∏:", error);
                showToast("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ.", "error");
            }
        }
    }





    // =================================================================================
    // ===      –ù–û–í–´–ï –§–£–ù–ö–¶–ò–ò –î–õ–Ø –ö–ê–°–¢–û–ú–ù–û–ô –ü–û–î–°–ö–ê–ó–ö–ò (v1.0)                        ===
    // =================================================================================

    let activeGroundedTooltip = null; // –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥—Å–∫–∞–∑–∫–∏

    /**
     * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–∞—Å—Ç–æ–º–Ω—É—é –ø–æ–¥—Å–∫–∞–∑–∫—É –Ω–∞–¥ –∏–∫–æ–Ω–∫–æ–π Google.
     * @param {HTMLElement} iconElement - –≠–ª–µ–º–µ–Ω—Ç –∏–∫–æ–Ω–∫–∏, –ø–æ –∫–æ—Ç–æ—Ä–æ–π –∫–ª–∏–∫–Ω—É–ª–∏.
     */
    function showGroundedIconTooltip(iconElement) {
        // –ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥—Å–∫–∞–∑–∫–∞, —É–¥–∞–ª—è–µ–º –µ–µ
        if (activeGroundedTooltip) {
            activeGroundedTooltip.remove();
            activeGroundedTooltip = null;
        }

        const tooltip = document.createElement('div');
        tooltip.className = 'grounded-icon-tooltip';
        tooltip.textContent = '–û—Ç–≤–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ü–æ–∏—Å–∫–∞ Google';
        
        document.body.appendChild(tooltip);
        
        // –†–∞—Å—á–µ—Ç –ø–æ–∑–∏—Ü–∏–∏
        const iconRect = iconElement.getBoundingClientRect();
        const tooltipRect = tooltip.getBoundingClientRect();

        let top = iconRect.top - tooltipRect.height - 8; // 8px –æ—Ç—Å—Ç—É–ø
        let left = iconRect.left + (iconRect.width / 2) - (tooltipRect.width / 2);

        // –ö–æ—Ä—Ä–µ–∫—Ü–∏—è, –µ—Å–ª–∏ –≤—ã–ª–µ–∑–∞–µ—Ç –∑–∞ –∫—Ä–∞—è
        if (left < 10) left = 10;
        if (left + tooltipRect.width > window.innerWidth - 10) {
            left = window.innerWidth - tooltipRect.width - 10;
        }
        if (top < 10) { // –ï—Å–ª–∏ –Ω–µ –ø–æ–º–µ—â–∞–µ—Ç—Å—è —Å–≤–µ—Ä—Ö—É, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–Ω–∏–∑—É
            top = iconRect.bottom + 8;
            tooltip.classList.add('tooltip-below'); // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å, —á—Ç–æ–±—ã –ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç—å —Å—Ç—Ä–µ–ª–∫—É
        }

        tooltip.style.top = `${top}px`;
        tooltip.style.left = `${left}px`;
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
        setTimeout(() => tooltip.classList.add('visible'), 10);
        activeGroundedTooltip = tooltip;

        // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—à–∞—Ç–µ–ª—å –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –ø—Ä–∏ –∫–ª–∏–∫–µ –≤ –ª—é–±–æ–º –¥—Ä—É–≥–æ–º –º–µ—Å—Ç–µ
        setTimeout(() => {
            const hideTooltipOnClickOutside = (event) => {
                // === –ì–õ–ê–í–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ó–î–ï–°–¨ ===
                if (activeGroundedTooltip && !activeGroundedTooltip.contains(event.target) && event.target !== iconElement) {
                    activeGroundedTooltip.remove();
                    activeGroundedTooltip = null;
                    window.removeEventListener('click', hideTooltipOnClickOutside, true);
                }
            };
            window.addEventListener('click', hideTooltipOnClickOutside, true);
        }, 0);
    }

    /**
     * –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø-–ü–û–ú–û–©–ù–ò–ö: –°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –≤—ã—Å–æ—Ç—É –ø–æ–ª—è –≤–≤–æ–¥–∞ AI-—á–∞—Ç–∞.
     */
    function resetAIInputHeight() {
        if (!aiChatInput) return;
        // –°–Ω–∞—á–∞–ª–∞ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—ã—Å–æ—Ç—É, —á—Ç–æ–±—ã scrollHeight —Ä–∞—Å—Å—á–∏—Ç–∞–ª—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ –¥–ª—è –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
        aiChatInput.style.height = 'auto';
        // –ó–∞—Ç–µ–º —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã—Å–æ—Ç—É –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É (–∫–æ—Ç–æ—Ä–æ–µ —Ç–µ–ø–µ—Ä—å –ø—É—Å—Ç–æ–µ)
        aiChatInput.style.height = `${aiChatInput.scrollHeight}px`;
    }

    // =======================================================
    // === –õ–û–ì–ò–ö–ê –î–õ–Ø –ü–†–ê–í–û–ô –ü–ê–ù–ï–õ–ò –° –°–û–û–ë–©–ï–ù–ò–Ø–ú–ò –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø ===
    // =======================================================

    /**
     * –û—Ç–∫—Ä—ã–≤–∞–µ—Ç –∏–ª–∏ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç –ø—Ä–∞–≤—É—é –±–æ–∫–æ–≤—É—é –ø–∞–Ω–µ–ª—å.
     */
    function toggleUserMessagesSidebar() {
        console.log('[DEBUG] –í—ã–∑–≤–∞–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è toggleUserMessagesSidebar.');
        
        // --- –ì–õ–ê–í–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ó–î–ï–°–¨ ---
        // –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç –ø–æ –∫–ª–∞—Å—Å—É –≤–Ω—É—Ç—Ä–∏ —É–∂–µ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
        const modalContent = aiChatModal?.querySelector('.ai-chat-modal-content');

        if (!modalContent) {
            console.error('[DEBUG] –û—à–∏–±–∫–∞: –ù–µ –Ω–∞–π–¥–µ–Ω —ç–ª–µ–º–µ–Ω—Ç .ai-chat-modal-content. –ü–∞–Ω–µ–ª—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç–∫—Ä—ã—Ç–∞.');
            return;
        }
        console.log('[DEBUG] –ù–∞–π–¥–µ–Ω modalContent:', modalContent);

        console.log('[DEBUG] –ö–ª–∞—Å—Å—ã –î–û –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è:', modalContent.className);
        const isOpen = modalContent.classList.toggle('user-sidebar-open');
        console.log('[DEBUG] –ö–ª–∞—Å—Å—ã –ü–û–°–õ–ï –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è:', modalContent.className);
        
        console.log(`[DEBUG] –ü–∞–Ω–µ–ª—å —Ç–µ–ø–µ—Ä—å ${isOpen ? '–û–¢–ö–†–´–¢–ê' : '–ó–ê–ö–†–´–¢–ê'}.`);

        if (isOpen) {
            console.log('[DEBUG] –ü–∞–Ω–µ–ª—å –æ—Ç–∫—Ä—ã—Ç–∞, –≤—ã–∑—ã–≤–∞—é renderUserMessagesList...');
            renderUserMessagesList();
        }
    }

    /**
     * –ù–∞–ø–æ–ª–Ω—è–µ—Ç –ø—Ä–∞–≤—É—é –ø–∞–Ω–µ–ª—å —Å–ø–∏—Å–∫–æ–º —Å–æ–æ–±—â–µ–Ω–∏–π —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
     */
    function renderUserMessagesList() {
        const listEl = getEl('aiUserMessagesList');
        if (!listEl) return;

        // --- –ù–ê–ß–ê–õ–û –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø ---
        let currentChat;
        if (currentAIChatType === 'public') {
            // –ï—Å–ª–∏ –æ—Ç–∫—Ä—ã—Ç–∞ –ê—É–¥–∏—Ç–æ—Ä–∏—è, –±–µ—Ä–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –Ω–∞—à–µ–≥–æ –Ω–æ–≤–æ–≥–æ –∫—ç—à–∞
            currentChat = currentPublicChatMessages;
        } else {
            // –ò–Ω–∞—á–µ, –∫–∞–∫ –∏ —Ä–∞–Ω—å—à–µ, –±–µ—Ä–µ–º –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
            currentChat = allAIChats[currentAIChatId];
        }

        if (!currentChat) {
            listEl.innerHTML = '<li>–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.</li>';
            return;
        }
        // --- –ö–û–ù–ï–¶ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø ---

        listEl.innerHTML = ''; // –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫

        const userMessagesHTML = currentChat
            .map((msg, index) => {
                if (msg.role === 'user') {
                    const content = msg.content || '–í–ª–æ–∂–µ–Ω–∏–µ';
                    const snippet = content.substring(0, 100) + (content.length > 100 ? '...' : '');
                    
                    const borderColorStyle = msg.dotColor ? `style="border-left-color: ${msg.dotColor};"` : '';

                    return `
                        <li class="ai-user-message-item" data-index="${index}" ${borderColorStyle}>
                            <div class="ai-user-message-snippet">${escapeHTML(snippet)}</div>
                        </li>
                    `;
                }
                return '';
            })
            .join('');

        if (userMessagesHTML.trim() === '') {
            listEl.innerHTML = '<li>–í—ã –µ—â–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —ç—Ç–æ–º —á–∞—Ç–µ.</li>';
        } else {
            listEl.innerHTML = userMessagesHTML;
        }
    }



    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–æ–≤ –≤–Ω–µ –æ–±–ª–∞—Å—Ç–∏ –ø–æ–¥—Å–∫–∞–∑–æ–∫, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –∏—Ö —Å–∫—Ä—ã–≤–∞—Ç—å.
     * –û–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –≤–Ω–µ toggle-—Ñ—É–Ω–∫—Ü–∏–∏, —á—Ç–æ–±—ã –µ–≥–æ –º–æ–∂–Ω–æ –±—ã–ª–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —É–¥–∞–ª—è—Ç—å.
     */
    function handleOutsideTooltipClick(event) {
        const button = getEl('aiShowAllUserMessagesBtn');
        // –ï—Å–ª–∏ –∫–ª–∏–∫ –±—ã–ª –Ω–µ –ø–æ –∫–Ω–æ–ø–∫–µ, –∫–æ—Ç–æ—Ä–∞—è –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –ø–æ–¥—Å–∫–∞–∑–∫–∏
        if (button && !button.contains(event.target)) {
            // –ò –µ—Å–ª–∏ –ø–æ–¥—Å–∫–∞–∑–∫–∏ –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤–∏–¥–Ω—ã
            if (isAllTooltipsVisible) {
                // –í—ã–∑—ã–≤–∞–µ–º toggle-—Ñ—É–Ω–∫—Ü–∏—é –µ—â–µ —Ä–∞–∑, —á—Ç–æ–±—ã –æ–Ω–∞ –∏—Ö —Å–∫—Ä—ã–ª–∞
                toggleAllUserMessageTooltips();
            }
        }
    }



    /**
     * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–ª–∏ —Å–∫—Ä—ã–≤–∞–µ—Ç –≤—Å–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
     */
    function toggleAllUserMessageTooltips() {
        isAllTooltipsVisible = !isAllTooltipsVisible;

        const container = getEl('aiPersistentTooltipsContainer');
        const button = getEl('aiShowAllUserMessagesBtn');
        if (!container || !button) return;

        button.classList.toggle('active', isAllTooltipsVisible);

        if (isAllTooltipsVisible) {
            container.innerHTML = '';
            const dots = aiScrollbarDots.querySelectorAll('.scrollbar-dot');
            const scrollWrapperRect = aiChatScrollWrapper.getBoundingClientRect();

            dots.forEach(dot => {
                const messageIndex = parseInt(dot.dataset.index, 10);
                const message = allAIChats[currentAIChatId]?.[messageIndex];
                if (!message) return;

                const tooltip = document.createElement('div');
                tooltip.className = 'persistent-tooltip';
                const content = message.content || '–í–ª–æ–∂–µ–Ω–∏–µ';
                tooltip.textContent = content.substring(0, 50) + (content.length > 50 ? '...' : '');

                const dotRect = dot.getBoundingClientRect();
                const topPos = dotRect.top - scrollWrapperRect.top + (dotRect.height / 2) - 15;
                
                tooltip.style.top = `${topPos}px`;
                tooltip.style.right = '35px';
                
                // === –ù–ê–ß–ê–õ–û –ò–ó–ú–ï–ù–ï–ù–ò–ô ===
                tooltip.style.cursor = 'pointer'; // 1. –ú–µ–Ω—è–µ–º –∫—É—Ä—Å–æ—Ä, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–æ—Å—Ç—å
                tooltip.style.pointerEvents = 'auto'; // 2. –†–∞–∑—Ä–µ—à–∞–µ–º –∫–ª–∏–∫–∏ –ø–æ –ø–æ–¥—Å–∫–∞–∑–∫–µ

                tooltip.addEventListener('click', (e) => {
                    e.stopPropagation();
                    
                    // 4. –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ –Ω—É–∂–Ω–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é, —É–∫–∞–∑—ã–≤–∞—è –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ –ø–æ –≤–µ—Ä—Ö—É ('start')
                    scrollToAIMessage(messageIndex, 'start'); 
                    
                    // 5. –í—ã–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–¥—Å–∫–∞–∑–æ–∫
                    toggleAllUserMessageTooltips();
                });
                // === –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–ô ===

                container.appendChild(tooltip);
                setTimeout(() => tooltip.classList.add('visible'), 10);
            });

            setTimeout(() => {
                document.body.addEventListener('click', handleOutsideTooltipClick);
            }, 0);
        } else {
            const tooltips = container.querySelectorAll('.persistent-tooltip');
            tooltips.forEach(tt => {
                tt.classList.remove('visible');
                setTimeout(() => tt.remove(), 300);
            });
            document.body.removeEventListener('click', handleOutsideTooltipClick);
        }
    }



    /**
     * –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—è "–ü–æ–∏—Å–∫ –≤ Google",
     * –Ω–æ –±–æ–ª—å—à–µ –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ—Ç –µ–≥–æ.
     */
    function updateGroundingToggleState() {
        const groundingToggle = getEl('aiGroundingToggleMain');
        if (!groundingToggle) return;
        const container = groundingToggle.closest('.ai-setting-group');
        if (!container) return;

        // –ü—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—É —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –≤–∏–¥
        container.style.opacity = '1';
        container.style.pointerEvents = 'auto';
        container.title = ''; // –£–±–∏—Ä–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É
    }

    /**
     * –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç –º–æ–±–∏–ª—å–Ω—ã–π —Å–∞–π–¥–±–∞—Ä –∏ —É–¥–∞–ª—è–µ—Ç —Å–ª—É—à–∞—Ç–µ–ª—å –∫–ª–∏–∫–∞.
     */
    function closeMobileSidebar() {
        const aiChatSidebar = getEl('aiChatSidebar');
        const aiChatModalContent = getEl('aiChatModal')?.querySelector('.ai-chat-modal-content');

        if (aiChatSidebar) aiChatSidebar.classList.remove('sidebar-visible');
        if (aiChatModalContent) aiChatModalContent.classList.remove('sidebar-open');
        
        // –£–¥–∞–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª—É—à–∞—Ç–µ–ª—å, —Ç–∞–∫ –∫–∞–∫ –æ–Ω –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–µ–Ω
        document.removeEventListener('click', handleClickOutsideSidebar);
    }

    /**
     * –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–ª–∏–∫–∏ –ø–æ –¥–æ–∫—É–º–µ–Ω—Ç—É, —á—Ç–æ–±—ã –∑–∞–∫—Ä—ã—Ç—å —Å–∞–π–¥–±–∞—Ä.
     */
    function handleClickOutsideSidebar(event) {
        const aiChatSidebar = getEl('aiChatSidebar');
        const aiChatMenuBtn = getEl('aiChatMenuBtn');

        // –ó–∞–∫—Ä—ã–≤–∞–µ–º, –µ—Å–ª–∏ –∫–ª–∏–∫ –±—ã–ª –ù–ï –≤–Ω—É—Ç—Ä–∏ —Å–∞–π–¥–±–∞—Ä–∞ –∏ –ù–ï –ø–æ —Å–∞–º–æ–π –∫–Ω–æ–ø–∫–µ –º–µ–Ω—é
        if (aiChatSidebar && !aiChatSidebar.contains(event.target) && !aiChatMenuBtn.contains(event.target)) {
            closeMobileSidebar();
        }
    }
    /**
     * –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ü—Ä—è—á–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–π —Ç—É–ª—Ç–∏–ø –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ.
     */
    function hideActiveTooltip() {
        if (activeTooltipDot) {
            aiScrollbarTooltip.classList.remove('visible');
            activeTooltipDot = null;
        }
    }

    // =======================================================
    // === –õ–û–ì–ò–ö–ê –ò–°–¢–û–†–ò–ò –ß–ê–¢–û–í –í AI-–ü–û–ú–û–©–ù–ò–ö–ï             ===
    // =======================================================

    /**
     * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è –Ω–æ–≤–æ–≥–æ —á–∞—Ç–∞.
     */
    function generateChatId() {
        return `chat_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
    }









    /**
     * –†–µ–Ω–¥–µ—Ä–∏—Ç —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏.
     */
    function renderAIChatList() {
        if (!aiChatHistoryList) return;
        aiChatHistoryList.innerHTML = '';
        const chatIds = Object.keys(allAIChats);

        // –°–æ—Ä—Ç–∏—Ä—É–µ–º —á–∞—Ç—ã –ø–æ ID (–ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–∑–¥–∞–Ω–∏—è) –æ—Ç –Ω–æ–≤—ã—Ö –∫ —Å—Ç–∞—Ä—ã–º
        chatIds.sort((a, b) => b.localeCompare(a));

        chatIds.forEach(chatId => {
            const chat = allAIChats[chatId];
            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏–∑ –ø–µ—Ä–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
            const firstUserMessage = chat.find(msg => msg.role === 'user' && msg.content);
            let title = firstUserMessage ? firstUserMessage.content : '–ù–æ–≤—ã–π —á–∞—Ç';
            if (title.length > 25) title = title.substring(0, 25) + '...';

            const li = document.createElement('li');
            li.className = 'ai-chat-history-item';
            li.dataset.chatId = chatId;
            if (chatId === currentAIChatId) {
                li.classList.add('active');
            }
            li.innerHTML = `
                <span class="ai-chat-history-title">${escapeHTML(title)}</span>
                <button class="ai-chat-history-delete" title="–£–¥–∞–ª–∏—Ç—å —á–∞—Ç">
                    <i data-lucide="trash-2" style="width:14px; height:14px; pointer-events: none;"></i>
                </button>
            `;
            aiChatHistoryList.appendChild(li);
        });
        if (window.lucide) lucide.createIcons();
    }

    /**
     * –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é —á–∞—Ç–∞.
     * @param {boolean} renderList - –ù—É–∂–Ω–æ –ª–∏ –ø–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è.
     */
    function startNewAIChat(renderList = true) {
        const newId = generateChatId();
        allAIChats[newId] = [{
            role: 'model',
            content: '–ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à AI-–ø–æ–º–æ—â–Ω–∏–∫. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?'
        }];
        currentAIChatId = newId;
        saveAIChatsToStorage();
        if (renderList) {
            renderAIChatList();
        }
        switchToAIChat(newId);
    }



    function switchToAIChat(audienceId, topicId, chatType = 'private', dataPayload = null) {

        if (currentAudienceListener) {
            currentAudienceListener();
            currentAudienceListener = null;
        }
        // --- –ù–ê–ß–ê–õ–û –ò–ó–ú–ï–ù–ï–ù–ò–ô ---
        // –û—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è –æ—Ç —Å–ª—É—à–∞—Ç–µ–ª—è –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Ç–µ–º—ã
        if (currentTopicListener) {
            currentTopicListener();
            currentTopicListener = null;
        }
        // --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–ô ---

        currentAIChatType = chatType;

        const publicSection = getEl('aiPublicAudiencesSection');
        const privateSection = getEl('aiPrivateChatsSection');
        const topicsView = getEl('aiTopicsView');

        if (chatType === 'public' && audienceId) {
            publicSection.classList.add('hidden');
            privateSection.classList.add('hidden');
            topicsView.classList.remove('hidden');
            
            const audienceData = window.aiAudiencesCache?.find(a => a.id === audienceId);
            aiTopicsBreadcrumb.textContent = audienceData?.title || '–ê—É–¥–∏—Ç–æ—Ä–∏—è';
            currentPublicLegends = audienceData?.colorLegends || {};
            
            currentAIChatId = null;
            currentAudienceId = audienceId;
            currentTopicId = topicId;
            
            aiChatMessages.innerHTML = '<div class="empty-state">–ó–∞–≥—Ä—É–∑–∫–∞...</div>';
            renderPublicAudience(audienceId, topicId);

        } else { // private
            publicSection.classList.remove('hidden');
            privateSection.classList.remove('hidden');
            topicsView.classList.add('hidden');

            currentAIChatId = audienceId;
            currentAudienceId = null;
            currentTopicId = null;
            
            currentPublicLegends = {};
            // --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫—ç—à –ª–µ–≥–µ–Ω–¥ —Ç–µ–º—ã ---
            currentTopicLegends = {};
            
            currentPublicChatMessages = [];
            localStorage.setItem('currentAIChatId', currentAIChatId);
            renderAIChatMessages();
            aiChatInput.disabled = false;
            aiChatInput.placeholder = _('ai_chat_placeholder');
        }

        renderAIChatList();
        renderAudiencesList();
        renderTopicsList(currentAudienceId);

        if (window.innerWidth <= 800 && (chatType === 'private' || topicId)) {
            closeMobileSidebar();
        }
        renderColorLegends();
    }


    /**
     * –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø—É–±–ª–∏—á–Ω—ã—Ö –∞—É–¥–∏—Ç–æ—Ä–∏–π –∏–∑ Firestore –∏ –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.
     */
    function loadPublicAudiences() {
        if (!db) return;
        const audiencesRef = db.collection('ai_audiences').orderBy('createdAt', 'desc').limit(50);
        
        audiencesRef.onSnapshot(snapshot => {
            const audiences = [];
            snapshot.forEach(doc => {
                audiences.push({ id: doc.id, ...doc.data() });
            });
            window.aiAudiencesCache = audiences; // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –≥–ª–æ–±–∞–ª—å–Ω—ã–π –∫—ç—à –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
            renderAudiencesList();
        }, error => {
            console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ê—É–¥–∏—Ç–æ—Ä–∏–π:", error);
        });
    }

    /**
     * –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø—É–±–ª–∏—á–Ω—ã—Ö –∞—É–¥–∏—Ç–æ—Ä–∏–π –≤ –Ω–∏–∂–Ω–µ–π —á–∞—Å—Ç–∏ —Å–∞–π–¥–±–∞—Ä–∞.
     */
    function renderAudiencesList() {
        const listEl = getEl('aiAudiencesList');
        if (!listEl || !window.aiAudiencesCache) return;

        listEl.innerHTML = '';
        window.aiAudiencesCache.forEach(audience => {
            const li = document.createElement('li');
            li.className = 'ai-chat-history-item';
            li.dataset.chatId = audience.id;
            li.dataset.ownerId = audience.ownerId;

            if (audience.id === currentAudienceId && currentAIChatType === 'public') {
                li.classList.add('active');
            }

            const deleteBtnHtml = (currentUser && currentUser.uid === audience.ownerId) 
                ? `<button class="ai-chat-history-delete" title="–£–¥–∞–ª–∏—Ç—å –∞—É–¥–∏—Ç–æ—Ä–∏—é"><i data-lucide="trash-2" style="width:14px; height:14px; pointer-events: none;"></i></button>`
                : '';

            li.innerHTML = `
                <span class="ai-chat-history-title">${escapeHTML(audience.title)}</span>
                ${deleteBtnHtml}
            `;
            
            listEl.appendChild(li);
        });
        if (window.lucide) lucide.createIcons();
    }


    async function deleteAudience(audienceId, ownerId) {
        if (!currentUser || currentUser.uid !== ownerId) return;

        const confirmed = await showConfirmationModal(
            '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ',
            '–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É –ê—É–¥–∏—Ç–æ—Ä–∏—é? –í—Å–µ —Ç–µ–º—ã –∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –Ω–µ–π –±—É–¥—É—Ç –±–µ–∑–≤–æ–∑–≤—Ä–∞—Ç–Ω–æ —É–¥–∞–ª–µ–Ω—ã.',
            'confirm_button_delete'
        );

        if (confirmed) {
            showGlobalLoader('–£–¥–∞–ª–µ–Ω–∏–µ –ê—É–¥–∏—Ç–æ—Ä–∏–∏...');
            try {
                const audienceRef = db.collection('ai_audiences').doc(audienceId);
                const topicsSnapshot = await audienceRef.collection('topics').get();

                // –ü–∞–∫–µ—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                const batch = db.batch();

                // –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤–æ –≤—Å–µ—Ö —Ç–µ–º–∞—Ö
                for (const topicDoc of topicsSnapshot.docs) {
                    const messagesSnapshot = await topicDoc.ref.collection('messages').get();
                    messagesSnapshot.forEach(msgDoc => {
                        batch.delete(msgDoc.ref);
                    });
                    // –£–¥–∞–ª—è–µ–º —Å–∞–º—É —Ç–µ–º—É
                    batch.delete(topicDoc.ref);
                }

                // –£–¥–∞–ª—è–µ–º —Å–∞–º—É –∞—É–¥–∏—Ç–æ—Ä–∏—é
                batch.delete(audienceRef);

                await batch.commit();

                showToast("–ê—É–¥–∏—Ç–æ—Ä–∏—è —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.", "success");
                
                // –ï—Å–ª–∏ —É–¥–∞–ª–∏–ª–∏ –∞–∫—Ç–∏–≤–Ω—É—é, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π —á–∞—Ç
                if (currentAudienceId === audienceId) {
                    closeAudienceFolder();
                }
            } catch (error) {
                console.error("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ê—É–¥–∏—Ç–æ—Ä–∏–∏:", error);
                showToast("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ê—É–¥–∏—Ç–æ—Ä–∏—é.", "error");
            } finally {
                hideGlobalLoader();
            }
        }
    }


    /**
     * –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –û—Ç–∫—Ä—ã–≤–∞–µ—Ç –≤–∏–¥ "–≤–Ω—É—Ç—Ä–∏" –ø–∞–ø–∫–∏-–∞—É–¥–∏—Ç–æ—Ä–∏–∏.
     */
    function openAudienceFolder(audienceId, audienceTitle) {
        // –ü—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–¥–∞–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏, —É–∫–∞–∑—ã–≤–∞—è, —á—Ç–æ —Ç–µ–º–∞ –µ—â–µ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞ (null)
        switchToAIChat(audienceId, null, 'public');
    }

    /**
     * –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ó–∞–∫—Ä—ã–≤–∞–µ—Ç –≤–∏–¥ "–≤–Ω—É—Ç—Ä–∏" –ø–∞–ø–∫–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫ —Å–ø–∏—Å–∫—É –∞—É–¥–∏—Ç–æ—Ä–∏–π.
     */
    function closeAudienceFolder() {
        // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –æ–±—Ä–∞—Ç–Ω–æ –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –∞–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–∏–≤–∞—Ç–Ω—ã–π —á–∞—Ç
        switchToAIChat(localStorage.getItem('currentAIChatId'), null, 'private');
    }

    /**
     * –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç–µ–º (—á–∞—Ç–æ–≤) –≤–Ω—É—Ç—Ä–∏ –∞—É–¥–∏—Ç–æ—Ä–∏–∏.
     */
    function renderTopicsList(audienceId) {
        if (!audienceId || !aiTopicsList) return;

        db.collection('ai_audiences').doc(audienceId).collection('topics').orderBy('createdAt', 'desc').get()
            .then(snapshot => {
                aiTopicsList.innerHTML = '';
                if (snapshot.empty) {
                    aiTopicsList.innerHTML = '<li class="ai-chat-history-item-placeholder">–¢–µ–º –ø–æ–∫–∞ –Ω–µ—Ç. –°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—É—é!</li>';
                    return;
                }
                snapshot.forEach(doc => {
                    const topic = { id: doc.id, ...doc.data() };
                    const li = document.createElement('li');
                    li.className = 'ai-chat-history-item';
                    
                    if (topic.id === currentTopicId) {
                        li.classList.add('active');
                    }
                    // --- –ù–û–í–´–ô –ö–û–î: –õ–æ–≥–∏–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è ---
                    const audienceData = window.aiAudiencesCache?.find(a => a.id === audienceId);
                    const isOwner = currentUser && audienceData && currentUser.uid === audienceData.ownerId;

                    const deleteBtnHtml = isOwner 
                        ? `<button class="ai-chat-history-delete" title="–£–¥–∞–ª–∏—Ç—å —Ç–µ–º—É"><i data-lucide="trash-2" style="width:14px; height:14px; pointer-events: none;"></i></button>`
                        : '';
                    // --- –ö–û–ù–ï–¶ –ù–û–í–û–ì–û –ö–û–î–ê ---
                    li.innerHTML = `<span class="ai-chat-history-title">${escapeHTML(topic.title)}</span>${deleteBtnHtml}`;
                    li.querySelector('.ai-chat-history-title').onclick = () => switchToAIChat(audienceId, topic.id, 'public');
                    li.onclick = () => switchToAIChat(audienceId, topic.id, 'public');
                    const deleteBtn = li.querySelector('.ai-chat-history-delete');
                    if(deleteBtn) {
                        deleteBtn.onclick = (e) => {
                            e.stopPropagation();
                            deleteTopic(audienceId, topic.id, topic.title); // <-- –í—ã–∑—ã–≤–∞–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é
                        };
                    }
                    aiTopicsList.appendChild(li);
                });
            })
            .catch(error => {
                console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ–º:", error);
                aiTopicsList.innerHTML = '<li class="ai-chat-history-item-placeholder">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏.</li>';
            });
    }



    /**
     * –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —á–∞—Ç –≤–Ω—É—Ç—Ä–∏ —Ç–µ–∫—É—â–µ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏.
     */
    async function createNewTopicInAudience() {
        if (!currentUser || !currentAudienceId) return;

        const title = await promptForTopicName();
        if (!title || title.trim() === '') return;

        try {
            const newTopicData = {
                title: title.trim(),
                createdAt: firebase.firestore.FieldValue.serverTimestamp()
            };
            const docRef = await db.collection('ai_audiences').doc(currentAudienceId).collection('topics').add(newTopicData);

            // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –Ω–æ–≤—ã–π —á–∞—Ç
            await db.collection('ai_audiences').doc(currentAudienceId).collection('topics').doc(docRef.id).collection('messages').add({
                 role: 'model',
                 content: `–¢–µ–º–∞ "${title.trim()}" —Å–æ–∑–¥–∞–Ω–∞.`,
                 timestamp: firebase.firestore.FieldValue.serverTimestamp()
            });

            // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–µ–º –∏ —Å—Ä–∞–∑—É –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –Ω–æ–≤—É—é
            renderTopicsList(currentAudienceId);
            switchToAIChat(currentAudienceId, docRef.id, 'public');

        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ–º—ã:", error);
            showToast("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–µ–º—É.", "error");
        }
    }

    /**
     * –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –£–¥–∞–ª—è–µ—Ç —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —á–∞—Ç –∏ –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –Ω–µ–º.
     */
    async function deleteTopic(audienceId, topicId, topicTitle) {
        const confirmed = await showConfirmationModal(
            '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ',
            `–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Ç–µ–º—É "${topicTitle}"? –í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –Ω–µ–π –±—É–¥—É—Ç –±–µ–∑–≤–æ–∑–≤—Ä–∞—Ç–Ω–æ —É–¥–∞–ª–µ–Ω—ã.`,
            'confirm_button_delete'
        );

        if (confirmed) {
            showGlobalLoader('–£–¥–∞–ª–µ–Ω–∏–µ —Ç–µ–º—ã...');
            try {
                const topicRef = db.collection('ai_audiences').doc(audienceId).collection('topics').doc(topicId);
                const messagesSnapshot = await topicRef.collection('messages').get();
                
                const batch = db.batch();

                // –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                messagesSnapshot.forEach(doc => {
                    batch.delete(doc.ref);
                });

                // –£–¥–∞–ª—è–µ–º —Å–∞–º—É —Ç–µ–º—É
                batch.delete(topicRef);

                await batch.commit();
                
                showToast("–¢–µ–º–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.", "success");

                // –ï—Å–ª–∏ —É–¥–∞–ª–∏–ª–∏ –∞–∫—Ç–∏–≤–Ω—É—é —Ç–µ–º—É, –æ—á–∏—â–∞–µ–º –≤–∏–¥
                if (currentTopicId === topicId) {
                    currentTopicId = null;
                    aiChatMessages.innerHTML = '<div class="empty-state">–¢–µ–º–∞ —É–¥–∞–ª–µ–Ω–∞. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é.</div>';
                }

                renderTopicsList(audienceId); // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Ç–µ–º

            } catch (error) {
                console.error("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–µ–º—ã:", error);
                showToast("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ç–µ–º—É.", "error");
            } finally {
                hideGlobalLoader();
            }
        }
    }

    /**
     * –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∏–º–µ–µ—Ç –ª–∏ —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∞–≤–æ —É–¥–∞–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∞–∫—Ç–∏–≤–Ω–æ–º AI-—á–∞—Ç–µ.
     * @returns {boolean} - true, –µ—Å–ª–∏ —É–¥–∞–ª–µ–Ω–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ.
     */
    function canDeleteAIMessage() {
        if (currentAIChatType === 'private') {
            // –í –ø—Ä–∏–≤–∞—Ç–Ω–æ–º —á–∞—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç —É–¥–∞–ª—è—Ç—å —Å–≤–æ–∏ —Å–æ–æ–±—â–µ–Ω–∏—è.
            return true; 
        }
        if (currentAIChatType === 'public') {
            // –í –ø—É–±–ª–∏—á–Ω–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏ —É–¥–∞–ª—è—Ç—å –º–æ–∂–µ—Ç —Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü.
            // –ò—â–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–µ–∫—É—â–µ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏ –≤ –∫—ç—à–µ.
            const audienceData = window.aiAudiencesCache?.find(a => a.id === currentAudienceId);
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º true, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –¥–∞–Ω–Ω—ã–µ –∞—É–¥–∏—Ç–æ—Ä–∏–∏ –Ω–∞–π–¥–µ–Ω—ã –∏ UID —Å–æ–≤–ø–∞–¥–∞—é—Ç.
            return currentUser && audienceData && currentUser.uid === audienceData.ownerId;
        }
        // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∑–∞–ø—Ä–µ—â–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.
        return false;
    }

    /**
     * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–∞—Å—Ç–æ–º–Ω–æ–µ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –ê—É–¥–∏—Ç–æ—Ä–∏–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç Promise.
     * @returns {Promise<string|null>} - Promise, –∫–æ—Ç–æ—Ä—ã–π —Ä–∞–∑—Ä–µ—à–∞–µ—Ç—Å—è –≤–≤–µ–¥–µ–Ω–Ω—ã–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º –∏–ª–∏ null, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –æ—Ç–º–µ–Ω—É.
     */
    function promptForAudienceName() {
        return new Promise(resolve => {
            const modal = getEl('audienceCreateModal');
            const titleEl = getEl('audienceCreateModalTitle');
            const textEl = getEl('audienceCreateModalText');
            const inputEl = getEl('audienceNameInput');
            const confirmBtn = getEl('audienceCreateConfirmBtn');
            const cancelBtn = getEl('audienceCreateCancelBtn');

            // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ç–µ–∫—Å—Ç—ã –∏–∑ —Å–ª–æ–≤–∞—Ä—è
            titleEl.textContent = _('audience_create_modal_title');
            textEl.textContent = _('audience_create_modal_text');
            inputEl.placeholder = _('audience_create_placeholder');
            confirmBtn.textContent = _('audience_create_button');
            cancelBtn.textContent = _('modal_cancel_button');
            
            inputEl.value = '–û–±—Å—É–∂–¥–µ–Ω–∏–µ —Ç–µ–º—ã...'; // –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

            const cleanup = (result) => {
                modal.classList.add('hidden');
                confirmBtn.onclick = null;
                cancelBtn.onclick = null;
                inputEl.onkeydown = null;
                resolve(result);
            };

            const onConfirm = () => {
                cleanup(inputEl.value);
            };

            const onCancel = () => {
                cleanup(null);
            };

            confirmBtn.onclick = onConfirm;
            cancelBtn.onclick = onCancel;
            
            inputEl.onkeydown = (e) => {
                if (e.key === 'Enter') {
                    e.preventDefault();
                    onConfirm();
                }
            };

            modal.classList.remove('hidden');
            inputEl.focus();
            inputEl.select();
        });
    }

    /**
     * –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–∞—Å—Ç–æ–º–Ω–æ–µ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –¢–µ–º—ã.
     * @returns {Promise<string|null>} - Promise, –∫–æ—Ç–æ—Ä—ã–π —Ä–∞–∑—Ä–µ—à–∞–µ—Ç—Å—è –≤–≤–µ–¥–µ–Ω–Ω—ã–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º –∏–ª–∏ null.
     */
    function promptForTopicName() {
        return new Promise(resolve => {
            const modal = getEl('topicCreateModal');
            const titleEl = getEl('topicCreateModalTitle');
            const textEl = getEl('topicCreateModalText');
            const inputEl = getEl('topicNameInput');
            const confirmBtn = getEl('topicCreateConfirmBtn');
            const cancelBtn = getEl('topicCreateCancelBtn');

            // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ç–µ–∫—Å—Ç—ã –∏–∑ —Å–ª–æ–≤–∞—Ä—è
            titleEl.textContent = _('topic_create_modal_title');
            textEl.textContent = _('topic_create_modal_text');
            inputEl.placeholder = _('topic_create_placeholder');
            confirmBtn.textContent = _('audience_create_button');
            cancelBtn.textContent = _('modal_cancel_button');
            
            inputEl.value = '–û–±—Å—É–∂–¥–µ–Ω–∏–µ...'; // –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

            const cleanup = (result) => {
                modal.classList.add('hidden');
                confirmBtn.onclick = null;
                cancelBtn.onclick = null;
                inputEl.onkeydown = null;
                resolve(result);
            };

            const onConfirm = () => {
                cleanup(inputEl.value);
            };

            const onCancel = () => {
                cleanup(null);
            };

            confirmBtn.onclick = onConfirm;
            cancelBtn.onclick = onCancel;
            
            inputEl.onkeydown = (e) => {
                if (e.key === 'Enter') {
                    e.preventDefault();
                    onConfirm();
                }
            };

            modal.classList.remove('hidden');
            inputEl.focus();
            inputEl.select();
        });
    }

    /**
     * –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é –ø—É–±–ª–∏—á–Ω—É—é –ê—É–¥–∏—Ç–æ—Ä–∏—é.
     */
    async function createNewAudience() {
        if (!currentUser || !db) {
            ChatModule.openAuthModal();
            return;
        }

        const title = await promptForAudienceName();
        if (!title || title.trim() === '') return;

        try {
            const newAudienceData = {
                title: title.trim(),
                ownerId: currentUser.uid,
                ownerName: currentUser.displayName || '–ê–Ω–æ–Ω–∏–º',
                createdAt: firebase.firestore.FieldValue.serverTimestamp(),
            };
            const docRef = await db.collection('ai_audiences').add(newAudienceData);
            
            // –°—Ä–∞–∑—É –æ—Ç–∫—Ä—ã–≤–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω—É—é –ø–∞–ø–∫—É
            openAudienceFolder(docRef.id, newAudienceData.title);

        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ê—É–¥–∏—Ç–æ—Ä–∏–∏:", error);
            showToast("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ê—É–¥–∏—Ç–æ—Ä–∏—é.", "error");
        }
    }


    /**
     * –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ø—É–±–ª–∏—á–Ω–æ–π –ê—É–¥–∏—Ç–æ—Ä–∏–∏ –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∏—Ö.
     * @param {string} audienceId - ID –∞—É–¥–∏—Ç–æ—Ä–∏–∏.
     * @param {object|null} audienceData - (–ù–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ) –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∞—É–¥–∏—Ç–æ—Ä–∏–∏.
     */
    function renderPublicAudience(audienceId, topicId) {
        console.log(`[renderPublicAudience] –ù–∞—á–∏–Ω–∞—é —Ä–µ–Ω–¥–µ—Ä –ê—É–¥–∏—Ç–æ—Ä–∏–∏ ID: ${audienceId}, TopicID: ${topicId}`);
        if (!db) return;

        // --- –ù–ê–ß–ê–õ–û –ò–ó–ú–ï–ù–ï–ù–ò–ô: –õ–æ–≥–∏–∫–∞ –¥–ª—è —Å–ª—É—à–∞—Ç–µ–ª—è –¢–µ–º—ã ---
        // –û—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è –æ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–ª—É—à–∞—Ç–µ–ª—è —Ç–µ–º—ã, –µ—Å–ª–∏ –æ–Ω –±—ã–ª
        if (currentTopicListener) {
            currentTopicListener();
            currentTopicListener = null;
        }
        // --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–ô ---

        if (!topicId) {
            aiChatMessages.innerHTML = '<div class="empty-state">–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –¥–ª—è –Ω–∞—á–∞–ª–∞ –æ–±—â–µ–Ω–∏—è.</div>';
            return;
        }

        const audienceData = window.aiAudiencesCache?.find(a => a.id === audienceId);
        
        if (!audienceData) {
            console.error(`[renderPublicAudience] –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ê—É–¥–∏—Ç–æ—Ä–∏—è —Å ID ${audienceId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.`);
            switchToAIChat(Object.keys(allAIChats)[0] || null, 'private');
            return;
        }

        const isOwner = currentUser && currentUser.uid === audienceData.ownerId;
        aiChatInput.disabled = !isOwner;
        aiChatInput.placeholder = isOwner ? _('ai_chat_placeholder') : "–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ —Ä–µ–∂–∏–º–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞";

        // --- –ù–ê–ß–ê–õ–û –ò–ó–ú–ï–ù–ï–ù–ò–ô: –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—à–∞—Ç–µ–ª—å –¥–ª—è —Å–∞–º–æ–π –¢–µ–º—ã ---
        const topicRef = db.collection('ai_audiences').doc(audienceId).collection('topics').doc(topicId);
        currentTopicListener = topicRef.onSnapshot(doc => {
            if (doc.exists) {
                const topicData = doc.data();
                // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—à –∫—ç—à —Å –ª–µ–≥–µ–Ω–¥–∞–º–∏ –¥–ª—è —ç—Ç–æ–π —Ç–µ–º—ã
                currentTopicLegends = topicData.colorLegends || {};
                // –°—Ä–∞–∑—É –∂–µ –ø–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –ª–µ–≥–µ–Ω–¥—É –≤ —à–∞–ø–∫–µ
                renderColorLegends();
            }
        }, error => {
            console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –¢–µ–º—ã ${topicId}:`, error);
        });
        // --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–ô ---

        console.log(`[renderPublicAudience] –ù–∞—á–∏–Ω–∞—é —Å–ª—É—à–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ Firestore...`);
        currentAudienceListener = db.collection('ai_audiences').doc(audienceId).collection('topics').doc(topicId).collection('messages')
            .orderBy('timestamp', 'asc')
            .onSnapshot(snapshot => {
                const messages = [];
                snapshot.forEach(doc => messages.push({ id: doc.id, ...doc.data() }));
                currentPublicChatMessages = messages; 
                renderAIChatMessages(); 
                renderColorLegends();
            }, error => {
                console.error(`[onSnapshot] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –¢–µ–º—ã ${topicId}:`, error);
                aiChatMessages.innerHTML = `<div class="empty-state">–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è.</div>`;
            });
    }





    /**
     * –£–¥–∞–ª—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–π —á–∞—Ç –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ (Firebase –∏–ª–∏ IndexedDB).
     * @param {string} chatId - ID —á–∞—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.
     */
    async function deleteAIChat(chatId) {
        const confirmed = await showConfirmationModal(
            '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ',
            '–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç —á–∞—Ç? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ.',
            'confirm_button_delete'
        );
        if (!confirmed) return;

        // –£–¥–∞–ª—è–µ–º –∏–∑ –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–º—è—Ç–∏
        delete allAIChats[chatId];

        // –£–¥–∞–ª—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —á–∞—Ç–æ–º –ª–µ–≥–µ–Ω–¥—ã, –¢–û–õ–¨–ö–û –µ—Å–ª–∏ —ç—Ç–æ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π —á–∞—Ç
        // –£–¥–∞–ª—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —á–∞—Ç–æ–º –ª–µ–≥–µ–Ω–¥—ã –∏–∑ Firestore, –µ—Å–ª–∏ —ç—Ç–æ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π —á–∞—Ç
        if (currentAIChatType === 'private' && currentUser && db) {
            try {
                const userDocRef = db.collection('users').doc(currentUser.uid);
                const updateData = {};
                // –ì–æ—Ç–æ–≤–∏–º –∫–æ–º–∞–Ω–¥—É –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ–≥–æ –æ–±—ä–µ–∫—Ç–∞ –ª–µ–≥–µ–Ω–¥ –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞
                updateData[`aiChatLegends.${chatId}`] = firebase.firestore.FieldValue.delete();
                await userDocRef.update(updateData);
                console.log(`–õ–µ–≥–µ–Ω–¥—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ —á–∞—Ç–∞ ${chatId} –æ—á–∏—â–µ–Ω—ã –≤ Firestore.`);
            } catch (error) {
                console.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å –ª–µ–≥–µ–Ω–¥—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ —á–∞—Ç–∞:", error);
            }
        }

        // –£–¥–∞–ª—è–µ–º –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
        if (currentUser && db) {
            // –£–¥–∞–ª—è–µ–º –∏–∑ Firestore
            await db.collection('users').doc(currentUser.uid).collection('ai_chats').doc(chatId).delete();
        } else {
            // –£–¥–∞–ª—è–µ–º –∏–∑ IndexedDB
            await DBManager.delete(chatId, 'AIChats');
        }

        // –õ–æ–≥–∏–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –Ω–∞ –¥—Ä—É–≥–æ–π —á–∞—Ç
        if (currentAIChatId === chatId) {
            const remainingIds = Object.keys(allAIChats);
            remainingIds.sort((a, b) => b.localeCompare(a));
            const newCurrentId = remainingIds.length > 0 ? remainingIds[0] : null;

            if (newCurrentId) {
                switchToAIChat(newCurrentId);
            } else {
                startNewAIChat(); // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π, –µ—Å–ª–∏ –≤—Å–µ —É–¥–∞–ª–∏–ª–∏
            }
        }
        
        // –í –ª—é–±–æ–º —Å–ª—É—á–∞–µ –ø–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫
        renderAIChatList();
    }


    // =======================================================
    // ===     –õ–û–ì–ò–ö–ê –ö–ê–°–¢–û–ú–ù–û–ì–û –°–ö–†–û–õ–õ–ë–ê–†–ê –î–õ–Ø AI-–ß–ê–¢–ê     ===
    // =======================================================

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤—Å–µ —Å–ª—É—à–∞—Ç–µ–ª–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ —Å–∫—Ä–æ–ª–ª–±–∞—Ä–∞.
     */
    function initCustomScrollbar() {
        if (!aiChatMessages || !aiCustomScrollbar) return;

        // 1. –°–ª—É—à–∞–µ–º —Å–∫—Ä–æ–ª–ª –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –æ–∫–Ω–µ —á–∞—Ç–∞, —á—Ç–æ–±—ã –¥–≤–∏–≥–∞—Ç—å –ø–æ–ª–∑—É–Ω–æ–∫
        aiChatMessages.addEventListener('scroll', () => {
            requestAnimationFrame(updateScrollbarThumbPosition);
        });

        // 2. –°–ª—É—à–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞ —á–∞—Ç–∞ –∏–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ/—É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
        const observer = new ResizeObserver(() => {
            drawOrUpdateScrollbar();
            updateScrollToBottomButtonVisibility(); // –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–∑–æ–≤ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞
        });
        observer.observe(aiChatMessages);
        const mutationObserver = new MutationObserver(drawOrUpdateScrollbar);
        mutationObserver.observe(aiChatMessages, { childList: true, subtree: true });
        
        // 3. –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏–∫—É –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è –ø–æ–ª–∑—É–Ω–∫–∞
        let isDraggingThumb = false;
        let startY, startScrollTop;

        aiScrollbarThumb.addEventListener('mousedown', (e) => {
            isDraggingThumb = true;
            startY = e.clientY;
            startScrollTop = aiChatMessages.scrollTop;
            aiScrollbarThumb.style.cursor = 'grabbing';
            document.body.style.cursor = 'grabbing';
            document.body.style.userSelect = 'none';
        });

        window.addEventListener('mousemove', (e) => {
            if (!isDraggingThumb) return;
            const deltaY = e.clientY - startY;
            const trackHeight = aiCustomScrollbar.clientHeight;
            const contentHeight = aiChatMessages.scrollHeight;
            const scrollDelta = (deltaY / trackHeight) * contentHeight;
            aiChatMessages.scrollTop = startScrollTop + scrollDelta;
        });

        window.addEventListener('mouseup', () => {
            isDraggingThumb = false;
            aiScrollbarThumb.style.cursor = 'grab';
            document.body.style.cursor = '';
            document.body.style.userSelect = '';
        });
    }


    function initCustomScrollbarTooltipEvents() {
        if (!aiScrollbarDots || !aiScrollbarTooltip) return;
        // –ü—É—Å—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è, —Ç–∞–∫ –∫–∞–∫ –≤—Å—è –ª–æ–≥–∏–∫–∞ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞ –≤ drawOrUpdateScrollbar
    }



    /**
     * –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ—Ç –≤–µ—Å—å –∫–∞—Å—Ç–æ–º–Ω—ã–π —Å–∫—Ä–æ–ª–ª–±–∞—Ä: –ø–æ–ª–∑—É–Ω–æ–∫ –∏ —Ç–æ—á–∫–∏.
     */
    function drawOrUpdateScrollbar() {
        if (!aiChatMessages || !aiCustomScrollbar) return;

        // –°–∫—Ä—ã–≤–∞–µ–º/–ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–∫—Ä–æ–ª–ª–±–∞—Ä –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        const scrollHeight = aiChatMessages.scrollHeight;
        const clientHeight = aiChatMessages.clientHeight;
        aiCustomScrollbar.classList.toggle('hidden', scrollHeight <= clientHeight);
        if (scrollHeight <= clientHeight) return;

        updateScrollbarThumbPosition();
        aiScrollbarDots.innerHTML = '';

        const userMessages = Array.from(aiChatMessages.querySelectorAll('.ai-message-container.is-user'));
        if (userMessages.length === 0) return;

        // --- –ù–ê–ß–ê–õ–û –ù–û–í–û–ô –õ–û–ì–ò–ö–ò –ö–õ–ê–°–¢–ï–†–ò–ó–ê–¶–ò–ò ---

        const clusters = [];
        const MIN_PIXEL_DISTANCE = 25; // –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è –≤ –∫–ª–∞—Å—Ç–µ—Ä
        const trackHeight = aiCustomScrollbar.clientHeight;
        const minPercentDistance = (MIN_PIXEL_DISTANCE / trackHeight) * 100;

        userMessages.forEach(msgContainer => {
            const index = parseInt(msgContainer.id.replace('ai-message-container-', ''), 10);
            const topPercent = (msgContainer.offsetTop / scrollHeight) * 100;

            const lastCluster = clusters[clusters.length - 1];

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ—á–∫—É –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É –∫–ª–∞—Å—Ç–µ—Ä—É
            if (lastCluster && (topPercent - lastCluster.endPercent) < minPercentDistance) {
                lastCluster.indices.push(index);
                lastCluster.endPercent = topPercent; // –û–±–Ω–æ–≤–ª—è–µ–º "—Ö–≤–æ—Å—Ç" –∫–ª–∞—Å—Ç–µ—Ä–∞
            } else {
                // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–ª–∞—Å—Ç–µ—Ä
                clusters.push({
                    startPercent: topPercent,
                    endPercent: topPercent,
                    indices: [index]
                });
            }
        });

        // --- –ö–û–ù–ï–¶ –õ–û–ì–ò–ö–ò –ö–õ–ê–°–¢–ï–†–ò–ó–ê–¶–ò–ò ---

        // –†–µ–Ω–¥–µ—Ä–∏–º —Ç–æ—á–∫–∏ –∏–ª–∏ –∫–ª–∞—Å—Ç–µ—Ä—ã
        clusters.forEach(cluster => {
            const dot = document.createElement('div');
            dot.className = 'scrollbar-dot';
            
            if (cluster.indices.length > 1) {
                dot.classList.add('is-cluster');
            }
            
            dot.dataset.clusterIndices = JSON.stringify(cluster.indices);
            
            const midPercent = (cluster.startPercent + cluster.endPercent) / 2;
            dot.style.top = `${midPercent}%`;

            // --- –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò –¶–í–ï–¢–ê (v2) ---
            const firstColoredMessage = cluster.indices
                .map(index => getAIChatMessageByIndex(index)) // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—à—É —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
                .find(msg => msg && msg.dotColor);

            if (firstColoredMessage) {
                dot.style.backgroundColor = firstColoredMessage.dotColor;
                // –î–ª—è –∫–ª–∞—Å—Ç–µ—Ä–æ–≤ —Ç–∞–∫–∂–µ –º–µ–Ω—è–µ–º —Ü–≤–µ—Ç —Ç–µ–Ω–∏, —á—Ç–æ–±—ã –æ–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞–ª
                if (dot.classList.contains('is-cluster')) {
                    dot.style.boxShadow = `0 0 5px ${firstColoredMessage.dotColor}`;
                }
            }
            // --- –ö–û–ù–ï–¶ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò –¶–í–ï–¢–ê ---
            
            aiScrollbarDots.appendChild(dot);
        });
    }


    // –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥—Å–∫–∞–∑–∫–∏
    let activePreviewTooltip = null;


    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è —Å–∫—Ä–æ–ª–ª–±–∞—Ä–∞.
     * –í–ï–†–°–ò–Ø 2.0: –ü–æ–ª–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è –≤—Å–ø–ª—ã–≤–∞—é—â–∏—Ö –ø–æ–¥—Å–∫–∞–∑–æ–∫.
     */
    function initScrollbarInteraction() {
        if (!aiScrollbarDots) return;

        // –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞, —á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ –µ–µ —É–¥–∞–ª–∏—Ç—å
        let handleOutsideClick = null;

        // –ù–∞—à–∞ –Ω–æ–≤–∞—è, —É–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–∫—Ä—ã—Ç–∏—è
        const hideActiveTooltip = () => {
            if (activePreviewTooltip) {
                activePreviewTooltip.classList.remove('visible');
                const tooltipToRemove = activePreviewTooltip;
                activePreviewTooltip = null;
                setTimeout(() => tooltipToRemove.remove(), 200);
            }
            // –í—Å–µ–≥–¥–∞ —É–¥–∞–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª—É—à–∞—Ç–µ–ª—å, –∫–æ–≥–¥–∞ –ø–æ–¥—Å–∫–∞–∑–∫–∞ —Å–∫—Ä—ã–≤–∞–µ—Ç—Å—è
            if (handleOutsideClick) {
                window.removeEventListener('click', handleOutsideClick, true);
                handleOutsideClick = null;
            }
        };

        // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –ø–æ–¥—Å–∫–∞–∑–∫–∏
        const showTooltip = (dotElement) => {
            // –°–Ω–∞—á–∞–ª–∞ –∑–∞–∫—Ä—ã–≤–∞–µ–º –ª—é–±—É—é –ø—Ä–µ–¥—ã–¥—É—â—É—é –ø–æ–¥—Å–∫–∞–∑–∫—É –∏ –µ–µ —Å–ª—É—à–∞—Ç–µ–ª–∏
            hideActiveTooltip();

            const indices = JSON.parse(dotElement.dataset.clusterIndices);
            const tooltip = document.createElement('div');
            tooltip.className = 'scrollbar-preview-tooltip';
            const ul = document.createElement('ul');

            indices.forEach(index => {
                const msg = getAIChatMessageByIndex(index);
                if (!msg) return;

                const li = document.createElement('li');
                li.dataset.index = index;

                if (msg.dotColor) {
                    const colorIndicator = document.createElement('span');
                    colorIndicator.className = 'preview-color-indicator';
                    colorIndicator.style.backgroundColor = msg.dotColor;
                    li.appendChild(colorIndicator);
                }

                const content = msg.content || '–í–ª–æ–∂–µ–Ω–∏–µ';
                const snippet = content.substring(0, 100) + (content.length > 100 ? '...' : '');
                li.appendChild(document.createTextNode(snippet));
                ul.appendChild(li);
            });

            tooltip.appendChild(ul);
            document.body.appendChild(tooltip);
            activePreviewTooltip = tooltip;

            // --- –û–ë–†–ê–ë–û–¢–ß–ò–ö –ö–õ–ò–ö–û–í –í–ù–£–¢–†–ò –ü–û–î–°–ö–ê–ó–ö–ò ---
            tooltip.addEventListener('click', (e) => {
                const li = e.target.closest('li');
                if (li) {
                    const index = parseInt(li.dataset.index, 10);
                    scrollToAIMessage(index);
                    hideActiveTooltip(); // –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ—Å–ª–µ –∫–ª–∏–∫–∞
                }
            });

            // –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ (–æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
            requestAnimationFrame(() => {
                const dotRect = dotElement.getBoundingClientRect();
                const scrollbarRect = aiCustomScrollbar.getBoundingClientRect();
                const tooltipRect = tooltip.getBoundingClientRect();
                tooltip.style.left = `${scrollbarRect.left - tooltipRect.width - 10}px`;
                let topPos = dotRect.top + (dotRect.height / 2) - (tooltipRect.height / 2);
                if (topPos < 10) topPos = 10;
                if (topPos + tooltipRect.height > window.innerHeight - 10) {
                    topPos = window.innerHeight - tooltipRect.height - 10;
                }
                tooltip.style.top = `${topPos}px`;
                tooltip.classList.add('visible');
            });

            // --- –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê –ó–ê–ö–†–´–¢–ò–Ø ---
            // –°–æ–∑–¥–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é-—Å–ª—É—à–∞—Ç–µ–ª—å –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è
            handleOutsideClick = (event) => {
                // –ó–∞–∫—Ä—ã–≤–∞–µ–º, –µ—Å–ª–∏ –∫–ª–∏–∫ –±—ã–ª –Ω–µ –ø–æ —Å–∞–º–æ–π –ø–æ–¥—Å–∫–∞–∑–∫–µ –∏ –Ω–µ –ø–æ —Ç–æ—á–∫–µ, –∫–æ—Ç–æ—Ä–∞—è –µ–µ –≤—ã–∑–≤–∞–ª–∞
                if (activePreviewTooltip && !activePreviewTooltip.contains(event.target) && !dotElement.contains(event.target)) {
                    hideActiveTooltip();
                }
            };
            // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—à–∞—Ç–µ–ª—å —Å –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π, —á—Ç–æ–±—ã –æ–Ω –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª –Ω–∞ —Ç–æ—Ç –∂–µ –∫–ª–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–∫—Ä—ã–ª –ø–æ–¥—Å–∫–∞–∑–∫—É
            setTimeout(() => {
                window.addEventListener('click', handleOutsideClick, true);
            }, 0);
        };

        // --- –£–ü–†–û–©–ï–ù–ù–´–ï –ì–õ–ê–í–ù–´–ï –°–õ–£–®–ê–¢–ï–õ–ò ---
        // –î–ª—è –ü–ö: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ –Ω–∞–≤–µ–¥–µ–Ω–∏—é
        aiScrollbarDots.addEventListener('mouseover', (e) => {
            if (e.target.classList.contains('scrollbar-dot')) {
                showTooltip(e.target);
            }
        });

        // –î–ª—è –ü–ö: —Å–∫—Ä—ã–≤–∞–µ–º, –∫–æ–≥–¥–∞ —É–≤–æ–¥–∏–º –º—ã—à—å —Å –æ–±–ª–∞—Å—Ç–∏ —Ç–æ—á–µ–∫ –∏ –Ω–µ –Ω–∞–≤–æ–¥–∏–º –Ω–∞ –ø–æ–¥—Å–∫–∞–∑–∫—É
        aiScrollbarDots.addEventListener('mouseout', (e) => {
            setTimeout(() => {
                if (activePreviewTooltip && !activePreviewTooltip.matches(':hover') && !e.target.matches(':hover')) {
                    hideActiveTooltip();
                }
            }, 300);
        });

        // –î–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ –∫–ª–∏–∫—É
        aiScrollbarDots.addEventListener('click', (e) => {
            if (e.target.classList.contains('scrollbar-dot')) {
                showTooltip(e.target);
            }
        });
    }

    /**
     * –°–∫—Ä—ã–≤–∞–µ—Ç –∏ —É–¥–∞–ª—è–µ—Ç –∞–∫—Ç–∏–≤–Ω—É—é –≤—Å–ø–ª—ã–≤–∞—é—â—É—é –ø–æ–¥—Å–∫–∞–∑–∫—É.
     */
    function hidePreviewTooltip() {
        if (activePreviewTooltip) {
            activePreviewTooltip.classList.remove('visible');
            const tooltipToRemove = activePreviewTooltip;
            activePreviewTooltip = null;
            setTimeout(() => tooltipToRemove.remove(), 200); // –£–¥–∞–ª—è–µ–º –ø–æ—Å–ª–µ –∞–Ω–∏–º–∞—Ü–∏–∏
        }
    }

    /**
     * –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ—Ç –∫ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é –∏ –ø–æ–¥—Å–≤–µ—á–∏–≤–∞–µ—Ç –µ–≥–æ.
     * @param {number} index - –ò–Ω–¥–µ–∫—Å —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∏—Å—Ç–æ—Ä–∏–∏.
     */
    function scrollToAIMessage(index) {
        const element = getEl(`ai-message-container-${index}`);
        if (element) {
            element.scrollIntoView({ behavior: 'smooth', block: 'center' });
            element.classList.add('highlighted');
            setTimeout(() => element.classList.remove('highlighted'), 2000);
        }
    }


    
    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ –ø–æ–∑–∏—Ü–∏—é –∏ —Ä–∞–∑–º–µ—Ä –ø–æ–ª–∑—É–Ω–∫–∞ (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ —Å–∫—Ä–æ–ª–ª–µ).
     */
    function updateScrollbarThumbPosition() {
        if (!aiChatMessages || !aiScrollbarThumb) return;

        const scrollHeight = aiChatMessages.scrollHeight;
        const clientHeight = aiChatMessages.clientHeight;
        const scrollTop = aiChatMessages.scrollTop;
        const trackHeight = aiCustomScrollbar.clientHeight;

        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—ã—Å–æ—Ç—É –∏ –ø–æ–∑–∏—Ü–∏—é –ø–æ–ª–∑—É–Ω–∫–∞
        const thumbHeight = Math.max(20, (clientHeight / scrollHeight) * trackHeight); // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –≤—ã—Å–æ—Ç–∞ 20px
        const thumbPosition = (scrollTop / scrollHeight) * trackHeight;

        aiScrollbarThumb.style.height = `${thumbHeight}px`;
        aiScrollbarThumb.style.top = `${thumbPosition}px`;
    }


    /**
     * –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø v3: –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –∫–Ω–æ–ø–∫—É "–ø—Ä–æ–∫—Ä—É—Ç–∏—Ç—å –≤–Ω–∏–∑",
     * –∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ—Ç –í–°–ï –∏–∫–æ–Ω–∫–∏ –≤ –º–æ–º–µ–Ω—Ç –ø–µ—Ä–≤–æ–≥–æ –ø–æ—è–≤–ª–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∏.
     */
    function updateScrollToBottomButtonVisibility() {
        const btn = getEl('aiScrollToBottomBtn');
        if (!btn || !aiChatMessages) return;

        // --- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ ---
        const scrollHeight = aiChatMessages.scrollHeight;
        const clientHeight = aiChatMessages.clientHeight;
        const scrollTop = aiChatMessages.scrollTop;
        // --- –ö–æ–Ω–µ—Ü –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ---

        const threshold = 200; 
        const isNearBottom = scrollHeight - clientHeight - scrollTop < threshold;
        const shouldBeVisible = !isNearBottom && scrollHeight > clientHeight;

        const wasVisible = btn.classList.contains('visible');
        btn.classList.toggle('visible', shouldBeVisible);
        const isVisibleNow = btn.classList.contains('visible');

        // --- –ì–õ–ê–í–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï ---
        // –ï—Å–ª–∏ –∫–Ω–æ–ø–∫–∞ –ù–ï –±—ã–ª–∞ –≤–∏–¥–Ω–∞, –∞ –°–ï–ô–ß–ê–° —Å—Ç–∞–ª–∞ –≤–∏–¥–Ω–∞,
        // —ç—Ç–æ –∏–¥–µ–∞–ª—å–Ω—ã–π –º–æ–º–µ–Ω—Ç –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω–æ–π –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∏ –∏–∫–æ–Ω–æ–∫.
        if (!wasVisible && isVisibleNow) {
            if (window.lucide) {
                // –í—ã–∑—ã–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫—É –±–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤.
                // –≠—Ç–æ –∏–º–µ–Ω–Ω–æ —Ç–æ, —á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞ –∏ "—á–∏–Ω–∏—Ç" –∏–∫–æ–Ω–∫—É.
                lucide.createIcons();
            }
        }
    }

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–æ–∫—Ä—É—Ç–∫—É —á–∞—Ç–∞, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å/—Å–∫—Ä—ã—Ç—å –∫–Ω–æ–ø–∫—É "–≤–Ω–∏–∑".
     * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç requestAnimationFrame –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏.
     */
    let scrollRAF = null; // ID –¥–ª—è requestAnimationFrame
    function handleChatScroll() {
        if (scrollRAF) {
            return;
        }
        scrollRAF = requestAnimationFrame(() => {
            updateScrollToBottomButtonVisibility(); // –¢–µ–ø–µ—Ä—å –ø—Ä–æ—Å—Ç–æ –≤—ã–∑—ã–≤–∞–µ—Ç –Ω–∞—à—É –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é
            scrollRAF = null;
        });
    }
     



    /**
     * –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–∞–ª–∏—Ç—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ü–≤–µ—Ç–∞ —Ç–æ—á–∫–∏.
     * @param {HTMLElement} dotElement - –≠–ª–µ–º–µ–Ω—Ç —Ç–æ—á–∫–∏, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–π –±—ã–ª —Å–¥–µ–ª–∞–Ω –¥–æ–ª–≥–∏–π –∫–ª–∏–∫.
     * @param {number} messageIndex - –ò–Ω–¥–µ–∫—Å —Å–æ–æ–±—â–µ–Ω–∏—è, –∫ –∫–æ—Ç–æ—Ä–æ–º—É –ø—Ä–∏–≤—è–∑–∞–Ω–∞ —Ç–æ—á–∫–∞.
     */
    /**
     * –í–ï–†–°–Ø 6.0 (–§–ò–ù–ê–õ–¨–ù–ê–Ø): –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–∞–ª–∏—Ç—Ä—É –≤—ã–±–æ—Ä–∞ —Ü–≤–µ—Ç–∞.
     * –õ–æ–≥–∏–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è —Ç–µ–ø–µ—Ä—å –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–Ω–∫–∞–ø—Å—É–ª–∏—Ä–æ–≤–∞–Ω–∞ –∏ –Ω–µ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö —Å–ª—É—à–∞—Ç–µ–ª–µ–π.
     */
    function showDotColorPicker(targetElement, messageIndex) {
        // –£–¥–∞–ª—è–µ–º –ª—é–±—É—é —Å—Ç–∞—Ä—É—é –ø–∞–ª–∏—Ç—Ä—É, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
        document.querySelector('.dot-color-picker')?.remove();

        const overlay = document.createElement('div');
        overlay.style.cssText = `
            position: fixed; top: 0; left: 0; width: 100vw; height: 100vh;
            background: transparent; z-index: 10002;
        `;
        
        const picker = document.createElement('div');
        picker.className = 'dot-color-picker';

        const colors = ['#e74c3c', '#e67e22', '#f1c40f', '#2ecc71', '#3498db', '#9b59b6'];

        const updateColor = (newColor) => {
            const msg = getAIChatMessageByIndex(messageIndex);
            if (!msg) return;

            // –õ–æ–∫–∞–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Ü–≤–µ—Ç –¥–ª—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–≥–æ –æ—Ç–∫–ª–∏–∫–∞ UI
            if (newColor) {
                msg.dotColor = newColor;
            } else {
                delete msg.dotColor;
            }

            if (currentAIChatType === 'private') {
                saveAIChatsToStorage();
            } else if (currentAIChatType === 'public' && msg.id && currentAudienceId && currentTopicId) {
                
                // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ø—Ä–∞–≤ –∫–∞–∫ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∑–∞—â–∏—Ç—É
                if (!canEditAIMetadata()) {
                    showToast("–¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –º–æ–∂–µ—Ç –∏–∑–º–µ–Ω—è—Ç—å —Ü–≤–µ—Ç–∞.", "error");
                    return;
                }

                const messageRef = db.collection('ai_audiences').doc(currentAudienceId).collection('topics').doc(currentTopicId).collection('messages').doc(msg.id);
                
                const updateData = {};
                if (newColor) {
                    updateData.dotColor = newColor;
                } else {
                    updateData.dotColor = firebase.firestore.FieldValue.delete();
                }

                messageRef.update(updateData).catch(error => {
                    console.error("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–≤–µ—Ç–∞ –≤ Firestore:", error);
                    showToast("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ü–≤–µ—Ç.", "error");
                });
            }

            drawOrUpdateScrollbar();
            const itemInSidebar = getEl('aiUserMessagesList')?.querySelector(`li[data-index="${messageIndex}"]`);
            if (itemInSidebar) {
                itemInSidebar.style.borderLeftColor = newColor || '';
            }
            renderColorLegends();
        };


        colors.forEach(color => {
            const swatch = document.createElement('div');
            swatch.className = 'color-swatch';
            swatch.style.backgroundColor = color;
            swatch.onclick = () => {
                updateColor(color);
                overlay.remove();
            };
            picker.appendChild(swatch);
        });

        const resetButton = document.createElement('button');
        resetButton.className = 'color-picker-reset';
        resetButton.title = "–°–±—Ä–æ—Å–∏—Ç—å —Ü–≤–µ—Ç";
        resetButton.innerHTML = `<i data-lucide="circle-slash-2"></i>`;
        resetButton.onclick = () => {
            updateColor(null);
            overlay.remove();
        };
        picker.appendChild(resetButton);

        overlay.appendChild(picker);
        document.body.appendChild(overlay);
        if (window.lucide) window.lucide.createIcons();
        
        // –£–º–Ω–æ–µ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–∞, –≤—ã–∑–≤–∞–≤—à–µ–≥–æ –ø–∞–ª–∏—Ç—Ä—É
        const targetRect = targetElement.getBoundingClientRect();
        picker.style.position = 'fixed';
        picker.style.left = `${targetRect.left + targetRect.width / 2 - picker.offsetWidth / 2}px`;
        picker.style.top = `${targetRect.top - picker.offsetHeight - 10}px`;
        
        // –ö–æ—Ä—Ä–µ–∫—Ü–∏—è, –µ—Å–ª–∏ –ø–∞–ª–∏—Ç—Ä–∞ –≤—ã–ª–µ–∑–∞–µ—Ç —Å–≤–µ—Ä—Ö—É
        if (picker.getBoundingClientRect().top < 10) {
            picker.style.top = `${targetRect.bottom + 10}px`;
        }

        overlay.onclick = (e) => {
            if (e.target === overlay) {
                overlay.remove();
            }
        };
    }


    function renderColorLegends() {
        if (!aiColorLegendsWithEditor || !aiColorLegendsWithList) return;

        const currentChat = (currentAIChatType === 'public') ? currentPublicChatMessages : allAIChats[currentAIChatId];
        if (!currentChat) {
            aiColorLegendsWithEditor.classList.add('hidden');
            return;
        }

        const usedColors = new Set(currentChat.map(msg => msg.dotColor).filter(Boolean));
        
        let chatLegends = {};
        if (currentAIChatType === 'public') {
            chatLegends = currentTopicLegends || {};
        } else {
            // --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ë–µ—Ä–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –Ω–æ–≤–æ–≥–æ –∫—ç—à–∞ ---
            chatLegends = currentPrivateLegends[currentAIChatId] || {};
        }

        if (usedColors.size === 0) {
            aiColorLegendsWithEditor.classList.add('hidden');
            aiColorLegendEditor.classList.add('hidden');
            return;
        }

        aiColorLegendsWithEditor.classList.remove('hidden');
        aiColorLegendsWithList.innerHTML = '';

        const audienceData = window.aiAudiencesCache?.find(a => a.id === currentAudienceId);
        const canEdit = canEditAIMetadata(); // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é-–ø–æ–º–æ—â–Ω–∏–∫

        usedColors.forEach(color => {
            const description = chatLegends[color] || '';
            const textHtml = description ? `<span class="legend-text">${escapeHTML(description)}</span>` : '';

            const item = document.createElement('div');
            item.className = 'ai-color-legend-item';
            
            const editBtnHtml = canEdit 
                ? `<button class="legend-edit-btn" title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ"><i data-lucide="pencil" style="width: 12px; height: 12px;"></i></button>` 
                : '';

            item.innerHTML = `
                <span class="legend-color-swatch" style="background-color: ${color};"></span>
                ${textHtml}
                ${editBtnHtml}
            `;

            if (canEdit) {
                item.querySelector('.legend-edit-btn').onclick = () => showLegendEditor(color);
            }
            aiColorLegendsWithList.appendChild(item);
        });
        if (window.lucide) lucide.createIcons();
    }

    function showLegendEditor(color) {
        const modal = getEl('legendEditModal');
        const colorSwatch = getEl('legendEditModalColorSwatch');
        const input = getEl('legendNameInput');
        const confirmBtn = getEl('legendEditConfirmBtn');
        const cancelBtn = getEl('legendEditCancelBtn');

        if (!modal || !colorSwatch || !input || !confirmBtn || !cancelBtn) return;

        let chatLegends = {};
        if (currentAIChatType === 'public') {
            chatLegends = currentTopicLegends || {};
        } else {
            // --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ë–µ—Ä–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –Ω–æ–≤–æ–≥–æ –∫—ç—à–∞ ---
            chatLegends = currentPrivateLegends[currentAIChatId] || {};
        }
        
        colorSwatch.style.backgroundColor = color;
        input.value = chatLegends[color] || '';

        modal.classList.remove('hidden');
        input.focus();
        input.select();

        const cleanup = () => {
            modal.classList.add('hidden');
            confirmBtn.onclick = null;
            cancelBtn.onclick = null;
            input.onkeydown = null;
        };

        confirmBtn.onclick = () => {
            saveLegendText(color); 
            cleanup();
        };

        cancelBtn.onclick = cleanup;

        input.onkeydown = (e) => {
            if (e.key === 'Enter') {
                e.preventDefault();
                confirmBtn.click();
            }
        };
    }

    /**
     * –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–µ–∫—Å—Ç –æ–ø–∏—Å–∞–Ω–∏—è –¥–ª—è —Ü–≤–µ—Ç–∞.
     */
    async function saveLegendText(color) {
        const input = getEl('legendNameInput');
        if (!input) return;

        const newText = input.value.trim();

        if (currentAIChatType === 'public') {
            if (!currentUser || !currentAudienceId || !currentTopicId || !db) return;

            const audienceData = window.aiAudiencesCache?.find(a => a.id === currentAudienceId);
            if (!audienceData || currentUser.uid !== audienceData.ownerId) {
                showToast("–¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –º–æ–∂–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ª–µ–≥–µ–Ω–¥—É.", "error");
                return;
            }

            const topicRef = db.collection('ai_audiences').doc(currentAudienceId).collection('topics').doc(currentTopicId);
            const updateData = {};
            const fieldPath = `colorLegends.${color}`; 

            if (newText) {
                updateData[fieldPath] = newText;
            } else {
                updateData[fieldPath] = firebase.firestore.FieldValue.delete();
            }

            try {
                await topicRef.update(updateData);
            } catch (error) {
                console.error("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ª–µ–≥–µ–Ω–¥—ã –≤ Firestore:", error);
                showToast("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ.", "error");
            }

        } else {
            // --- –ù–ê–ß–ê–õ–û –ë–õ–û–ö–ê –ù–ê –ó–ê–ú–ï–ù–£ (–ª–æ–≥–∏–∫–∞ –¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö —á–∞—Ç–æ–≤) ---
            if (!currentUser || !db || !currentAIChatId) return;

            const userDocRef = db.collection('users').doc(currentUser.uid);
            const updateData = {};
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º dot-–Ω–æ—Ç–∞—Ü–∏—é –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö –ø–æ–ª–µ–π –≤ –∫–∞—Ä—Ç–µ
            const fieldPath = `aiChatLegends.${currentAIChatId}.${color}`;

            if (newText) {
                updateData[fieldPath] = newText;
            } else {
                updateData[fieldPath] = firebase.firestore.FieldValue.delete();
            }

            try {
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                await userDocRef.update(updateData);
                // UI –æ–±–Ω–æ–≤–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –±–ª–∞–≥–æ–¥–∞—Ä—è —Å–ª—É—à–∞—Ç–µ–ª—é onSnapshot
            } catch (error) {
                console.error("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–∏–≤–∞—Ç–Ω–æ–π –ª–µ–≥–µ–Ω–¥—ã –≤ Firestore:", error);
                showToast("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ.", "error");
            }
            // --- –ö–û–ù–ï–¶ –ë–õ–û–ö–ê –ù–ê –ó–ê–ú–ï–ù–£ ---
        }
    }

    /**
     * –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ.
     * @param {number} index - –ò–Ω–¥–µ–∫—Å —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∏—Å—Ç–æ—Ä–∏–∏, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –æ—Ç–≤–µ—á–∞—é—Ç.
     */
    function startAIReply(index) {
        // --- –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è ---
        let messageToReply;
        if (currentAIChatType === 'public') {
            messageToReply = currentPublicChatMessages[index];
        } else {
            messageToReply = allAIChats[currentAIChatId][index];
        }
        // --- –ö–û–ù–ï–¶ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø ---

        if (!messageToReply) return;

        const originalText = messageToReply.content || '–í–ª–æ–∂–µ–Ω–∏–µ';

        aiReplyContext = {
            messageIndex: index,
            authorName: messageToReply.role === 'user' ? '–í—ã' : 'AI',
            textSnippet: originalText.substring(0, 80) + (originalText.length > 80 ? '...' : ''),
            originalText: originalText
        };

        aiReplyText.textContent = `${aiReplyContext.authorName}: ${aiReplyContext.textSnippet}`;
        aiReplyPanel.classList.remove('hidden');
        aiChatInput.focus();
    }

    /**
     * –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –û—Ç–º–µ–Ω—è–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ.
     */
    function cancelAIReply() {
        aiReplyContext = null;
        aiReplyPanel.classList.add('hidden');
    }
    

    /**
     * –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ—Ç –∫ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é –∏ –ø–æ–¥—Å–≤–µ—á–∏–≤–∞–µ—Ç –µ–≥–æ.
     * @param {number} index - –ò–Ω–¥–µ–∫—Å —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∏—Å—Ç–æ—Ä–∏–∏.
     * @param {'start' | 'center' | 'end'} blockAlignment - –ö–∞–∫ –≤—ã—Ä–æ–≤–Ω—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ–∫–Ω–µ.
     */
    function scrollToAIMessage(index, blockAlignment = 'start') {
        const element = getEl(`ai-message-container-${index}`);
        if (element) {
            element.scrollIntoView({ behavior: 'smooth', block: blockAlignment });
            element.classList.add('highlighted');
            setTimeout(() => element.classList.remove('highlighted'), 2000);
        }
    }




    /**
     * –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ñ–∞–π–ª–∞, —á–∏—Ç–∞–µ—Ç –µ–≥–æ, —Å–æ–∑–¥–∞–µ—Ç –º–∏–Ω–∏–∞—Ç—é—Ä—É –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–µ–≤—å—é.
     */
    async function handleAIAttachment(event) {
        const file = event.target.files[0];
        if (!file) return;

        if (file.size > 10 * 1024 * 1024) {
            alert('–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä - 10 –ú–ë.');
            event.target.value = '';
            return;
        }

        const reader = new FileReader();
        reader.onload = async (e) => {
            const fullDataUrl = e.target.result;
            let thumbnailDataUrl = null;

            if (file.type.startsWith('image/')) {
                try {
                    thumbnailDataUrl = await createThumbnail(fullDataUrl, 64);
                } catch (thumbError) {
                    console.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –º–∏–Ω–∏–∞—Ç—é—Ä—É:", thumbError);
                }
            }

            attachedFile = {
                name: file.name,
                mimeType: file.type,
                base64Data: fullDataUrl,
                thumbnailDataUrl: thumbnailDataUrl
            };
            showAttachmentPreview();
            updateGroundingToggleState(); // <-- –î–û–ë–ê–í–õ–ï–ù–ê –≠–¢–ê –°–¢–†–û–ö–ê
        };
        reader.onerror = (e) => {
            console.error("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞:", e);
            alert('–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª.');
        };
        reader.readAsDataURL(file);
        
        event.target.value = '';
    }


    /**
     * –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –°–æ–∑–¥–∞–µ—Ç –º–∏–Ω–∏–∞—Ç—é—Ä—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.
     * @param {string} dataUrl - –ò—Å—Ö–æ–¥–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ Data URL.
     * @param {number} maxSize - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä (—à–∏—Ä–∏–Ω–∞ –∏–ª–∏ –≤—ã—Å–æ—Ç–∞) –º–∏–Ω–∏–∞—Ç—é—Ä—ã.
     * @returns {Promise<string>} - –ü—Ä–æ–º–∏—Å —Å Data URL –º–∏–Ω–∏–∞—Ç—é—Ä—ã.
     */
    function createThumbnail(dataUrl, maxSize) {
        return new Promise((resolve, reject) => {
            const img = new Image();
            img.onload = () => {
                const canvas = document.createElement('canvas');
                const ctx = canvas.getContext('2d');
                let { width, height } = img;

                if (width > height) {
                    if (width > maxSize) {
                        height *= maxSize / width;
                        width = maxSize;
                    }
                } else {
                    if (height > maxSize) {
                        width *= maxSize / height;
                        height = maxSize;
                    }
                }
                canvas.width = width;
                canvas.height = height;
                ctx.drawImage(img, 0, 0, width, height);
                resolve(canvas.toDataURL('image/jpeg', 0.8)); // –°–∂–∏–º–∞–µ–º –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –º–µ—Å—Ç–∞
            };
            img.onerror = reject;
            img.src = dataUrl;
        });
    }

    /**
     * –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ø–ª–∞—à–∫—É —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–º —Ñ–∞–π–ª–µ.
     */
    function showAttachmentPreview() {
        const previewEl = getEl('aiAttachmentPreview');
        if (!previewEl || !attachedFile) return;

        let previewContent = '';
        if (attachedFile.thumbnailDataUrl) {
            // –ï—Å–ª–∏ –µ—Å—Ç—å –º–∏–Ω–∏–∞—Ç—é—Ä–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ–µ
            previewContent = `<img src="${attachedFile.thumbnailDataUrl}" alt="–ü—Ä–µ–≤—å—é">`;
        } else {
            // –ò–Ω–∞—á–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–∫–æ–Ω–∫—É
            previewContent = `<i data-lucide="file-text"></i>`;
        }

        previewEl.innerHTML = `
            ${previewContent}
            <span class="ai-attachment-name">${escapeHTML(attachedFile.name)}</span>
            <button class="ai-attachment-remove-btn" title="–£–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª"><i data-lucide="x-circle"></i></button>
        `;
        
        // --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –î–µ–ª–∞–µ–º –≤—Å—é –ø–ª–∞—à–∫—É –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–æ–π ---
        previewEl.onclick = (e) => {
            // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –æ—Ç–∫—Ä—ã—Ç–∏–µ —Ñ–∞–π–ª–∞, –µ—Å–ª–∏ –∫–ª–∏–∫–Ω—É–ª–∏ –ø–æ –∫–Ω–æ–ø–∫–µ "—É–¥–∞–ª–∏—Ç—å"
            if (e.target.closest('.ai-attachment-remove-btn')) return;
            openAIAttachment(attachedFile);
        };

        previewEl.querySelector('.ai-attachment-remove-btn').onclick = (e) => {
            e.stopPropagation(); // –í–∞–∂–Ω–æ, —á—Ç–æ–±—ã –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª –∫–ª–∏–∫ –ø–æ –≤—Å–µ–π –ø–ª–∞—à–∫–µ
            removeAIAttachment();
        };

        previewEl.classList.remove('hidden');
        if (window.lucide) lucide.createIcons();
        
        aiChatSendBtn.disabled = false;
    }

    /**
     * –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø v4: –û—Ç–∫—Ä—ã–≤–∞–µ—Ç –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–º –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ.
     */
    async function openAIAttachment(fileObject) {
        if (!fileObject || !fileObject.base64Data) {
            console.error("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–∞ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è.");
            return;
        }

        try {
            const mimeType = fileObject.mimeType;

            if (mimeType.startsWith('image/')) {
                // –ï—Å–ª–∏ —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ –¥–ª—è –∫–∞—Ä—Ç–∏–Ω–æ–∫
                showImageInModal(fileObject.base64Data);

            } else if (mimeType === 'application/pdf') {
                // PDF –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ—Ç–∫—Ä—ã–≤–∞—Ç—å –≤ –Ω–æ–≤–æ–π –≤–∫–ª–∞–¥–∫–µ —á–µ—Ä–µ–∑ Blob URL
                const response = await fetch(fileObject.base64Data);
                const blob = await response.blob();
                const objectUrl = URL.createObjectURL(blob);
                window.open(objectUrl, '_blank');
                setTimeout(() => URL.revokeObjectURL(objectUrl), 10000);

            } else {
                // –î–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∏ –¥—Ä—É–≥–∏—Ö —Ñ–∞–π–ª–æ–≤ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ
                showTextInModal(fileObject);
            }
        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Ñ–∞–π–ª–∞:", error);
            alert("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª. –°–º. –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π.");
        }
    }



    /**
     * –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ.
     * @param {string} dataUrl - Data URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞.
     */
    function showImageInModal(dataUrl) {
        const modal = getEl('imagePreviewModal');
        const img = getEl('previewImage');
        if (modal && img) {
            img.src = dataUrl;
            modal.classList.remove('hidden');
        }
    }

    /**
     * –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø v4 (—Å—É–ø–µ—Ä-–Ω–∞–¥–µ–∂–Ω–∞—è): –î–µ–∫–æ–¥–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª, —Å—á–∏—Ç–∞—è –æ—à–∏–±–∫–∏ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è.
     * @param {object} fileObject - –û–±—ä–µ–∫—Ç —Ñ–∞–π–ª–∞ —Å base64 –¥–∞–Ω–Ω—ã–º–∏.
     */
    function showTextInModal(fileObject) {
        const modal = getEl('textPreviewModal');
        const filenameEl = getEl('textPreviewFilename');
        const bodyEl = getEl('textPreviewBody');

        if (!modal || !filenameEl || !bodyEl) return;

        try {
            const base64 = fileObject.base64Data.split(',')[1];
            if (!base64) throw new Error("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π base64 data URL.");

            const binaryString = window.atob(base64);
            const len = binaryString.length;
            const bytes = new Uint8Array(len);
            for (let i = 0; i < len; i++) {
                bytes[i] = binaryString.charCodeAt(i);
            }

            // --- –ù–û–í–ê–Ø –£–õ–£–ß–®–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê –û–ü–†–ï–î–ï–õ–ï–ù–ò–Ø –ö–û–î–ò–†–û–í–ö–ò ---

            // 1. –î–µ–∫–æ–¥–∏—Ä—É–µ–º –∫–∞–∫ UTF-8 –∏ —Å—á–∏—Ç–∞–µ–º "–º—É—Å–æ—Ä–Ω—ã–µ" —Å–∏–º–≤–æ–ª—ã
            const utf8Decoder = new TextDecoder('utf-8', { fatal: false });
            const textAsUtf8 = utf8Decoder.decode(bytes);
            const replacementChar = '\uFFFD'; // –°–∏–º–≤–æ–ª –∑–∞–º–µ–Ω—ã ÔøΩ
            const utf8Errors = (textAsUtf8.match(new RegExp(replacementChar, 'g')) || []).length;

            // 2. –î–µ–∫–æ–¥–∏—Ä—É–µ–º –∫–∞–∫ Windows-1251 –∏ —Å—á–∏—Ç–∞–µ–º "–º—É—Å–æ—Ä–Ω—ã–µ" —Å–∏–º–≤–æ–ª—ã
            const win1251Decoder = new TextDecoder('windows-1251', { fatal: false });
            const textAsWin1251 = win1251Decoder.decode(bytes);
            const win1251Errors = (textAsWin1251.match(new RegExp(replacementChar, 'g')) || []).length;

            let finalText;
            // 3. –í—ã–±–∏—Ä–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç —Å –ú–ï–ù–¨–®–ò–ú –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –æ—à–∏–±–æ–∫.
            //    –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –æ—Ç–¥–∞–µ–º UTF-8, –µ—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫ –æ–¥–∏–Ω–∞–∫–æ–≤–æ–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 0).
            if (utf8Errors <= win1251Errors) {
                finalText = textAsUtf8;
                console.log(`–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–¥–∏—Ä–æ–≤–∫–∏: UTF-8 (–æ—à–∏–±–æ–∫: ${utf8Errors})`);
            } else {
                finalText = textAsWin1251;
                console.log(`–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–¥–∏—Ä–æ–≤–∫–∏: Windows-1251 (–æ—à–∏–±–æ–∫: ${win1251Errors})`);
            }
            // --- –ö–û–ù–ï–¶ –ù–û–í–û–ô –õ–û–ì–ò–ö–ò ---

            // 4. –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            filenameEl.textContent = fileObject.name;
            bodyEl.textContent = finalText;
            modal.classList.remove('hidden');

        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞:", error);
            alert("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª.");
        }
    }


    /**
     * –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ø–ª–∞—à–∫—É —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–º —Ñ–∞–π–ª–µ.
     */
    function showAttachmentPreview() {
        const previewEl = getEl('aiAttachmentPreview');
        if (!previewEl || !attachedFile) return;

        previewEl.innerHTML = `
            <span class="ai-attachment-name">${escapeHTML(attachedFile.name)}</span>
            <button class="ai-attachment-remove-btn" title="–£–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª"><i data-lucide="x-circle"></i></button>
        `;
        
        previewEl.querySelector('.ai-attachment-remove-btn').onclick = removeAIAttachment;
        previewEl.classList.remove('hidden');
        if (window.lucide) lucide.createIcons();
        
        // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏, —Ç–∞–∫ –∫–∞–∫ —Ñ–∞–π–ª –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω
        aiChatSendBtn.disabled = false;
    }

    /**
     * –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –£–¥–∞–ª—è–µ—Ç –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –∏ —Å–∫—Ä—ã–≤–∞–µ—Ç –ø—Ä–µ–≤—å—é.
     */
    function removeAIAttachment() {
        attachedFile = null;
        const previewEl = getEl('aiAttachmentPreview');
        previewEl.classList.add('hidden');
        previewEl.innerHTML = '';
        
        if (aiChatInput.value.trim().length === 0) {
            aiChatSendBtn.disabled = true;
        }
        updateGroundingToggleState(); // <-- –î–û–ë–ê–í–õ–ï–ù–ê –≠–¢–ê –°–¢–†–û–ö–ê
    }


    // ======== –ù–ê–ß–ê–õ–û –ù–û–í–´–• –§–£–ù–ö–¶–ò–ô ========

    /**
     * –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ª–æ–≥–∏–∫—É —Ä–∞–±–æ—Ç—ã –¥–ª—è –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ —Å–ø–∏—Å–∫–∞.
     * @param {string} containerId ID –≥–ª–∞–≤–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ —Å–µ–ª–µ–∫—Ç–∞.
     */
    function setupCustomSelect(containerId) {
        const container = getEl(containerId);
        if (!container) return;
        
        const button = container.querySelector('.ai-select-button');
        const dropdown = container.querySelector('.ai-select-dropdown');
        const textElement = container.querySelector('span');
        const options = dropdown.querySelectorAll('a');

        button.addEventListener('click', (e) => {
            e.stopPropagation();
            container.classList.toggle('open');
            dropdown.classList.toggle('hidden');
        });

        options.forEach(option => {
            option.addEventListener('click', (e) => {
                e.preventDefault();
                textElement.textContent = option.textContent;
                container.dataset.currentValue = option.dataset.value;
                container.classList.remove('open');
                dropdown.classList.add('hidden');
                saveAIChatSettings();
            });
        });
    }

    /**
     * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ AI-—á–∞—Ç–∞ –∏–∑ localStorage –∏ –ø—Ä–∏–º–µ–Ω—è–µ—Ç –∏—Ö –∫ UI.
     */
    function loadAIChatSettings() {
        const settings = JSON.parse(localStorage.getItem('aiChatSettings')) || {
            model: 'gemini-2.5-flash-lite',
            length: 'medium',
            creativity: 1,
            grounding: false // –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        };

        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–¥–µ–ª–∏
        const modelContainer = getEl('aiModelSelectContainer');
        if (modelContainer) {
            modelContainer.dataset.currentValue = settings.model;
            const selectedOption = modelContainer.querySelector(`a[data-value="${settings.model}"]`);
            if (selectedOption) {
                getEl('aiModelSelectText').textContent = selectedOption.textContent;
            }
        }

        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª–∏–Ω—ã –æ—Ç–≤–µ—Ç–∞
        const lengthContainer = getEl('aiResponseLengthSelectContainer');
        if (lengthContainer) {
            lengthContainer.dataset.currentValue = settings.length;
            const selectedOption = lengthContainer.querySelector(`a[data-value="${settings.length}"]`);
            if (selectedOption) {
                getEl('aiResponseLengthSelectText').textContent = selectedOption.textContent;
            }
        }

        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç–∏
        const creativitySlider = getEl('aiCreativitySlider');
        const creativityValue = getEl('aiCreativityValue');
        if (creativitySlider) creativitySlider.value = settings.creativity;
        if (creativityValue) {
            const creativityLevels = ['–ù–∏–∑–∫–∞—è', '–°—Ä–µ–¥–Ω—è—è', '–í—ã—Å–æ–∫–∞—è'];
            creativityValue.textContent = creativityLevels[settings.creativity] || '–°—Ä–µ–¥–Ω—è—è';
        }

        // ======== –ù–ê–ß–ê–õ–û –ò–ó–ú–ï–ù–ï–ù–ò–ô ========
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–∏—Å–∫–∞ –≤ Google (–æ–±–Ω–æ–≤–ª—è–µ–º –¢–û–õ–¨–ö–û –≥–ª–∞–≤–Ω—ã–π –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å)
        const groundingToggleMain = getEl('aiGroundingToggleMain');
        if (groundingToggleMain) {
            groundingToggleMain.checked = settings.grounding || false;
        }
        // ======== –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–ô ========
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ AI-—á–∞—Ç–∞ –∏–∑ UI –≤ localStorage.
     */
    function saveAIChatSettings() {
        const modelContainer = getEl('aiModelSelectContainer');
        const lengthContainer = getEl('aiResponseLengthSelectContainer');
        const creativitySlider = getEl('aiCreativitySlider');
        // ======== –ù–ê–ß–ê–õ–û –ò–ó–ú–ï–ù–ï–ù–ò–ô ========
        const groundingToggleMain = getEl('aiGroundingToggleMain');
        // ======== –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–ô ========
        
        const settings = {
            model: modelContainer.dataset.currentValue || 'gemini-2.5-flash-lite',
            length: lengthContainer.dataset.currentValue || 'medium',
            creativity: parseInt(creativitySlider.value, 10),
            // ======== –ù–ê–ß–ê–õ–û –ò–ó–ú–ï–ù–ï–ù–ò–ô ========
            grounding: groundingToggleMain ? groundingToggleMain.checked : false
            // ======== –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–ô ========
        };
        
        localStorage.setItem('aiChatSettings', JSON.stringify(settings));
        loadAIChatSettings(); // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ "–ö—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å" –∏ –æ–±–æ–∏—Ö –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª–µ–π
    }

    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ AI-—á–∞—Ç–∞.
     */
    function getAIChatSettings() {
        return JSON.parse(localStorage.getItem('aiChatSettings')) || {
            model: 'gemini-2.5-flash-lite',
            length: 'medium',
            creativity: 1,
            grounding: false
        };
    }
    // ======== –ö–û–ù–ï–¶ –ù–û–í–´–• –§–£–ù–ö–¶–ò–ô ========


    /**
     * –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø (–° –õ–û–ì–ò–†–û–í–ê–ù–ò–ï–ú)
     * –ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —Ä–∞–∑–º–µ—Ä –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ AI-—á–∞—Ç–∞ –∏ –º–µ–Ω—è–µ—Ç –∏–∫–æ–Ω–∫—É.
     */
    /**
     * –ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —Ä–∞–∑–º–µ—Ä –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ AI-—á–∞—Ç–∞ –∏ –º–µ–Ω—è–µ—Ç –∏–∫–æ–Ω–∫—É.
     */
    function toggleAIChatSize() {
        if (!aiChatModalContent || !aiChatResizeBtn) return;

        isAIChatExpanded = !isAIChatExpanded;
        
        // --- –ì–õ–ê–í–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—â–µ–º SVG-—ç–ª–µ–º–µ–Ω—Ç –≤–º–µ—Å—Ç–æ —Ç–µ–≥–∞ <i> ---
        const iconEl = aiChatResizeBtn.querySelector('svg');
        if (!iconEl) {
            console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ SVG-–∏–∫–æ–Ω–∫—É –≤–Ω—É—Ç—Ä–∏ –∫–Ω–æ–ø–∫–∏ —Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è.');
            return;
        }
        
        // 1. –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º CSS-–∫–ª–∞—Å—Å
        aiChatModalContent.classList.toggle('expanded', isAIChatExpanded);
        
        // 2. –ú–µ–Ω—è–µ–º –∏–∫–æ–Ω–∫—É, –∑–∞–º–µ–Ω—è—è SVG-—ç–ª–µ–º–µ–Ω—Ç –Ω–æ–≤—ã–º —Ç–µ–≥–æ–º <i>
        const newIconName = isAIChatExpanded ? 'minimize-2' : 'maximize-2';
        aiChatResizeBtn.innerHTML = `<i data-lucide="${newIconName}"></i>`;
        
        // 3. –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –Ω–æ–≤—É—é –∏–∫–æ–Ω–∫—É
        if (window.lucide) {
            lucide.createIcons();
        }
    }

    /**
     * –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø
     * –î–µ–ª–∞–µ—Ç FAB-–∫–Ω–æ–ø–∫—É –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–µ–º–æ–π –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–ª–∏–∫–∏/–ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è.
     * @param {HTMLElement} fab - –≠–ª–µ–º–µ–Ω—Ç –∫–Ω–æ–ø–∫–∏.
     */
    function makeFabDraggable(fab) {
        let isDragging = false;
        let hasDragged = false;
        let offsetX, offsetY;

        const onDragStart = (e) => {
            isDragging = true;
            hasDragged = false;
            fab.classList.add('dragging');
            e.preventDefault();

            const rect = fab.getBoundingClientRect();
            const eventPos = e.touches ? e.touches[0] : e;
            
            offsetX = eventPos.clientX - rect.left;
            offsetY = eventPos.clientY - rect.top;

            window.addEventListener('mousemove', onDragMove);
            window.addEventListener('touchmove', onDragMove);
            window.addEventListener('mouseup', onDragEnd);
            window.addEventListener('touchend', onDragEnd);
        };

        const onDragMove = (e) => {
            if (!isDragging) return;
            hasDragged = true;

            const eventPos = e.touches ? e.touches[0] : e;
            let newLeft = eventPos.clientX - offsetX;
            let newTop = eventPos.clientY - offsetY;

            // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–≤–∏–∂–µ–Ω–∏–µ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –æ–∫–Ω–∞
            const fabWidth = fab.offsetWidth;
            const fabHeight = fab.offsetHeight;
            newLeft = Math.max(0, Math.min(newLeft, window.innerWidth - fabWidth));
            newTop = Math.max(0, Math.min(newTop, window.innerHeight - fabHeight));

            fab.style.left = `${newLeft}px`;
            fab.style.top = `${newTop}px`;
            // –£–±–∏—Ä–∞–µ–º bottom/right, —á—Ç–æ–±—ã left/top –∏–º–µ–ª–∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
            fab.style.bottom = 'auto';
            fab.style.right = 'auto';
        };

        const onDragEnd = () => {
            if (!isDragging) return;
            isDragging = false;
            fab.classList.remove('dragging');

            window.removeEventListener('mousemove', onDragMove);
            window.removeEventListener('touchmove', onDragMove);
            window.removeEventListener('mouseup', onDragEnd);
            window.removeEventListener('touchend', onDragEnd);

            if (hasDragged) {
                // –ï—Å–ª–∏ –±—ã–ª–æ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–∑–∏—Ü–∏—é
                saveFabPosition(fab);
            } else {
                // –ï—Å–ª–∏ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è –Ω–µ –±—ã–ª–æ, —ç—Ç–æ –±—ã–ª –∫–ª–∏–∫ - –æ—Ç–∫—Ä—ã–≤–∞–µ–º —á–∞—Ç
                openAIChat();
            }
        };

        fab.addEventListener('mousedown', onDragStart);
        fab.addEventListener('touchstart', onDragStart);
    }

    /**
     * –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø
     * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏ –ø—Ä–∏–º–µ–Ω—è–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é –ø–æ–∑–∏—Ü–∏—é FAB-–∫–Ω–æ–ø–∫–∏ –∏–∑ localStorage.
     * @param {HTMLElement} fab - –≠–ª–µ–º–µ–Ω—Ç –∫–Ω–æ–ø–∫–∏.
     */
    function loadFabPosition(fab) {
        const savedPos = localStorage.getItem('aiChatFabPosition');
        if (savedPos) {
            try {
                const pos = JSON.parse(savedPos);
                if (pos.left && pos.top) {
                    fab.style.left = pos.left;
                    fab.style.top = pos.top;
                    fab.style.bottom = 'auto';
                    fab.style.right = 'auto';
                }
            } catch (e) {
                console.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é FAB-–∫–Ω–æ–ø–∫–∏:", e);
            }
        }
    }

    /**
     * –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø
     * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é FAB-–∫–Ω–æ–ø–∫–∏ –≤ localStorage.
     * @param {HTMLElement} fab - –≠–ª–µ–º–µ–Ω—Ç –∫–Ω–æ–ø–∫–∏.
     */
    function saveFabPosition(fab) {
        const pos = {
            left: fab.style.left,
            top: fab.style.top
        };
        localStorage.setItem('aiChatFabPosition', JSON.stringify(pos));
    }


    function openAIChat() {
       if (!aiChatModal) return;
       document.body.classList.add('chat-open'); 
       aiChatModal.classList.remove('hidden');

      // ======== –ù–ê–ß–ê–õ–û –§–ò–ù–ê–õ–¨–ù–û–ì–û –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –û–¢–†–ò–°–û–í–ö–ò –ò–ö–û–ù–û–ö (v4) ========
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º setTimeout —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π, —Ä–∞–≤–Ω–æ–π –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∞–Ω–∏–º–∞—Ü–∏–∏ –ø–æ—è–≤–ª–µ–Ω–∏—è –æ–∫–Ω–∞.
      // –≠—Ç–æ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ –∫ –º–æ–º–µ–Ω—Ç—É –≤—ã–∑–æ–≤–∞ lucide.createIcons() –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
      // –±—É–¥–µ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –≤–∏–¥–∏–º–æ –∏ –æ—Ç—Ä–∏—Å–æ–≤–∞–Ω–æ, —Ä–µ—à–∞—è –ø—Ä–æ–±–ª–µ–º—É "–≥–æ–Ω–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π".
      setTimeout(() => {
          if (window.lucide) {
              lucide.createIcons();
              console.log('Lucide icons redrawn with a delay after modal open.');
          }
      }, 450); // –ê–Ω–∏–º–∞—Ü–∏—è slideUp –¥–ª–∏—Ç—Å—è 0.4s (400ms), –±–µ—Ä–µ–º —Å –Ω–µ–±–æ–ª—å—à–∏–º –∑–∞–ø–∞—Å–æ–º.
      // ======== –ö–û–ù–ï–¶ –§–ò–ù–ê–õ–¨–ù–û–ì–û –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø ========

       if (!detectMobileDevice()) { aiChatInput.focus(); }
       // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–µ–∫—É—â–∏–π –∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç
       switchToAIChat(currentAIChatId);
       updateGroundingToggleState();
    }

    /**
     * –ó–∞–∫—Ä—ã–≤–∞–µ—Ç –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ AI-—á–∞—Ç–∞.
     */
    function closeAIChat() {
        if (!aiChatModal) return;
        document.body.classList.remove('chat-open'); // <-- –ò –í–¢–û–†–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï
        aiChatModal.classList.add('hidden');
    }

    /**
     * –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ AI-—á–∞—Ç–µ. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –∫–∞–∫–æ–π —á–∞—Ç –∞–∫—Ç–∏–≤–µ–Ω
     * (–ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∏–ª–∏ –ø—É–±–ª–∏—á–Ω—ã–π) –∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö.
     */
    function renderAIChatMessages() {
        try {
            let currentChat;
            if (currentAIChatType === 'public') {
                currentChat = currentPublicChatMessages;
            } else {
                currentChat = allAIChats[currentAIChatId];
            }

            if (!aiChatMessages) {
                return;
            }
            if (!currentChat) {
                aiChatMessages.innerHTML = '<div class="empty-state">–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç –¥–ª—è –Ω–∞—á–∞–ª–∞.</div>';
                return;
            }
            

            const scrollThreshold = 100;
            const isScrolledToBottom = aiChatMessages.scrollHeight - aiChatMessages.clientHeight <= aiChatMessages.scrollTop + scrollThreshold;

            aiChatMessages.innerHTML = '';

            const userCanDelete = canDeleteAIMessage();

            currentChat.forEach((msg, index) => {
                try {
                    const messageContainer = document.createElement('div');
                    messageContainer.className = `ai-message-container is-${msg.role}`;
                    messageContainer.id = `ai-message-container-${index}`; 
                    
                    const replyContextContainer = document.createElement('div');
                    replyContextContainer.className = 'ai-reply-context-container';
                    if (msg.replyTo) {
                        const replyEl = document.createElement('div');
                        replyEl.className = 'ai-reply-context';
                        replyEl.dataset.action = 'scroll-to-ai';
                        replyEl.dataset.index = msg.replyTo.messageIndex;
                        replyEl.innerHTML = `
                            <div class="ai-reply-author">${escapeHTML(msg.replyTo.authorName || '')}</div>
                            <div class="ai-reply-text">${escapeHTML(msg.replyTo.textSnippet || '')}</div>
                        `;
                        replyContextContainer.appendChild(replyEl);
                    }
                    messageContainer.appendChild(replyContextContainer);
        
                    const messageEl = document.createElement('div');
                    messageEl.classList.add('ai-message', msg.role);
                    
                    const contentWrapper = document.createElement('div');
                    if (msg.content === 'typing...') {
                        contentWrapper.innerHTML = `<div class="typing-indicator"><span></span><span></span><span></span></div>`;
                    } else {
                        let contentToRender = msg.content || '';
                        let baseHtml = window.marked ? marked.parse(contentToRender) : escapeHTML(contentToRender);
        
                        if (msg.role === 'model' && msg.grounded && msg.groundingMetadata) {
                            contentWrapper.innerHTML = processAndAppendSources(baseHtml, msg.groundingMetadata);
                        } else {
                            contentWrapper.innerHTML = baseHtml;
                        }
        
                        if (msg.role === 'model' && msg.grounded) {
                            const groundedIconHTML = `
                                <div class="ai-grounded-icon" title="–û—Ç–≤–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ü–æ–∏—Å–∫–∞ Google">
                                    <svg viewBox="0 0 48 48"><path fill="#4285F4" d="M43.611,20.083H42V20H24v8h11.303c-1.649,4.657-6.08,8-11.303,8c-6.627,0-12-5.373-12-12c0-6.627,5.373-12,12-12c3.059,0,5.842,1.154,7.961,3.039l5.657-5.657C34.046,6.053,29.268,4,24,4C12.955,4,4,12.955,4,24c0,11.045,8.955,20,20,20c11.045,0,20-8.955,20-20C44,22.659,43.862,21.35,43.611,20.083z"></path><path fill="#34A853" d="M43.611,20.083H42V20H24v8h11.303c-0.792,2.237-2.231,4.166-4.087,5.574l5.657,5.657C39.843,36.657,43.083,31.622,43.083,24C44,22.659,43.862,21.35,43.611,20.083z"></path><path fill="#FBBC05" d="M28.081,42.733L22.424,37.076c-1.954,1.413-4.398,2.203-7.041,2.203c-6.627,0-12-5.373-12-12c0-3.372,1.386-6.42,3.685-8.685l-5.657-5.657C4.789,9.41,4,16.29,4,24C4,31.831,8.441,38.281,15.22,41.456L28.081,42.733z"></path><path fill="#EA4335" d="M43.082,24l-5.657,5.657c-1.856-1.407-3.295-3.337-4.087-5.574H24v-8h19.083c0.138,1.3,0.25,2.625,0.25,4C43.333,21.375,43.082,22.625,43.082,24z"></path></svg>
                                </div>
                            `;
                            contentWrapper.innerHTML += groundedIconHTML;
                        }
                    }
                    messageEl.appendChild(contentWrapper);
        
                    if (msg.attachment) {
                        const { name, mimeType, thumbnailDataUrl } = msg.attachment;
                        const type = mimeType.split('/')[0] || '—Ñ–∞–π–ª';
                        
                        const previewImage = thumbnailDataUrl 
                            ? `<img src="${thumbnailDataUrl}" class="ai-attachment-thumbnail" alt="–ü—Ä–µ–≤—å—é">`
                            : `<div class="ai-attachment-icon"><i data-lucide="file-text"></i></div>`;
        
                        const attachmentHTML = `
                            <a href="#" class="ai-message-attachment" data-action="open-attachment" data-index="${index}">
                                ${previewImage}
                                <div class="ai-attachment-file-info">
                                    <div class="ai-attachment-file-name">${escapeHTML(name)}</div>
                                    <div class="ai-attachment-file-type">${type}</div>
                                </div>
                            </a>
                        `;
                        messageEl.insertAdjacentHTML('beforeend', attachmentHTML);
                    }
        
                    messageContainer.appendChild(messageEl);
        
                    const isLastMessage = index === currentChat.length - 1;
                    const deleteButtonHTML = userCanDelete 
                        ? `<button class="ai-action-btn" title="–£–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ" data-action="delete-ai" data-index="${index}"><i data-lucide="trash-2"></i></button>`
                        : '';
        
                    if (msg.role === 'model' && msg.content !== 'typing...') {
                        const actionsContainer = document.createElement('div');
                        actionsContainer.className = 'ai-message-actions';
                        const regenerateButtonHTML = (isLastMessage && userCanDelete)
                            ? `<button class="ai-action-btn" title="${_('ai_regenerate_response')}" data-action="regenerate-ai"><i data-lucide="refresh-cw"></i></button>`
                            : '';
                        
                        actionsContainer.innerHTML = `
                            <button class="ai-action-btn" title="–û—Ç–≤–µ—Ç–∏—Ç—å" data-action="reply-ai" data-index="${index}"><i data-lucide="message-square-reply"></i></button>
                            <button class="ai-action-btn" title="${_('ai_copy_response')}" data-action="copy-ai" data-index="${index}"><i data-lucide="copy"></i></button>
                            <button class="ai-action-btn" title="${_('ai_share_response')}" data-action="share-ai" data-index="${index}"><i data-lucide="share-2"></i></button>
                            ${deleteButtonHTML}
                            ${regenerateButtonHTML}
                        `;
                        messageContainer.appendChild(actionsContainer);
                    } else if (msg.role === 'user') {
                        const actionsContainer = document.createElement('div');
                        actionsContainer.className = 'ai-user-message-actions';
                        actionsContainer.innerHTML = `
                            <button class="ai-action-btn" title="–û—Ç–≤–µ—Ç–∏—Ç—å" data-action="reply-ai" data-index="${index}"><i data-lucide="message-square-reply"></i></button>
                            <button class="ai-action-btn" title="–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å" data-action="copy-user" data-index="${index}"><i data-lucide="copy"></i></button>
                            <button class="ai-action-btn" title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–Ω–æ–≤–æ" data-action="edit-user" data-index="${index}"><i data-lucide="pencil"></i></button>
                            ${deleteButtonHTML}
                        `;
                        messageContainer.appendChild(actionsContainer);
                    }
                    
                    aiChatMessages.appendChild(messageContainer);
                } catch (err) {
                    console.error(`[AI LOG] !! –û–®–ò–ë–ö–ê –ø—Ä–∏ —Ä–µ–Ω–¥–µ—Ä–µ —Å–æ–æ–±—â–µ–Ω–∏—è #${index}:`, err);
                    console.error('[AI LOG] –î–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –≤—ã–∑–≤–∞–≤—à–∏–µ –æ—à–∏–±–∫—É:', msg);
                }
            });

            if (window.lucide) {
                lucide.createIcons();
            }
            drawOrUpdateScrollbar();

            if (isScrolledToBottom) {
                const lastMessage = aiChatMessages.lastElementChild;
                if (lastMessage) {
                    lastMessage.scrollIntoView({ behavior: 'smooth', block: 'start' });
                }
            } else {
            }
        // –í—ã–∑—ã–≤–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –≤–∏–¥–∏–º–æ—Å—Ç–∏ –∫–Ω–æ–ø–∫–∏ –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–π –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
            updateScrollToBottomButtonVisibility();
        } finally {
            console.groupEnd();
        }
    }


    async function sendAIChatMessage() {
        try {
            if (isAIResponding) {
                return;
            }
            const userInput = aiChatInput.value.trim();
            if (!userInput && !attachedFile) {
                return;
            }

            if (currentAIChatType === 'public') {
                await sendPublicAudienceMessage(userInput);
                return;
            }

            const replyContextToSend = aiReplyContext;
            const fileToSend = attachedFile;

            aiChatInput.value = '';
            resetAIInputHeight(); 
            removeAIAttachment();
            cancelAIReply();

            const message = { 
                role: 'user', 
                content: userInput,
                replyTo: replyContextToSend,
                attachment: fileToSend
            };
            
            if (fileToSend) {
                try {
                    allAIChats[currentAIChatId].push({ role: 'model', content: '–ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–∞...' });
                    renderAIChatMessages();
                    
                    const response = await fetch(googleAppScriptUrl, {
                        method: 'POST',
                        body: JSON.stringify({
                            action: 'generateAttachmentDescription',
                            file: { base64Data: fileToSend.base64Data.split(',')[1], mimeType: fileToSend.mimeType },
                            userText: userInput,
                            targetLanguage: localStorage.getItem('appLanguage') || 'ru'
                        })
                    });
                    const result = await response.json();

                    allAIChats[currentAIChatId].pop();
                    
                    if (result.success && result.description) {
                        message.attachmentDescription = result.description;
                    } else {
                        message.attachmentDescription = `(–û–ø–∏—Å–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ "${fileToSend.name}" –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ)`;
                    }
                } catch (error) {
                    console.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è —Ñ–∞–π–ª–∞:", error);
                    message.attachmentDescription = `(–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ñ–∞–π–ª–∞ "${fileToSend.name}")`;
                    if(allAIChats[currentAIChatId].slice(-1)[0]?.content === '–ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–∞...') {
                        allAIChats[currentAIChatId].pop();
                    }
                }
            }
            
            allAIChats[currentAIChatId].push(message);
            
            await saveAIChatsToStorage();
            
            renderAIChatList();

            renderAIChatMessages(); 
            
            getAIResponseForCurrentHistory(fileToSend);
        } finally {
            console.groupEnd();
        }
    }


    /**
     * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ø—É–±–ª–∏—á–Ω—É—é –ê—É–¥–∏—Ç–æ—Ä–∏—é (—Ç–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞).
     */
    async function sendPublicAudienceMessage(userInput) {
        if (!currentUser || !db || !currentAudienceId || !currentTopicId) return;

        const audienceRef = db.collection('ai_audiences').doc(currentAudienceId);
        const messagesRef = audienceRef.collection('topics').doc(currentTopicId).collection('messages');
        
        try {
            const audienceDoc = await audienceRef.get();
            if (!audienceDoc.exists || audienceDoc.data().ownerId !== currentUser.uid) {
                console.warn("–ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á—É–∂—É—é –∞—É–¥–∏—Ç–æ—Ä–∏—é.");
                return;
            }

            aiChatInput.value = '';
            resetAIInputHeight();
            
            const userMessage = {
                role: 'user',
                content: userInput,
                timestamp: firebase.firestore.FieldValue.serverTimestamp(),
                authorId: currentUser.uid,
                authorName: currentUser.displayName || '–ê–Ω–æ–Ω–∏–º'
            };

            if (aiReplyContext) {
                userMessage.replyTo = aiReplyContext;
            }

            await messagesRef.add(userMessage);
            
            cancelAIReply();

            getAIResponseForPublicAudience();

        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ê—É–¥–∏—Ç–æ—Ä–∏—é:", error);
            showToast("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ.", "error");
        }
    }


    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –æ—Ç–≤–µ—Ç –ò–ò –¥–ª—è –ø—É–±–ª–∏—á–Ω–æ–π –ê—É–¥–∏—Ç–æ—Ä–∏–∏.
     */
    async function getAIResponseForPublicAudience() {
        if (isAIResponding || !currentAudienceId || !currentTopicId) return;
        isAIResponding = true;
        aiChatSendBtn.disabled = true;

        const messagesRef = db.collection('ai_audiences').doc(currentAudienceId).collection('topics').doc(currentTopicId).collection('messages');

        try {
            const typingMessageRef = await messagesRef.add({
                role: 'model',
                content: 'typing...',
                timestamp: firebase.firestore.FieldValue.serverTimestamp()
            });

            const historySnapshot = await messagesRef.orderBy('timestamp', 'asc').get();
            const historyForAPI = historySnapshot.docs.map(doc => doc.data()).filter(msg => msg.content !== 'typing...');
            
            const aiSettings = getAIChatSettings();
            
            const response = await fetch(googleAppScriptUrl, {
                method: 'POST',
                body: JSON.stringify({
                    action: 'getGeneralChatReply',
                    history: historyForAPI,
                    settings: aiSettings,
                    targetLanguage: localStorage.getItem('appLanguage') || 'ru'
                })
            });

            const result = await response.json();

            // === –ù–ê–ß–ê–õ–û –ë–õ–û–ö–ê –ù–ê –ó–ê–ú–ï–ù–£ ===
            let finalMessage;
            if (result.success && result.reply) {
                finalMessage = {
                    role: 'model',
                    content: result.reply,
                    timestamp: firebase.firestore.FieldValue.serverTimestamp(),
                    grounded: result.wasGrounded,
                    groundingMetadata: result.groundingMetadata,
                };
            } else {
                 finalMessage = {
                    role: 'model',
                    content: `–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: ${result.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`,
                    timestamp: firebase.firestore.FieldValue.serverTimestamp()
                };
            }
            // === –ö–û–ù–ï–¶ –ë–õ–û–ö–ê –ù–ê –ó–ê–ú–ï–ù–£ ===
            await messagesRef.doc(typingMessageRef.id).set(finalMessage);

        } catch (error) {
            console.error("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ (–ø—É–±–ª–∏—á–Ω—ã–π AI-—á–∞—Ç):", error);
        } finally {
            isAIResponding = false;
            aiChatSendBtn.disabled = false;
        }
    }


    async function getAIResponseForCurrentHistory(file = null) {
        try {
            if (isAIResponding || !currentAIChatId) {
                return;
            }
            isAIResponding = true;
            aiChatSendBtn.disabled = true;
            
            const currentChat = allAIChats[currentAIChatId];
            
            const historyForAPI = currentChat
                .filter(msg => msg.content !== 'typing...')
                .map(msg => {
                    const cleanMsg = {
                        role: msg.role,
                        content: msg.content || ''
                    };
                    if (msg.attachmentDescription) {
                        cleanMsg.content = `${msg.attachmentDescription}\n\n${cleanMsg.content}`;
                    }
                    return cleanMsg;
                });


            currentChat.push({ role: 'model', content: 'typing...' });
            const aiResponseIndex = currentChat.length - 1;
            renderAIChatMessages();


            const aiSettings = getAIChatSettings();
            
            const requestBody = {
                action: 'getGeneralChatReply',
                history: historyForAPI,
                settings: aiSettings,
                targetLanguage: localStorage.getItem('appLanguage') || 'ru'
            };

            if (file) {
                requestBody.file = {
                    mimeType: file.mimeType,
                    base64Data: file.base64Data.split(',')[1] 
                };
            }

            const response = await fetch(googleAppScriptUrl, {
                method: 'POST',
                body: JSON.stringify(requestBody)
            });

            const rawResponseText = await response.text();
            
            const result = JSON.parse(rawResponseText);
            
            if (result.success && result.reply) {
                currentChat[aiResponseIndex] = { 
                    role: 'model', 
                    content: result.reply,
                    grounded: result.wasGrounded,
                    groundingMetadata: result.groundingMetadata,
                    imageUrls: result.imageUrls || null
                };
            } else {
                const errorMessage = result.error || '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò.';
                currentChat[aiResponseIndex] = { 
                    role: 'model', 
                    content: `–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: ${errorMessage}` 
                };
            }

        } catch (error) {
            const aiResponseIndex = allAIChats[currentAIChatId].length - 1;
            if (allAIChats[currentAIChatId][aiResponseIndex]?.content === 'typing...') {
                allAIChats[currentAIChatId][aiResponseIndex] = { 
                    role: 'model', 
                    content: `–ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error.message}` 
                };
            }
        } finally {
            isAIResponding = false;
            aiChatSendBtn.disabled = !(aiChatInput.value.trim().length > 0 || attachedFile);
            await saveAIChatsToStorage();
            renderAIChatMessages();
            console.groupEnd();
        }
    }

    // –ù–û–í–´–ô –ö–û–î –î–õ–Ø –í–°–¢–ê–í–ö–ò
    /**
     * –í–ï–†–°–ò–Ø 5.0 (–§–ò–ù–ê–õ–¨–ù–ê–Ø): –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞ Gemini 1.5.
     * –ù–∞—Ö–æ–¥–∏—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ —Å–µ–≥–º–µ–Ω—Ç—ã –≤ —Ç–µ–∫—Å—Ç–µ –∏ –∑–∞–º–µ–Ω—è–µ—Ç –∏—Ö –Ω–∞ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ HTML-—ç–ª–µ–º–µ–Ω—Ç—ã.
     * @param {string} replyText - –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç –ò–ò.
     * @param {object} groundingMetadata - –û–±—ä–µ–∫—Ç —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏.
     * @returns {string} - –ì–æ—Ç–æ–≤—ã–π HTML –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ.
     */
    function processAndAppendSources(replyHtml, groundingMetadata) {
        if (!groundingMetadata || !Array.isArray(groundingMetadata.groundingSupports) || !Array.isArray(groundingMetadata.groundingChunks)) {
            return replyHtml;
        }

        const { groundingSupports, groundingChunks, webSearchQueries } = groundingMetadata;
        if (groundingSupports.length === 0 || groundingChunks.length === 0) {
            return replyHtml;
        }
        
        const sourceLibrary = groundingChunks.map(chunk => chunk.web);
        
        let processedHtml = replyHtml;

        groundingSupports.forEach(support => {
            const segmentText = support.segment?.text;
            if (!segmentText || segmentText.trim() === '') return;

            const segmentSources = support.groundingChunkIndices
                .map(index => sourceLibrary[index])
                .filter(Boolean);

            if (segmentSources.length === 0) return;

            const sourceInfo = JSON.stringify(segmentSources.map(s => ({ uri: s.uri, title: s.title })));
            
            // –ú—ã –∑–∞–º–µ–Ω—è–µ–º —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–∞ HTML-—ç–ª–µ–º–µ–Ω—Ç. 
            // –≠—Ç–æ –±–µ–∑–æ–ø–∞—Å–Ω–µ–µ, —á–µ–º —Ä–∞–±–æ—Ç–∞—Ç—å —Å —Å—ã—Ä—ã–º HTML.
            const replacementHtml = `<span class="grounded-segment" data-source='${escapeHTML(sourceInfo)}'>${escapeHTML(segmentText)}</span>`;
            
            // –ó–∞–º–µ–Ω—è–µ–º –ø—Ä–æ—Å—Ç–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –≤—Ö–æ–∂–¥–µ–Ω–∏–µ —Å–µ–≥–º–µ–Ω—Ç–∞ –Ω–∞ –Ω–∞—à –Ω–æ–≤—ã–π HTML.
            processedHtml = processedHtml.replace(escapeHTML(segmentText), replacementHtml);
        });

        if (Array.isArray(webSearchQueries) && webSearchQueries.length > 0) {
            let sourcesList = `\n\n---\n\n**–ü–æ–∏—Å–∫–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã:**\n`;
            webSearchQueries.forEach((query, index) => {
                const searchUrl = `https://www.google.com/search?q=${encodeURIComponent(query)}`;
                sourcesList += `${index + 1}. [${escapeHTML(query)}](${searchUrl})\n`;
            });
            processedHtml += `<div class="ai-message-sources-list">${marked.parse(sourcesList)}</div>`;
        }

        processedHtml = processedHtml.replace(/\s*\[\d+(-|\u2013)?\d*\]/g, '');
        
        return processedHtml;
    }


    /**
     * –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø
     * –ö–æ–ø–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ò–ò –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞.
     * @param {HTMLElement} buttonElement - –ö–Ω–æ–ø–∫–∞, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é –Ω–∞–∂–∞–ª–∏.
     */
    function handleCopyAIChat(buttonElement) {
        const messageEl = buttonElement.closest('.ai-message-container').querySelector('.ai-message');
        if (messageEl) {
            copyToClipboardMain(messageEl.innerText); // –ò—Å–ø–æ–ª—å–∑—É–µ–º innerText –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —á–∏—Å—Ç–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
        }
    }

    /**
     * –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø
     * –ü—ã—Ç–∞–µ—Ç—Å—è –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –æ—Ç–≤–µ—Ç–æ–º –ò–ò —á–µ—Ä–µ–∑ Web Share API –∏–ª–∏ –∫–æ–ø–∏—Ä—É–µ—Ç –µ–≥–æ.
     * @param {HTMLElement} buttonElement - –ö–Ω–æ–ø–∫–∞, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é –Ω–∞–∂–∞–ª–∏.
     */
    async function handleShareAIChat(buttonElement) {
        const messageEl = buttonElement.closest('.ai-message-container').querySelector('.ai-message');
        if (!messageEl) return;

        const textToShare = messageEl.innerText;

        if (navigator.share) {
            try {
                await navigator.share({
                    title: '–û—Ç–≤–µ—Ç –æ—Ç AI –ü–æ–º–æ—â–Ω–∏–∫–∞',
                    text: textToShare,
                });
            } catch (error) {
                console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ–Ω–∏–ª —à–µ—Ä–∏–Ω–≥ –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:', error);
            }
        } else {
            // Fallback –¥–ª—è –¥–µ—Å–∫—Ç–æ–ø–∞ –∏–ª–∏ –±—Ä–∞—É–∑–µ—Ä–æ–≤ –±–µ–∑ –ø–æ–¥–¥–µ—Ä–∂–∫–∏
            copyToClipboardMain(textToShare);
            showToast('API "–ü–æ–¥–µ–ª–∏—Ç—å—Å—è" –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è. –¢–µ–∫—Å—Ç —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω.', 'info');
        }
    }


    async function regenerateLastAIResponse() {
        if (isAIResponding || !currentAIChatId && !currentAudienceId) return; // –£–ª—É—á—à–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞

        let currentChat;
        if (currentAIChatType === 'public') {
            currentChat = currentPublicChatMessages;
        } else {
            currentChat = allAIChats[currentAIChatId];
        }

        if (!currentChat || currentChat.length === 0) {
            console.warn("–ù–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.");
            return;
        }

        let lastUserMessageIndex = -1;
        for (let i = currentChat.length - 1; i >= 0; i--) {
            if (currentChat[i].role === 'user') {
                lastUserMessageIndex = i;
                break;
            }
        }

        if (lastUserMessageIndex === -1) {
            console.warn("–ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.");
            return;
        }

        if (currentAIChatType === 'private') {
            const historyToResubmit = currentChat.slice(0, lastUserMessageIndex + 1);
            const promptingMessage = historyToResubmit[historyToResubmit.length - 1];
            const fileToResend = promptingMessage?.attachment || null;

            allAIChats[currentAIChatId] = historyToResubmit;
            getAIResponseForCurrentHistory(fileToResend);

        } else {
            const messagesToDelete = currentChat.slice(lastUserMessageIndex + 1);

            try {
                const batch = db.batch();
                // --- –í–û–¢ –ì–õ–ê–í–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï ---
                const messagesRef = db.collection('ai_audiences').doc(currentAudienceId).collection('topics').doc(currentTopicId).collection('messages');
                
                messagesToDelete.forEach(msg => {
                    if (msg.id) {
                        batch.delete(messagesRef.doc(msg.id));
                    }
                });
                
                await batch.commit();

                getAIResponseForPublicAudience();

            } catch (error) {
                console.error("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –æ—Ç–≤–µ—Ç—ã –ò–ò –ø—Ä–∏ —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:", error);
                showToast("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.", "error");
            }
        }
    }


    function startEditUserMessage(index) {
        const currentlyEditing = document.querySelector('.ai-message-container.editing');
        if (currentlyEditing) {
            const oldIndex = parseInt(currentlyEditing.id.replace('ai-message-container-', ''), 10);
            cancelEditUserMessage(oldIndex);
        }

        const container = getEl(`ai-message-container-${index}`);
        if (!container) return;

        // --- –ù–ê–ß–ê–õ–û –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø ---
        // 1. –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –æ—Ç–∫—É–¥–∞ –±—Ä–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —á–∞—Ç–∞.
        let messageToEdit;
        if (currentAIChatType === 'public') {
            messageToEdit = currentPublicChatMessages[index];
        } else {
            messageToEdit = allAIChats[currentAIChatId]?.[index];
        }

        // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –Ω–∞–π–¥–µ–Ω–æ.
        if (!messageToEdit) {
            console.error(`–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å –∏–Ω–¥–µ–∫—Å–æ–º ${index} –≤ —á–∞—Ç–µ ${currentAIChatId}`);
            return;
        }

        // 3. –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–π–¥–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞.
        const originalText = messageToEdit.content;
        // --- –ö–û–ù–ï–¶ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø ---

        container.classList.add('editing');
        container.innerHTML = `
            <div class="ai-edit-wrapper">
                <textarea class="ai-edit-textarea">${escapeHTML(originalText)}</textarea>
                <div class="ai-edit-actions">
                    <button class="ai-edit-btn-cancel" title="–û—Ç–º–µ–Ω–∞"><i data-lucide="x"></i></button>
                    <button class="ai-edit-btn-save" title="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å"><i data-lucide="check"></i></button>
                </div>
            </div>
        `;
        
        const textarea = container.querySelector('.ai-edit-textarea');
        const saveBtn = container.querySelector('.ai-edit-btn-save');
        const cancelBtn = container.querySelector('.ai-edit-btn-cancel');

        const adjustHeight = () => {
            textarea.style.height = 'auto';
            textarea.style.height = `${textarea.scrollHeight}px`;
        };
        textarea.addEventListener('input', adjustHeight);
        adjustHeight();
        textarea.focus();

        saveBtn.onclick = () => saveAndResubmitFromIndex(index);
        cancelBtn.onclick = () => cancelEditUserMessage(index);
        
        if (window.lucide) { lucide.createIcons(); }
    }





    /**
     * –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –û—Ç–º–µ–Ω—è–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
     */
    function cancelEditUserMessage(index) {
        const container = getEl(`ai-message-container-${index}`);
        if (container && container.classList.contains('editing')) {
            container.classList.remove('editing');
            // –ü—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è, —ç—Ç–æ —Å–∞–º—ã–π –Ω–∞–¥–µ–∂–Ω—ã–π —Å–ø–æ—Å–æ–±
            renderAIChatMessages(); 
        }
    }

    async function saveAndResubmitFromIndex(index) {
        const container = getEl(`ai-message-container-${index}`);
        if (!container) return;
        const textarea = container.querySelector('.ai-edit-textarea');
        const newText = textarea.value.trim();

        if (currentAIChatType === 'private') {
            // --- –õ–æ–≥–∏–∫–∞ –¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö —á–∞—Ç–æ–≤ (–ª–æ–∫–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ) ---
            const originalMessage = allAIChats[currentAIChatId]?.[index];
            if (!originalMessage) return;
            if (!newText && !originalMessage.attachment) return;

            const fileToResend = originalMessage.attachment || null;
            originalMessage.content = newText;
            
            allAIChats[currentAIChatId] = allAIChats[currentAIChatId].slice(0, index + 1);
            getAIResponseForCurrentHistory(fileToResend);

        } else {
            // --- –ù–æ–≤–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –ø—É–±–ª–∏—á–Ω—ã—Ö –ê—É–¥–∏—Ç–æ—Ä–∏–π (–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ Firestore) ---
            const messageToEdit = currentPublicChatMessages[index];
            if (!messageToEdit || !messageToEdit.id || !newText) {
                cancelEditUserMessage(index); // –û—Ç–º–µ–Ω—è–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫
                return;
            }

            try {
                // –°–æ–∑–¥–∞–µ–º –ø–∞–∫–µ—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –∞—Ç–æ–º–∞—Ä–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π
                const batch = db.batch();
                const messagesRef = db.collection('ai_audiences').doc(currentAudienceId).collection('topics').doc(currentTopicId).collection('messages');
                
                // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å (–≤—Å–µ, —á—Ç–æ –∏–¥—É—Ç –ø–æ—Å–ª–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º–æ–≥–æ)
                const messagesToDelete = currentPublicChatMessages.slice(index + 1);
                messagesToDelete.forEach(msg => {
                    if (msg.id) {
                        batch.delete(messagesRef.doc(msg.id));
                    }
                });

                // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å–∞–º–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                const messageToUpdateRef = messagesRef.doc(messageToEdit.id);
                batch.update(messageToUpdateRef, { content: newText });

                // –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º
                await batch.commit();

                // –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –∫–æ–º–º–∏—Ç–∞, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–≤—ã–π –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò.
                // onSnapshot —Å–∞–º –æ–±–Ω–æ–≤–∏—Ç UI, –∫–æ–≥–¥–∞ –ø—Ä–∏–¥–µ—Ç –æ—Ç–≤–µ—Ç.
                getAIResponseForPublicAudience();

            } catch (error) {
                console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ –ê—É–¥–∏—Ç–æ—Ä–∏–∏:", error);
                showToast("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è.", "error");
                cancelEditUserMessage(index); // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π –≤–∏–¥ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏ –æ—à–∏–±–∫–µ
            }
        }
    }



    // --- Public methods exposed from mainApp ---
    return {
        init: initializeApp,
        copyToClipboardMain: copyToClipboardMain, 
        parseQstContent: parseQstContent, 
        processFile: processFile,         

        // ‚¨á‚¨á‚¨á –í–ê–ñ–ù–û: —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º PDF-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—Ä—É–∂—É
        processPdfWithImages: processPdfWithImages,


        downloadFile: downloadFileBrowserFallback,
        downloadOrShareFile: downloadOrShareFile,
        handleFavoriteClickInSearch: handleFavoriteClickInSearch,
        handleCopyClickInSearch: handleCopyClickInSearch,
        handleExplainClickInSearch: handleExplainClickInSearch,
        showGlobalLoader: showGlobalLoader,
        hideGlobalLoader: hideGlobalLoader,
        manageBackButtonInterceptor: manageBackButtonInterceptor,
        setupExtensionListener: setupExtensionListener,
        animateTextTransformation: animateTextTransformation,
        showToast: showToast, // <-- –î–û–ë–ê–í–õ–ï–ù–û: –î–µ–ª–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é showToast –ø—É–±–ª–∏—á–Ω–æ–π
        showConfirmationModal: showConfirmationModal, 
        loadPublicAudiences: loadPublicAudiences,
        handleCopyAIChat: handleCopyAIChat,
        handleShareAIChat: handleShareAIChat,
        regenerateLastAIResponse: regenerateLastAIResponse,
        // === –ù–ê–ß–ê–õ–û –ù–û–í–û–ì–û –ö–û–î–ê ===
        migrateLocalChatsToFirebase: migrateLocalChatsToFirebase,
        loadAIChatsFromStorage: loadAIChatsFromStorage,
        saveAIChatsToStorage: saveAIChatsToStorage,
        // === –ö–û–ù–ï–¶ –ù–û–í–û–ì–û –ö–û–î–ê ===
        testMobileDownload: () => {
            console.log('–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–±–∏–ª—å–Ω–æ–≥–æ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è.');
            console.log('detectMobileDevice():', detectMobileDevice());
            downloadOrShareFile('test.txt', '–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞', 'text/plain', '–¢–µ—Å—Ç');
        }         
    };




})();

document.addEventListener('DOMContentLoaded', mainApp.init);





window.mainApp = mainApp;

